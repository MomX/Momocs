[{"path":"http://momx.github.io/Momocs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincent Bonhomme. Author, maintainer. Julien Claude. Author.            core functions base R","code":""},{"path":"http://momx.github.io/Momocs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bonhomme V, Picq S, Gaucherel C, Claude J (2014). Momocs: Outline Analysis Using R, volume 56 number 13. https://www.jstatsoft.org/v56/i13/.","code":"@Manual{,   textversion = {Vincent Bonhomme, Sandrine Picq, Cedric Gaucherel, Julien Claude (2014).},   title = {Momocs: Outline Analysis Using R},   journal = {Journal of Statistical Software},   year = {2014},   volume = {56},   number = {13},   pages = {1--24},   url = {https://www.jstatsoft.org/v56/i13/},   author = {Vincent Bonhomme and Sandrine Picq and Cédric Gaucherel and Julien Claude}, }"},{"path":[]},{"path":"http://momx.github.io/Momocs/index.html","id":"news","dir":"","previous_headings":"Momocs","what":"News","title":"Morphometrics using R","text":"’m still looking funding develop MomX. idea, please email <bonhomme.vincent@gmail.com> ’m available consulting, training collaboration, worldwide. Momocs back CRAN longer relies retired rgeos dependency tutorial/introduction back! Download **","code":""},{"path":"http://momx.github.io/Momocs/index.html","id":"installation","dir":"","previous_headings":"Momocs","what":"Installation","title":"Morphometrics using R","text":"last released version can installed CRAN : recommend using (support) development version GitHub :","code":"install.packages(\"Momocs\") # install.packages(\"devtools\") devtools::install_github(\"MomX/Momocs\")"},{"path":"http://momx.github.io/Momocs/index.html","id":"example","dir":"","previous_headings":"Momocs","what":"Example","title":"Morphometrics using R","text":"basic example complete analysis : inspection, normalization raw outlines, elliptical Fourier transforms, dimmensionality reduction classification, using single line.","code":"library(Momocs) devtools::load_all() #> ℹ Loading Momocs #> Registered S3 method overwritten by 'vegan': #>   method     from       #>   rev.hclust dendextend hearts %T>%                    # A toy dataset   stack() %>%                  # Take a family picture of raw outlines   fgProcrustes() %>%           # Full generalized Procrustes alignment   coo_slide(ldk = 2) %T>%      # Redefine a robust 1st point between the cheeks   stack() %>%                  # Another picture of aligned outlines   efourier(6, norm=FALSE) %>%  # Elliptical Fourier Transforms   PCA() %T>%                   # Principal Component Analysis   plot_PCA(~aut) %>%           # A PC1:2 plot   LDA(~aut) %>%                # Linear Discriminant Analysis   plot_CV()                    # And the confusion matrix after leave one out cross validation #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the Momocs package. #>   Please report the issue at <https://github.com/MomX/Momocs/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"http://momx.github.io/Momocs/reference/CLUST.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical clustering — CLUST","title":"Hierarchical clustering — CLUST","text":"Performs hierarchical clustering dist hclust. far mainly wrapper around two functions, plus plotting using dendextend package facilities.","code":""},{"path":"http://momx.github.io/Momocs/reference/CLUST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical clustering — CLUST","text":"","code":"CLUST(x, ...)  # S3 method for default CLUST(x, ...)  # S3 method for Coe CLUST(   x,   fac,   type = c(\"horizontal\", \"vertical\", \"fan\")[1],   k,   dist_method = \"euclidean\",   hclust_method = \"complete\",   retain = 0.99,   labels,   lwd = 1/4,   cex = 1/2,   palette = pal_qual,   ... )"},{"path":"http://momx.github.io/Momocs/reference/CLUST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical clustering — CLUST","text":"x Coe PCA object ... useless fac factor specification fac_dispatcher type character one c(\"horizontal\", \"vertical\", \"fan\") (default: horizontal) k numeric provided greater 1, cut tree number groups dist_method feed dist's method argument, one euclidean (default), maximum, manhattan, canberra, binary minkowski. hclust_method feed hclust's method argument, one ward.D, ward.D2, single, complete (default), average, mcquitty, median centroid. retain number axis retain PCA object passed. number < 1 passed, number PCs retained enough capture proportion variance via scree_min labels factor specification labelling tips feed fac_dispatcher lwd branches (default: 0.25) cex labels (default: 1) palette one available palettes","code":""},{"path":"http://momx.github.io/Momocs/reference/CLUST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical clustering — CLUST","text":"ggplot plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/CLUST.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical clustering — CLUST","text":"","code":"# On Coe bf <- bot %>% efourier(6) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details CLUST(bf)  # with a factor and vertical CLUST(bf, ~type, \"v\")  # with some cutting and different dist/hclust methods CLUST(bf,       dist_method=\"maximum\", hclust_method=\"average\",       labels=~type, k=3, lwd=1, cex=1, palette=pal_manual(c(\"green\", \"yellow\", \"red\")))   # On PCA bf %>% PCA %>% CLUST"},{"path":"http://momx.github.io/Momocs/reference/Coe.html","id":null,"dir":"Reference","previous_headings":"","what":"Coe ","title":"Coe ","text":"Coe class 'parent' 'super' class OutCoe, OpnCoe, LdkCoe TraCoe classes.","code":""},{"path":"http://momx.github.io/Momocs/reference/Coe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coe ","text":"","code":"Coe(...)"},{"path":"http://momx.github.io/Momocs/reference/Coe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coe ","text":"... anything , anyway, function simply returns message.","code":""},{"path":"http://momx.github.io/Momocs/reference/Coe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coe ","text":"list class Coe","code":""},{"path":"http://momx.github.io/Momocs/reference/Coe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coe ","text":"Useful shortcuts described . See browseVignettes(\"Momocs\") detail design behind Momocs' classes. Coe class 'parent' class following 'child' classes OutCoe coefficients closed outlines morphometrics OpnCoe coefficients open outlines morphometrics LdkCoe coefficients configuration landmarks morphometrics. words, OutCoe, OpnCoe LdkCoe classes , primarily, Coe objects define generic specific methods. See respective help pages help. can access methods available Coe objects methods(class=Coe).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/Coe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coe ","text":"","code":"# to see all methods for Coe objects. methods(class='Coe') #>  [1] $           CLUST       KMEDOIDS    LDA         MDS         NMDS        #>  [7] [           [<-         arrange     as_df       breed       chop        #> [13] dim         dissolve    export      filter      get_pairs   length      #> [19] mutate      names       names<-     perm        reLDA       rename      #> [25] sample_frac sample_n    select      slice       str         subsetize   #> [31] which_out   #> see '?methods' for accessing help and source code # to see all methods for OutCoe objects. methods(class='OutCoe') # same for OpnCoe, LdkCoe, TraCoe #>  [1] MANOVA   MSHAPES  PCA      boxplot  combine  hcontrib print    rm_asym  #>  [9] rm_sym   symmetry #> see '?methods' for accessing help and source code  bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.f #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 40 outlines described, 12 harmonics #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows class(bot.f) #> [1] \"OutCoe\" \"Coe\"    inherits(bot.f, \"Coe\") #> [1] TRUE  # if you want to work directly on the matrix of coefficients bot.f$coe #>                A1           A2         A3         A4          A5          A6 #> brahma          1  0.006766531 0.09348184 0.01374288 0.023818571 0.008592275 #> caney           1  0.007368844 0.09542847 0.01449765 0.022207326 0.006665955 #> chimay          1  0.016535135 0.07571705 0.02736989 0.009876978 0.014306122 #> corona          1  0.007486279 0.09616977 0.01220177 0.022887407 0.007281456 #> deusventrue     1  0.019627538 0.09281761 0.02230953 0.015264921 0.014857953 #> duvel           1  0.022177771 0.06895598 0.03354560 0.009316683 0.021131541 #> franziskaner    1  0.007314669 0.09110003 0.01294912 0.023136784 0.010558958 #> grimbergen      1  0.009522713 0.08573641 0.01974880 0.012878126 0.008485338 #> guiness         1  0.009589570 0.08825041 0.02268926 0.017770767 0.010695823 #> hoegardeen      1  0.009598003 0.09186435 0.01393702 0.020136724 0.008952962 #> jupiler         1  0.008152360 0.09595083 0.01206957 0.023549986 0.007484692 #> kingfisher      1  0.007788546 0.09459391 0.01346605 0.024571428 0.009229773 #> latrappe        1  0.018476561 0.06035470 0.03974568 0.010493387 0.026379718 #> lindemanskriek  1  0.012406103 0.09289294 0.01773845 0.020632152 0.010949655 #> nicechouffe     1  0.015167563 0.09058037 0.02094971 0.020007417 0.014345165 #> pecheresse      1  0.008436476 0.09409400 0.01181167 0.022221176 0.007960411 #> sierranevada    1  0.015038107 0.08208708 0.02647382 0.013697543 0.013869924 #> tanglefoot      1  0.018782346 0.07275504 0.03848616 0.008439294 0.018172933 #> tauro           1  0.007333709 0.09536301 0.01149374 0.023043384 0.007093187 #> westmalle       1  0.009100416 0.09469091 0.01450202 0.023460557 0.009582984 #> amrut           1  0.004198631 0.09500128 0.02143863 0.026005715 0.011729658 #> ballantines     1 -0.000653116 0.05733309 0.03154946 0.017516836 0.034198742 #> bushmills       1 -0.004927807 0.08149528 0.01036776 0.023910616 0.017320375 #> chivas          1  0.021613712 0.08642271 0.04314511 0.008460823 0.014376414 #> dalmore         1  0.038669436 0.07265717 0.05680730 0.003277741 0.019363348 #> famousgrouse    1  0.003373189 0.08802317 0.02019928 0.025507211 0.016776448 #> glendronach     1  0.003257554 0.09526153 0.02074249 0.026167146 0.010932661 #> glenmorangie    1  0.008572527 0.09410920 0.02136020 0.024756735 0.011430941 #> highlandpark    1 -0.002122354 0.06989902 0.03612531 0.023554876 0.027350465 #> jackdaniels     1  0.008777794 0.08626120 0.02940216 0.019373419 0.015295504 #> jb              1  0.004384491 0.09517564 0.02460733 0.023505329 0.010741163 #> johnniewalker   1  0.002370576 0.08321025 0.01719991 0.022474617 0.017724976 #> magallan        1 -0.008648015 0.09924533 0.01455296 0.037258989 0.011586345 #> makersmark      1  0.016536161 0.10229688 0.03388156 0.008773613 0.010192259 #> oban            1  0.001652893 0.09909342 0.02127249 0.028337047 0.009671380 #> oldpotrero      1  0.022935601 0.09391465 0.03109455 0.009138035 0.012979620 #> redbreast       1  0.017769276 0.09281598 0.04425688 0.011246633 0.012792733 #> tamdhu          1  0.005270821 0.09375949 0.02020814 0.025073663 0.010943288 #> wildturkey      1  0.008605609 0.09229119 0.03228916 0.020978082 0.013010663 #> yoichi          1 -0.001738226 0.07733113 0.02843759 0.024035740 0.023420967 #>                           A7          A8            A9           A10 #> brahma          0.0031835706 0.005158502 -7.262824e-04  0.0047287291 #> caney           0.0035527091 0.007010166  1.214949e-03  0.0038734169 #> chimay         -0.0047412879 0.007814037 -2.112661e-03  0.0022043011 #> corona          0.0055045888 0.007852411  8.767189e-04  0.0044201528 #> deusventrue     0.0025214510 0.011391904 -1.733965e-03  0.0062083192 #> duvel          -0.0016871288 0.011025502 -1.042906e-04  0.0017042044 #> franziskaner    0.0045813399 0.006927102 -5.793922e-04  0.0045217266 #> grimbergen     -0.0021957902 0.008213656 -1.577404e-03  0.0026346248 #> guiness        -0.0015195731 0.008550727  2.093772e-04  0.0060163830 #> hoegardeen      0.0024034912 0.007507503 -1.234721e-03  0.0046892597 #> jupiler         0.0055270378 0.006597011  1.073131e-03  0.0041448892 #> kingfisher      0.0059527872 0.006778517  1.169809e-03  0.0044984721 #> latrappe       -0.0057950372 0.005954999 -5.463098e-03 -0.0001140651 #> lindemanskriek  0.0033428880 0.008381096 -1.707332e-04  0.0050506285 #> nicechouffe     0.0026214920 0.010288304 -4.913646e-04  0.0065828560 #> pecheresse      0.0046954032 0.006669592  4.015144e-05  0.0042466561 #> sierranevada   -0.0043828769 0.009275932 -1.465646e-03  0.0059555586 #> tanglefoot     -0.0108560295 0.008370133 -2.988319e-03  0.0052185654 #> tauro           0.0052560957 0.006425077  9.461829e-04  0.0040141970 #> westmalle       0.0051463840 0.006848999  3.534839e-04  0.0042382642 #> amrut           0.0019176785 0.008515916  1.392307e-03  0.0089150426 #> ballantines     0.0045419501 0.014014932 -5.273138e-03  0.0006083616 #> bushmills       0.0095020099 0.012457087 -3.988679e-04  0.0048132802 #> chivas         -0.0053775410 0.013797633  2.198119e-03  0.0031741809 #> dalmore        -0.0072008170 0.012093037  5.368701e-03  0.0025492686 #> famousgrouse    0.0035195429 0.008617844 -1.621645e-03  0.0075384656 #> glendronach     0.0018504691 0.007851391  1.483976e-03  0.0086527932 #> glenmorangie    0.0023552959 0.007521806  1.103445e-03  0.0069834516 #> highlandpark   -0.0024258364 0.003973480 -7.894105e-03  0.0013284975 #> jackdaniels    -0.0047279969 0.008903250 -2.124758e-03  0.0090062900 #> jb             -0.0015584637 0.008915452  4.097146e-04  0.0089915939 #> johnniewalker   0.0034197782 0.009945811 -3.913888e-03  0.0059350940 #> magallan        0.0095026108 0.003088506  1.575409e-03  0.0054824432 #> makersmark      0.0003303914 0.016520390 -1.901653e-03  0.0031138042 #> oban            0.0022492968 0.007479292  2.478319e-03  0.0090114539 #> oldpotrero      0.0015843674 0.012237947 -4.671411e-04  0.0023549220 #> redbreast      -0.0046107656 0.015170859  3.884228e-03  0.0045806501 #> tamdhu          0.0013188307 0.006535142  1.700604e-04  0.0072170216 #> wildturkey     -0.0038244377 0.010171775  1.641229e-03  0.0092477531 #> yoichi         -0.0011328612 0.006117569 -8.008551e-03  0.0034639875 #>                          A11           A12 B1            B2            B3 #> brahma         -0.0013733386  0.0016363823  0 -1.900652e-04  3.306231e-04 #> caney          -0.0018777601  0.0011330555  0  5.012013e-04 -3.851293e-04 #> chimay         -0.0012371979 -0.0018514226  0  1.843629e-04  4.196107e-04 #> corona         -0.0021742849  0.0026300698  0 -3.586724e-04  1.711055e-05 #> deusventrue    -0.0007936789  0.0028680575  0  1.774985e-04 -8.326845e-05 #> duvel          -0.0006045816 -0.0028942242  0 -4.198782e-04  7.447638e-05 #> franziskaner   -0.0015947508  0.0021935018  0 -8.367911e-04 -3.508429e-04 #> grimbergen     -0.0035563564 -0.0004162333  0 -4.478525e-04 -1.575351e-04 #> guiness        -0.0015222476  0.0005646464  0  4.379065e-05 -3.284575e-04 #> hoegardeen     -0.0024579838  0.0023152691  0 -1.402306e-05  3.803656e-04 #> jupiler        -0.0009974596  0.0023379940  0  1.831345e-04 -1.827727e-04 #> kingfisher     -0.0004648420  0.0023788807  0 -1.644074e-04 -3.059412e-04 #> latrappe        0.0015068375 -0.0015514855  0  2.164816e-04  1.803082e-04 #> lindemanskriek -0.0009359325  0.0022848386  0  4.100249e-04  2.208045e-04 #> nicechouffe    -0.0007619565  0.0033654095  0  5.495158e-04 -2.042167e-05 #> pecheresse     -0.0013782823  0.0024185755  0  2.181959e-04 -7.311833e-05 #> sierranevada   -0.0017933279 -0.0005349683  0 -2.089826e-04 -3.847117e-04 #> tanglefoot     -0.0003179777 -0.0031166695  0  2.257469e-04 -2.009399e-04 #> tauro          -0.0010466330  0.0023514452  0  1.762712e-04 -8.961804e-05 #> westmalle      -0.0004882420  0.0023217071  0  2.683034e-04  5.829510e-04 #> amrut          -0.0004155995  0.0028189180  0  3.259091e-04  3.840090e-04 #> ballantines    -0.0024674938 -0.0002274846  0 -8.980074e-06  1.013064e-03 #> bushmills      -0.0043970618  0.0017818484  0  8.084328e-04  8.012671e-04 #> chivas         -0.0016654883 -0.0026415175  0  6.073651e-04  3.070684e-04 #> dalmore         0.0025922354 -0.0039822137  0  1.097768e-03  6.881659e-04 #> famousgrouse    0.0001300206  0.0046515437  0  1.287495e-04 -1.324051e-04 #> glendronach    -0.0002084792  0.0025405566  0  4.149836e-04  1.394907e-04 #> glenmorangie   -0.0001692272  0.0025838514  0  8.773153e-05 -6.257124e-05 #> highlandpark    0.0023214993  0.0028070218  0 -6.291662e-04 -7.091405e-04 #> jackdaniels    -0.0011544544  0.0013660407  0  1.828207e-04 -5.854778e-04 #> jb             -0.0026073348  0.0016289320  0  5.770034e-04  1.295536e-04 #> johnniewalker  -0.0026799451  0.0046998857  0  1.610309e-03  1.521699e-03 #> magallan        0.0034410693  0.0056372281  0 -1.110357e-03 -1.017379e-03 #> makersmark     -0.0037381840  0.0031052372  0 -2.272912e-03 -1.921977e-03 #> oban           -0.0000555700  0.0026159662  0  5.217373e-04  3.289690e-04 #> oldpotrero      0.0002650070  0.0005717670  0 -4.566144e-04  2.434271e-04 #> redbreast      -0.0017153754 -0.0017080604  0  1.568632e-04  1.213587e-04 #> tamdhu         -0.0004660552  0.0022520466  0  1.013117e-03  4.671170e-04 #> wildturkey     -0.0011040540  0.0003877287  0  9.489660e-04  9.344159e-04 #> yoichi         -0.0005670111  0.0040850862  0  2.371406e-04  3.337929e-04 #>                           B4            B5            B6            B7 #> brahma         -5.191749e-04  1.067446e-04 -9.218905e-05  5.604686e-07 #> caney           3.333918e-04 -2.899903e-04  7.350207e-05 -4.952054e-04 #> chimay          3.227901e-04 -2.906714e-05  5.573360e-04  1.059517e-04 #> corona         -5.501057e-04 -1.907425e-04 -4.256287e-04 -2.147013e-04 #> deusventrue    -1.403373e-03 -3.240180e-04 -9.330047e-04  6.515692e-04 #> duvel          -6.627095e-04  6.107940e-05 -4.746985e-04  2.450959e-04 #> franziskaner   -6.983186e-04 -1.894199e-04 -5.170165e-04  5.988419e-05 #> grimbergen      1.554676e-04  5.257427e-05  1.132609e-04 -6.848791e-05 #> guiness        -1.677242e-04 -5.817648e-04 -2.853668e-04 -5.620867e-04 #> hoegardeen      3.285812e-04  4.813766e-04  3.691213e-04  5.309204e-04 #> jupiler        -4.540203e-05 -1.242456e-04 -5.198885e-05 -2.289954e-04 #> kingfisher     -1.751841e-04  3.014782e-05  2.132220e-04  4.144846e-04 #> latrappe        5.468038e-04  2.303760e-04  5.053959e-04  2.603399e-04 #> lindemanskriek  2.791269e-04 -2.076986e-04 -1.312595e-04 -1.367999e-04 #> nicechouffe     2.492854e-04  2.171344e-04  2.155297e-04  1.621249e-04 #> pecheresse      2.879648e-04  3.072908e-05  1.503582e-04  2.875235e-05 #> sierranevada    2.254752e-04 -1.582761e-04  3.201773e-04 -2.506594e-04 #> tanglefoot     -3.556495e-04 -4.589428e-04 -1.231722e-04 -1.030225e-04 #> tauro           8.045507e-05  4.030041e-05  1.942858e-04  7.124766e-05 #> westmalle       2.086425e-04  5.569697e-04 -1.481080e-04  2.680453e-04 #> amrut           2.692429e-04  2.370884e-04  4.975910e-05  1.929742e-04 #> ballantines    -2.175286e-04  1.006239e-03 -2.063087e-04  6.874951e-04 #> bushmills       9.888621e-04  5.333749e-04  6.026329e-04  3.382499e-07 #> chivas          1.231654e-04 -3.404412e-05  8.988476e-05  1.476812e-04 #> dalmore         2.545366e-04  1.352642e-04 -1.253930e-04  2.101188e-04 #> famousgrouse   -1.274614e-04  2.141211e-04 -1.073666e-04  1.188717e-05 #> glendronach     1.071609e-04 -2.016928e-04 -6.904446e-05 -1.327779e-04 #> glenmorangie    1.913928e-04 -9.675222e-05  1.480796e-04 -8.118855e-05 #> highlandpark   -2.204109e-04 -5.021317e-04  3.287316e-04 -2.505046e-04 #> jackdaniels    -7.969529e-04 -4.880520e-04 -1.903562e-04  3.092736e-04 #> jb             -1.422141e-04 -2.056778e-04 -2.053789e-04  1.048725e-04 #> johnniewalker   1.140415e-03  1.505532e-04  2.156619e-04 -1.772208e-04 #> magallan       -7.964354e-04 -6.143625e-04 -3.734865e-04 -1.291146e-04 #> makersmark     -3.452843e-04 -1.437534e-04  4.289043e-04 -9.732915e-04 #> oban            3.351843e-04  4.359254e-05  1.826487e-05 -6.027186e-05 #> oldpotrero     -2.060062e-04  3.778706e-05 -5.576392e-04  2.258336e-04 #> redbreast      -1.087561e-04 -1.587376e-04 -9.420764e-05 -7.636860e-06 #> tamdhu          2.449976e-04  3.452581e-05 -1.344683e-04  1.407481e-04 #> wildturkey      2.048265e-04  1.038328e-04  7.988232e-06  2.379076e-04 #> yoichi          2.790195e-04  2.201285e-04  1.423493e-05 -5.626562e-05 #>                           B8            B9           B10           B11 #> brahma          6.268503e-06 -1.960132e-04  1.334431e-04  4.058288e-05 #> caney           8.536695e-05 -4.143363e-04  1.667420e-04 -3.134942e-04 #> chimay          6.209192e-04  1.441644e-04  1.715223e-04  5.930974e-05 #> corona         -1.931107e-04 -3.048499e-04 -2.065499e-04 -2.244684e-04 #> deusventrue    -8.354423e-04  2.287499e-05 -6.080012e-04  2.971827e-04 #> duvel          -1.676532e-04  1.512500e-04  6.986965e-05  2.318703e-04 #> franziskaner   -3.810484e-04  5.133436e-05 -3.407356e-04  5.681736e-05 #> grimbergen     -9.289817e-05  2.532879e-05  1.655384e-04  3.086461e-04 #> guiness        -1.496463e-04 -4.662246e-04 -1.905673e-04 -3.642220e-04 #> hoegardeen      3.462062e-04  4.557837e-04  4.205444e-04  3.080245e-04 #> jupiler        -8.073101e-05 -2.203453e-04 -1.514837e-04 -1.572771e-04 #> kingfisher      1.324881e-05  1.991329e-04  1.802238e-04  2.681872e-04 #> latrappe        1.829641e-04  2.106651e-04 -1.447749e-04  2.756836e-04 #> lindemanskriek  4.871774e-05 -4.788973e-05 -2.120403e-04 -1.394498e-04 #> nicechouffe     1.463372e-04  2.488056e-04  8.034353e-05  2.586078e-04 #> pecheresse      2.759482e-04  1.481251e-05  1.433130e-04 -1.556835e-05 #> sierranevada    1.406542e-04 -1.888577e-04  6.806233e-05 -5.042849e-05 #> tanglefoot      5.673867e-06 -2.751261e-04 -3.002656e-04 -2.455063e-04 #> tauro           2.932668e-04  1.286768e-04  1.547277e-04  1.336644e-04 #> westmalle      -1.539093e-04  4.586356e-04  1.799417e-05  3.301881e-04 #> amrut           1.570262e-04  2.548664e-04  1.115168e-04  7.490810e-06 #> ballantines    -3.868333e-05  3.003380e-04  1.592670e-04 -5.079525e-05 #> bushmills       2.135771e-04 -2.019147e-04  1.348464e-04 -1.302260e-04 #> chivas          1.332194e-04  1.056333e-04  2.227781e-05  4.227956e-05 #> dalmore        -4.021158e-06  2.679348e-04 -2.632871e-05  1.881627e-04 #> famousgrouse   -2.566731e-04  2.195639e-04 -7.568478e-05  1.842423e-04 #> glendronach     2.453495e-05 -7.915842e-06 -1.865175e-05 -6.786263e-05 #> glenmorangie    1.557411e-04 -3.527084e-06  1.414448e-04 -9.027797e-06 #> highlandpark    3.870735e-04 -4.437162e-04  1.970082e-04 -4.866817e-04 #> jackdaniels    -1.751848e-04 -3.777874e-05 -1.953733e-04  2.389926e-04 #> jb              1.396719e-04  1.902920e-04 -7.877557e-05  4.429623e-05 #> johnniewalker   5.133497e-04  1.719490e-04  5.339652e-04 -1.814410e-04 #> magallan       -1.577770e-04 -1.006505e-04 -1.482048e-04 -8.058980e-06 #> makersmark     -5.600587e-04 -7.200799e-04  4.777646e-04  2.581853e-04 #> oban            8.787835e-05  1.113193e-04  1.307306e-04 -2.483305e-05 #> oldpotrero     -3.831452e-04  2.156873e-04 -5.679089e-04  2.063675e-04 #> redbreast       2.541246e-05  2.426826e-05 -8.753325e-05 -8.652635e-06 #> tamdhu         -3.383952e-05  3.365051e-04 -1.785979e-04 -4.280721e-06 #> wildturkey      3.002663e-04  1.207047e-04  1.615231e-04 -7.004425e-06 #> yoichi         -1.168653e-04 -8.227670e-05  5.854442e-05  8.229082e-05 #>                          B12 C1            C2            C3            C4 #> brahma         -1.917814e-04  0 -1.637571e-03 -3.936895e-03  5.408096e-03 #> caney           2.011956e-05  0  1.239828e-03 -2.845651e-04  3.757825e-04 #> chimay         -3.197006e-06  0 -3.757608e-03 -1.797357e-03 -2.127924e-03 #> corona         -6.091420e-06  0 -1.652864e-03  1.573302e-03  4.897281e-04 #> deusventrue    -2.794108e-04  0  1.552775e-03  7.706329e-04 -1.416448e-03 #> duvel           1.659893e-04  0  2.872128e-04 -5.422392e-06 -7.785717e-04 #> franziskaner   -2.140707e-04  0 -1.253868e-03  3.476506e-04  1.004621e-03 #> grimbergen      1.890428e-04  0  1.700875e-03 -1.452474e-04  4.332935e-04 #> guiness        -2.602631e-04  0 -5.088378e-04  1.628258e-03  5.025916e-05 #> hoegardeen      2.814325e-04  0 -2.538102e-03  6.627214e-04 -1.481847e-03 #> jupiler        -1.151375e-04  0  9.877198e-04 -8.223351e-05  1.286204e-04 #> kingfisher      1.550433e-04  0  8.355893e-04 -2.193322e-03 -9.853901e-04 #> latrappe       -1.942322e-04  0  2.026476e-03  6.109498e-04 -1.518299e-04 #> lindemanskriek -5.113408e-05  0 -1.736348e-03  1.465734e-03 -1.513403e-03 #> nicechouffe     4.652882e-05  0 -5.467071e-04  2.799211e-04 -4.577128e-04 #> pecheresse      1.587407e-04  0  1.796104e-03 -3.206383e-04 -1.338857e-04 #> sierranevada    3.125122e-05  0  9.370620e-04 -7.543929e-04  2.972714e-04 #> tanglefoot     -9.215486e-05  0 -7.405447e-04  3.028807e-04  6.337466e-04 #> tauro           1.226045e-04  0  1.122815e-04 -2.572009e-04 -8.133564e-04 #> westmalle       4.757341e-05  0  1.228197e-03 -2.741133e-04  9.140310e-05 #> amrut          -9.179140e-05  0  4.658444e-04 -4.347520e-04 -3.326225e-05 #> ballantines     3.235267e-04  0 -5.591149e-04  1.469581e-03 -1.536579e-03 #> bushmills       2.015409e-04  0 -3.958316e-04  1.944836e-03 -7.053533e-05 #> chivas         -6.666931e-05  0 -1.172232e-03 -1.218925e-03 -3.262755e-05 #> dalmore        -9.894417e-05  0  6.958725e-04 -1.680610e-03  6.152298e-04 #> famousgrouse   -7.211196e-05  0  7.115395e-05  8.468121e-04 -4.933730e-04 #> glendronach    -9.224044e-05  0 -7.099606e-05  6.421159e-04 -4.706785e-04 #> glenmorangie    6.261072e-05  0 -8.919633e-06 -2.628346e-04  9.674043e-05 #> highlandpark    1.369676e-04  0 -1.617000e-03  5.528353e-04 -3.372340e-04 #> jackdaniels     3.169089e-04  0  5.328968e-04 -1.540810e-03 -5.769145e-04 #> jb             -5.463792e-05  0 -2.505933e-03 -9.424246e-04 -8.780719e-04 #> johnniewalker  -5.200179e-05  0  4.677592e-03 -4.233763e-04 -1.898993e-03 #> magallan       -1.072102e-04  0  2.189543e-04  4.632813e-04  1.888985e-04 #> makersmark      8.085419e-06  0  1.698257e-03 -6.596354e-04  3.533379e-04 #> oban           -6.805926e-05  0  6.795967e-07  1.085005e-06 -4.641661e-04 #> oldpotrero     -3.604369e-04  0 -6.093255e-05  4.513517e-05 -4.902640e-04 #> redbreast       1.217829e-04  0 -1.468386e-03  1.265193e-04 -1.396525e-04 #> tamdhu         -2.219702e-04  0  9.586941e-04  6.330302e-04 -2.779959e-04 #> wildturkey      2.260401e-05  0 -9.213008e-05 -1.129525e-03 -4.176692e-04 #> yoichi          1.472054e-04  0  5.380772e-05 -7.906572e-05 -7.656576e-04 #>                           C5            C6            C7            C8 #> brahma         -1.259407e-03 -3.994402e-03  3.268582e-03  4.792269e-04 #> caney          -4.017802e-05  4.699805e-04  2.518166e-04  6.300072e-04 #> chimay         -4.663387e-04 -7.424827e-05 -8.096453e-05  9.946667e-04 #> corona          1.867708e-04  6.888736e-04  3.145355e-04  5.189042e-04 #> deusventrue     1.463377e-03  9.055123e-04 -2.834923e-04 -1.443910e-03 #> duvel           3.178998e-04  2.219253e-04  5.438377e-04 -3.518900e-06 #> franziskaner    1.054384e-03  2.433412e-04  9.526672e-04  8.662476e-04 #> grimbergen     -6.417041e-04 -1.403671e-03  1.850428e-04  1.990252e-04 #> guiness         8.516115e-05  5.947385e-04 -3.856099e-04  2.426892e-04 #> hoegardeen     -6.536099e-04 -5.091092e-04 -6.872483e-04 -4.089876e-04 #> jupiler         4.242307e-04  1.903101e-04 -1.512322e-04  3.486794e-04 #> kingfisher      1.200089e-03  4.039578e-05 -2.246083e-04 -6.682649e-04 #> latrappe       -2.100725e-04  4.680496e-04  1.907268e-04 -1.386083e-04 #> lindemanskriek  2.721525e-04 -8.593526e-04 -1.905709e-04  1.402970e-04 #> nicechouffe    -4.033887e-04 -3.674008e-04 -1.582921e-04 -3.898917e-04 #> pecheresse     -3.165154e-04 -6.798663e-04 -1.857663e-04 -5.070674e-04 #> sierranevada    4.903049e-04  5.175725e-04 -5.450918e-04 -6.169308e-04 #> tanglefoot      6.556462e-04  1.058980e-03  8.585128e-04  5.745493e-04 #> tauro          -4.748704e-04 -3.315681e-04 -4.564306e-04 -3.514821e-04 #> westmalle      -4.491227e-04 -2.495132e-04 -7.270457e-05 -1.344863e-04 #> amrut           8.477464e-05 -1.080422e-04  2.126076e-04 -9.256970e-05 #> ballantines     6.528392e-04 -2.944984e-04 -5.656855e-04  1.789388e-04 #> bushmills       9.280815e-04 -4.013982e-04 -6.650163e-04 -5.644542e-04 #> chivas          1.300827e-04 -3.851168e-05  4.239507e-05  1.334791e-04 #> dalmore        -2.964899e-04 -1.304289e-04  7.782306e-04 -4.877421e-04 #> famousgrouse    6.303902e-04 -1.322629e-04 -2.372041e-04 -2.550728e-05 #> glendronach    -3.501431e-04 -2.525866e-04  3.742212e-04  1.133101e-04 #> glenmorangie   -3.395833e-04 -4.246431e-04 -3.274667e-04  1.061570e-04 #> highlandpark    6.066669e-04  1.088092e-03  5.256719e-04  5.273203e-04 #> jackdaniels     1.023982e-03  9.323203e-04  1.214171e-03  5.898250e-04 #> jb              2.339479e-04  3.473492e-04  3.733691e-04  1.626720e-04 #> johnniewalker  -8.686486e-04 -1.355694e-03  1.175580e-03  3.264915e-04 #> magallan        2.310078e-04 -1.038695e-04 -1.026307e-05  1.023165e-04 #> makersmark     -5.037028e-04 -1.240866e-04 -7.956100e-05 -6.606345e-05 #> oban           -3.076544e-04 -4.937905e-04 -1.310019e-05 -2.416906e-04 #> oldpotrero     -5.717320e-04 -9.307817e-04  1.291075e-04 -5.512552e-04 #> redbreast      -6.765261e-04  1.325618e-04  4.297985e-04  3.419357e-04 #> tamdhu         -1.871447e-04 -1.524034e-04  6.923348e-05 -5.932353e-04 #> wildturkey     -5.568095e-04  1.396939e-04 -3.130911e-04 -2.441291e-05 #> yoichi         -1.807137e-04 -7.887244e-04 -4.647802e-04 -2.321719e-04 #>                           C9           C10           C11           C12 #> brahma         -1.321861e-03  7.225736e-04  2.052451e-04  1.666890e-04 #> caney           4.837212e-04 -3.443095e-04  1.349160e-04  4.336526e-06 #> chimay         -5.660053e-04  2.292011e-04  3.851391e-04 -2.066153e-05 #> corona          3.419355e-04 -4.427112e-05  5.053095e-04  2.703064e-04 #> deusventrue     5.149210e-05  4.983572e-04 -8.471361e-05  3.773608e-04 #> duvel           4.727181e-05  8.518990e-04  5.267156e-05 -7.761916e-06 #> franziskaner    4.052798e-04  2.307566e-04  5.425481e-04  8.822035e-04 #> grimbergen     -4.235811e-04 -1.047152e-04  8.528320e-05 -4.862829e-04 #> guiness         2.578559e-05 -4.057230e-04  3.454914e-04  3.070080e-04 #> hoegardeen     -2.093222e-04 -8.166019e-05 -5.849685e-04 -1.080950e-04 #> jupiler         3.426590e-04  1.476449e-04  3.134641e-04  2.698336e-04 #> kingfisher      1.267526e-04  2.565541e-04 -2.246671e-04  6.355569e-05 #> latrappe       -4.351985e-06 -5.637614e-05  4.355069e-04  3.406179e-04 #> lindemanskriek -4.691485e-04  6.262551e-04  3.619995e-05  5.173449e-04 #> nicechouffe    -2.084102e-04  4.207808e-04  7.211961e-05 -7.528575e-05 #> pecheresse     -2.691263e-04 -5.693772e-04 -3.209598e-04  2.785471e-04 #> sierranevada    1.686643e-04  2.583335e-04  8.547137e-04 -1.139936e-04 #> tanglefoot      7.740523e-04  4.070373e-04  5.906937e-04  9.596081e-04 #> tauro          -3.210499e-04 -2.265987e-04  5.213196e-05  1.560054e-07 #> westmalle       4.839335e-04  5.801730e-05  1.736045e-04 -1.456983e-04 #> amrut          -1.864115e-04 -2.461486e-04 -3.925113e-04 -1.058934e-04 #> ballantines    -5.195587e-04  3.044292e-04 -2.940957e-04 -8.254562e-05 #> bushmills      -7.180710e-04  9.032786e-05 -3.120552e-04  3.338259e-04 #> chivas         -3.525098e-05 -9.088640e-05  2.114664e-04 -4.123221e-05 #> dalmore         2.200639e-05 -1.248926e-04 -1.755355e-06  2.379108e-04 #> famousgrouse   -3.212998e-04  3.215665e-04 -7.784050e-05 -5.945648e-04 #> glendronach     9.391914e-05  1.721023e-04 -5.496005e-04 -4.452810e-05 #> glenmorangie   -1.452951e-05  2.274608e-05  8.210480e-05  2.227747e-04 #> highlandpark   -1.043832e-04  2.593737e-04  7.274696e-06 -7.945600e-05 #> jackdaniels    -6.541464e-05  8.873609e-04  3.142194e-04  5.911319e-04 #> jb             -2.944987e-04  2.504811e-05 -2.127576e-05 -1.962938e-04 #> johnniewalker  -8.111435e-05 -2.403699e-04 -1.403144e-03 -1.314933e-04 #> magallan        4.068423e-04  5.073294e-04  1.401801e-04  3.243760e-04 #> makersmark      4.971815e-04  6.070002e-04  1.442476e-05 -8.225582e-05 #> oban           -1.976049e-04 -2.813942e-04 -2.577944e-04 -9.115022e-05 #> oldpotrero     -5.682370e-04  1.529407e-07 -2.873197e-04 -1.840435e-04 #> redbreast      -3.874401e-05  4.931648e-05  3.073398e-04  8.441133e-05 #> tamdhu         -5.985664e-04 -4.647946e-04 -1.822017e-04  1.592463e-04 #> wildturkey      1.524887e-05 -6.414600e-04  2.874523e-04 -2.824274e-05 #> yoichi         -2.834302e-04  1.556736e-04 -8.243757e-05  1.918715e-04 #>                       D1          D2         D3           D4         D5 #> brahma         0.2937120 -0.04602927 0.05240292 -0.035768593 0.03999516 #> caney          0.3046235 -0.07069129 0.05062805 -0.011400633 0.04383297 #> chimay         0.4156841 -0.09356117 0.04692603 -0.019249436 0.03965332 #> corona         0.2745921 -0.05755121 0.05150878 -0.011252954 0.03689351 #> deusventrue    0.3149661 -0.11964363 0.05529900  0.007135060 0.03861865 #> duvel          0.4496172 -0.09170033 0.05080071 -0.024018306 0.03036868 #> franziskaner   0.3002734 -0.05637154 0.04411627 -0.030282997 0.03014850 #> grimbergen     0.3651919 -0.09065897 0.05082210 -0.010242594 0.04317369 #> guiness        0.3505997 -0.08196508 0.04422914 -0.022614638 0.04330972 #> hoegardeen     0.2945708 -0.06921001 0.05080275 -0.012677940 0.04146196 #> jupiler        0.2872499 -0.06835188 0.05058090 -0.011055591 0.04109503 #> kingfisher     0.3038732 -0.06930174 0.04366992 -0.021888850 0.03308585 #> latrappe       0.4672257 -0.08743553 0.04401705 -0.038810531 0.02809569 #> lindemanskriek 0.3008112 -0.08389446 0.04783652 -0.013888395 0.04157982 #> nicechouffe    0.3127453 -0.09102591 0.04393446 -0.019927059 0.03779695 #> pecheresse     0.2877918 -0.07053519 0.05180968 -0.009320568 0.04090001 #> sierranevada   0.3773035 -0.07825101 0.05234901 -0.021705236 0.03981425 #> tanglefoot     0.4079636 -0.09801072 0.04110270 -0.028374451 0.04305818 #> tauro          0.2869165 -0.06868727 0.05072815 -0.010829946 0.04098501 #> westmalle      0.2901614 -0.07168182 0.04932024 -0.012449351 0.03886788 #> amrut          0.2916508 -0.07148727 0.03950517 -0.025866432 0.04086520 #> ballantines    0.4617826 -0.07263052 0.04705459 -0.054513278 0.00386769 #> bushmills      0.3159155 -0.02993821 0.05271205 -0.040523047 0.01619821 #> chivas         0.4010304 -0.12319740 0.04665481 -0.003452339 0.05226216 #> dalmore        0.4148687 -0.14805699 0.04396881 -0.010373143 0.05369374 #> famousgrouse   0.3082730 -0.05984603 0.04245023 -0.038145717 0.02994654 #> glendronach    0.2880496 -0.06941189 0.04010808 -0.026119002 0.04146027 #> glenmorangie   0.2784428 -0.06974209 0.02918920 -0.025306813 0.04836028 #> highlandpark   0.4216191 -0.07914764 0.04537064 -0.044351756 0.02868104 #> jackdaniels    0.3474874 -0.08171102 0.04501412 -0.023326513 0.04362364 #> jb             0.2978504 -0.07724044 0.04167029 -0.021228975 0.04549082 #> johnniewalker  0.3097702 -0.04720860 0.04457306 -0.040162288 0.02378800 #> magallan       0.2790080 -0.04764937 0.01811567 -0.036589697 0.02988117 #> makersmark     0.3905990 -0.12195322 0.04665759  0.014950483 0.04867625 #> oban           0.2773362 -0.07277254 0.03313763 -0.023775433 0.04405146 #> oldpotrero     0.3550787 -0.13906787 0.05059907  0.008348999 0.04726562 #> redbreast      0.3884532 -0.13265717 0.04117925 -0.003816545 0.05332588 #> tamdhu         0.2956700 -0.06219547 0.04086923 -0.024902731 0.04397834 #> wildturkey     0.3186215 -0.08962249 0.03633236 -0.023651702 0.05160018 #> yoichi         0.3745590 -0.07064336 0.04209729 -0.040564238 0.03281077 #>                           D6            D7            D8            D9 #> brahma          1.156917e-02  1.544573e-02  0.0013278090  0.0017860170 #> caney           4.485691e-03  9.597789e-03  0.0016029758  0.0082459711 #> chimay          1.731744e-02  1.044446e-02  0.0104067305  0.0026404547 #> corona         -4.664986e-03  9.465002e-03  0.0001838085  0.0120730321 #> deusventrue    -8.770510e-04  1.356919e-02  0.0076757796  0.0034745699 #> duvel           1.486796e-02  7.642213e-03  0.0154756340  0.0060020330 #> franziskaner    1.266218e-03  1.748451e-02  0.0047455611  0.0067787344 #> grimbergen      7.100085e-03  6.253179e-03  0.0076965820  0.0090999349 #> guiness         9.543784e-03  9.549881e-03  0.0017249204  0.0017518501 #> hoegardeen      2.601196e-03  1.267815e-02  0.0028528664  0.0079320590 #> jupiler         2.215650e-03  1.160311e-02  0.0034969489  0.0080290760 #> kingfisher      2.046087e-03  1.149394e-02  0.0039224376  0.0069746627 #> latrappe        2.444196e-02  2.163781e-02  0.0204539980 -0.0001441159 #> lindemanskriek  2.496230e-03  1.222294e-02  0.0053531769  0.0062723553 #> nicechouffe     3.314725e-03  1.247704e-02  0.0066425182  0.0051531928 #> pecheresse      2.471297e-03  1.468476e-02  0.0056123765  0.0084044229 #> sierranevada    1.057630e-02  8.974816e-03  0.0026404084  0.0003673360 #> tanglefoot      1.902021e-02  1.046530e-02  0.0039430719 -0.0033493172 #> tauro           2.321158e-03  1.173141e-02  0.0034750116  0.0079425387 #> westmalle       1.786521e-03  1.515342e-02  0.0060316179  0.0079388255 #> amrut           6.369733e-03  1.572832e-02 -0.0038463793  0.0013700406 #> ballantines     4.344419e-03  1.645402e-02  0.0254142957  0.0095935791 #> bushmills      -1.167929e-02  2.000745e-02  0.0117755165  0.0158424792 #> chivas          7.036241e-03 -4.363041e-03  0.0063540528  0.0079672331 #> dalmore         1.718407e-02 -6.837798e-03  0.0070735547 -0.0019258037 #> famousgrouse    4.059251e-03  2.229183e-02  0.0037608752  0.0010406075 #> glendronach     6.223170e-03  1.521132e-02 -0.0043261577  0.0013210684 #> glenmorangie    5.822448e-03  1.976818e-02 -0.0044147538  0.0033213121 #> highlandpark    1.979571e-02  2.717259e-02  0.0200795294 -0.0021232596 #> jackdaniels     1.186579e-02  1.329499e-02 -0.0005343742 -0.0016003714 #> jb              6.441694e-03  1.187397e-02 -0.0057652170  0.0017868329 #> johnniewalker   8.789822e-05  2.661158e-02  0.0128165570  0.0105593342 #> magallan        6.181261e-03  2.628647e-02  0.0002557046  0.0036531313 #> makersmark     -5.885380e-03 -3.124763e-04  0.0123974490  0.0123986615 #> oban            7.290747e-03  1.526810e-02 -0.0064234752  0.0024990961 #> oldpotrero     -1.263673e-03  9.106123e-06  0.0131403235  0.0062358607 #> redbreast       7.554115e-03 -5.549155e-03  0.0028962725  0.0066649976 #> tamdhu          7.609569e-03  1.817766e-02 -0.0043937269  0.0004398248 #> wildturkey      1.072078e-02  1.329394e-02 -0.0045720419 -0.0006442784 #> yoichi          1.665764e-02  2.932085e-02  0.0147708913  0.0009353830 #>                         D10           D11          D12 #> brahma          0.006789017  0.0048196384  0.007143143 #> caney           0.011464283  0.0039468981  0.003663644 #> chimay          0.012590865  0.0018154608  0.002625857 #> corona          0.008346831  0.0027556006  0.002567053 #> deusventrue     0.006022626  0.0007085549  0.005811255 #> duvel           0.014318246  0.0021405582 -0.001168779 #> franziskaner    0.007215285  0.0030768626  0.006498196 #> grimbergen      0.013935311  0.0016133249  0.001782113 #> guiness         0.013609736  0.0052742301  0.006464424 #> hoegardeen      0.007661150  0.0026973921  0.005420800 #> jupiler         0.007523271  0.0027339312  0.004363034 #> kingfisher      0.006826146  0.0028630395  0.005290393 #> latrappe        0.007468498 -0.0011091276  0.003570302 #> lindemanskriek  0.007494807  0.0009831097  0.006687031 #> nicechouffe     0.007804735  0.0010554318  0.006544953 #> pecheresse      0.006507851  0.0023044001  0.005130825 #> sierranevada    0.013424754  0.0060565295  0.007716962 #> tanglefoot      0.012760316  0.0055315212  0.008787267 #> tauro           0.007452360  0.0026002512  0.004223806 #> westmalle       0.005389195  0.0009150318  0.004619774 #> amrut           0.008090140  0.0077694214  0.009648834 #> ballantines     0.009641210 -0.0013505569  0.001193993 #> bushmills       0.012190958  0.0027373737  0.003932980 #> chivas          0.019338356  0.0019726115  0.002305432 #> dalmore         0.016575636  0.0049437344  0.004000701 #> famousgrouse    0.003906640  0.0019458696  0.010187413 #> glendronach     0.008581179  0.0087430642  0.009902698 #> glenmorangie    0.007165778  0.0033642678  0.009454943 #> highlandpark    0.003043362 -0.0045393480  0.006887804 #> jackdaniels     0.009896143  0.0071305091  0.011652937 #> jb              0.011312129  0.0089093269  0.008895351 #> johnniewalker   0.004724823 -0.0013880745  0.003178167 #> magallan       -0.002901850  0.0030725685  0.006182579 #> makersmark      0.007706173 -0.0025568628  0.002741739 #> oban            0.007789470  0.0092615797  0.008856510 #> oldpotrero      0.009884923  0.0004827760  0.006465018 #> redbreast       0.019010171  0.0030489037  0.003575003 #> tamdhu          0.006990252  0.0067355151  0.011091059 #> wildturkey      0.012225665  0.0056575767  0.009083087 #> yoichi          0.001967838 -0.0043542059  0.006408266  #getters bot.f[1] #>            A1            A2            A3            A4            A5  #>  1.000000e+00  6.766531e-03  9.348184e-02  1.374288e-02  2.381857e-02  #>            A6            A7            A8            A9           A10  #>  8.592275e-03  3.183571e-03  5.158502e-03 -7.262824e-04  4.728729e-03  #>           A11           A12            B1            B2            B3  #> -1.373339e-03  1.636382e-03  0.000000e+00 -1.900652e-04  3.306231e-04  #>            B4            B5            B6            B7            B8  #> -5.191749e-04  1.067446e-04 -9.218905e-05  5.604686e-07  6.268503e-06  #>            B9           B10           B11           B12            C1  #> -1.960132e-04  1.334431e-04  4.058288e-05 -1.917814e-04  0.000000e+00  #>            C2            C3            C4            C5            C6  #> -1.637571e-03 -3.936895e-03  5.408096e-03 -1.259407e-03 -3.994402e-03  #>            C7            C8            C9           C10           C11  #>  3.268582e-03  4.792269e-04 -1.321861e-03  7.225736e-04  2.052451e-04  #>           C12            D1            D2            D3            D4  #>  1.666890e-04  2.937120e-01 -4.602927e-02  5.240292e-02 -3.576859e-02  #>            D5            D6            D7            D8            D9  #>  3.999516e-02  1.156917e-02  1.544573e-02  1.327809e-03  1.786017e-03  #>           D10           D11           D12  #>  6.789017e-03  4.819638e-03  7.143143e-03  bot.f[1:5] #>             A1          A2         A3         A4          A5          A6 #> brahma       1 0.006766531 0.09348184 0.01374288 0.023818571 0.008592275 #> caney        1 0.007368844 0.09542847 0.01449765 0.022207326 0.006665955 #> chimay       1 0.016535135 0.07571705 0.02736989 0.009876978 0.014306122 #> corona       1 0.007486279 0.09616977 0.01220177 0.022887407 0.007281456 #> deusventrue  1 0.019627538 0.09281761 0.02230953 0.015264921 0.014857953 #>                       A7          A8            A9         A10           A11 #> brahma       0.003183571 0.005158502 -0.0007262824 0.004728729 -0.0013733386 #> caney        0.003552709 0.007010166  0.0012149488 0.003873417 -0.0018777601 #> chimay      -0.004741288 0.007814037 -0.0021126606 0.002204301 -0.0012371979 #> corona       0.005504589 0.007852411  0.0008767189 0.004420153 -0.0021742849 #> deusventrue  0.002521451 0.011391904 -0.0017339646 0.006208319 -0.0007936789 #>                      A12 B1            B2            B3            B4 #> brahma       0.001636382  0 -0.0001900652  3.306231e-04 -0.0005191749 #> caney        0.001133056  0  0.0005012013 -3.851293e-04  0.0003333918 #> chimay      -0.001851423  0  0.0001843629  4.196107e-04  0.0003227901 #> corona       0.002630070  0 -0.0003586724  1.711055e-05 -0.0005501057 #> deusventrue  0.002868057  0  0.0001774985 -8.326845e-05 -0.0014033732 #>                        B5            B6            B7            B8 #> brahma       1.067446e-04 -9.218905e-05  5.604686e-07  6.268503e-06 #> caney       -2.899903e-04  7.350207e-05 -4.952054e-04  8.536695e-05 #> chimay      -2.906714e-05  5.573360e-04  1.059517e-04  6.209192e-04 #> corona      -1.907425e-04 -4.256287e-04 -2.147013e-04 -1.931107e-04 #> deusventrue -3.240180e-04 -9.330047e-04  6.515692e-04 -8.354423e-04 #>                        B9           B10           B11           B12 C1 #> brahma      -1.960132e-04  0.0001334431  4.058288e-05 -1.917814e-04  0 #> caney       -4.143363e-04  0.0001667420 -3.134942e-04  2.011956e-05  0 #> chimay       1.441644e-04  0.0001715223  5.930974e-05 -3.197006e-06  0 #> corona      -3.048499e-04 -0.0002065499 -2.244684e-04 -6.091420e-06  0 #> deusventrue  2.287499e-05 -0.0006080012  2.971827e-04 -2.794108e-04  0 #>                       C2            C3            C4            C5 #> brahma      -0.001637571 -0.0039368955  0.0054080962 -1.259407e-03 #> caney        0.001239828 -0.0002845651  0.0003757825 -4.017802e-05 #> chimay      -0.003757608 -0.0017973566 -0.0021279238 -4.663387e-04 #> corona      -0.001652864  0.0015733018  0.0004897281  1.867708e-04 #> deusventrue  0.001552775  0.0007706329 -0.0014164476  1.463377e-03 #>                        C6            C7            C8            C9 #> brahma      -3.994402e-03  3.268582e-03  0.0004792269 -0.0013218613 #> caney        4.699805e-04  2.518166e-04  0.0006300072  0.0004837212 #> chimay      -7.424827e-05 -8.096453e-05  0.0009946667 -0.0005660053 #> corona       6.888736e-04  3.145355e-04  0.0005189042  0.0003419355 #> deusventrue  9.055123e-04 -2.834923e-04 -0.0014439096  0.0000514921 #>                       C10           C11           C12        D1          D2 #> brahma       7.225736e-04  2.052451e-04  1.666890e-04 0.2937120 -0.04602927 #> caney       -3.443095e-04  1.349160e-04  4.336526e-06 0.3046235 -0.07069129 #> chimay       2.292011e-04  3.851391e-04 -2.066153e-05 0.4156841 -0.09356117 #> corona      -4.427112e-05  5.053095e-04  2.703064e-04 0.2745921 -0.05755121 #> deusventrue  4.983572e-04 -8.471361e-05  3.773608e-04 0.3149661 -0.11964363 #>                     D3          D4         D5           D6          D7 #> brahma      0.05240292 -0.03576859 0.03999516  0.011569168 0.015445729 #> caney       0.05062805 -0.01140063 0.04383297  0.004485691 0.009597789 #> chimay      0.04692603 -0.01924944 0.03965332  0.017317438 0.010444458 #> corona      0.05150878 -0.01125295 0.03689351 -0.004664986 0.009465002 #> deusventrue 0.05529900  0.00713506 0.03861865 -0.000877051 0.013569192 #>                       D8          D9         D10          D11         D12 #> brahma      0.0013278090 0.001786017 0.006789017 0.0048196384 0.007143143 #> caney       0.0016029758 0.008245971 0.011464283 0.0039468981 0.003663644 #> chimay      0.0104067305 0.002640455 0.012590865 0.0018154608 0.002625857 #> corona      0.0001838085 0.012073032 0.008346831 0.0027556006 0.002567053 #> deusventrue 0.0076757796 0.003474570 0.006022626 0.0007085549 0.005811255  #setters bot.f[1] <- 1:48 bot.f[1] #>  A1  A2  A3  A4  A5  A6  A7  A8  A9 A10 A11 A12  B1  B2  B3  B4  B5  B6  B7  B8  #>   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  #>  B9 B10 B11 B12  C1  C2  C3  C4  C5  C6  C7  C8  C9 C10 C11 C12  D1  D2  D3  D4  #>  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  #>  D5  D6  D7  D8  D9 D10 D11 D12  #>  41  42  43  44  45  46  47  48   bot.f[1:5] <- matrix(1:48, nrow=5, ncol=48, byrow=TRUE) bot.f[1:5] #>             A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 B1 B2 B3 B4 B5 B6 B7 B8 B9 #> brahma       1  2  3  4  5  6  7  8  9  10  11  12 13 14 15 16 17 18 19 20 21 #> caney        1  2  3  4  5  6  7  8  9  10  11  12 13 14 15 16 17 18 19 20 21 #> chimay       1  2  3  4  5  6  7  8  9  10  11  12 13 14 15 16 17 18 19 20 21 #> corona       1  2  3  4  5  6  7  8  9  10  11  12 13 14 15 16 17 18 19 20 21 #> deusventrue  1  2  3  4  5  6  7  8  9  10  11  12 13 14 15 16 17 18 19 20 21 #>             B10 B11 B12 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 D1 D2 D3 D4 D5 #> brahma       22  23  24 25 26 27 28 29 30 31 32 33  34  35  36 37 38 39 40 41 #> caney        22  23  24 25 26 27 28 29 30 31 32 33  34  35  36 37 38 39 40 41 #> chimay       22  23  24 25 26 27 28 29 30 31 32 33  34  35  36 37 38 39 40 41 #> corona       22  23  24 25 26 27 28 29 30 31 32 33  34  35  36 37 38 39 40 41 #> deusventrue  22  23  24 25 26 27 28 29 30 31 32 33  34  35  36 37 38 39 40 41 #>             D6 D7 D8 D9 D10 D11 D12 #> brahma      42 43 44 45  46  47  48 #> caney       42 43 44 45  46  47  48 #> chimay      42 43 44 45  46  47  48 #> corona      42 43 44 45  46  47  48 #> deusventrue 42 43 44 45  46  47  48  # An illustration of Momocs design. See also browseVignettes(\"Momocs\") op <- opoly(olea, 5) #> 'nb.pts' missing and set to 91 op #> An OpnCoe object [ opoly analysis ] #> -------------------- #>  - $coe: 210 open outlines described #>  - $baseline1: (-0.5; 0), $baseline2: (0.5; 0) #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows class(op) #> [1] \"OpnCoe\" \"Coe\"    op$coe # same thing #>                     Intercept            x1         x2            x3 #> 0001-cAglan_O10VD  0.21728164  0.0820952380 -0.9016209 -0.0174933751 #> 0001-cAglan_O10VL  0.17440503  0.0338452396 -0.7077580  0.0188673254 #> 0001-cAglan_O11VD  0.17605784 -0.0181821226 -0.7153938  0.1131745169 #> 0001-cAglan_O11VL  0.20898408 -0.0527533722 -0.8654223  0.1766857390 #> 0001-cAglan_O12VD  0.22447919  0.0803230491 -0.9347773  0.0199351810 #> 0001-cAglan_O12VL  0.16235742 -0.0029369654 -0.6681510  0.0094286444 #> 0001-cAglan_O13VD  0.17792822  0.1754468212 -0.6844379 -0.0426301053 #> 0001-cAglan_O13VL  0.12672618  0.0009579514 -0.4663127  0.0002345741 #> 0001-cAglan_O14VD  0.21462762  0.0275940379 -0.8877420  0.0207363970 #> 0001-cAglan_O14VL  0.24974677  0.0114295543 -1.0496960  0.1144096127 #> 0001-cAglan_O15VD  0.19125493  0.1178119754 -0.7754215 -0.0039554397 #> 0001-cAglan_O15VL  0.12573315 -0.0158948388 -0.4548061  0.0543785873 #> 0001-cAglan_O16VD  0.19275344  0.1335641240 -0.7407366 -0.0987824861 #> 0001-cAglan_O16VL  0.24017875  0.0998083066 -1.0275196 -0.0037535364 #> 0001-cAglan_O17VD  0.22266045  0.0450388784 -0.9143523  0.0821645804 #> 0001-cAglan_O17VL  0.14600009  0.0498660478 -0.5422968 -0.0177351114 #> 0001-cAglan_O18VD  0.18420883  0.0304249548 -0.7217056  0.0571329023 #> 0001-cAglan_O18VL  0.12370513 -0.0362631392 -0.4909825  0.0458185347 #> 0001-cAglan_O19VD  0.20335401  0.0688023425 -0.8376389  0.0301347622 #> 0001-cAglan_O19VL  0.10684954  0.0041514686 -0.4071094 -0.0299624759 #> 0001-cAglan_O1VD   0.16530209  0.1263146505 -0.6782789 -0.0034335994 #> 0001-cAglan_O1VL   0.19264672  0.0047761942 -0.7913757  0.0958098961 #> 0001-cAglan_O20VD  0.18702310  0.1170531651 -0.7718111 -0.0272053979 #> 0001-cAglan_O20VL  0.12455551 -0.1083609770 -0.4811603  0.0629221022 #> 0001-cAglan_O21VD  0.17541333  0.0482173654 -0.7129816 -0.0052934872 #> 0001-cAglan_O21VL  0.13049212 -0.0750878456 -0.4945857  0.0640272991 #> 0001-cAglan_O22VD  0.21975666  0.0479308615 -0.9492226  0.0518640458 #> 0001-cAglan_O22VL  0.13247622  0.1404248712 -0.5054903 -0.0621738164 #> 0001-cAglan_O23VD  0.22546285  0.0560745366 -0.9582186  0.0037159169 #> 0001-cAglan_O23VL  0.24212924  0.0306932017 -1.0294416  0.1008862908 #> 0001-cAglan_O24VD  0.19318748  0.0424466715 -0.7711831  0.0273252643 #> 0001-cAglan_O24VL  0.14187946 -0.1420795711 -0.5392139  0.1535110671 #> 0001-cAglan_O25VD  0.18053154  0.1413722364 -0.7120755 -0.0994062981 #> 0001-cAglan_O25VL  0.11205801  0.1145850318 -0.4103983 -0.0618476073 #> 0001-cAglan_O26VD  0.20239973  0.0491003232 -0.8116939 -0.0175482137 #> 0001-cAglan_O26VL  0.14441048  0.0087197306 -0.5656701  0.0070965080 #> 0001-cAglan_O27VD  0.19430070  0.0758451426 -0.7543155  0.0160106238 #> 0001-cAglan_O27VL  0.13920048 -0.1010581520 -0.5586223  0.0824978707 #> 0001-cAglan_O28VD  0.21103626  0.0480058027 -0.8697517 -0.0050330250 #> 0001-cAglan_O28VL  0.20666836  0.0652070221 -0.8580052  0.0618490877 #> 0001-cAglan_O29VD  0.19468832  0.1445491038 -0.7807559 -0.1027170275 #> 0001-cAglan_O29VL  0.13299249  0.0500979876 -0.5446079 -0.0428964882 #> 0001-cAglan_O2VD   0.18049983  0.0742832172 -0.6915010  0.0075562215 #> 0001-cAglan_O2VL   0.12957708 -0.0371674783 -0.4899516  0.0134470093 #> 0001-cAglan_O30VD  0.19619922  0.0931831051 -0.7633346 -0.0037734250 #> 0001-cAglan_O30VL  0.13428137 -0.0949855468 -0.5180637  0.0730540220 #> 0001-cAglan_O3VD   0.18655581  0.0503218080 -0.7466846  0.0600255045 #> 0001-cAglan_O3VL   0.10854441 -0.0474882700 -0.4081974 -0.0023889824 #> 0001-cAglan_O4VD   0.22464009  0.0530388472 -0.9231306  0.0245281902 #> 0001-cAglan_O4VL   0.25130340  0.0544045848 -1.0351560  0.1001221781 #> 0001-cAglan_O5VD   0.21794122  0.0351172137 -0.8976885  0.0302506978 #> 0001-cAglan_O5VL   0.13854661 -0.1147399504 -0.5017741  0.1196361395 #> 0001-cAglan_O6VD   0.20929001  0.0317274815 -0.7933405  0.0455941659 #> 0001-cAglan_O6VL   0.10830615 -0.1334772845 -0.3818526  0.1085296685 #> 0001-cAglan_O7VD   0.19979218  0.0724848350 -0.7838685  0.0291604988 #> 0001-cAglan_O7VL   0.12137446 -0.1837766964 -0.4631785  0.1706838053 #> 0001-cAglan_O8VD   0.20441821  0.0443971169 -0.7750116  0.0648743263 #> 0001-cAglan_O8VL   0.13794457 -0.0427969220 -0.5336686  0.0354710750 #> 0001-cAglan_O9VD   0.22777242  0.0873679949 -0.9150431 -0.0305524031 #> 0001-cAglan_O9VL   0.13432972 -0.0663483259 -0.5186668  0.0576614115 #> 0010-cCypre_O10VD  0.21664664  0.0771151861 -0.8431580  0.0055686844 #> 0010-cCypre_O11VD  0.22657769  0.0840561136 -0.9403420  0.0351501734 #> 0010-cCypre_O12VD  0.20752990  0.0469980910 -0.8678666 -0.0064508049 #> 0010-cCypre_O13VD  0.21798817  0.1190150584 -0.8851341  0.0095341683 #> 0010-cCypre_O14VD  0.23790243  0.0880242563 -0.9476860 -0.0249063104 #> 0010-cCypre_O15VD  0.20192972  0.1043675498 -0.8099470 -0.0772529666 #> 0010-cCypre_O16VD  0.18846979  0.0521564425 -0.7454236  0.0247565427 #> 0010-cCypre_O17VD  0.19741251  0.1214672023 -0.8177804  0.0094837781 #> 0010-cCypre_O18VD  0.20484860  0.0150117186 -0.8090948  0.0262257293 #> 0010-cCypre_O19VD  0.21911959 -0.0071448581 -0.8783165  0.0950756512 #> 0010-cCypre_O1VD   0.21652524  0.0307253605 -0.8838807  0.0144966562 #> 0010-cCypre_O20VD  0.20437503  0.0446890906 -0.8481292  0.0012982517 #> 0010-cCypre_O21VD  0.20928315 -0.0047425083 -0.8365906  0.0851338181 #> 0010-cCypre_O22VD  0.20068649  0.0263515305 -0.8175089  0.0190617822 #> 0010-cCypre_O23VD  0.20200118  0.0442913447 -0.7690188  0.0286214821 #> 0010-cCypre_O24VD  0.20970105  0.0954665632 -0.8690775 -0.0342843373 #> 0010-cCypre_O25VD  0.19558959  0.0528796642 -0.7621603 -0.0035064562 #> 0010-cCypre_O26VD  0.16092845  0.1105083238 -0.6260891 -0.0519766946 #> 0010-cCypre_O27VD  0.22354804  0.0762563877 -0.9073819  0.0113738310 #> 0010-cCypre_O28VD  0.25284411  0.1135089079 -1.0562199 -0.0705761142 #> 0010-cCypre_O29VD  0.20929228  0.1024298793 -0.8112258  0.0130465695 #> 0010-cCypre_O2VD   0.21539905  0.1119643380 -0.8590483 -0.0027835694 #> 0010-cCypre_O30VD  0.21085574  0.0948220712 -0.8491454 -0.0568053215 #> 0010-cCypre_O3VD   0.21821076  0.0632225313 -0.8760574  0.0047080623 #> 0010-cCypre_O4VD   0.17573972  0.0836760575 -0.6897838  0.0262641847 #> 0010-cCypre_O5VD   0.21132292  0.0716806643 -0.8214542 -0.0261368673 #> 0010-cCypre_O6VD   0.20888227  0.0177411558 -0.8064397  0.0466703965 #> 0010-cCypre_O7VD   0.22546726  0.0742158994 -0.9324599 -0.0103709292 #> 0010-cCypre_O8VD   0.22285661  0.0988769143 -0.8868088 -0.0118949221 #> 0010-cCypre_O9VD   0.18084614  0.0550005047 -0.7079343  0.0372301333 #> 0023-cPicMa_O10VD  0.18023440 -0.0104423084 -0.7036097  0.0574064601 #> 0023-cPicMa_O10VL  0.13896766 -0.0666344995 -0.5452281  0.0685926652 #> 0023-cPicMa_O11VD  0.15869729 -0.0290777606 -0.6325277  0.0379601479 #> 0023-cPicMa_O11VL  0.13502523 -0.1076669957 -0.4992451  0.1154668016 #> 0023-cPicMa_O12VD  0.16826500  0.0741055368 -0.6874212  0.0946456510 #> 0023-cPicMa_O12VL  0.11781090 -0.1453200143 -0.4870541  0.0812109800 #> 0023-cPicMa_O13VD  0.16301131  0.0778725780 -0.6149270 -0.0571360912 #> 0023-cPicMa_O13VL  0.12275098 -0.0527633558 -0.4675046  0.0307095588 #> 0023-cPicMa_O14VD  0.13827935  0.1266522382 -0.5025416 -0.0192610457 #> 0023-cPicMa_O14VL  0.10647158 -0.1522085315 -0.3914520  0.1304719508 #> 0023-cPicMa_O15VD  0.16556813  0.0393342982 -0.6320543  0.0863640911 #> 0023-cPicMa_O15VL  0.12745864 -0.1428865216 -0.4695294  0.1339881982 #> 0023-cPicMa_O16VD  0.16045134  0.0168314773 -0.6108011  0.0134530243 #> 0023-cPicMa_O16VL  0.12029119 -0.1170753181 -0.4365765  0.0835421031 #> 0023-cPicMa_O17VD  0.16226592  0.0816795634 -0.6016251  0.0298334288 #> 0023-cPicMa_O17VL  0.11357658 -0.1792328355 -0.3986460  0.1322992067 #> 0023-cPicMa_O18VD  0.16638132  0.0684949076 -0.5956065  0.0264991566 #> 0023-cPicMa_O18VL  0.11848233 -0.0363097034 -0.4669173  0.0006087119 #> 0023-cPicMa_O19VD  0.16901084  0.0378944650 -0.6589385  0.0740530662 #> 0023-cPicMa_O19VL  0.22644888  0.0763861985 -0.9323757  0.0506926913 #> 0023-cPicMa_O1VD   0.12849178 -0.1342044221 -0.5483587  0.0968465651 #> 0023-cPicMa_O1VL   0.11480402 -0.2179034919 -0.4930746  0.1561838956 #> 0023-cPicMa_O20VD  0.15926487  0.0395733248 -0.5931178  0.0209588733 #> 0023-cPicMa_O20VL  0.21817155  0.0634661933 -0.8472227  0.0489972849 #> 0023-cPicMa_O21VD  0.14475764  0.1162981960 -0.5619421 -0.0020248439 #> 0023-cPicMa_O21VL  0.19242857  0.0943166568 -0.7961330  0.0331400784 #> 0023-cPicMa_O22VD  0.16100106 -0.0427769008 -0.6491867  0.0171716149 #> 0023-cPicMa_O22VL  0.12490782 -0.1809323658 -0.5294327  0.0951303181 #> 0023-cPicMa_O23VD  0.18289145  0.0640759483 -0.7037168 -0.0078132994 #> 0023-cPicMa_O23VL  0.13452876 -0.1312014149 -0.5802704  0.0996591952 #> 0023-cPicMa_O24VD  0.19934999  0.0456096654 -0.7958312 -0.0004781872 #> 0023-cPicMa_O24VL  0.12963319 -0.1572994323 -0.5721961  0.1086123738 #> 0023-cPicMa_O25VD  0.14439059 -0.0146215488 -0.5419901  0.0306888082 #> 0023-cPicMa_O25VL  0.10502262 -0.1073404149 -0.4122691  0.1050740550 #> 0023-cPicMa_O26VD  0.16272318  0.0888197913 -0.5747101 -0.0479273126 #> 0023-cPicMa_O26VL  0.09568899 -0.1213585727 -0.3809030  0.0659043677 #> 0023-cPicMa_O27VD  0.12524989 -0.0573789027 -0.4711746  0.0307401429 #> 0023-cPicMa_O27VL  0.13361958 -0.0928477731 -0.5328221  0.0749206862 #> 0023-cPicMa_O28VD  0.21391197  0.0675319793 -0.8683864 -0.0566872739 #> 0023-cPicMa_O28VL  0.14369714 -0.0701206032 -0.5640867  0.0591683033 #> 0023-cPicMa_O29VD  0.15773919  0.0662362921 -0.6110751 -0.0507006097 #> 0023-cPicMa_O29VL  0.13028478 -0.0471713489 -0.4877567  0.0414531712 #> 0023-cPicMa_O2VD   0.15271084  0.0992512146 -0.6006278  0.0252888763 #> 0023-cPicMa_O2VL   0.12709431 -0.0944840154 -0.5058892  0.0760934497 #> 0023-cPicMa_O30VD  0.17732452  0.0563426943 -0.6601990  0.0621056170 #> 0023-cPicMa_O30VL  0.11544940 -0.1863099061 -0.4840974  0.1826444722 #> 0023-cPicMa_O3VD   0.17960537  0.0191052345 -0.6953965 -0.0004361502 #> 0023-cPicMa_O3VL   0.11576084 -0.0928395617 -0.4491746  0.0710991480 #> 0023-cPicMa_O4VD   0.14926554  0.0864129714 -0.5701828  0.0209237652 #> 0023-cPicMa_O4VL   0.11981147 -0.1522480705 -0.4663968  0.1165253617 #> 0023-cPicMa_O5VD   0.11037121 -0.0432484353 -0.4150343  0.0078200940 #> 0023-cPicMa_O5VL   0.07092883 -0.1236401109 -0.2737980  0.0720750035 #> 0023-cPicMa_O6VD   0.17806477  0.0363866228 -0.7292810 -0.0253226650 #> 0023-cPicMa_O6VL   0.13172240 -0.0529433591 -0.5388466  0.0348096395 #> 0023-cPicMa_O7VD   0.14579934 -0.1049938929 -0.6189755  0.0878308325 #> 0023-cPicMa_O7VL   0.10160327 -0.1987401594 -0.4375640  0.1536385781 #> 0023-cPicMa_O8VD   0.17021212  0.0832735755 -0.6301950  0.0156335714 #> 0023-cPicMa_O8VL   0.21504814  0.0924220700 -0.8673284  0.0367395161 #> 0023-cPicMa_O9VD   0.17824041 -0.0115237793 -0.6806192  0.0372814840 #> 0023-cPicMa_O9VL   0.12788664 -0.1443870373 -0.5150814  0.1169215484 #> 0125-wMouBo1_O10VD 0.23074741 -0.0101734290 -0.9391095  0.0661802550 #> 0125-wMouBo1_O10VL 0.24990343  0.0836208995 -1.0408045  0.0386524965 #> 0125-wMouBo1_O11VD 0.23053038  0.0628572473 -0.9705205 -0.0080583183 #> 0125-wMouBo1_O11VL 0.21624241  0.0449956240 -0.9030091  0.0705556367 #> 0125-wMouBo1_O12VD 0.19066115  0.0458008145 -0.7902542  0.0442912598 #> 0125-wMouBo1_O12VL 0.23561435  0.1028016687 -0.9467364  0.0408696967 #> 0125-wMouBo1_O13VD 0.25267603  0.0925693911 -1.0495399 -0.0191122008 #> 0125-wMouBo1_O13VL 0.23204287  0.0008319173 -0.9553313  0.1079494264 #> 0125-wMouBo1_O14VD 0.21939596  0.0614014037 -0.9278719  0.0073275779 #> 0125-wMouBo1_O14VL 0.22992852  0.1190731238 -0.9126497 -0.0144151468 #> 0125-wMouBo1_O15VD 0.21512832 -0.0272326723 -0.8580552  0.0510604863 #> 0125-wMouBo1_O15VL 0.25352482  0.0977260428 -1.0174843  0.0204523978 #> 0125-wMouBo1_O16VD 0.23423614  0.0633411629 -0.9697099  0.0546065802 #> 0125-wMouBo1_O16VL 0.23326324  0.0488121606 -0.9494775  0.0695524370 #> 0125-wMouBo1_O17VD 0.22052161  0.0832275267 -0.9054632  0.0488414527 #> 0125-wMouBo1_O17VL 0.23176223  0.0423807072 -0.9708804  0.0691689042 #> 0125-wMouBo1_O18VD 0.22137457  0.0667803792 -0.9594549 -0.0053748893 #> 0125-wMouBo1_O18VL 0.21477981  0.0995960722 -0.8879203  0.0419509417 #> 0125-wMouBo1_O19VD 0.20398899 -0.0609533423 -0.8709192  0.1105576865 #> 0125-wMouBo1_O19VL 0.20426129  0.0509978535 -0.8246557  0.0040920315 #> 0125-wMouBo1_O1VD  0.22026276  0.0780412149 -0.9278662  0.0354235848 #> 0125-wMouBo1_O1VL  0.23496803  0.1139643929 -0.9551441  0.0292138104 #> 0125-wMouBo1_O20VD 0.21821767  0.0322591445 -0.9016256  0.0602308906 #> 0125-wMouBo1_O20VL 0.23442593  0.0327895956 -0.9817619  0.0597326015 #> 0125-wMouBo1_O21VD 0.18909979  0.0462617258 -0.7798647  0.0297087552 #> 0125-wMouBo1_O21VL 0.24969155  0.0995791291 -1.0188876  0.0488933559 #> 0125-wMouBo1_O22VD 0.22984107  0.0654461893 -0.9451709  0.0310217968 #> 0125-wMouBo1_O22VL 0.24550951  0.0520980933 -1.0086728  0.0572622480 #> 0125-wMouBo1_O23VD 0.24925436  0.0373694748 -1.0252985  0.0209736348 #> 0125-wMouBo1_O23VL 0.22043348 -0.0301946741 -0.9294530  0.0394466473 #> 0125-wMouBo1_O24VD 0.22290706  0.0805151751 -0.9019173  0.0418668268 #> 0125-wMouBo1_O24VL 0.24100542  0.0335096307 -0.9785418  0.0623975907 #> 0125-wMouBo1_O25VD 0.23384817  0.0816932466 -0.9911284 -0.0068789229 #> 0125-wMouBo1_O25VL 0.22292557  0.0432838189 -0.9333467  0.0574774987 #> 0125-wMouBo1_O26VD 0.21810243  0.0513093050 -0.9217217 -0.0131430251 #> 0125-wMouBo1_O26VL 0.19810765  0.0242678007 -0.8075390  0.0565630002 #> 0125-wMouBo1_O27VD 0.23187453  0.0453093495 -0.9894214 -0.0085185471 #> 0125-wMouBo1_O27VL 0.20408385  0.0202634500 -0.8002120  0.0336295414 #> 0125-wMouBo1_O28VD 0.22025843  0.1121501527 -0.9198706 -0.0582466407 #> 0125-wMouBo1_O28VL 0.18561477  0.0032354513 -0.7452582  0.0375723248 #> 0125-wMouBo1_O29VD 0.25709114  0.1175532466 -1.0950456 -0.0212746551 #> 0125-wMouBo1_O29VL 0.23486253  0.0577475395 -0.9383747  0.0560995104 #> 0125-wMouBo1_O2VD  0.22302483  0.0333965363 -0.9413178  0.0243144765 #> 0125-wMouBo1_O2VL  0.23892087  0.0979275281 -0.9877977 -0.0168207170 #> 0125-wMouBo1_O30VD 0.27219534  0.1190873704 -1.1221068  0.0269060340 #> 0125-wMouBo1_O30VL 0.25088715  0.0935315155 -1.0587948  0.0425885246 #> 0125-wMouBo1_O3VD  0.23337441  0.0519188288 -0.9806883  0.0214060409 #> 0125-wMouBo1_O3VL  0.21313679  0.0075232908 -0.8638998  0.0355457609 #> 0125-wMouBo1_O4VD  0.19510917 -0.0262698897 -0.7865855  0.0824134876 #> 0125-wMouBo1_O4VL  0.24148398  0.0590954249 -1.0192049  0.0133718728 #> 0125-wMouBo1_O5VD  0.23463351  0.0127890100 -0.9947945  0.0617170374 #> 0125-wMouBo1_O5VL  0.23540593  0.0927530157 -0.9473588  0.0241599004 #> 0125-wMouBo1_O6VD  0.21388069  0.0448125843 -0.8811050 -0.0187149803 #> 0125-wMouBo1_O6VL  0.19693370 -0.0404391694 -0.7981819  0.1110957370 #> 0125-wMouBo1_O7VD  0.23515227  0.0636867722 -0.9362205  0.0767137787 #> 0125-wMouBo1_O7VL  0.19075490  0.0693636751 -0.7369358  0.0102032851 #> 0125-wMouBo1_O8VD  0.22059769  0.0238591389 -0.9479522  0.0622891501 #> 0125-wMouBo1_O8VL  0.22524616  0.0696864084 -0.9204583  0.0659353881 #> 0125-wMouBo1_O9VD  0.23668791  0.0296600751 -1.0124501  0.0659259928 #> 0125-wMouBo1_O9VL  0.22708513  0.0726133899 -0.9372184  0.0486002167 #>                               x4           x5 #> 0001-cAglan_O10VD  -0.1122924204  0.011811482 #> 0001-cAglan_O10VL  -0.0779230878  0.029245826 #> 0001-cAglan_O11VD  -0.0532882009  0.006747825 #> 0001-cAglan_O11VL  -0.1117488969  0.023925077 #> 0001-cAglan_O12VD  -0.1449913711 -0.042287326 #> 0001-cAglan_O12VL  -0.0379246316  0.063364106 #> 0001-cAglan_O13VD  -0.1250633094 -0.054783966 #> 0001-cAglan_O13VL  -0.0798250819  0.017944805 #> 0001-cAglan_O14VD  -0.1308675889  0.011091031 #> 0001-cAglan_O14VL  -0.2004433864  0.045232179 #> 0001-cAglan_O15VD  -0.0919883678 -0.059553445 #> 0001-cAglan_O15VL  -0.0871089172  0.018909477 #> 0001-cAglan_O16VD  -0.1380569681 -0.042979021 #> 0001-cAglan_O16VL  -0.1548657148 -0.037662322 #> 0001-cAglan_O17VD  -0.1444969953 -0.011744608 #> 0001-cAglan_O17VL  -0.0694319614  0.033040122 #> 0001-cAglan_O18VD  -0.1020634949 -0.029566500 #> 0001-cAglan_O18VL  -0.0204580794  0.039427706 #> 0001-cAglan_O19VD  -0.1131448867 -0.035180217 #> 0001-cAglan_O19VL  -0.0328009617  0.034406695 #> 0001-cAglan_O1VD   -0.0494508094 -0.017792278 #> 0001-cAglan_O1VL   -0.0675891208 -0.006894284 #> 0001-cAglan_O20VD  -0.0693864212 -0.068788491 #> 0001-cAglan_O20VL  -0.0519473662  0.069127856 #> 0001-cAglan_O21VD  -0.0690504967  0.029583750 #> 0001-cAglan_O21VL  -0.0572925691  0.039067673 #> 0001-cAglan_O22VD  -0.0733540268 -0.034595355 #> 0001-cAglan_O22VL  -0.0211530345 -0.007149806 #> 0001-cAglan_O23VD  -0.1693545165  0.035544176 #> 0001-cAglan_O23VL  -0.1668900643  0.001166044 #> 0001-cAglan_O24VD  -0.1005547221  0.031901050 #> 0001-cAglan_O24VL  -0.0719870654  0.036591949 #> 0001-cAglan_O25VD  -0.0908727626  0.025277881 #> 0001-cAglan_O25VL  -0.0280126192  0.013721081 #> 0001-cAglan_O26VD  -0.1245654638  0.046648700 #> 0001-cAglan_O26VL  -0.0502755364  0.042628438 #> 0001-cAglan_O27VD  -0.1408497750 -0.019202606 #> 0001-cAglan_O27VL  -0.0507554258  0.029550696 #> 0001-cAglan_O28VD  -0.1154323362  0.032326606 #> 0001-cAglan_O28VL  -0.1173164923 -0.017835140 #> 0001-cAglan_O29VD  -0.0869127901  0.007539585 #> 0001-cAglan_O29VL  -0.0067273762  0.023726566 #> 0001-cAglan_O2VD   -0.1032251214  0.016413419 #> 0001-cAglan_O2VL   -0.0855077702  0.027421298 #> 0001-cAglan_O30VD  -0.1172515186  0.007129656 #> 0001-cAglan_O30VL  -0.0600350227  0.050921750 #> 0001-cAglan_O3VD   -0.0790997095 -0.023984316 #> 0001-cAglan_O3VL   -0.0392628872  0.035887647 #> 0001-cAglan_O4VD   -0.1276614263  0.020245469 #> 0001-cAglan_O4VL   -0.2121600328  0.034486435 #> 0001-cAglan_O5VD   -0.1284843396  0.042959266 #> 0001-cAglan_O5VL   -0.1120167371  0.060378285 #> 0001-cAglan_O6VD   -0.1633809410  0.053901214 #> 0001-cAglan_O6VL   -0.0442512950  0.054976662 #> 0001-cAglan_O7VD   -0.1322575676 -0.036853482 #> 0001-cAglan_O7VL   -0.0294330372  0.036555650 #> 0001-cAglan_O8VD   -0.1652197160 -0.006575256 #> 0001-cAglan_O8VL   -0.0707585310  0.040124177 #> 0001-cAglan_O9VD   -0.1759010895 -0.037099969 #> 0001-cAglan_O9VL   -0.0507375054  0.021052215 #> 0010-cCypre_O10VD  -0.1907663852  0.033668073 #> 0010-cCypre_O11VD  -0.1525375504 -0.030964361 #> 0010-cCypre_O12VD  -0.1231142611 -0.065651764 #> 0010-cCypre_O13VD  -0.1644570401 -0.074020050 #> 0010-cCypre_O14VD  -0.2271665800  0.041464998 #> 0010-cCypre_O15VD  -0.1350791563 -0.004793408 #> 0010-cCypre_O16VD  -0.0956731090 -0.003839584 #> 0010-cCypre_O17VD  -0.0901885112 -0.046486991 #> 0010-cCypre_O18VD  -0.1403705992  0.084359742 #> 0010-cCypre_O19VD  -0.1563634433  0.062309880 #> 0010-cCypre_O1VD   -0.1346347584  0.051534887 #> 0010-cCypre_O20VD  -0.1215729802  0.026564366 #> 0010-cCypre_O21VD  -0.1376461798  0.096000661 #> 0010-cCypre_O22VD  -0.1060803100  0.064167473 #> 0010-cCypre_O23VD  -0.1329278852  0.034698758 #> 0010-cCypre_O24VD  -0.0930279840  0.005855714 #> 0010-cCypre_O25VD  -0.1381173573 -0.007826328 #> 0010-cCypre_O26VD  -0.0775672556  0.009821264 #> 0010-cCypre_O27VD  -0.1487340347 -0.031215169 #> 0010-cCypre_O28VD  -0.2124403577 -0.001384415 #> 0010-cCypre_O29VD  -0.1641377620 -0.029696650 #> 0010-cCypre_O2VD   -0.1447761610 -0.044424134 #> 0010-cCypre_O30VD  -0.1339518135  0.007734536 #> 0010-cCypre_O3VD   -0.1547479282  0.023163341 #> 0010-cCypre_O4VD   -0.0997767339 -0.020756902 #> 0010-cCypre_O5VD   -0.1761225193  0.041985220 #> 0010-cCypre_O6VD   -0.1582268752  0.073067174 #> 0010-cCypre_O7VD   -0.1754658206  0.023412541 #> 0010-cCypre_O8VD   -0.1851627118  0.035725658 #> 0010-cCypre_O9VD   -0.1021910356 -0.012082703 #> 0023-cPicMa_O10VD  -0.0857539759  0.061289379 #> 0023-cPicMa_O10VL  -0.0564807376  0.068334285 #> 0023-cPicMa_O11VD  -0.0551361198  0.042508240 #> 0023-cPicMa_O11VL  -0.0853995635  0.046183371 #> 0023-cPicMa_O12VD  -0.0327860101 -0.059873043 #> 0023-cPicMa_O12VL  -0.0388282159  0.088302812 #> 0023-cPicMa_O13VD  -0.1001633543  0.033842951 #> 0023-cPicMa_O13VL  -0.0636811761  0.035023652 #> 0023-cPicMa_O14VD  -0.0729737229 -0.053417115 #> 0023-cPicMa_O14VL  -0.0313737876  0.060946265 #> 0023-cPicMa_O15VD  -0.1008239212 -0.032607123 #> 0023-cPicMa_O15VL  -0.0984171536  0.029341475 #> 0023-cPicMa_O16VD  -0.0607390806  0.081181128 #> 0023-cPicMa_O16VL  -0.0721021678  0.094294448 #> 0023-cPicMa_O17VD  -0.0772352632 -0.014461957 #> 0023-cPicMa_O17VL  -0.0593830883  0.081110589 #> 0023-cPicMa_O18VD  -0.1335489220 -0.018785123 #> 0023-cPicMa_O18VL  -0.0600621897  0.013575514 #> 0023-cPicMa_O19VD  -0.0721537904 -0.027002789 #> 0023-cPicMa_O19VL  -0.1612410146  0.015468415 #> 0023-cPicMa_O1VD   -0.0091607201  0.080203390 #> 0023-cPicMa_O1VL   -0.0291126840  0.076773890 #> 0023-cPicMa_O20VD  -0.0843202662  0.014591763 #> 0023-cPicMa_O20VL  -0.2102592669  0.049305586 #> 0023-cPicMa_O21VD  -0.0294556808 -0.039773874 #> 0023-cPicMa_O21VL  -0.1013156169 -0.016776722 #> 0023-cPicMa_O22VD  -0.0705997881  0.071158584 #> 0023-cPicMa_O22VL  -0.0619885032  0.075882177 #> 0023-cPicMa_O23VD  -0.1004483432  0.034087273 #> 0023-cPicMa_O23VL  -0.0380569222  0.081488131 #> 0023-cPicMa_O24VD  -0.1103975534  0.031535176 #> 0023-cPicMa_O24VL  -0.0267003906  0.040516694 #> 0023-cPicMa_O25VD  -0.0841112011  0.068130610 #> 0023-cPicMa_O25VL   0.0036493955  0.044123037 #> 0023-cPicMa_O26VD  -0.1422762062  0.019234925 #> 0023-cPicMa_O26VL   0.0005981636  0.054609082 #> 0023-cPicMa_O27VD  -0.0585286462  0.070009911 #> 0023-cPicMa_O27VL  -0.0520978825  0.059749831 #> 0023-cPicMa_O28VD  -0.1440411643  0.016242607 #> 0023-cPicMa_O28VL  -0.0910726089  0.023344220 #> 0023-cPicMa_O29VD  -0.0704700003  0.035313517 #> 0023-cPicMa_O29VL  -0.0829926763  0.047269699 #> 0023-cPicMa_O2VD   -0.0639971447 -0.056753292 #> 0023-cPicMa_O2VL   -0.0459464593  0.034596955 #> 0023-cPicMa_O30VD  -0.1006703190 -0.034561788 #> 0023-cPicMa_O30VL  -0.0209529952  0.053568090 #> 0023-cPicMa_O3VD   -0.1249799045  0.025985322 #> 0023-cPicMa_O3VL   -0.0270558927  0.048189316 #> 0023-cPicMa_O4VD   -0.0387193850 -0.051098804 #> 0023-cPicMa_O4VL   -0.0399518540  0.078274009 #> 0023-cPicMa_O5VD   -0.0364361232  0.063559785 #> 0023-cPicMa_O5VL   -0.0009228800  0.038845032 #> 0023-cPicMa_O6VD   -0.0527213482  0.072467493 #> 0023-cPicMa_O6VL   -0.0262096667  0.044631921 #> 0023-cPicMa_O7VD   -0.0193040556  0.076181244 #> 0023-cPicMa_O7VL   -0.0164588009  0.065974155 #> 0023-cPicMa_O8VD   -0.1011002383 -0.050500162 #> 0023-cPicMa_O8VL   -0.1474562057 -0.055326861 #> 0023-cPicMa_O9VD   -0.1229228162  0.052863918 #> 0023-cPicMa_O9VL   -0.0471838228  0.042469701 #> 0125-wMouBo1_O10VD -0.1875598962  0.068769161 #> 0125-wMouBo1_O10VL -0.1832705835 -0.004511738 #> 0125-wMouBo1_O11VD -0.1616470914  0.031138798 #> 0125-wMouBo1_O11VL -0.1223357674  0.011970531 #> 0125-wMouBo1_O12VD -0.1143140795  0.036669271 #> 0125-wMouBo1_O12VL -0.1868888245 -0.011632125 #> 0125-wMouBo1_O13VD -0.1937221789  0.020989146 #> 0125-wMouBo1_O13VL -0.1469640409  0.031287779 #> 0125-wMouBo1_O14VD -0.1114505748  0.031490738 #> 0125-wMouBo1_O14VL -0.1800797076 -0.028402206 #> 0125-wMouBo1_O15VD -0.1869858922  0.072466004 #> 0125-wMouBo1_O15VL -0.2168073770 -0.021286336 #> 0125-wMouBo1_O16VD -0.1535981261  0.011615355 #> 0125-wMouBo1_O16VL -0.1899418287  0.009715178 #> 0125-wMouBo1_O17VD -0.1391688664 -0.005128136 #> 0125-wMouBo1_O17VL -0.1277018851 -0.009272098 #> 0125-wMouBo1_O18VD -0.1443842365  0.031073880 #> 0125-wMouBo1_O18VL -0.1390597617 -0.004759846 #> 0125-wMouBo1_O19VD -0.1441671535  0.060497508 #> 0125-wMouBo1_O19VL -0.1221715131  0.020918665 #> 0125-wMouBo1_O1VD  -0.1417840460 -0.015559430 #> 0125-wMouBo1_O1VL  -0.1698479339 -0.025768093 #> 0125-wMouBo1_O20VD -0.1372108152 -0.004491672 #> 0125-wMouBo1_O20VL -0.1535939815  0.029665377 #> 0125-wMouBo1_O21VD -0.0891273779 -0.005008645 #> 0125-wMouBo1_O21VL -0.1890499757 -0.015240229 #> 0125-wMouBo1_O22VD -0.1637553199  0.003421954 #> 0125-wMouBo1_O22VL -0.1623708983 -0.008730847 #> 0125-wMouBo1_O23VD -0.1834655316  0.026522318 #> 0125-wMouBo1_O23VL -0.1674130936  0.063389559 #> 0125-wMouBo1_O24VD -0.1586301633 -0.002838081 #> 0125-wMouBo1_O24VL -0.2039197415 -0.013594800 #> 0125-wMouBo1_O25VD -0.1682203008  0.017616638 #> 0125-wMouBo1_O25VL -0.1090353052  0.004866802 #> 0125-wMouBo1_O26VD -0.1583415388  0.030290845 #> 0125-wMouBo1_O26VL -0.1289387583  0.041994378 #> 0125-wMouBo1_O27VD -0.1677297119  0.056390324 #> 0125-wMouBo1_O27VL -0.1377412296  0.047386485 #> 0125-wMouBo1_O28VD -0.1441183994  0.006142353 #> 0125-wMouBo1_O28VL -0.1500057364  0.071254159 #> 0125-wMouBo1_O29VD -0.1841434041  0.006546213 #> 0125-wMouBo1_O29VL -0.1717283394  0.002413615 #> 0125-wMouBo1_O2VD  -0.1787113472  0.029780265 #> 0125-wMouBo1_O2VL  -0.2069887483 -0.008301580 #> 0125-wMouBo1_O30VD -0.2596889585 -0.033590471 #> 0125-wMouBo1_O30VL -0.2089829321 -0.009712427 #> 0125-wMouBo1_O3VD  -0.1822212213  0.068692130 #> 0125-wMouBo1_O3VL  -0.1615093101  0.059007889 #> 0125-wMouBo1_O4VD  -0.1243448588  0.040692622 #> 0125-wMouBo1_O4VL  -0.1712222718 -0.002086956 #> 0125-wMouBo1_O5VD  -0.1581744157  0.064188642 #> 0125-wMouBo1_O5VL  -0.2060281371 -0.040847996 #> 0125-wMouBo1_O6VD  -0.1058225116  0.006360021 #> 0125-wMouBo1_O6VL  -0.1285952926  0.066283858 #> 0125-wMouBo1_O7VD  -0.1811606623  0.020997417 #> 0125-wMouBo1_O7VL  -0.0819459609  0.008617285 #> 0125-wMouBo1_O8VD  -0.1270985763 -0.005867603 #> 0125-wMouBo1_O8VL  -0.1449122001 -0.006618885 #> 0125-wMouBo1_O9VD  -0.1577287178  0.010577178 #> 0125-wMouBo1_O9VL  -0.1480660701 -0.003695914  wp <- fgProcrustes(wings, tol=1e-4) #> iteration:  1 \tgain: 53084  #> iteration:  2 \tgain: 0.1323  #> iteration:  3 \tgain: 0.056732  #> iteration:  4 \tgain: 0.00012401  #> iteration:  5 \tgain: 0.038609  #> iteration:  6 \tgain: 0.018221  #> iteration:  7 \tgain: 0.0014165  #> iteration:  8 \tgain: 6.1489e-06  wp #> An LdkCoe [full Generalized Procrustes] object with:  #> -------------------- #>  - $coo: 127 configuration of landmarks (18 +/- 0 coordinates) #> # A tibble: 127 × 1 #>   group #>   <fct> #> 1 AN    #> 2 AN    #> 3 AN    #> 4 AN    #> 5 AN    #> 6 AN    #> # ℹ 121 more rows class(wp) # for Ldk methods, LdkCoe objects can also be considered as Coo objects #> [1] \"LdkCoe\" \"Coe\"    \"Ldk\"    \"Coo\"    # so you can apply all Ldk methods available. wp$coe # Procrustes aligned coordinates #>               x1            x2        x3        x4        x5        x6 #> AN1   -0.4907666 -0.0773009715 0.2219542 0.2627437 0.2631416 0.2458310 #> AN2   -0.4814136 -0.0043204711 0.2358591 0.2470304 0.2493796 0.2433619 #> AN3   -0.4624999  0.0085256951 0.2402046 0.2499734 0.2599811 0.2541803 #> AN4   -0.4529120 -0.0290010787 0.2450022 0.2644452 0.2662562 0.2580972 #> AN5   -0.4924779 -0.0212833505 0.2384236 0.2428850 0.2430784 0.2342010 #> AN6   -0.4648300 -0.0155847731 0.2292089 0.2471983 0.2543874 0.2527982 #> AN7   -0.4732081 -0.0574977850 0.2273573 0.2538051 0.2603828 0.2519172 #> AN8   -0.4698594  0.0504698979 0.2434539 0.2591684 0.2579988 0.2547464 #> AN9   -0.4649648  0.0035623360 0.2293834 0.2440605 0.2525448 0.2521638 #> AN10  -0.4504193 -0.0018707051 0.2480358 0.2576366 0.2590623 0.2538704 #> AN11  -0.4594860 -0.0067460377 0.2392940 0.2501128 0.2535707 0.2503424 #> TO12  -0.4549666 -0.0135654597 0.2181489 0.2384352 0.2483764 0.2467695 #> WY13  -0.4704734  0.0116630860 0.2330368 0.2543107 0.2622847 0.2600690 #> WY14  -0.4734689  0.0207999542 0.2337591 0.2504520 0.2525345 0.2461181 #> WY15  -0.4675774 -0.0292250770 0.2444459 0.2544484 0.2613803 0.2591811 #> WY16  -0.4614597  0.0161212662 0.2365561 0.2554997 0.2616627 0.2573814 #> UR17  -0.4679322  0.0137186315 0.2337384 0.2482512 0.2518451 0.2452852 #> UR18  -0.4959530  0.0510005057 0.2047701 0.2231605 0.2329740 0.2367396 #> UR19  -0.4634175 -0.0316943065 0.2226446 0.2456525 0.2585150 0.2571715 #> UR20  -0.4847293 -0.0173597990 0.2345076 0.2501136 0.2553717 0.2513819 #> CA21  -0.4842850  0.0063753386 0.2363630 0.2523859 0.2511070 0.2448517 #> CA22  -0.4686641  0.0433492114 0.2227406 0.2479682 0.2538936 0.2564965 #> CA23  -0.4624115  0.0521370117 0.2462273 0.2587035 0.2603057 0.2514573 #> CA24  -0.4496786 -0.0299209806 0.2410362 0.2679107 0.2707568 0.2625471 #> CA25  -0.4699837  0.0499912336 0.2468421 0.2602165 0.2600191 0.2493553 #> CA26  -0.4652044 -0.0216338175 0.2320537 0.2522195 0.2577222 0.2553325 #> CA27  -0.4539016 -0.0084621369 0.2347432 0.2567309 0.2678166 0.2672198 #> OR28  -0.4642004 -0.0478363995 0.2047891 0.2580593 0.2673629 0.2631468 #> MA29  -0.4629121  0.0321108444 0.2619494 0.2689998 0.2673808 0.2531957 #> MA30  -0.4744066  0.0030967297 0.2335851 0.2499520 0.2561755 0.2494846 #> MA31  -0.4837650  0.0069218722 0.2474991 0.2586511 0.2556787 0.2411284 #> PS32  -0.4966972  0.0391162185 0.2238874 0.2389734 0.2445282 0.2383284 #> PS33  -0.4861101  0.0458740448 0.2217242 0.2376278 0.2494514 0.2411975 #> PS34  -0.4926047  0.0150598747 0.2309942 0.2380733 0.2385704 0.2356709 #> PS35  -0.4707887 -0.0006005030 0.2405639 0.2530304 0.2561273 0.2532259 #> PS36  -0.4804750  0.0102748783 0.2281729 0.2477567 0.2516146 0.2473052 #> PS37  -0.4843792  0.0024029418 0.2177104 0.2418813 0.2524859 0.2451530 #> PS38  -0.4883758  0.0118492596 0.2295506 0.2450205 0.2523039 0.2467107 #> PS39  -0.4689716  0.0189766943 0.2274736 0.2403579 0.2492681 0.2490592 #> PS40  -0.4715872  0.0529053483 0.2305629 0.2444438 0.2523252 0.2487301 #> PS41  -0.4675117  0.0055336845 0.2178562 0.2412046 0.2558821 0.2563120 #> PS42  -0.4702167 -0.0323832015 0.2047675 0.2425465 0.2489391 0.2420843 #> PS43  -0.4640396  0.0755651863 0.2310033 0.2389107 0.2503819 0.2466330 #> AE44  -0.4752231 -0.0190036593 0.2392345 0.2483440 0.2546769 0.2535676 #> AE45  -0.4712468  0.0190843812 0.2210899 0.2369524 0.2457552 0.2464260 #> AE46  -0.4793075  0.0154345164 0.2355639 0.2479250 0.2481327 0.2417271 #> AE47  -0.4654301  0.0330019702 0.2193599 0.2444830 0.2499465 0.2496946 #> AE48  -0.4815365 -0.0064290149 0.2537134 0.2590958 0.2592869 0.2486677 #> AE49  -0.4632723  0.0162815933 0.2186887 0.2481676 0.2534765 0.2518944 #> AE50  -0.4817723  0.0276523610 0.2290102 0.2431281 0.2469943 0.2462860 #> AE51  -0.4717455 -0.0107373284 0.2350966 0.2508590 0.2535008 0.2475562 #> AE52  -0.4752186  0.0079643207 0.2161767 0.2389326 0.2506431 0.2488986 #> AE53  -0.4807181 -0.0193542092 0.2187462 0.2373243 0.2465864 0.2411295 #> AE54  -0.4726770  0.0042104072 0.2320799 0.2441318 0.2497205 0.2443859 #> AE55  -0.4646473  0.0320480284 0.2371872 0.2517296 0.2591495 0.2576346 #> AE56  -0.4658006 -0.0271433977 0.2317464 0.2510340 0.2581889 0.2566246 #> AE57  -0.4844660 -0.0221552886 0.2456692 0.2556408 0.2580763 0.2516870 #> AE58  -0.4730506  0.0582814685 0.2188507 0.2418793 0.2479542 0.2464591 #> AE59  -0.4828655 -0.0055133573 0.2354240 0.2617881 0.2592169 0.2434273 #> AE60  -0.4774249  0.0361789182 0.2263105 0.2476206 0.2512024 0.2451575 #> AE61  -0.4623119 -0.0375587499 0.2440043 0.2601320 0.2585395 0.2505482 #> AE62  -0.4902864  0.0139065201 0.2342103 0.2453327 0.2515635 0.2436809 #> AE63  -0.4779151  0.0059330973 0.2345515 0.2555558 0.2597442 0.2532415 #> AE64  -0.4868197 -0.0211344335 0.2364029 0.2454972 0.2499901 0.2497979 #> AE65  -0.4746840  0.0096365983 0.2263605 0.2404731 0.2468449 0.2468833 #> AE66  -0.4768653  0.0289818014 0.2154092 0.2364947 0.2510466 0.2478843 #> AE67  -0.4739933 -0.0127977235 0.2079788 0.2406013 0.2500045 0.2466718 #> AE68  -0.4695196  0.0127816215 0.2194103 0.2511412 0.2566561 0.2491946 #> AE69  -0.4870751  0.0120547996 0.2188035 0.2356834 0.2457794 0.2419043 #> AE70  -0.4739865  0.0073867906 0.2259563 0.2480186 0.2512018 0.2460852 #> AE71  -0.4876300  0.0068425512 0.2200598 0.2428513 0.2480821 0.2424443 #> AE72  -0.4796960  0.0081015641 0.2245357 0.2411730 0.2474304 0.2432591 #> AE73  -0.4844463 -0.0148392109 0.2478067 0.2592521 0.2566336 0.2446404 #> AE74  -0.4990544  0.0351093589 0.2067677 0.2418032 0.2463419 0.2380992 #> AE75  -0.4927988  0.0129269894 0.2264267 0.2395880 0.2468303 0.2461931 #> AE76  -0.4794825  0.0284282758 0.2124819 0.2288382 0.2378380 0.2369457 #> AE77  -0.4896619  0.0084220519 0.2270959 0.2420128 0.2492127 0.2442261 #> AE78  -0.4816176  0.0110479956 0.2354676 0.2510040 0.2487253 0.2391245 #> AE79  -0.4857004  0.0125998503 0.2206958 0.2543582 0.2570297 0.2508034 #> AE80  -0.4782865  0.0008280900 0.2179316 0.2396095 0.2500093 0.2469745 #> AE81  -0.4614159  0.0164243433 0.2175737 0.2373651 0.2517962 0.2540073 #> AE82  -0.4884021 -0.0106529196 0.2159937 0.2393296 0.2505881 0.2421417 #> AE83  -0.4705928 -0.0056291188 0.2332780 0.2532730 0.2575283 0.2451208 #> AE84  -0.4832577  0.0392237816 0.2217536 0.2451291 0.2578183 0.2496531 #> AE85  -0.4613904  0.0166551212 0.2382053 0.2526753 0.2534802 0.2513185 #> AE86  -0.4742992  0.0023745196 0.2348359 0.2477378 0.2523562 0.2464384 #> AE87  -0.4711525  0.0055153725 0.2358711 0.2574658 0.2635143 0.2571095 #> AE88  -0.4813500  0.0202470374 0.2403003 0.2525533 0.2551104 0.2482657 #> AE89  -0.4725693  0.0600504908 0.2260758 0.2477042 0.2506761 0.2478068 #> AE90  -0.4812507 -0.0129303990 0.2307134 0.2486744 0.2513002 0.2429985 #> AE91  -0.4786523 -0.0063253420 0.2179355 0.2412551 0.2465643 0.2444140 #> AE92  -0.4676820  0.0006938311 0.2213544 0.2480277 0.2560944 0.2529235 #> AE93  -0.4956653  0.0006840548 0.2156897 0.2387205 0.2509945 0.2478962 #> AE94  -0.4711722 -0.0241188538 0.2458578 0.2588251 0.2634248 0.2597967 #> AE95  -0.4682823 -0.0080591902 0.2282772 0.2477356 0.2517442 0.2493961 #> AE96  -0.4495492  0.0408870483 0.2371218 0.2474411 0.2576482 0.2554825 #> AE97  -0.4762984 -0.0156492648 0.2388590 0.2615816 0.2660422 0.2588822 #> AE98  -0.4818158  0.0129963689 0.2323245 0.2449118 0.2507871 0.2465823 #> AE99  -0.4614757 -0.0127074929 0.2380940 0.2533797 0.2576139 0.2549766 #> AE100 -0.4497946  0.0331081611 0.2442956 0.2624796 0.2649207 0.2608630 #> CX101 -0.4692319  0.0043634619 0.2378653 0.2518208 0.2526481 0.2438136 #> CX102 -0.4905300  0.0270883163 0.2294066 0.2431466 0.2477034 0.2460992 #> CX103 -0.4629903 -0.0081103619 0.2330432 0.2540206 0.2680640 0.2619114 #> CX104 -0.4757764  0.0111846575 0.2390570 0.2481937 0.2531685 0.2502457 #> CX105 -0.4707200  0.0024658276 0.2374990 0.2481015 0.2533622 0.2493150 #> CX106 -0.4721575  0.0364674010 0.2257939 0.2468190 0.2503209 0.2461980 #> CX107 -0.4586349  0.0375380173 0.2269382 0.2486108 0.2540931 0.2493498 #> CX108 -0.4555822  0.0433235841 0.2531397 0.2676689 0.2665428 0.2576097 #> CX109 -0.4673782  0.0307466957 0.2398543 0.2519916 0.2555273 0.2465431 #> CX110 -0.4674122 -0.0003222505 0.2453396 0.2530069 0.2577360 0.2522668 #> CX111 -0.4688050  0.0171390626 0.2322253 0.2482204 0.2509553 0.2498708 #> CX112 -0.4611885  0.0166490429 0.2453478 0.2565835 0.2619681 0.2541912 #> CX113 -0.4786753 -0.0009889972 0.2483928 0.2516808 0.2503696 0.2475798 #> CX114 -0.4534517  0.0315357559 0.2316239 0.2553673 0.2601520 0.2521237 #> CX115 -0.4519892  0.0053453871 0.2161357 0.2455742 0.2572942 0.2544695 #> CX116 -0.4664726  0.0505761629 0.2327811 0.2532666 0.2556895 0.2492648 #> CX117 -0.4699322  0.0067800321 0.2546779 0.2582515 0.2585119 0.2545017 #> CX118 -0.4743596  0.0174407482 0.2365392 0.2531061 0.2591999 0.2548841 #> CX119 -0.4852456  0.0178494773 0.2342953 0.2532951 0.2602392 0.2546899 #> CX120 -0.4584556  0.0247948239 0.2311389 0.2564422 0.2619657 0.2556872 #> CX121 -0.4786715 -0.0098771771 0.2132974 0.2425027 0.2597399 0.2573738 #> CX122 -0.4807543  0.0198286069 0.2200394 0.2448613 0.2524591 0.2488141 #> CX123 -0.4702682  0.0047998520 0.2179940 0.2374435 0.2468581 0.2448316 #> CX124 -0.4749652  0.0257023372 0.2346474 0.2481868 0.2486190 0.2419842 #> CX125 -0.4699447  0.0015294908 0.2237478 0.2492571 0.2553474 0.2514616 #> DE126 -0.4610240  0.0098009883 0.2072649 0.2380380 0.2459232 0.2479743 #> DE127 -0.4591336 -0.0137804922 0.2347116 0.2533782 0.2605132 0.2518624 #>              x7        x8         x9          x10         x11        x12 #> AN1   0.2299132 0.2029523 0.12754162  0.042182258 -0.06705386 -0.4080934 #> AN2   0.2316637 0.1951394 0.14525661  0.046692739 -0.05400733 -0.4022972 #> AN3   0.2370495 0.1959378 0.12519983  0.014979026 -0.07538362 -0.4104857 #> AN4   0.2423502 0.1836886 0.11677357  0.017108857 -0.09535549 -0.3867750 #> AN5   0.2156942 0.1902824 0.12379899  0.037980571 -0.05810728 -0.4262095 #> AN6   0.2406748 0.2071285 0.13563608  0.022921784 -0.08840736 -0.4054317 #> AN7   0.2386089 0.1839125 0.14393189  0.015529416 -0.06601273 -0.3936616 #> AN8   0.2372610 0.1814280 0.10209739  0.017559790 -0.08976669 -0.4074332 #> AN9   0.2404959 0.1990063 0.13533299  0.022888995 -0.05166237 -0.4022091 #> AN10  0.2380631 0.1927745 0.12773111  0.023555421 -0.05535730 -0.4076816 #> AN11  0.2337952 0.1861500 0.12490842  0.034650317 -0.06861235 -0.4066079 #> TO12  0.2319654 0.1948143 0.11634810  0.010289772 -0.09517636 -0.4024563 #> WY13  0.2429500 0.2027251 0.11103405  0.015210900 -0.10773718 -0.4160152 #> WY14  0.2264757 0.1880802 0.12874425  0.047463769 -0.05674451 -0.4140549 #> WY15  0.2411312 0.1939658 0.12726697  0.028109702 -0.10622496 -0.4001009 #> WY16  0.2348279 0.1856137 0.12656646  0.022195509 -0.09799700 -0.4148173 #> UR17  0.2256359 0.1819762 0.11874875  0.030205566 -0.14620317 -0.3989015 #> UR18  0.2191726 0.1787242 0.11725644  0.035971318 -0.13829494 -0.4153716 #> UR19  0.2370094 0.1772675 0.10888634  0.033122053 -0.15096989 -0.3941168 #> UR20  0.2358529 0.1948558 0.12381844  0.039454341 -0.14588000 -0.4219834 #> CA21  0.2283203 0.1786453 0.11024649  0.011450452 -0.08813603 -0.4023493 #> CA22  0.2353073 0.1700845 0.10343629  0.023933224 -0.08859335 -0.4124978 #> CA23  0.2316811 0.1705135 0.10883994  0.016240897 -0.09614337 -0.4116485 #> CA24  0.2411870 0.1861375 0.10941810  0.025545675 -0.07374133 -0.3933004 #> CA25  0.2246680 0.1693253 0.11010653  0.015072380 -0.10079955 -0.4053513 #> CA26  0.2406196 0.1949255 0.13302253  0.034746032 -0.06341431 -0.4087796 #> CA27  0.2523273 0.2018624 0.10170951  0.028067192 -0.05578732 -0.3953147 #> OR28  0.2382177 0.1847685 0.12537017  0.037917311 -0.03948366 -0.4183748 #> MA29  0.2188114 0.1680060 0.12041047  0.028168458 -0.06859047 -0.3959214 #> MA30  0.2320145 0.1826054 0.10832796  0.038212321 -0.05391403 -0.4119382 #> MA31  0.2160846 0.1739956 0.11601883  0.037618441 -0.06334261 -0.4052627 #> PS32  0.2219508 0.1756635 0.10698420  0.031101903 -0.06916025 -0.4093229 #> PS33  0.2230743 0.1735176 0.11025278 -0.001058697 -0.08194420 -0.4054739 #> PS34  0.2128262 0.1807335 0.11093134  0.027976227 -0.07595346 -0.4223508 #> PS35  0.2397646 0.1978324 0.10179981  0.010201778 -0.08341705 -0.4070977 #> PS36  0.2276580 0.1737842 0.11977437  0.027760114 -0.06736491 -0.4160846 #> PS37  0.2241077 0.1838799 0.10808681  0.037746145 -0.05996708 -0.4100509 #> PS38  0.2292366 0.1882440 0.12219662  0.016952089 -0.09256166 -0.4052013 #> PS39  0.2392189 0.1905865 0.11587287  0.036269066 -0.09184273 -0.4124714 #> PS40  0.2256842 0.1818852 0.10862069  0.034456039 -0.07103136 -0.4122096 #> PS41  0.2427152 0.2024380 0.11492685  0.045251862 -0.07616414 -0.3994672 #> PS42  0.2300983 0.1856700 0.11236211  0.045307471 -0.04888561 -0.4157182 #> PS43  0.2230354 0.1755287 0.09157707  0.010204003 -0.08853094 -0.4031586 #> AE44  0.2379333 0.1778025 0.10740209  0.029505988 -0.06631350 -0.3999825 #> AE45  0.2296212 0.1927084 0.12015866  0.030523858 -0.08138917 -0.4164703 #> AE46  0.2260410 0.1882752 0.11506319  0.039630127 -0.07170307 -0.4128322 #> AE47  0.2336590 0.2022006 0.12438902  0.019005338 -0.10647131 -0.4066207 #> AE48  0.2213836 0.1733830 0.10626360  0.014883547 -0.11623004 -0.3996691 #> AE49  0.2330862 0.2023845 0.12885279  0.036371756 -0.06761234 -0.4001142 #> AE50  0.2316834 0.1912755 0.10355014  0.009909262 -0.08625418 -0.4127075 #> AE51  0.2350902 0.1755556 0.11998012  0.031372778 -0.04560103 -0.3918887 #> AE52  0.2266644 0.1922767 0.12813684  0.042501215 -0.06523957 -0.4062565 #> AE53  0.2271519 0.1847728 0.12010385  0.031181320 -0.07172065 -0.4149213 #> AE54  0.2219091 0.1785521 0.10673129  0.026300268 -0.08067577 -0.4179231 #> AE55  0.2412285 0.2029947 0.10433063  0.014346500 -0.11417625 -0.3982188 #> AE56  0.2387554 0.1855339 0.11091372  0.032685606 -0.08676041 -0.4106891 #> AE57  0.2230746 0.1710064 0.10686284  0.032430972 -0.06965827 -0.3926581 #> AE58  0.2335399 0.1984260 0.11968260  0.039453573 -0.08111629 -0.4088259 #> AE59  0.2190216 0.1658974 0.10659264  0.019676443 -0.06565151 -0.4075436 #> AE60  0.2207965 0.1892755 0.10485114  0.021230955 -0.10622079 -0.3950189 #> AE61  0.2319673 0.1791207 0.11323873  0.033474919 -0.09117433 -0.4028892 #> AE62  0.2301815 0.1893919 0.12121461  0.026022391 -0.07707926 -0.4106974 #> AE63  0.2353506 0.1848351 0.08901796  0.010846011 -0.07838534 -0.3986001 #> AE64  0.2331246 0.1800663 0.12307053  0.036445810 -0.06265560 -0.3965477 #> AE65  0.2339304 0.1980809 0.11928878  0.036953760 -0.11127081 -0.4115693 #> AE66  0.2265853 0.1781210 0.10019600  0.015003709 -0.10125446 -0.4116335 #> AE67  0.2371114 0.1925200 0.12123028  0.039855216 -0.07915587 -0.4158821 #> AE68  0.2253185 0.1745543 0.11024909  0.026342860 -0.09388029 -0.4084570 #> AE69  0.2304674 0.2000356 0.11907429  0.030358001 -0.07848555 -0.4151259 #> AE70  0.2256643 0.1967240 0.11330103  0.034313115 -0.09143355 -0.4073191 #> AE71  0.2312316 0.1856359 0.11612478  0.037422911 -0.06262702 -0.3944163 #> AE72  0.2230091 0.1702759 0.10187699  0.031247530 -0.08736808 -0.4140867 #> AE73  0.2242534 0.1720954 0.10375972  0.046785537 -0.06541305 -0.3923586 #> AE74  0.2097443 0.1688960 0.10269514  0.023631592 -0.08335478 -0.4180446 #> AE75  0.2312035 0.1721142 0.10056175  0.039650964 -0.06626761 -0.4092941 #> AE76  0.2247807 0.1858490 0.12302800  0.023489034 -0.08625115 -0.4218836 #> AE77  0.2265496 0.1878062 0.12198447  0.017234413 -0.08718955 -0.4026411 #> AE78  0.2194152 0.1797335 0.12830989  0.030379126 -0.07166252 -0.4012513 #> AE79  0.2274608 0.1813567 0.12039160  0.043563110 -0.08266743 -0.3908824 #> AE80  0.2367584 0.1957126 0.11536534  0.034683133 -0.07517053 -0.4148166 #> AE81  0.2343733 0.1963869 0.12072100  0.050079773 -0.05214437 -0.4026463 #> AE82  0.2133248 0.1894671 0.12630310  0.037863142 -0.08518389 -0.3987510 #> AE83  0.2225514 0.1849202 0.13031599  0.030076964 -0.07829979 -0.4112970 #> AE84  0.2302822 0.1895577 0.11475210  0.034240590 -0.08772584 -0.3918702 #> AE85  0.2382525 0.1965061 0.10015703  0.017901979 -0.08122826 -0.4125355 #> AE86  0.2294434 0.1865355 0.12273581  0.050832660 -0.05057700 -0.3965911 #> AE87  0.2324682 0.1835045 0.10520558  0.041487007 -0.06038956 -0.3992214 #> AE88  0.2332422 0.1831163 0.10593246  0.041685157 -0.08181925 -0.4081250 #> AE89  0.2212558 0.1820324 0.11815414  0.024810107 -0.09216662 -0.4064017 #> AE90  0.2271603 0.1874579 0.11703971  0.031601069 -0.07166638 -0.4083849 #> AE91  0.2261588 0.1882372 0.12312647  0.031453724 -0.09623608 -0.4075506 #> AE92  0.2353479 0.1999623 0.11753540  0.033427416 -0.08120016 -0.4114561 #> AE93  0.2231146 0.1718510 0.12078223  0.024568179 -0.09254764 -0.3970457 #> AE94  0.2382167 0.1833966 0.11174608  0.037044261 -0.08277851 -0.3934437 #> AE95  0.2377841 0.1993601 0.13289958  0.041383836 -0.08556380 -0.4059580 #> AE96  0.2381113 0.1993834 0.11319767  0.041158904 -0.08367440 -0.3985118 #> AE97  0.2380356 0.1839470 0.11244138  0.035297701 -0.08215951 -0.3915827 #> AE98  0.2247551 0.1909649 0.11376227  0.030210009 -0.07152469 -0.4098340 #> AE99  0.2327722 0.1991402 0.12883015  0.035614550 -0.08682957 -0.3970737 #> AE100 0.2377580 0.1743137 0.09811410  0.010075437 -0.10567541 -0.3991863 #> CX101 0.2290665 0.1922139 0.11706821  0.047500398 -0.08249422 -0.4052462 #> CX102 0.2293068 0.1760098 0.11789188  0.044774087 -0.06106010 -0.4163814 #> CX103 0.2394979 0.1920586 0.11461307  0.025784000 -0.07999779 -0.3953586 #> CX104 0.2314558 0.1810221 0.12188125  0.041325903 -0.06915492 -0.3990015 #> CX105 0.2371495 0.1899093 0.11308927  0.034297130 -0.04974066 -0.4075275 #> CX106 0.2332277 0.1903543 0.13296141  0.043710407 -0.06453407 -0.4054979 #> CX107 0.2422508 0.1841989 0.13510787  0.046406682 -0.07021143 -0.4072995 #> CX108 0.2320185 0.1680546 0.11720697  0.032792588 -0.05510435 -0.3922454 #> CX109 0.2343839 0.2007389 0.12779590  0.032996512 -0.04694209 -0.4017998 #> CX110 0.2378867 0.1832616 0.12064990  0.046324218 -0.06981407 -0.4050046 #> CX111 0.2273768 0.1904418 0.12950512  0.050550179 -0.04985695 -0.4005184 #> CX112 0.2367948 0.1967518 0.10011721  0.016338760 -0.08055712 -0.3962532 #> CX113 0.2251491 0.1857302 0.11471705  0.052234788 -0.06173698 -0.4012369 #> CX114 0.2314432 0.1909076 0.12299680  0.044322702 -0.07351377 -0.4036653 #> CX115 0.2405785 0.2156480 0.13529727  0.039015077 -0.09269088 -0.4036963 #> CX116 0.2285597 0.1913583 0.11685112  0.030245483 -0.06611537 -0.4063325 #> CX117 0.2364835 0.2008391 0.12727829  0.029801740 -0.05116089 -0.3890976 #> CX118 0.2389982 0.1886799 0.11747954  0.042872595 -0.06481456 -0.4009626 #> CX119 0.2295826 0.1891349 0.11231738  0.031713950 -0.08408367 -0.4007293 #> CX120 0.2347531 0.1915745 0.10999010  0.039159281 -0.07421968 -0.4019501 #> CX121 0.2421442 0.2013319 0.14726099  0.041513595 -0.07229422 -0.3877350 #> CX122 0.2266313 0.1953813 0.12523150  0.036805365 -0.07702428 -0.4115588 #> CX123 0.2370076 0.2174658 0.13148120  0.035194985 -0.07744389 -0.4106482 #> CX124 0.2294273 0.1976867 0.12662777  0.037662621 -0.08984945 -0.4065792 #> CX125 0.2367249 0.1948181 0.12741401  0.043421462 -0.07849225 -0.3991977 #> DE126 0.2335108 0.2054635 0.14075607  0.055477722 -0.03540458 -0.4124649 #> DE127 0.2300548 0.1908648 0.12176640  0.045946556 -0.07661308 -0.4020559 #>              x13        x14         x15          x16        x17        x18 #> AN1   -0.3123874 -0.1758920 0.071132804 -0.053722681 0.05720471 -0.1393805 #> AN2   -0.3867009 -0.1804640 0.049200176 -0.051613533 0.06225198 -0.1450187 #> AN3   -0.3921854 -0.1725842 0.057531080 -0.046893028 0.07666483 -0.1601955 #> AN4   -0.4048396 -0.1528388 0.063248369 -0.054017479 0.07029203 -0.1515230 #> AN5   -0.3959004 -0.1359723 0.078956283 -0.030094227 0.08796636 -0.1332218 #> AN6   -0.3940038 -0.1638546 0.066460419 -0.059913063 0.08088272 -0.1452717 #> AN7   -0.3793327 -0.1586080 0.068320395 -0.043540824 0.08926659 -0.1611703 #> AN8   -0.3920543 -0.1608568 0.048369015 -0.057842665 0.06620852 -0.1409480 #> AN9   -0.3964814 -0.1875675 0.058923841 -0.067584324 0.07882520 -0.1467186 #> AN10  -0.3937555 -0.1815667 0.050151922 -0.063165682 0.06639335 -0.1634576 #> AN11  -0.3998765 -0.1829062 0.079278212 -0.058328570 0.08913645 -0.1586749 #> TO12  -0.3792285 -0.1573091 0.160588922 -0.068449994 0.09810716 -0.1926913 #> WY13  -0.3560161 -0.1633065 0.043039317 -0.024470515 0.04782334 -0.1461281 #> WY14  -0.4119397 -0.1509246 0.025931927 -0.022880971 0.05624500 -0.1465910 #> WY15  -0.3873511 -0.1769486 0.044837998 -0.033642058 0.07252781 -0.1262252 #> WY16  -0.4053355 -0.1447852 0.041124932 -0.041619850 0.06150684 -0.1330420 #> UR17  -0.3795187 -0.1499897 0.112096041 -0.075700284 0.09462930 -0.1378847 #> UR18  -0.3667555 -0.1229772 0.135646552 -0.069063838 0.08232154 -0.1093214 #> UR19  -0.3734347 -0.1520523 0.141092065 -0.079853773 0.09743056 -0.1332523 #> UR20  -0.3307397 -0.1264103 0.083589542 -0.080261106 0.05968488 -0.1212670 #> CA21  -0.3915900 -0.1669786 0.092579729 -0.022158130 0.07397812 -0.1308064 #> CA22  -0.3938010 -0.1952350 0.063030200 -0.026379879 0.08437946 -0.1194480 #> CA23  -0.3978962 -0.1730481 0.047273593 -0.028019393 0.04890647 -0.1231193 #> CA24  -0.3836838 -0.2047323 0.044936652 -0.037354246 0.05305631 -0.1301203 #> CA25  -0.3867403 -0.1712789 0.067968322 -0.024498614 0.04416991 -0.1390823 #> CA26  -0.3937400 -0.1660372 0.065363612 -0.047291844 0.05142893 -0.1513329 #> CA27  -0.3681559 -0.1830495 0.018062775 -0.034573946 0.05424041 -0.1835350 #> OR28  -0.3922121 -0.1705467 0.068579295 -0.039999358 0.03187299 -0.1074308 #> MA29  -0.3876047 -0.1755705 0.055627902 -0.048117812 0.02617888 -0.1621226 #> MA30  -0.3983553 -0.1747881 0.060321100 -0.015576724 0.04797223 -0.1327685 #> MA31  -0.3858714 -0.1908211 0.070178695 -0.027140640 0.06411273 -0.1316847 #> PS32  -0.4009013 -0.1701479 0.076133748 -0.025721102 0.07937010 -0.1040872 #> PS33  -0.3999745 -0.1598414 0.085627861 -0.012988219 0.07775493 -0.1187115 #> PS34  -0.3997804 -0.1595394 0.079226181  0.001378733 0.08299836 -0.1042104 #> PS35  -0.3917380 -0.1723098 0.063434377 -0.027320762 0.07315293 -0.1358608 #> PS36  -0.3957244 -0.1826283 0.070455306 -0.017542694 0.07782886 -0.1225652 #> PS37  -0.4031093 -0.1676375 0.073776707 -0.012313027 0.09290963 -0.1426835 #> PS38  -0.3943966 -0.1539762 0.075629598 -0.024301247 0.08226797 -0.1411489 #> PS39  -0.3908186 -0.1753054 0.068416040 -0.026234475 0.07275579 -0.1426104 #> PS40  -0.3970239 -0.1774955 0.077246950 -0.032428935 0.04948173 -0.1445656 #> PS41  -0.3851949 -0.1903692 0.056899382 -0.025993187 0.05120127 -0.1455207 #> PS42  -0.3952832 -0.1857938 0.096292088 -0.008344338 0.07966704 -0.1311093 #> PS43  -0.3869340 -0.2037884 0.094782316 -0.020211736 0.07961082 -0.1505692 #> AE44  -0.3935808 -0.1687313 0.080418789 -0.019593863 0.05651851 -0.1429755 #> AE45  -0.4043663 -0.1807524 0.080066700 -0.027367399 0.08757207 -0.1283663 #> AE46  -0.3877556 -0.1826371 0.068465989 -0.028746613 0.07764665 -0.1409232 #> AE47  -0.3953208 -0.1927835 0.053055706 -0.011260156 0.07280239 -0.1237115 #> AE48  -0.3856849 -0.1721881 0.080969398 -0.002019639 0.07130260 -0.1251923 #> AE49  -0.3798684 -0.2306110 0.057022040 -0.031685345 0.06830318 -0.1413658 #> AE50  -0.3898933 -0.1678589 0.081555287 -0.018531416 0.07924866 -0.1332756 #> AE51  -0.3814383 -0.2113389 0.080188309 -0.031438772 0.05430921 -0.1393203 #> AE52  -0.4018099 -0.1968956 0.074185015 -0.016768536 0.05762562 -0.1218164 #> AE53  -0.3956962 -0.1790955 0.093343932 -0.008269994 0.09425627 -0.1248207 #> AE54  -0.3988053 -0.1755086 0.100664053 -0.007742611 0.07639270 -0.1317456 #> AE55  -0.3830524 -0.1814467 0.065155781 -0.040471766 0.07364275 -0.1574346 #> AE56  -0.3906408 -0.1710974 0.074709004 -0.015546169 0.07476288 -0.1472765 #> AE57  -0.3987688 -0.1707297 0.079379215 -0.010544594 0.05237139 -0.1272180 #> AE58  -0.3895450 -0.1739227 0.048346680 -0.040154525 0.06825117 -0.1545096 #> AE59  -0.4000550 -0.1802010 0.085429434 -0.011765784 0.08507985 -0.1279580 #> AE60  -0.3844530 -0.1869755 0.067673441 -0.014802941 0.08506475 -0.1304661 #> AE61  -0.3872808 -0.1838364 0.072708144 -0.022088293 0.07101851 -0.1276127 #> AE62  -0.3980835 -0.1558501 0.072920769 -0.030383001 0.07145942 -0.1375049 #> AE63  -0.3819749 -0.1892579 0.073253276 -0.009680803 0.07092440 -0.1374394 #> AE64  -0.3830723 -0.1818841 0.083419843 -0.020792424 0.05516603 -0.1400750 #> AE65  -0.3950954 -0.1713184 0.056778156 -0.010587947 0.09200406 -0.1327086 #> AE66  -0.3920177 -0.1764438 0.105836190 -0.012763450 0.09219496 -0.1267756 #> AE67  -0.4005061 -0.1817317 0.072579788 -0.005837986 0.08265020 -0.1212986 #> AE68  -0.3979286 -0.1964838 0.096764243 -0.002088618 0.07331423 -0.1273690 #> AE69  -0.3988875 -0.1559526 0.077236543 -0.023061279 0.07910975 -0.1319191 #> AE70  -0.3925072 -0.1727990 0.071299724 -0.019968087 0.07592270 -0.1378603 #> AE71  -0.3861925 -0.2024340 0.082151905 -0.015697031 0.07097288 -0.1348231 #> AE72  -0.3940800 -0.1874311 0.106283254 -0.007228361 0.09394314 -0.1212455 #> AE73  -0.3897005 -0.1879595 0.088836487 -0.026457001 0.04951382 -0.1324029 #> AE74  -0.3997937 -0.1524768 0.093802325  0.008109828 0.08592517 -0.1082014 #> AE75  -0.3970993 -0.1817829 0.093102758 -0.006807875 0.06061804 -0.1151656 #> AE76  -0.3955195 -0.1880763 0.103382907 -0.001083329 0.09360505 -0.1263704 #> AE77  -0.3889041 -0.1764796 0.079500830 -0.013542644 0.07981560 -0.1254420 #> AE78  -0.4099100 -0.1776684 0.069460737 -0.014974501 0.06651128 -0.1220949 #> AE79  -0.3773595 -0.2131280 0.076032489 -0.025486291 0.06233346 -0.1314012 #> AE80  -0.3849712 -0.2015281 0.081245884 -0.015415381 0.07882854 -0.1277587 #> AE81  -0.3812278 -0.2125832 0.060469074 -0.023877574 0.04899794 -0.1542995 #> AE82  -0.3898835 -0.1813821 0.100777839 -0.020363389 0.08602870 -0.1271990 #> AE83  -0.3851831 -0.1927737 0.088931898 -0.020963427 0.04294136 -0.1241991 #> AE84  -0.3794734 -0.1952869 0.062647361 -0.030900169 0.06101529 -0.1375591 #> AE85  -0.3984306 -0.1647072 0.048201877 -0.028486708 0.06931371 -0.1358889 #> AE86  -0.3809376 -0.1916173 0.056772111 -0.028475690 0.04954339 -0.1571078 #> AE87  -0.3873660 -0.1718767 0.049172441 -0.025198075 0.04745461 -0.1635640 #> AE88  -0.4036821 -0.1483002 0.043892652 -0.022359235 0.05684484 -0.1355545 #> AE89  -0.3990820 -0.1741903 0.078732121 -0.032661266 0.06575081 -0.1459775 #> AE90  -0.3866222 -0.1734202 0.074626665 -0.009459741 0.06415615 -0.1319939 #> AE91  -0.3897621 -0.1817775 0.090853341 -0.016262267 0.08433507 -0.1177673 #> AE92  -0.3899454 -0.1846729 0.060100544 -0.018845258 0.07646573 -0.1481314 #> AE93  -0.3837723 -0.1777953 0.105572746 -0.007698944 0.09114540 -0.1364939 #> AE94  -0.3859287 -0.1779382 0.049182813 -0.028392318 0.06120780 -0.1449260 #> AE95  -0.3852472 -0.1989100 0.067213272 -0.018272744 0.06964813 -0.1551490 #> AE96  -0.3886513 -0.1801433 0.048923673 -0.037275416 0.03195851 -0.1735086 #> AE97  -0.3717321 -0.1604576 0.066787089 -0.040595352 0.04740382 -0.1708025 #> AE98  -0.3945421 -0.1857716 0.065278055 -0.017262292 0.08878564 -0.1406077 #> AE99  -0.3820466 -0.2084944 0.055519925 -0.037125707 0.06705659 -0.1372445 #> AE100 -0.3903980 -0.1879970 0.058003315 -0.034426867 0.06144086 -0.1378944 #> CX101 -0.4020885 -0.1791160 0.048786174 -0.024150254 0.06711276 -0.1299322 #> CX102 -0.3976002 -0.1598676 0.044080347 -0.012590737 0.07109391 -0.1385710 #> CX103 -0.3778145 -0.1965009 0.043332770 -0.021978126 0.06459107 -0.1541661 #> CX104 -0.3920948 -0.1905712 0.044782493 -0.023836658 0.07315470 -0.1450364 #> CX105 -0.3983841 -0.1772447 0.042035888 -0.017445516 0.05089486 -0.1370570 #> CX106 -0.3853825 -0.1858871 0.029830212 -0.022877381 0.05320887 -0.1525558 #> CX107 -0.3943242 -0.2024597 0.029972543 -0.022749183 0.05178003 -0.1505679 #> CX108 -0.3847865 -0.2059504 0.017680898 -0.061007843 0.03987377 -0.1412352 #> CX109 -0.3909616 -0.1969576 0.007347111 -0.028313790 0.05008241 -0.1456546 #> CX110 -0.3959867 -0.1872205 0.024263790 -0.023041900 0.06640065 -0.1383339 #> CX111 -0.3905637 -0.1997595 0.033330776 -0.026702817 0.05550112 -0.1489101 #> CX112 -0.3859520 -0.1967629 0.042475088 -0.021379935 0.06012648 -0.1452501 #> CX113 -0.3957362 -0.1824494 0.054807087 -0.020058985 0.05965166 -0.1494302 #> CX114 -0.3879005 -0.1893491 0.028159479 -0.030888990 0.05144192 -0.1613051 #> CX115 -0.3951331 -0.1753281 0.038920274 -0.031822228 0.06154232 -0.1591605 #> CX116 -0.3803402 -0.1578348 0.039463402 -0.028570233 0.03924349 -0.1816337 #> CX117 -0.3752952 -0.1812367 0.014102142 -0.044530391 0.03439492 -0.1643696 #> CX118 -0.3784407 -0.1842759 0.020975280 -0.024425083 0.03881369 -0.1417108 #> CX119 -0.3877947 -0.1642730 0.063045598 -0.026611925 0.04439785 -0.1418231 #> CX120 -0.3884471 -0.1835364 0.046813391 -0.029801285 0.04352303 -0.1594322 #> CX121 -0.3858059 -0.1766316 0.029448989 -0.016405347 0.05021469 -0.1574074 #> CX122 -0.3948824 -0.1545773 0.058090941 -0.023721208 0.07347028 -0.1590947 #> CX123 -0.3968212 -0.1614923 0.057831692 -0.026330484 0.07153597 -0.1594401 #> CX124 -0.3968831 -0.1750125 0.063457007 -0.012313821 0.05506986 -0.1534678 #> CX125 -0.3910056 -0.1815608 0.038032701 -0.007173229 0.05915443 -0.1535347 #> DE126 -0.4010722 -0.1869205 0.028587401 -0.042186617 0.07257509 -0.1462993 #> DE127 -0.3907218 -0.2047855 0.046701459 -0.043417728 0.10136732 -0.1466586 #>                 y1         y2         y3         y4         y5            y6 #> AN1    0.012949789 0.08278930 0.08567442 0.04597933 0.02598256  3.150553e-04 #> AN2    0.022620158 0.07814870 0.05998946 0.04206154 0.02339979  6.898275e-03 #> AN3    0.013438475 0.06897223 0.05579946 0.04374581 0.02439000  5.250128e-03 #> AN4    0.014143861 0.07489168 0.07164144 0.04601179 0.02224188  4.645497e-03 #> AN5    0.011166720 0.07229243 0.05230952 0.04250442 0.01956350  3.326619e-03 #> AN6    0.012440946 0.06723327 0.05661890 0.04085779 0.02245431  6.525920e-03 #> AN7    0.023595913 0.07056581 0.07480905 0.05084276 0.02654051  2.098330e-03 #> AN8    0.010319015 0.07836381 0.05633338 0.03994427 0.02322133  1.364182e-02 #> AN9    0.021185977 0.07585612 0.06020996 0.04194706 0.02692072  8.397649e-03 #> AN10   0.013775382 0.07005713 0.05209910 0.03621218 0.01966673  5.732559e-03 #> AN11   0.013524963 0.07047621 0.05383143 0.03813986 0.02386315  6.524021e-03 #> TO12   0.011020896 0.05489808 0.05851446 0.04843418 0.02948179  1.135298e-02 #> WY13   0.012690374 0.08974548 0.07154950 0.05142613 0.03115442  7.945565e-03 #> WY14   0.006838952 0.07425376 0.05855540 0.03951210 0.01684673  4.686961e-03 #> WY15   0.012327190 0.07389979 0.05676065 0.04216671 0.02130888  6.762512e-03 #> WY16   0.012734077 0.07486281 0.06343993 0.04269533 0.02284658  8.148998e-03 #> UR17  -0.002272445 0.08504411 0.06568723 0.04988277 0.02803984  2.399601e-03 #> UR18   0.010595208 0.08716386 0.07508599 0.05911723 0.04078312  1.775779e-02 #> UR19   0.005508873 0.06909879 0.06119788 0.04581264 0.02498341  8.528148e-03 #> UR20   0.012396411 0.07799239 0.07198516 0.05098737 0.02522046  5.626080e-03 #> CA21   0.002635902 0.09440017 0.07134001 0.04688346 0.02345164  6.454919e-03 #> CA22   0.015744194 0.08724373 0.07052453 0.04828188 0.03276292  1.179454e-02 #> CA23   0.013027883 0.08808348 0.05921609 0.04609833 0.02443344  6.819944e-03 #> CA24   0.018277036 0.08648570 0.06951016 0.04686661 0.02521702  5.385714e-03 #> CA25   0.008599950 0.08815717 0.06935643 0.05183313 0.03086332  7.787913e-03 #> CA26   0.020834507 0.05992072 0.05711972 0.03839133 0.02688537  1.015034e-02 #> CA27   0.016367946 0.08527756 0.07076670 0.05317126 0.02914834  5.178037e-03 #> OR28   0.016827832 0.07461198 0.07442280 0.04643065 0.02768371 -1.428860e-03 #> MA29   0.010507548 0.08627604 0.05969102 0.04561603 0.02654038  8.884358e-03 #> MA30   0.025995072 0.08319459 0.06945754 0.05089690 0.02871595  6.842935e-03 #> MA31   0.011798644 0.08595290 0.07149388 0.04904952 0.01922665 -6.100331e-05 #> PS32   0.020858385 0.08883745 0.07127037 0.05320765 0.02642967  1.005285e-02 #> PS33   0.019564176 0.09107797 0.08038467 0.06757304 0.03450430  3.602802e-03 #> PS34   0.023210109 0.08901869 0.06173608 0.05023270 0.03095637  1.226244e-02 #> PS35   0.014353551 0.07699700 0.06095585 0.04185292 0.02578438  9.105854e-03 #> PS36   0.016665841 0.08692672 0.07172546 0.04794591 0.02378877  3.989454e-03 #> PS37   0.017832570 0.09050827 0.06565900 0.04890781 0.02110664  3.045869e-03 #> PS38   0.020272149 0.07495732 0.06588390 0.04780263 0.02331908  8.794902e-03 #> PS39   0.024672051 0.08031432 0.06721244 0.05284589 0.03114989  1.041525e-02 #> PS40   0.022707637 0.08147540 0.06533484 0.05252109 0.03007380  1.088509e-02 #> PS41   0.031617885 0.08831678 0.07838941 0.05979106 0.03143316  1.214333e-02 #> PS42   0.032775200 0.08160316 0.07927849 0.04794666 0.02364906  4.957452e-03 #> PS43   0.009549895 0.09705840 0.06595407 0.05464080 0.02973277  7.712228e-03 #> AE44   0.024194386 0.08043082 0.06281371 0.05271229 0.03342474  1.450789e-02 #> AE45   0.020043767 0.07464976 0.06346404 0.05108001 0.03319453  1.238207e-02 #> AE46   0.028843141 0.08336736 0.06916145 0.04413785 0.02509013  7.798185e-03 #> AE47   0.019762588 0.08711498 0.07134883 0.04412614 0.03008310  8.471292e-03 #> AE48   0.004400251 0.07889303 0.05925122 0.04868763 0.02847921  1.129694e-02 #> AE49   0.028804164 0.07968806 0.07268678 0.04628811 0.02623977  5.219770e-03 #> AE50   0.017152508 0.09150904 0.06579800 0.04675409 0.02993258  5.432006e-03 #> AE51   0.024244112 0.10035814 0.07848335 0.05257736 0.02630567  8.506299e-03 #> AE52   0.016687543 0.08215637 0.07006422 0.05467560 0.02854618  8.874160e-03 #> AE53   0.020866743 0.08293980 0.07177936 0.04937694 0.02587003  1.214336e-03 #> AE54   0.016303084 0.08395002 0.06313701 0.04778874 0.03048500  9.340067e-03 #> AE55   0.009794674 0.06923412 0.05935067 0.04571206 0.02509890  7.988179e-03 #> AE56   0.022976188 0.06985700 0.07120533 0.05037744 0.02676315  6.480065e-03 #> AE57   0.014463513 0.08643381 0.06277860 0.04806000 0.02984945  7.880581e-03 #> AE58   0.024562376 0.08351377 0.07057086 0.04923052 0.02851743  1.091822e-02 #> AE59   0.018360929 0.07068281 0.07225106 0.04599054 0.02680356  4.512518e-03 #> AE60   0.020595403 0.09656929 0.08363540 0.06054622 0.02756263  5.413022e-03 #> AE61   0.018530058 0.07997438 0.06974188 0.04297306 0.02953858  9.299743e-03 #> AE62   0.007576305 0.06729175 0.06139850 0.04746917 0.02336475  2.961155e-03 #> AE63   0.015957414 0.08932474 0.07748263 0.05121790 0.02760974  9.750227e-03 #> AE64   0.033051290 0.07655371 0.06347002 0.05159245 0.03439265  1.277309e-02 #> AE65   0.027086223 0.07637610 0.06279530 0.04671867 0.02849960  1.438764e-02 #> AE66   0.018674566 0.09197399 0.07371724 0.05663273 0.02899414  6.109633e-03 #> AE67   0.028409424 0.07503364 0.07199975 0.05225904 0.02612058  7.194398e-03 #> AE68   0.017466427 0.08541910 0.07149689 0.04934195 0.02673386  5.606712e-03 #> AE69   0.025427691 0.07950054 0.06692939 0.04794946 0.02610897  1.075827e-02 #> AE70   0.024397497 0.08676899 0.07352538 0.04876882 0.02613623  7.740551e-03 #> AE71   0.025306610 0.09828523 0.07485413 0.04943489 0.02751513  6.540573e-03 #> AE72   0.018994708 0.08320701 0.07058901 0.05058892 0.02896517  9.816870e-03 #> AE73   0.017638669 0.08081453 0.06154661 0.04410005 0.02802859  4.977306e-03 #> AE74   0.013866970 0.08996534 0.08134595 0.05468616 0.02919334  1.030476e-03 #> AE75   0.019051266 0.08460450 0.06512687 0.05012725 0.02933960  1.204551e-02 #> AE76   0.024064241 0.08748911 0.06281835 0.04649284 0.02840376  1.019351e-02 #> AE77   0.019637439 0.08254312 0.07454355 0.05421194 0.03101338  9.705051e-03 #> AE78   0.020664576 0.08301491 0.06995436 0.04929145 0.02794066  7.814539e-03 #> AE79   0.019112716 0.08929033 0.07642541 0.04518694 0.02111029  5.806409e-03 #> AE80   0.020532270 0.07974954 0.06548313 0.04348238 0.02390729  8.908130e-03 #> AE81   0.032653485 0.09655472 0.07136094 0.05478530 0.03003749  9.625963e-03 #> AE82   0.016068078 0.09009160 0.07315928 0.05722988 0.03114905  8.837045e-03 #> AE83   0.011847216 0.08855522 0.07342359 0.05071607 0.02749338 -1.261610e-03 #> AE84   0.016668378 0.09927702 0.07453788 0.05663099 0.03280063  1.258835e-02 #> AE85   0.018956670 0.09108967 0.06777101 0.04204491 0.02751666  8.322889e-03 #> AE86   0.024398933 0.09834638 0.06994284 0.05154644 0.02823738  9.007741e-03 #> AE87   0.023684110 0.08553089 0.06985999 0.04973592 0.03075232  4.770671e-03 #> AE88   0.009086931 0.08497514 0.05602979 0.04052918 0.02196141  4.263640e-03 #> AE89   0.008697268 0.09415668 0.06619343 0.04559618 0.02268657  6.387914e-03 #> AE90   0.023592133 0.09288445 0.06780117 0.04761940 0.02373946  7.450863e-03 #> AE91   0.027587546 0.08739037 0.07424035 0.05285224 0.03121011  1.336585e-02 #> AE92   0.020877783 0.08354286 0.06453034 0.04529757 0.02508348  2.693451e-03 #> AE93   0.020362274 0.08839049 0.07280876 0.05736176 0.02925530  1.288949e-02 #> AE94   0.018616034 0.07857938 0.06210432 0.04488612 0.02620036  7.954699e-03 #> AE95   0.017466278 0.06626332 0.05950030 0.04144645 0.02093498  8.848699e-03 #> AE96   0.020801841 0.09324421 0.06773196 0.05463775 0.03234757  7.940429e-03 #> AE97   0.014952865 0.07896182 0.07300224 0.04985563 0.02788274  9.014158e-03 #> AE98   0.018048187 0.08218978 0.05785822 0.04056802 0.02329700  4.652032e-03 #> AE99   0.020083707 0.07576149 0.06395041 0.04630429 0.02900600  1.089936e-02 #> AE100  0.015824036 0.08821053 0.07491340 0.05309966 0.03213898  1.087831e-02 #> CX101  0.018795318 0.08935829 0.06789318 0.04795560 0.02523486  6.371738e-03 #> CX102  0.016523832 0.07645851 0.05814991 0.04824675 0.03385777  1.273612e-02 #> CX103  0.015546955 0.08786844 0.07200134 0.05340679 0.02005302  5.641727e-03 #> CX104  0.017186716 0.09086700 0.06213183 0.04676279 0.02521286  5.651021e-03 #> CX105  0.024732997 0.08784311 0.07192773 0.05218250 0.02508507  8.998762e-03 #> CX106  0.025857951 0.09772122 0.07359955 0.04628790 0.02514650  5.161054e-03 #> CX107  0.021438025 0.08574030 0.06659796 0.04418656 0.02230971  5.480441e-03 #> CX108  0.021697750 0.09066793 0.06603259 0.04953728 0.02503477  8.608714e-03 #> CX109  0.023769465 0.08002066 0.05865615 0.04432315 0.02486665  8.734026e-03 #> CX110  0.016554284 0.07594482 0.05471561 0.04478128 0.02505230  7.362556e-03 #> CX111  0.027261641 0.08863600 0.06600806 0.04864079 0.02950304  1.095938e-02 #> CX112  0.011567345 0.09504327 0.06914602 0.05050347 0.02412777  6.095360e-03 #> CX113  0.019372724 0.07856295 0.05797215 0.04557766 0.02528808  7.191655e-03 #> CX114  0.023230961 0.08830329 0.07676627 0.05220000 0.03012530  7.966660e-03 #> CX115  0.027645207 0.08323054 0.07204438 0.05037670 0.02389914  4.849303e-03 #> CX116  0.012671316 0.09954405 0.07257560 0.05202289 0.02616604  8.007566e-03 #> CX117  0.015588267 0.09102118 0.05090721 0.04192613 0.02375173  1.124011e-02 #> CX118  0.031458141 0.09238535 0.06813825 0.05207771 0.02839224  1.141056e-02 #> CX119  0.013748165 0.08552154 0.06632546 0.05062110 0.02802667  4.635430e-03 #> CX120  0.018452306 0.09280082 0.07952526 0.05129996 0.02550388  3.429387e-03 #> CX121  0.020419316 0.07808530 0.06910902 0.04830133 0.02437463  1.095195e-02 #> CX122  0.020437652 0.08050253 0.07033136 0.04799342 0.02581098  5.994960e-03 #> CX123  0.020778083 0.08042975 0.06478748 0.04765908 0.02367922  3.633548e-03 #> CX124  0.008692130 0.08303546 0.05963710 0.04238139 0.02053006  4.573956e-03 #> CX125  0.024193003 0.08506648 0.07389227 0.05162124 0.02943930  1.075803e-02 #> DE126  0.028740812 0.08903327 0.07586163 0.04853023 0.02610944  1.496756e-03 #> DE127  0.017573580 0.07459253 0.06140529 0.04375617 0.02306513  3.169474e-03 #>                 y7          y8          y9         y10         y11          y12 #> AN1   -0.022666314 -0.04495128 -0.07380235 -0.09608732 -0.11021440 -0.016199734 #> AN2   -0.008294587 -0.03422790 -0.05730591 -0.08756992 -0.10378049 -0.017413291 #> AN3   -0.009247883 -0.02947626 -0.04736125 -0.07195961 -0.08694772 -0.022201347 #> AN4   -0.007266518 -0.03817491 -0.06247395 -0.08534776 -0.09214130 -0.014432794 #> AN5   -0.013178097 -0.02962921 -0.05249050 -0.07247827 -0.09789820 -0.022527432 #> AN6   -0.012722770 -0.03281784 -0.05644748 -0.07669058 -0.08936509 -0.019148946 #> AN7   -0.008408792 -0.04279862 -0.05707903 -0.08968988 -0.10007999 -0.014849557 #> AN8   -0.002200848 -0.02722524 -0.05195370 -0.08021449 -0.09296762 -0.022862331 #> AN9   -0.010947676 -0.03524550 -0.05700364 -0.08079711 -0.09458230 -0.018055142 #> AN10  -0.007966654 -0.02926133 -0.04952115 -0.07859991 -0.09286459 -0.018567396 #> AN11  -0.015736928 -0.03610576 -0.05169961 -0.07002402 -0.08335024 -0.020845591 #> TO12  -0.007196761 -0.03202162 -0.05389319 -0.07018859 -0.08636577 -0.012831315 #> WY13  -0.014517432 -0.03556436 -0.06639870 -0.08844776 -0.10389518 -0.030313163 #> WY14  -0.015250720 -0.03483797 -0.05646906 -0.07746212 -0.08907170 -0.019772339 #> WY15  -0.010211930 -0.03618927 -0.05577035 -0.07262279 -0.08100249 -0.020178753 #> WY16  -0.010708481 -0.03415558 -0.05261327 -0.07363348 -0.08843957 -0.016680404 #> UR17  -0.019627397 -0.04068643 -0.05492440 -0.07645589 -0.09901886 -0.025215610 #> UR18  -0.018616124 -0.04695167 -0.06621731 -0.09086570 -0.11264614 -0.015247597 #> UR19  -0.010306625 -0.03187302 -0.04878683 -0.07199789 -0.08545362 -0.022977244 #> UR20  -0.014260396 -0.03870875 -0.06095216 -0.07791609 -0.10059416 -0.029218565 #> CA21  -0.011424835 -0.04241109 -0.06673866 -0.08717433 -0.10073722 -0.013774957 #> CA22  -0.017118972 -0.04456671 -0.06333256 -0.08548463 -0.09971043 -0.022457033 #> CA23  -0.008347883 -0.03668714 -0.05743793 -0.08221906 -0.10008108 -0.029337037 #> CA24  -0.014179955 -0.04065754 -0.06266514 -0.08979362 -0.10879858 -0.023113773 #> CA25  -0.015459966 -0.04556921 -0.06304180 -0.08676862 -0.10417190 -0.027553536 #> CA26  -0.006852774 -0.03087716 -0.05463273 -0.08502000 -0.10069478 -0.014484320 #> CA27  -0.017374727 -0.04566712 -0.06879405 -0.08809265 -0.09723578 -0.021534472 #> OR28  -0.024906613 -0.04860997 -0.06290004 -0.08224867 -0.09509220 -0.010348802 #> MA29  -0.015304956 -0.03905274 -0.05435187 -0.07951367 -0.09998388 -0.021699642 #> MA30  -0.010834828 -0.04016197 -0.06177193 -0.08862342 -0.11328879 -0.023690279 #> MA31  -0.018696436 -0.04114775 -0.05875278 -0.08531003 -0.10616868 -0.020705521 #> PS32  -0.013966342 -0.04517596 -0.06293986 -0.08771783 -0.11564596 -0.016808723 #> PS33  -0.018770501 -0.04766682 -0.07019447 -0.09609560 -0.11240803 -0.028353056 #> PS34  -0.016077185 -0.03892582 -0.06709499 -0.08915360 -0.11262678 -0.031961548 #> PS35  -0.010669404 -0.03446840 -0.05734935 -0.08175206 -0.09968148 -0.023747638 #> PS36  -0.014159752 -0.04084200 -0.05970849 -0.08591500 -0.09594658 -0.024568635 #> PS37  -0.015253852 -0.03496920 -0.06363514 -0.08431507 -0.10396906 -0.023449907 #> PS38  -0.009658641 -0.03155459 -0.05594592 -0.08233475 -0.10136260 -0.022744632 #> PS39  -0.006756077 -0.04002465 -0.06449392 -0.09299131 -0.11489188 -0.022555610 #> PS40  -0.011218252 -0.03616382 -0.06363627 -0.09112784 -0.10907791 -0.026264079 #> PS41  -0.012940371 -0.03946998 -0.07029977 -0.09689176 -0.11705262 -0.018025681 #> PS42  -0.012199593 -0.03887817 -0.06933953 -0.09428498 -0.12869403 -0.020124919 #> PS43  -0.019393904 -0.04308818 -0.06501801 -0.08619796 -0.11211448 -0.031925724 #> AE44  -0.009864032 -0.04162945 -0.06576743 -0.09725932 -0.11364550 -0.019576973 #> AE45  -0.013916993 -0.03736238 -0.06138435 -0.08687628 -0.09975951 -0.016310318 #> AE46  -0.012293031 -0.03405671 -0.05890388 -0.08537348 -0.11204166 -0.031127229 #> AE47  -0.015122615 -0.03729307 -0.06519826 -0.08781795 -0.10306537 -0.022479401 #> AE48  -0.011283848 -0.03764086 -0.06122137 -0.08007018 -0.09322090 -0.020270023 #> AE49  -0.013578564 -0.03320043 -0.06026791 -0.09253288 -0.10541387 -0.023949586 #> AE50  -0.016251885 -0.03720164 -0.06165119 -0.08784147 -0.10495288 -0.033744689 #> AE51  -0.010476511 -0.04660512 -0.06631610 -0.10182189 -0.11801742 -0.017839934 #> AE52  -0.019738467 -0.04341494 -0.06770016 -0.08995689 -0.11162861 -0.009071347 #> AE53  -0.015349580 -0.04042478 -0.06346917 -0.09056545 -0.10531159 -0.021332153 #> AE54  -0.014567417 -0.03743690 -0.06222308 -0.08733919 -0.10858403 -0.022837649 #> AE55  -0.009483085 -0.03298787 -0.05184618 -0.06911137 -0.09089088 -0.022677930 #> AE56  -0.014517252 -0.03572730 -0.05811263 -0.08361669 -0.10120448 -0.018959718 #> AE57  -0.016428768 -0.04444423 -0.06165616 -0.08731023 -0.10897038 -0.023316265 #> AE58  -0.010374273 -0.03231118 -0.06250651 -0.09107635 -0.11401767 -0.018983293 #> AE59  -0.011140219 -0.03426532 -0.05190264 -0.07858311 -0.09563840 -0.016993894 #> AE60  -0.016646973 -0.03728373 -0.06908015 -0.10354720 -0.12250383 -0.021937227 #> AE61  -0.012104480 -0.04374854 -0.06728928 -0.09264702 -0.11459973 -0.018773675 #> AE62  -0.010676452 -0.03345894 -0.05817475 -0.07512250 -0.08493945 -0.014084994 #> AE63  -0.013637658 -0.04137811 -0.06644285 -0.08819460 -0.10472228 -0.025306267 #> AE64  -0.012351366 -0.04001879 -0.06401090 -0.09337149 -0.11519782 -0.028951646 #> AE65  -0.006834492 -0.03207158 -0.06044547 -0.08432522 -0.09764177 -0.023000019 #> AE66  -0.012863697 -0.04182711 -0.06282764 -0.08872958 -0.11093574 -0.022655471 #> AE67  -0.008988133 -0.03836438 -0.06366265 -0.09116318 -0.10318603 -0.018396435 #> AE68  -0.018182938 -0.04065040 -0.05755426 -0.08005239 -0.10330960 -0.026939918 #> AE69  -0.010162744 -0.03434778 -0.06206309 -0.08433742 -0.10618099 -0.017816293 #> AE70  -0.013339125 -0.03087722 -0.06564962 -0.09583501 -0.11751622 -0.017921942 #> AE71  -0.009674615 -0.04047887 -0.06485963 -0.09489162 -0.11794276 -0.019557379 #> AE72  -0.011023048 -0.04144962 -0.06626343 -0.08850403 -0.10321745 -0.024119634 #> AE73  -0.012326640 -0.03771430 -0.06290116 -0.08707121 -0.11479236 -0.027633459 #> AE74  -0.023284290 -0.04456710 -0.06608998 -0.08808926 -0.10563109 -0.027465109 #> AE75  -0.014429655 -0.03968049 -0.06086849 -0.08665282 -0.10597408 -0.021162926 #> AE76  -0.008968325 -0.03792354 -0.06231543 -0.08502937 -0.10297398 -0.030918327 #> AE77  -0.015540834 -0.04290499 -0.06648039 -0.09428362 -0.10514460 -0.020485588 #> AE78  -0.012718208 -0.03826693 -0.06123567 -0.08909879 -0.10689239 -0.023647537 #> AE79  -0.011669590 -0.03582596 -0.06011012 -0.08866414 -0.11624901 -0.018461960 #> AE80  -0.011376774 -0.03653024 -0.06015092 -0.08237761 -0.10362247 -0.018665167 #> AE81  -0.016036431 -0.04029716 -0.07262006 -0.10446181 -0.12391661 -0.024052190 #> AE82  -0.020087830 -0.04201347 -0.07354814 -0.10065621 -0.10940849 -0.011428821 #> AE83  -0.021645529 -0.04539565 -0.06314253 -0.08529895 -0.10442005 -0.021041966 #> AE84  -0.014980325 -0.04246752 -0.06989970 -0.09745781 -0.10994738 -0.017995235 #> AE85  -0.010222911 -0.03959449 -0.06432343 -0.09074464 -0.10642521 -0.025756313 #> AE86  -0.014930629 -0.04480209 -0.06953731 -0.09809488 -0.12409746 -0.032433350 #> AE87  -0.012022788 -0.03779240 -0.06364329 -0.08785353 -0.11595475 -0.025407828 #> AE88  -0.008955694 -0.03275051 -0.05705711 -0.07994982 -0.09844740 -0.025026526 #> AE89  -0.015982691 -0.03740611 -0.05867094 -0.08552491 -0.10024375 -0.025804413 #> AE90  -0.011306378 -0.03521060 -0.06690911 -0.09599275 -0.12234375 -0.029537958 #> AE91  -0.012111344 -0.04106840 -0.07231039 -0.10062439 -0.11553546 -0.025351922 #> AE92  -0.015689253 -0.03491960 -0.05842990 -0.08010586 -0.10556897 -0.024083862 #> AE93  -0.013901076 -0.04308173 -0.06745768 -0.09390358 -0.09889036 -0.023300202 #> AE94  -0.012763836 -0.03714156 -0.06145234 -0.08746265 -0.10258403 -0.019185244 #> AE95  -0.008317134 -0.03318205 -0.05476635 -0.07909102 -0.09724833 -0.021156993 #> AE96  -0.015012694 -0.04126789 -0.06917529 -0.09235024 -0.11303064 -0.027983805 #> AE97  -0.013629341 -0.04202223 -0.06470694 -0.08938782 -0.10634508 -0.014570628 #> AE98  -0.014268236 -0.03160816 -0.05122169 -0.07681646 -0.10049791 -0.024985362 #> AE99  -0.012077336 -0.03512960 -0.06536965 -0.08814244 -0.10843565 -0.015810894 #> AE100 -0.015056303 -0.04452189 -0.06201376 -0.09154554 -0.10155078 -0.028695098 #> CX101 -0.012506215 -0.03810225 -0.06348897 -0.09067708 -0.10433018 -0.018162774 #> CX102 -0.012983929 -0.04180854 -0.05886266 -0.08220843 -0.10445411 -0.010668165 #> CX103 -0.016869427 -0.04349510 -0.06480692 -0.08860946 -0.10069580 -0.025010278 #> CX104 -0.013144831 -0.04263306 -0.06495377 -0.08813451 -0.10489965 -0.022728276 #> CX105 -0.012350189 -0.04220287 -0.06626618 -0.09078704 -0.11120488 -0.017454695 #> CX106 -0.012491167 -0.04111398 -0.06370969 -0.09441199 -0.11527055 -0.023497145 #> CX107 -0.008315049 -0.03997006 -0.05355706 -0.08196831 -0.10487567 -0.017101308 #> CX108 -0.010673165 -0.03906141 -0.05834507 -0.08205253 -0.10100631 -0.022314285 #> CX109 -0.008018621 -0.03278166 -0.05973300 -0.08491355 -0.10133516 -0.018724402 #> CX110 -0.011894825 -0.03700534 -0.05728326 -0.07951859 -0.09869608 -0.017798403 #> CX111 -0.014985750 -0.03983215 -0.06524722 -0.09406644 -0.11797937 -0.017169369 #> CX112 -0.013257204 -0.03887045 -0.06562399 -0.08856518 -0.10527379 -0.021787205 #> CX113 -0.011450525 -0.03243768 -0.05903150 -0.08555464 -0.10609845 -0.015088975 #> CX114 -0.011663783 -0.03826338 -0.06602557 -0.10037116 -0.11768366 -0.016465993 #> CX115 -0.012353681 -0.03551555 -0.06244976 -0.09033097 -0.10471702 -0.019157513 #> CX116 -0.016204202 -0.04316559 -0.06920846 -0.09247241 -0.11333981 -0.024230163 #> CX117 -0.010294909 -0.03367189 -0.06181392 -0.08869494 -0.10357813 -0.020483250 #> CX118 -0.009854288 -0.03844275 -0.06624935 -0.09575786 -0.10947066 -0.031365179 #> CX119 -0.017650235 -0.04023434 -0.05830157 -0.08376944 -0.10011781 -0.023657629 #> CX120 -0.016994086 -0.04075366 -0.06603417 -0.09305920 -0.10748884 -0.025143006 #> CX121 -0.016097956 -0.04470260 -0.06733971 -0.09199145 -0.11052390 -0.013972544 #> CX122 -0.014023818 -0.03254778 -0.05833005 -0.08242031 -0.10218434 -0.014351771 #> CX123 -0.013940498 -0.03357926 -0.06438180 -0.08609256 -0.10173894 -0.018241610 #> CX124 -0.012729199 -0.03257353 -0.05686875 -0.08601868 -0.09105267 -0.021119040 #> CX125 -0.012021816 -0.03914166 -0.06331033 -0.09482505 -0.11425836 -0.009229708 #> DE126 -0.019319910 -0.03999012 -0.06598948 -0.09151587 -0.10655099 -0.009402691 #> DE127 -0.013157041 -0.03350065 -0.05475301 -0.07904062 -0.09178239 -0.020872877 #>               y13        y14        y15         y16           y17         y18 #> AN1   0.031653251 0.03394145 0.05065519 0.023694351 -0.0058531156 -0.02386017 #> AN2   0.023930124 0.02633191 0.03960071 0.017386724 -0.0058883600 -0.02588693 #> AN3   0.016914452 0.01728375 0.03471704 0.011250077 -0.0075009263 -0.01706643 #> AN4   0.007944998 0.02071929 0.04123774 0.023722845 -0.0057300114 -0.02163378 #> AN5   0.024239303 0.02436660 0.04056937 0.019005613 -0.0020748921 -0.01906749 #> AN6   0.014703930 0.02479341 0.04364098 0.020180182 -0.0041146405 -0.01814230 #> AN7   0.023330304 0.02524160 0.04136306 0.017184102 -0.0147098834 -0.02795570 #> AN8   0.012717785 0.02065677 0.03952636 0.014507114 -0.0089944390 -0.02281300 #> AN9   0.019749885 0.02201980 0.03843079 0.012804281 -0.0100737547 -0.02081712 #> AN10  0.010656820 0.02236025 0.04272360 0.021347941 -0.0036869423 -0.01416372 #> AN11  0.009339839 0.02218767 0.04330031 0.020130765 -0.0068556079 -0.01670046 #> TO12  0.012542711 0.01495272 0.04138213 0.009940141 -0.0082878628 -0.02173497 #> WY13  0.025506841 0.02470727 0.04155787 0.016111610 -0.0090264837 -0.02423198 #> WY14  0.015089999 0.03185406 0.04444696 0.024840804 -0.0064136917 -0.01764814 #> WY15  0.011286902 0.02144045 0.03722986 0.016704989 -0.0056998378 -0.01821252 #> WY16  0.009266234 0.01941323 0.03907200 0.015109806 -0.0060277218 -0.02533050 #> UR17  0.011366859 0.03519135 0.05027222 0.022840549 -0.0101491833 -0.02237430 #> UR18  0.016039551 0.03801945 0.05674724 0.011803866 -0.0232327002 -0.03933606 #> UR19  0.015607256 0.02687834 0.04595487 0.013225571 -0.0178589142 -0.02754166 #> UR20  0.016589336 0.03070214 0.04560762 0.017645589 -0.0102842014 -0.02281823 #> CA21  0.012199133 0.03094133 0.04865604 0.019396951 -0.0052322022 -0.02886625 #> CA22  0.012822346 0.02598790 0.04731617 0.018519444 -0.0111925712 -0.02713474 #> CA23  0.009232801 0.02496965 0.04993777 0.023999457 -0.0025086781 -0.02920003 #> CA24  0.019171445 0.03433137 0.04741436 0.020599082 -0.0074399680 -0.02660992 #> CA25  0.009566033 0.02658144 0.05113483 0.022691958 -0.0020231414 -0.02198399 #> CA26  0.017524234 0.02454569 0.03994687 0.019174759 -0.0005099502 -0.02142183 #> CA27  0.018046519 0.02646747 0.04038172 0.018052689 -0.0098840617 -0.01427539 #> OR28  0.017944287 0.03140055 0.04424794 0.027462220 -0.0063186282 -0.02917818 #> MA29  0.012586080 0.02288037 0.04696049 0.021867340 -0.0018019964 -0.03010091 #> MA30  0.020154213 0.02900446 0.04106282 0.017263472 -0.0109026150 -0.02331410 #> MA31  0.014369888 0.02456438 0.04953818 0.027385068 -0.0047871505 -0.01774976 #> PS32  0.015373535 0.02680157 0.04710279 0.021307525 -0.0071921204 -0.03179500 #> PS33  0.022336072 0.02810195 0.05024300 0.022540270 -0.0111040272 -0.03533574 #> PS34  0.020315464 0.03303756 0.04869750 0.021234398 -0.0072347126 -0.02762668 #> PS35  0.012788035 0.02439453 0.04751539 0.020824472 -0.0076933034 -0.01921035 #> PS36  0.020300111 0.02820023 0.04385212 0.017569210 -0.0109004659 -0.02892289 #> PS37  0.019334246 0.02777829 0.04141996 0.018432920 -0.0056363825 -0.02279697 #> PS38  0.014203886 0.01976390 0.03926354 0.018373256 -0.0064799250 -0.02255351 #> PS39  0.018807152 0.02727129 0.04427371 0.020818172 -0.0084929742 -0.02757373 #> PS40  0.017286358 0.02264821 0.04726978 0.019224306 -0.0070545666 -0.02488379 #> PS41  0.026375073 0.02492808 0.03676656 0.010547022 -0.0160261360 -0.02960204 #> PS42  0.024353039 0.02959271 0.04752195 0.018790914 -0.0033314324 -0.02361597 #> PS43  0.009696453 0.02962132 0.05395096 0.028008307 -0.0054060649 -0.02278089 #> AE44  0.022209613 0.02872914 0.04678593 0.021432306 -0.0062438005 -0.03325430 #> AE45  0.017070529 0.02500476 0.04207118 0.015590449 -0.0125041590 -0.02643712 #> AE46  0.019955954 0.02210685 0.04425050 0.016124350 -0.0059187470 -0.02112102 #> AE47  0.012764921 0.02549636 0.04832930 0.021279454 -0.0072668469 -0.03053345 #> AE48  0.009012434 0.02788134 0.04195447 0.019452316 -0.0033602107 -0.02224146 #> AE49  0.020167979 0.02671760 0.03790360 0.017879879 -0.0082872336 -0.02436522 #> AE50  0.017980169 0.02522621 0.04455923 0.022412292  0.0006199068 -0.02573227 #> AE51  0.028273610 0.02475281 0.04560509 0.018289771 -0.0155381857 -0.03078107 #> AE52  0.018498035 0.02806079 0.04598992 0.019078102 -0.0100429219 -0.02107760 #> AE53  0.018989183 0.02826034 0.04836101 0.022696282 -0.0086760730 -0.02522523 #> AE54  0.016955963 0.02749484 0.04935746 0.023671924 -0.0054385706 -0.03005728 #> AE55  0.007775690 0.01964697 0.03970104 0.017668638 -0.0056924635 -0.01928116 #> AE56  0.015528690 0.01944325 0.04181501 0.016532880 -0.0075657410 -0.02127519 #> AE57  0.021657914 0.03143334 0.05045469 0.022103526 -0.0032291590 -0.02976023 #> AE58  0.014852798 0.02357382 0.04124862 0.017758954 -0.0126937695 -0.02278433 #> AE59  0.013820549 0.02138296 0.03838600 0.012431547 -0.0118056825 -0.02429321 #> AE60  0.017799748 0.03216945 0.05085970 0.020439774 -0.0079058535 -0.03668566 #> AE61  0.013592307 0.02666289 0.05506965 0.024674679 -0.0035991276 -0.01729537 #> AE62  0.010791212 0.02280408 0.04030167 0.016172907 -0.0081164709 -0.01555793 #> AE63  0.019867096 0.02713715 0.04740922 0.015228820 -0.0146203454 -0.02668283 #> AE64  0.029566394 0.02811684 0.04582514 0.018185289 -0.0051168536 -0.03450801 #> AE65  0.013745957 0.02120385 0.03460146 0.015391025 -0.0102461772 -0.02624110 #> AE66  0.015232007 0.02321355 0.05194073 0.018371196 -0.0109811519 -0.03403938 #> AE67  0.020651093 0.02197065 0.03654878 0.015461638 -0.0086958717 -0.02319231 #> AE68  0.015037573 0.02794225 0.04623979 0.019435954 -0.0080725868 -0.02995841 #> AE69  0.015459714 0.02141548 0.04330776 0.017231297 -0.0125420006 -0.02663824 #> AE70  0.014133953 0.02400491 0.04993628 0.024999386 -0.0113126526 -0.02796019 #> AE71  0.026204493 0.02682321 0.04498873 0.016597931 -0.0147664476 -0.03437959 #> AE72  0.017115848 0.02847935 0.05058032 0.018729056 -0.0130620477 -0.02942701 #> AE73  0.019057488 0.03181711 0.04992821 0.020752837 -0.0014266702 -0.01479561 #> AE74  0.016245319 0.03259439 0.04730746 0.023664786 -0.0069021820 -0.02787117 #> AE75  0.021831863 0.02721258 0.04641488 0.013558764 -0.0120488307 -0.02849579 #> AE76  0.019244522 0.02578020 0.04748669 0.017166620 -0.0114005808 -0.02961030 #> AE77  0.020455607 0.02536790 0.04869105 0.018380169 -0.0107076381 -0.02900154 #> AE78  0.019015265 0.03337134 0.04117545 0.015356576 -0.0116219684 -0.02411763 #> AE79  0.019995869 0.02636401 0.04234840 0.017890749 -0.0082389520 -0.02431138 #> AE80  0.017930466 0.02416673 0.04377548 0.019651464 -0.0083685772 -0.02649514 #> AE81  0.024148981 0.02919554 0.04869795 0.019255872 -0.0100449592 -0.02488700 #> AE82  0.020578909 0.02706156 0.04897019 0.018344967 -0.0091223541 -0.02522526 #> AE83  0.016781292 0.03114929 0.05394455 0.024519177 -0.0092320644 -0.02699144 #> AE84  0.024609830 0.02873131 0.04198269 0.016284835 -0.0153416977 -0.03602225 #> AE85  0.010396520 0.02846303 0.04731145 0.025320390 -0.0055367524 -0.02458945 #> AE86  0.036343087 0.02984724 0.04512154 0.020647760 -0.0058120162 -0.02373160 #> AE87  0.020225282 0.02813906 0.04238996 0.015529013 -0.0086145568 -0.01932807 #> AE88  0.015667143 0.02902972 0.04316773 0.021523222 -0.0017849076 -0.02226195 #> AE89  0.010784658 0.02446307 0.05051475 0.021313287 -0.0053891002 -0.02177189 #> AE90  0.027142506 0.03212522 0.05108388 0.023257334 -0.0046635032 -0.03073238 #> AE91  0.019033489 0.03167430 0.04462634 0.018496419 -0.0112092137 -0.02226589 #> AE92  0.012810939 0.02363067 0.04162214 0.021165370 -0.0067165829 -0.01574059 #> AE93  0.022471103 0.02651858 0.04508543 0.014069432 -0.0157448155 -0.03293319 #> AE94  0.012305865 0.02681931 0.04454421 0.023851832 -0.0029548417 -0.02231764 #> AE95  0.016906129 0.02469427 0.04023863 0.021999889 -0.0084593595 -0.01607771 #> AE96  0.017485117 0.02547147 0.04704657 0.020538267 -0.0079848838 -0.02043972 #> AE97  0.016648864 0.02472005 0.04875918 0.015428675 -0.0047708489 -0.02379334 #> AE98  0.013391858 0.02393506 0.04162961 0.019367765 -0.0054168820 -0.02012284 #> AE99  0.019977565 0.02394541 0.04300177 0.020764156 -0.0044495209 -0.02427907 #> AE100 0.011980687 0.02528265 0.04703604 0.018302914 -0.0085743289 -0.02570950 #> CX101 0.016228827 0.02795540 0.04467222 0.019165494 -0.0099841850 -0.02637927 #> CX102 0.017259331 0.01912946 0.04067772 0.015083424 -0.0067027356 -0.02043425 #> CX103 0.020074121 0.03029000 0.04633641 0.020038662 -0.0052371329 -0.02653335 #> CX104 0.014934569 0.02833998 0.04791502 0.024512049 -0.0071740845 -0.01984566 #> CX105 0.019219428 0.02529887 0.03836062 0.019788647 -0.0075309252 -0.02564094 #> CX106 0.018299308 0.02768259 0.04677679 0.019768234 -0.0097009633 -0.02610560 #> CX107 0.015806760 0.02182572 0.03975539 0.017122074 -0.0078549731 -0.02662050 #> CX108 0.016215262 0.02519327 0.04243383 0.010268036 -0.0112934336 -0.03094322 #> CX109 0.017068885 0.02501765 0.03545559 0.016413355 -0.0056047239 -0.02321445 #> CX110 0.012385269 0.02481311 0.04163334 0.020597841 -0.0085527751 -0.01309114 #> CX111 0.020635245 0.02905378 0.04625604 0.017163441 -0.0095672256 -0.02526990 #> CX112 0.012659275 0.02760717 0.04363982 0.019186884 -0.0085127474 -0.01768584 #> CX113 0.014469364 0.01985292 0.04219240 0.018608647 -0.0039236081 -0.01550316 #> CX114 0.018322739 0.02242499 0.03905605 0.015973206 -0.0068638956 -0.01703203 #> CX115 0.014974865 0.02220072 0.04055723 0.018212767 -0.0086772873 -0.02478906 #> CX116 0.017431556 0.03145910 0.04683659 0.021299988 -0.0043485687 -0.02504549 #> CX117 0.017905431 0.02938074 0.04469183 0.018408516 -0.0043347815 -0.02194933 #> CX118 0.027152233 0.02328459 0.03539228 0.015205687 -0.0075409103 -0.02621603 #> CX119 0.017132004 0.02244083 0.04338429 0.016764177 -0.0031370859 -0.02173155 #> CX120 0.017126560 0.03024564 0.04707770 0.019113201 -0.0119658108 -0.02313595 #> CX121 0.023244195 0.02442777 0.04507924 0.020724090 -0.0018107845 -0.01827788 #> CX122 0.015060402 0.02122439 0.04010077 0.016097457 -0.0109813961 -0.02871446 #> CX123 0.012181115 0.02677886 0.04411853 0.020245582 -0.0085144121 -0.01780218 #> CX124 0.012934711 0.02604046 0.04671372 0.019656344 -0.0007938145 -0.02303963 #> CX125 0.019920346 0.02308511 0.04046563 0.013778338 -0.0108924185 -0.02854041 #> DE126 0.018362791 0.02746598 0.03974138 0.015250649 -0.0136039673 -0.02421991 #> DE127 0.016632923 0.02410343 0.03776670 0.017676786 -0.0115576584 -0.01507777"},{"path":"http://momx.github.io/Momocs/reference/Coo.html","id":null,"dir":"Reference","previous_headings":"","what":"Coo ","title":"Coo ","text":"Coo class 'parent' 'super' class , Opn Ldk classes.","code":""},{"path":"http://momx.github.io/Momocs/reference/Coo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coo ","text":"","code":"Coo(...)"},{"path":"http://momx.github.io/Momocs/reference/Coo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coo ","text":"... anything , anyway, function simply returns message.","code":""},{"path":"http://momx.github.io/Momocs/reference/Coo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coo ","text":"list class Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/Coo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coo ","text":"Useful shortcuts described . See browseVignettes(\"Momocs\") detail design behind Momocs' classes. Coo class 'parent' class following 'child' classes closed outlines Opn open outlines Ldk configuration landmarks Since 'child classes' handle \\((x; y)\\) coordinates among generic methods, also specificity, architecture allow recycle generic methods use specific methods. words, , Opn Ldk classes , primarily, Coo objects define generic specific methods. See respective help pages help. Coo objects following components: $coo list matrices coordinates $fac data_frame covariates (). can provide data_frame directly, long many rows matrices $coo (see examples), use helper function lf_structure. can access methods available Coo objects methods(class=Coo).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/Coo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coo ","text":"","code":"# to see all methods for Coo objects. methods(class='Coo') #>   [1] $                           Ldk                         #>   [3] Opn                         Out                         #>   [5] [                           [<-                         #>   [7] arrange                     as_df                       #>   [9] chop                        coo_align                   #>  [11] coo_aligncalliper           coo_alignminradius          #>  [13] coo_alignxax                coo_angle_edges             #>  [15] coo_angle_tangent           coo_area                    #>  [17] coo_baseline                coo_boundingbox             #>  [19] coo_calliper                coo_centdist                #>  [21] coo_center                  coo_centpos                 #>  [23] coo_centsize                coo_check                   #>  [25] coo_chull                   coo_chull_onion             #>  [27] coo_circularity             coo_circularityharalick     #>  [29] coo_circularitynorm         coo_close                   #>  [31] coo_convexity               coo_diffrange               #>  [33] coo_down                    coo_dxy                     #>  [35] coo_eccentricityboundingbox coo_eccentricityeigen       #>  [37] coo_elongation              coo_extract                 #>  [39] coo_flipx                   coo_flipy                   #>  [41] coo_force2close             coo_interpolate             #>  [43] coo_intersect_angle         coo_intersect_direction     #>  [45] coo_intersect_segment       coo_is_closed               #>  [47] coo_jitter                  coo_left                    #>  [49] coo_length                  coo_likely_clockwise        #>  [51] coo_lw                      coo_nb                      #>  [53] coo_perim                   coo_perimcum                #>  [55] coo_perimpts                coo_range                   #>  [57] coo_range_enlarge           coo_rectangularity          #>  [59] coo_rectilinearity          coo_rev                     #>  [61] coo_right                   coo_rotate                  #>  [63] coo_rotatecenter            coo_samplerr                #>  [65] coo_scalars                 coo_scale                   #>  [67] coo_scalex                  coo_scaley                  #>  [69] coo_shearx                  coo_sheary                  #>  [71] coo_slide                   coo_slidedirection          #>  [73] coo_slidegap                coo_smooth                  #>  [75] coo_solidity                coo_tac                     #>  [77] coo_template                coo_template_relatively     #>  [79] coo_trans                   coo_trim                    #>  [81] coo_trimbottom              coo_trimtop                 #>  [83] coo_truss                   coo_unclose                 #>  [85] coo_untiltx                 coo_up                      #>  [87] coo_width                   dfourier                    #>  [89] dim                         filter                      #>  [91] inspect                     is_equallyspacedradii       #>  [93] length                      measure                     #>  [95] mutate                      names                       #>  [97] names<-                     print                       #>  [99] rename                      sample_frac                 #> [101] sample_n                    select                      #> [103] slice                       stack                       #> [105] str                         subsetize                   #> [107] verify                      #> see '?methods' for accessing help and source code  # to see all methods for Out objects. methods(class='Out') # same for Opn and Ldk #>  [1] add_ldk           combine           coo_bookstein     coo_down          #>  [5] coo_left          coo_right         coo_sample        coo_sample_prop   #>  [9] coo_slice         coo_up            d                 def_ldk           #> [13] def_ldk_angle     def_ldk_direction efourier          fgProcrustes      #> [17] get_ldk           mosaic            panel             pile              #> [21] rearrange_ldk     rfourier          sfourier          tfourier          #> see '?methods' for accessing help and source code  # Let's take an Out example. But all methods shown here # work on Ldk (try on 'wings') and on Opn ('olea') bot #> Out (outlines) #>   - 40 outlines, 162 +/- 21 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows #>   - also: $ldk  # Primarily a 'Coo' object, but also an 'Out' class(bot) #> [1] \"Out\" \"Coo\" inherits(bot, \"Coo\") #> [1] TRUE panel(bot)  stack(bot)   # Getters (you can also use it to set data) bot[1] %>% coo_plot()  bot[1:5] %>% str() #> List of 5 #>  $ brahma     : num [1:138, 1:2] 37 40 40 43 46 48 52 54 57 59 ... #>  $ caney      : num [1:168, 1:2] 53 53 54 53 54 54 54 54 54 53 ... #>  $ chimay     : num [1:189, 1:2] 49 49 49 50 50 50 51 50 50 50 ... #>  $ corona     : num [1:129, 1:2] 91 91 90 91 91 91 91 91 91 91 ... #>  $ deusventrue: num [1:152, 1:2] 74 70 62 59 52 49 47 43 41 38 ...  # Setters bot[1] <- shapes[4] panel(bot)   bot[1:5] <- shapes[4:8] panel(bot)   # access the different components # $coo coordinates head(bot$coo) #> $brahma #>        [,1] [,2] #>   [1,]  200   62 #>   [2,]  200   61 #>   [3,]  199   60 #>   [4,]  198   59 #>   [5,]  197   58 #>   [6,]  197   57 #>   [7,]  196   56 #>   [8,]  195   56 #>   [9,]  196   56 #>  [10,]  197   56 #>  [11,]  198   56 #>  [12,]  199   56 #>  [13,]  200   56 #>  [14,]  201   55 #>  [15,]  202   55 #>  [16,]  203   55 #>  [17,]  204   55 #>  [18,]  205   54 #>  [19,]  206   54 #>  [20,]  207   53 #>  [21,]  208   52 #>  [22,]  208   51 #>  [23,]  209   50 #>  [24,]  209   49 #>  [25,]  209   48 #>  [26,]  209   47 #>  [27,]  208   46 #>  [28,]  208   45 #>  [29,]  207   44 #>  [30,]  206   44 #>  [31,]  205   43 #>  [32,]  204   43 #>  [33,]  203   43 #>  [34,]  202   43 #>  [35,]  201   43 #>  [36,]  200   43 #>  [37,]  199   43 #>  [38,]  198   43 #>  [39,]  197   43 #>  [40,]  196   42 #>  [41,]  195   42 #>  [42,]  194   42 #>  [43,]  193   42 #>  [44,]  192   42 #>  [45,]  191   42 #>  [46,]  190   42 #>  [47,]  189   42 #>  [48,]  188   42 #>  [49,]  187   42 #>  [50,]  186   42 #>  [51,]  185   42 #>  [52,]  184   42 #>  [53,]  183   42 #>  [54,]  182   42 #>  [55,]  181   42 #>  [56,]  180   42 #>  [57,]  179   42 #>  [58,]  178   43 #>  [59,]  177   42 #>  [60,]  176   43 #>  [61,]  175   43 #>  [62,]  174   43 #>  [63,]  173   43 #>  [64,]  172   43 #>  [65,]  171   43 #>  [66,]  170   43 #>  [67,]  169   43 #>  [68,]  168   43 #>  [69,]  167   43 #>  [70,]  166   43 #>  [71,]  165   43 #>  [72,]  164   43 #>  [73,]  163   43 #>  [74,]  162   43 #>  [75,]  161   43 #>  [76,]  160   43 #>  [77,]  159   43 #>  [78,]  158   43 #>  [79,]  157   43 #>  [80,]  156   43 #>  [81,]  155   43 #>  [82,]  154   43 #>  [83,]  153   43 #>  [84,]  152   43 #>  [85,]  151   43 #>  [86,]  150   43 #>  [87,]  149   43 #>  [88,]  148   43 #>  [89,]  147   43 #>  [90,]  146   44 #>  [91,]  145   44 #>  [92,]  144   44 #>  [93,]  143   44 #>  [94,]  143   43 #>  [95,]  143   42 #>  [96,]  143   41 #>  [97,]  142   40 #>  [98,]  142   39 #>  [99,]  142   38 #> [100,]  142   37 #> [101,]  142   36 #> [102,]  142   35 #> [103,]  143   34 #> [104,]  143   33 #> [105,]  143   32 #> [106,]  144   31 #> [107,]  145   30 #> [108,]  145   29 #> [109,]  146   28 #> [110,]  147   27 #> [111,]  148   27 #> [112,]  149   26 #> [113,]  150   25 #> [114,]  151   25 #> [115,]  152   24 #> [116,]  153   24 #> [117,]  154   23 #> [118,]  155   23 #> [119,]  156   23 #> [120,]  157   22 #> [121,]  158   22 #> [122,]  159   22 #> [123,]  160   21 #> [124,]  161   21 #> [125,]  162   21 #> [126,]  163   21 #> [127,]  164   21 #> [128,]  165   20 #> [129,]  166   20 #> [130,]  167   20 #> [131,]  168   20 #> [132,]  169   20 #> [133,]  170   20 #> [134,]  171   20 #> [135,]  172   20 #> [136,]  173   20 #> [137,]  174   19 #> [138,]  175   19 #> [139,]  176   19 #> [140,]  177   19 #> [141,]  178   19 #> [142,]  179   19 #> [143,]  180   19 #> [144,]  181   20 #> [145,]  182   20 #> [146,]  183   20 #> [147,]  184   20 #> [148,]  185   20 #> [149,]  186   20 #> [150,]  187   20 #> [151,]  188   20 #> [152,]  189   21 #> [153,]  190   21 #> [154,]  191   21 #> [155,]  192   21 #> [156,]  193   21 #> [157,]  194   21 #> [158,]  195   22 #> [159,]  196   22 #> [160,]  197   22 #> [161,]  198   22 #> [162,]  199   22 #> [163,]  200   22 #> [164,]  201   22 #> [165,]  202   22 #> [166,]  203   22 #> [167,]  204   22 #> [168,]  205   22 #> [169,]  206   22 #> [170,]  207   21 #> [171,]  208   20 #> [172,]  208   19 #> [173,]  207   18 #> [174,]  206   17 #> [175,]  205   17 #> [176,]  204   16 #> [177,]  203   16 #> [178,]  202   15 #> [179,]  201   15 #> [180,]  200   14 #> [181,]  199   14 #> [182,]  198   14 #> [183,]  197   13 #> [184,]  196   13 #> [185,]  195   13 #> [186,]  194   12 #> [187,]  193   12 #> [188,]  192   12 #> [189,]  191   11 #> [190,]  190   11 #> [191,]  189   11 #> [192,]  188   11 #> [193,]  187   10 #> [194,]  186   10 #> [195,]  185   10 #> [196,]  184   10 #> [197,]  183    9 #> [198,]  182    9 #> [199,]  181   10 #> [200,]  180    9 #> [201,]  179    9 #> [202,]  178    9 #> [203,]  177    9 #> [204,]  176    9 #> [205,]  175    9 #> [206,]  174    9 #> [207,]  173    9 #> [208,]  172    9 #> [209,]  171    9 #> [210,]  170    9 #> [211,]  169    9 #> [212,]  168    9 #> [213,]  167    9 #> [214,]  166    9 #> [215,]  165    9 #> [216,]  164    9 #> [217,]  163    9 #> [218,]  162    9 #> [219,]  161    9 #> [220,]  160   10 #> [221,]  159   10 #> [222,]  158   10 #> [223,]  157   10 #> [224,]  156   10 #> [225,]  155   11 #> [226,]  154   11 #> [227,]  153   11 #> [228,]  152   12 #> [229,]  151   12 #> [230,]  150   12 #> [231,]  149   13 #> [232,]  148   13 #> [233,]  147   14 #> [234,]  146   14 #> [235,]  145   15 #> [236,]  144   15 #> [237,]  143   16 #> [238,]  142   17 #> [239,]  141   17 #> [240,]  140   18 #> [241,]  139   19 #> [242,]  138   20 #> [243,]  137   21 #> [244,]  136   22 #> [245,]  135   23 #> [246,]  134   24 #> [247,]  134   25 #> [248,]  133   26 #> [249,]  133   27 #> [250,]  132   28 #> [251,]  132   29 #> [252,]  131   30 #> [253,]  131   31 #> [254,]  131   32 #> [255,]  130   33 #> [256,]  130   34 #> [257,]  130   35 #> [258,]  130   36 #> [259,]  130   37 #> [260,]  130   38 #> [261,]  130   39 #> [262,]  130   40 #> [263,]  130   41 #> [264,]  130   42 #> [265,]  130   43 #> [266,]  130   44 #> [267,]  130   45 #> [268,]  131   46 #> [269,]  131   47 #> [270,]  131   48 #> [271,]  132   49 #> [272,]  132   50 #> [273,]  132   51 #> [274,]  133   52 #> [275,]  133   53 #> [276,]  133   54 #> [277,]  134   55 #> [278,]  135   56 #> [279,]  135   57 #> [280,]  135   58 #> [281,]  135   59 #> [282,]  136   60 #> [283,]  136   61 #> [284,]  135   62 #> [285,]  136   63 #> [286,]  136   64 #> [287,]  136   65 #> [288,]  136   66 #> [289,]  136   67 #> [290,]  135   68 #> [291,]  136   69 #> [292,]  135   70 #> [293,]  135   71 #> [294,]  135   72 #> [295,]  135   73 #> [296,]  135   74 #> [297,]  134   75 #> [298,]  135   76 #> [299,]  134   77 #> [300,]  134   78 #> [301,]  134   79 #> [302,]  134   80 #> [303,]  134   81 #> [304,]  134   82 #> [305,]  134   83 #> [306,]  133   84 #> [307,]  133   85 #> [308,]  134   86 #> [309,]  134   87 #> [310,]  134   88 #> [311,]  133   89 #> [312,]  133   90 #> [313,]  133   91 #> [314,]  133   92 #> [315,]  133   93 #> [316,]  133   94 #> [317,]  133   95 #> [318,]  133   96 #> [319,]  133   97 #> [320,]  133   98 #> [321,]  133   99 #> [322,]  133  100 #> [323,]  133  101 #> [324,]  133  102 #> [325,]  133  103 #> [326,]  133  104 #> [327,]  133  105 #> [328,]  133  106 #> [329,]  133  107 #> [330,]  133  108 #> [331,]  133  109 #> [332,]  134  110 #> [333,]  134  111 #> [334,]  133  112 #> [335,]  134  113 #> [336,]  134  114 #> [337,]  134  115 #> [338,]  134  116 #> [339,]  134  117 #> [340,]  135  118 #> [341,]  135  119 #> [342,]  135  120 #> [343,]  136  121 #> [344,]  136  122 #> [345,]  136  123 #> [346,]  137  124 #> [347,]  137  125 #> [348,]  138  126 #> [349,]  138  127 #> [350,]  139  128 #> [351,]  139  129 #> [352,]  140  130 #> [353,]  140  131 #> [354,]  141  132 #> [355,]  141  133 #> [356,]  142  134 #> [357,]  142  135 #> [358,]  143  136 #> [359,]  143  137 #> [360,]  144  138 #> [361,]  144  139 #> [362,]  145  140 #> [363,]  145  141 #> [364,]  146  142 #> [365,]  147  143 #> [366,]  148  144 #> [367,]  148  145 #> [368,]  149  146 #> [369,]  150  147 #> [370,]  150  148 #> [371,]  151  149 #> [372,]  152  150 #> [373,]  153  151 #> [374,]  154  152 #> [375,]  155  153 #> [376,]  156  154 #> [377,]  157  155 #> [378,]  158  156 #> [379,]  159  157 #> [380,]  160  158 #> [381,]  161  158 #> [382,]  162  159 #> [383,]  163  159 #> [384,]  164  160 #> [385,]  165  160 #> [386,]  166  160 #> [387,]  167  161 #> [388,]  168  161 #> [389,]  169  161 #> [390,]  170  162 #> [391,]  171  162 #> [392,]  172  162 #> [393,]  173  163 #> [394,]  174  164 #> [395,]  175  164 #> [396,]  176  165 #> [397,]  177  165 #> [398,]  178  166 #> [399,]  179  167 #> [400,]  180  167 #> [401,]  181  168 #> [402,]  182  169 #> [403,]  183  170 #> [404,]  184  171 #> [405,]  185  172 #> [406,]  186  173 #> [407,]  187  174 #> [408,]  187  175 #> [409,]  188  176 #> [410,]  189  177 #> [411,]  189  178 #> [412,]  190  179 #> [413,]  190  180 #> [414,]  191  181 #> [415,]  191  182 #> [416,]  191  183 #> [417,]  191  184 #> [418,]  191  185 #> [419,]  191  186 #> [420,]  191  187 #> [421,]  190  188 #> [422,]  191  189 #> [423,]  191  190 #> [424,]  191  191 #> [425,]  191  192 #> [426,]  192  193 #> [427,]  192  194 #> [428,]  192  195 #> [429,]  193  196 #> [430,]  193  197 #> [431,]  194  198 #> [432,]  194  199 #> [433,]  194  200 #> [434,]  195  201 #> [435,]  196  202 #> [436,]  196  203 #> [437,]  197  204 #> [438,]  197  205 #> [439,]  198  206 #> [440,]  199  207 #> [441,]  200  208 #> [442,]  201  209 #> [443,]  202  210 #> [444,]  203  210 #> [445,]  204  211 #> [446,]  205  212 #> [447,]  206  212 #> [448,]  207  213 #> [449,]  208  213 #> [450,]  209  214 #> [451,]  210  215 #> [452,]  211  216 #> [453,]  211  217 #> [454,]  211  218 #> [455,]  212  219 #> [456,]  212  220 #> [457,]  213  221 #> [458,]  213  222 #> [459,]  214  223 #> [460,]  215  224 #> [461,]  215  225 #> [462,]  216  226 #> [463,]  217  227 #> [464,]  217  228 #> [465,]  218  229 #> [466,]  219  230 #> [467,]  220  230 #> [468,]  221  231 #> [469,]  222  231 #> [470,]  223  230 #> [471,]  224  229 #> [472,]  225  228 #> [473,]  225  227 #> [474,]  225  226 #> [475,]  225  225 #> [476,]  226  224 #> [477,]  225  223 #> [478,]  225  222 #> [479,]  225  221 #> [480,]  226  220 #> [481,]  226  219 #> [482,]  226  218 #> [483,]  226  217 #> [484,]  226  216 #> [485,]  226  215 #> [486,]  226  214 #> [487,]  226  213 #> [488,]  226  212 #> [489,]  226  211 #> [490,]  227  211 #> [491,]  228  211 #> [492,]  229  210 #> [493,]  230  210 #> [494,]  231  210 #> [495,]  232  209 #> [496,]  233  209 #> [497,]  234  208 #> [498,]  235  208 #> [499,]  236  207 #> [500,]  237  207 #> [501,]  238  206 #> [502,]  238  205 #> [503,]  239  204 #> [504,]  240  203 #> [505,]  240  202 #> [506,]  241  201 #> [507,]  242  200 #> [508,]  243  199 #> [509,]  244  199 #> [510,]  245  199 #> [511,]  246  198 #> [512,]  247  198 #> [513,]  248  197 #> [514,]  249  196 #> [515,]  249  195 #> [516,]  250  194 #> [517,]  250  193 #> [518,]  249  192 #> [519,]  249  191 #> [520,]  249  190 #> [521,]  248  189 #> [522,]  248  188 #> [523,]  248  187 #> [524,]  247  186 #> [525,]  246  185 #> [526,]  245  184 #> [527,]  244  183 #> [528,]  243  182 #> [529,]  242  181 #> [530,]  241  180 #> [531,]  240  180 #> [532,]  239  179 #> [533,]  238  178 #> [534,]  237  178 #> [535,]  236  177 #> [536,]  235  176 #> [537,]  235  175 #> [538,]  235  174 #> [539,]  235  173 #> [540,]  235  172 #> [541,]  235  171 #> [542,]  235  170 #> [543,]  235  169 #> [544,]  236  168 #> [545,]  235  167 #> [546,]  236  166 #> [547,]  236  165 #> [548,]  236  164 #> [549,]  236  163 #> [550,]  236  162 #> [551,]  237  161 #> [552,]  236  160 #> [553,]  237  159 #> [554,]  237  158 #> [555,]  237  157 #> [556,]  237  156 #> [557,]  237  155 #> [558,]  237  154 #> [559,]  237  153 #> [560,]  238  152 #> [561,]  237  151 #> [562,]  237  150 #> [563,]  237  149 #> [564,]  237  148 #> [565,]  237  147 #> [566,]  238  146 #> [567,]  237  145 #> [568,]  237  144 #> [569,]  237  143 #> [570,]  237  142 #> [571,]  237  141 #> [572,]  237  140 #> [573,]  237  139 #> [574,]  237  138 #> [575,]  236  137 #> [576,]  236  136 #> [577,]  236  135 #> [578,]  235  134 #> [579,]  235  133 #> [580,]  235  132 #> [581,]  234  131 #> [582,]  234  130 #> [583,]  233  129 #> [584,]  232  128 #> [585,]  232  127 #> [586,]  231  126 #> [587,]  230  125 #> [588,]  230  124 #> [589,]  229  123 #> [590,]  228  122 #> [591,]  228  121 #> [592,]  227  120 #> [593,]  226  119 #> [594,]  226  118 #> [595,]  226  117 #> [596,]  225  116 #> [597,]  224  115 #> [598,]  224  114 #> [599,]  224  113 #> [600,]  223  112 #> [601,]  223  111 #> [602,]  223  110 #> [603,]  223  109 #> [604,]  222  108 #> [605,]  222  107 #> [606,]  222  106 #> [607,]  222  105 #> [608,]  222  104 #> [609,]  221  103 #> [610,]  221  102 #> [611,]  221  101 #> [612,]  221  100 #> [613,]  221   99 #> [614,]  221   98 #> [615,]  221   97 #> [616,]  221   96 #> [617,]  221   95 #> [618,]  221   94 #> [619,]  221   93 #> [620,]  221   92 #> [621,]  221   91 #> [622,]  221   90 #> [623,]  221   89 #> [624,]  221   88 #> [625,]  221   87 #> [626,]  221   86 #> [627,]  221   85 #> [628,]  221   84 #> [629,]  221   83 #> [630,]  221   82 #> [631,]  221   81 #> [632,]  221   80 #> [633,]  221   79 #> [634,]  221   78 #> [635,]  221   77 #> [636,]  221   76 #> [637,]  221   75 #> [638,]  221   74 #> [639,]  221   73 #> [640,]  221   72 #> [641,]  221   71 #> [642,]  221   70 #> [643,]  222   69 #> [644,]  222   68 #> [645,]  222   67 #> [646,]  222   66 #> [647,]  222   65 #> [648,]  222   64 #> [649,]  222   63 #> [650,]  223   62 #> [651,]  224   62 #> [652,]  225   61 #> [653,]  226   61 #> [654,]  227   61 #> [655,]  228   61 #> [656,]  229   60 #> [657,]  230   60 #> [658,]  231   60 #> [659,]  232   59 #> [660,]  232   58 #> [661,]  233   57 #> [662,]  232   56 #> [663,]  232   55 #> [664,]  231   54 #> [665,]  230   53 #> [666,]  229   52 #> [667,]  230   51 #> [668,]  229   50 #> [669,]  230   49 #> [670,]  229   48 #> [671,]  228   47 #> [672,]  227   46 #> [673,]  226   46 #> [674,]  225   45 #> [675,]  224   45 #> [676,]  223   45 #> [677,]  222   45 #> [678,]  221   45 #> [679,]  220   45 #> [680,]  219   45 #> [681,]  218   45 #> [682,]  217   45 #> [683,]  216   45 #> [684,]  215   46 #> [685,]  214   46 #> [686,]  213   47 #> [687,]  212   48 #> [688,]  211   49 #> [689,]  210   50 #> [690,]  209   51 #> [691,]  208   52 #> [692,]  208   53 #> [693,]  207   54 #> [694,]  206   55 #> [695,]  206   56 #> [696,]  205   57 #> [697,]  205   58 #> [698,]  204   59 #> [699,]  204   60 #> [700,]  203   61 #> [701,]  203   62 #> [702,]  203   63 #> [703,]  202   64 #> [704,]  202   65 #> [705,]  202   66 #> [706,]  201   66 #> [707,]  201   65 #> [708,]  201   64 #> [709,]  201   63 #> [710,]  200   62 #>  #> $caney #>        [,1] [,2] #>   [1,]  200   75 #>   [2,]  199   74 #>   [3,]  199   73 #>   [4,]  198   72 #>   [5,]  197   71 #>   [6,]  197   70 #>   [7,]  196   69 #>   [8,]  195   68 #>   [9,]  194   67 #>  [10,]  194   66 #>  [11,]  193   65 #>  [12,]  192   64 #>  [13,]  192   63 #>  [14,]  191   62 #>  [15,]  190   61 #>  [16,]  190   60 #>  [17,]  189   59 #>  [18,]  188   58 #>  [19,]  188   57 #>  [20,]  187   56 #>  [21,]  187   55 #>  [22,]  186   54 #>  [23,]  185   53 #>  [24,]  185   52 #>  [25,]  184   51 #>  [26,]  183   50 #>  [27,]  183   49 #>  [28,]  183   48 #>  [29,]  182   47 #>  [30,]  181   46 #>  [31,]  180   46 #>  [32,]  179   47 #>  [33,]  179   48 #>  [34,]  178   49 #>  [35,]  177   50 #>  [36,]  176   51 #>  [37,]  175   52 #>  [38,]  174   53 #>  [39,]  173   54 #>  [40,]  173   55 #>  [41,]  172   56 #>  [42,]  171   57 #>  [43,]  170   58 #>  [44,]  169   59 #>  [45,]  168   60 #>  [46,]  167   61 #>  [47,]  166   62 #>  [48,]  165   63 #>  [49,]  164   64 #>  [50,]  163   65 #>  [51,]  162   66 #>  [52,]  161   67 #>  [53,]  160   68 #>  [54,]  159   69 #>  [55,]  158   70 #>  [56,]  157   71 #>  [57,]  156   72 #>  [58,]  155   73 #>  [59,]  154   74 #>  [60,]  153   75 #>  [61,]  152   76 #>  [62,]  151   77 #>  [63,]  150   78 #>  [64,]  149   79 #>  [65,]  148   80 #>  [66,]  147   81 #>  [67,]  146   82 #>  [68,]  145   82 #>  [69,]  144   83 #>  [70,]  143   84 #>  [71,]  142   85 #>  [72,]  141   86 #>  [73,]  140   87 #>  [74,]  139   87 #>  [75,]  138   88 #>  [76,]  137   89 #>  [77,]  136   90 #>  [78,]  135   91 #>  [79,]  134   91 #>  [80,]  133   92 #>  [81,]  132   93 #>  [82,]  131   94 #>  [83,]  130   94 #>  [84,]  129   95 #>  [85,]  128   96 #>  [86,]  127   96 #>  [87,]  126   97 #>  [88,]  125   98 #>  [89,]  124   98 #>  [90,]  123   99 #>  [91,]  122  100 #>  [92,]  121  100 #>  [93,]  120  101 #>  [94,]  119  101 #>  [95,]  118  102 #>  [96,]  117  102 #>  [97,]  116  103 #>  [98,]  115  104 #>  [99,]  114  104 #> [100,]  113  105 #> [101,]  112  105 #> [102,]  111  106 #> [103,]  110  106 #> [104,]  109  107 #> [105,]  108  107 #> [106,]  107  107 #> [107,]  106  108 #> [108,]  105  108 #> [109,]  104  109 #> [110,]  105  110 #> [111,]  106  111 #> [112,]  107  111 #> [113,]  108  112 #> [114,]  109  113 #> [115,]  110  113 #> [116,]  111  114 #> [117,]  112  114 #> [118,]  113  115 #> [119,]  114  116 #> [120,]  115  116 #> [121,]  116  117 #> [122,]  117  117 #> [123,]  118  118 #> [124,]  119  119 #> [125,]  120  119 #> [126,]  121  120 #> [127,]  122  120 #> [128,]  123  121 #> [129,]  124  122 #> [130,]  125  122 #> [131,]  126  123 #> [132,]  127  123 #> [133,]  128  124 #> [134,]  129  125 #> [135,]  130  125 #> [136,]  131  126 #> [137,]  132  127 #> [138,]  133  127 #> [139,]  134  128 #> [140,]  135  128 #> [141,]  136  129 #> [142,]  137  130 #> [143,]  138  130 #> [144,]  139  131 #> [145,]  140  131 #> [146,]  141  132 #> [147,]  142  133 #> [148,]  143  133 #> [149,]  144  134 #> [150,]  145  134 #> [151,]  146  135 #> [152,]  147  136 #> [153,]  148  136 #> [154,]  149  137 #> [155,]  150  138 #> [156,]  151  138 #> [157,]  152  139 #> [158,]  153  139 #> [159,]  154  139 #> [160,]  155  138 #> [161,]  155  137 #> [162,]  156  136 #> [163,]  156  135 #> [164,]  157  134 #> [165,]  157  133 #> [166,]  158  132 #> [167,]  158  131 #> [168,]  159  130 #> [169,]  159  129 #> [170,]  160  128 #> [171,]  160  127 #> [172,]  161  126 #> [173,]  161  125 #> [174,]  162  124 #> [175,]  162  123 #> [176,]  163  122 #> [177,]  163  121 #> [178,]  164  120 #> [179,]  164  119 #> [180,]  165  118 #> [181,]  166  117 #> [182,]  166  116 #> [183,]  167  115 #> [184,]  167  114 #> [185,]  168  113 #> [186,]  168  112 #> [187,]  169  111 #> [188,]  169  110 #> [189,]  170  109 #> [190,]  170  108 #> [191,]  171  107 #> [192,]  171  106 #> [193,]  172  105 #> [194,]  172  104 #> [195,]  173  103 #> [196,]  173  102 #> [197,]  174  101 #> [198,]  174  100 #> [199,]  175   99 #> [200,]  175   98 #> [201,]  176   97 #> [202,]  176   96 #> [203,]  177   95 #> [204,]  177   94 #> [205,]  178   94 #> [206,]  178   95 #> [207,]  179   96 #> [208,]  179   97 #> [209,]  180   98 #> [210,]  180   99 #> [211,]  181  100 #> [212,]  181  101 #> [213,]  182  102 #> [214,]  182  103 #> [215,]  183  104 #> [216,]  183  105 #> [217,]  184  106 #> [218,]  184  107 #> [219,]  184  108 #> [220,]  185  109 #> [221,]  186  110 #> [222,]  186  111 #> [223,]  187  112 #> [224,]  187  113 #> [225,]  187  114 #> [226,]  188  115 #> [227,]  189  116 #> [228,]  189  117 #> [229,]  190  118 #> [230,]  190  119 #> [231,]  190  120 #> [232,]  191  121 #> [233,]  192  122 #> [234,]  192  123 #> [235,]  193  124 #> [236,]  193  125 #> [237,]  194  126 #> [238,]  195  127 #> [239,]  195  128 #> [240,]  195  129 #> [241,]  196  130 #> [242,]  197  131 #> [243,]  197  132 #> [244,]  198  133 #> [245,]  199  134 #> [246,]  199  135 #> [247,]  200  136 #> [248,]  200  137 #> [249,]  201  138 #> [250,]  201  139 #> [251,]  202  140 #> [252,]  203  141 #> [253,]  203  142 #> [254,]  204  143 #> [255,]  204  144 #> [256,]  205  145 #> [257,]  206  146 #> [258,]  207  147 #> [259,]  207  148 #> [260,]  208  149 #> [261,]  209  150 #> [262,]  209  151 #> [263,]  210  152 #> [264,]  211  153 #> [265,]  211  154 #> [266,]  212  155 #> [267,]  213  156 #> [268,]  213  157 #> [269,]  214  158 #> [270,]  215  159 #> [271,]  215  160 #> [272,]  216  161 #> [273,]  217  162 #> [274,]  218  163 #> [275,]  218  164 #> [276,]  219  165 #> [277,]  220  166 #> [278,]  221  167 #> [279,]  221  168 #> [280,]  222  169 #> [281,]  223  170 #> [282,]  224  171 #> [283,]  224  172 #> [284,]  225  173 #> [285,]  226  174 #> [286,]  227  175 #> [287,]  228  176 #> [288,]  229  177 #> [289,]  229  178 #> [290,]  230  179 #> [291,]  231  180 #> [292,]  232  181 #> [293,]  233  182 #> [294,]  234  183 #> [295,]  235  184 #> [296,]  235  185 #> [297,]  236  186 #> [298,]  237  187 #> [299,]  238  188 #> [300,]  239  189 #> [301,]  240  190 #> [302,]  241  191 #> [303,]  242  192 #> [304,]  243  193 #> [305,]  244  194 #> [306,]  245  195 #> [307,]  246  196 #> [308,]  247  197 #> [309,]  248  198 #> [310,]  249  198 #> [311,]  250  199 #> [312,]  251  200 #> [313,]  252  201 #> [314,]  253  202 #> [315,]  254  203 #> [316,]  255  204 #> [317,]  256  205 #> [318,]  257  205 #> [319,]  258  206 #> [320,]  259  207 #> [321,]  260  208 #> [322,]  261  208 #> [323,]  262  209 #> [324,]  263  210 #> [325,]  264  211 #> [326,]  265  211 #> [327,]  266  212 #> [328,]  267  213 #> [329,]  268  213 #> [330,]  269  214 #> [331,]  270  214 #> [332,]  271  215 #> [333,]  272  216 #> [334,]  273  216 #> [335,]  274  217 #> [336,]  275  217 #> [337,]  276  218 #> [338,]  277  219 #> [339,]  278  219 #> [340,]  279  218 #> [341,]  279  217 #> [342,]  279  216 #> [343,]  279  215 #> [344,]  278  214 #> [345,]  278  213 #> [346,]  278  212 #> [347,]  279  211 #> [348,]  278  210 #> [349,]  278  209 #> [350,]  278  208 #> [351,]  278  207 #> [352,]  278  206 #> [353,]  278  205 #> [354,]  277  204 #> [355,]  277  203 #> [356,]  278  202 #> [357,]  277  201 #> [358,]  277  200 #> [359,]  277  199 #> [360,]  277  198 #> [361,]  277  197 #> [362,]  277  196 #> [363,]  276  195 #> [364,]  276  194 #> [365,]  276  193 #> [366,]  277  192 #> [367,]  277  191 #> [368,]  276  190 #> [369,]  276  189 #> [370,]  276  188 #> [371,]  276  187 #> [372,]  276  186 #> [373,]  276  185 #> [374,]  276  184 #> [375,]  276  183 #> [376,]  276  182 #> [377,]  276  181 #> [378,]  276  180 #> [379,]  276  179 #> [380,]  276  178 #> [381,]  276  177 #> [382,]  276  176 #> [383,]  277  175 #> [384,]  276  174 #> [385,]  276  173 #> [386,]  277  172 #> [387,]  277  171 #> [388,]  277  170 #> [389,]  277  169 #> [390,]  277  168 #> [391,]  277  167 #> [392,]  278  166 #> [393,]  278  165 #> [394,]  278  164 #> [395,]  278  163 #> [396,]  279  162 #> [397,]  279  161 #> [398,]  279  160 #> [399,]  280  159 #> [400,]  280  158 #> [401,]  280  157 #> [402,]  281  156 #> [403,]  281  155 #> [404,]  282  154 #> [405,]  282  153 #> [406,]  281  152 #> [407,]  280  152 #> [408,]  279  152 #> [409,]  278  151 #> [410,]  277  151 #> [411,]  276  150 #> [412,]  275  150 #> [413,]  274  150 #> [414,]  273  149 #> [415,]  272  148 #> [416,]  271  148 #> [417,]  270  147 #> [418,]  269  146 #> [419,]  268  146 #> [420,]  267  145 #> [421,]  266  145 #> [422,]  265  144 #> [423,]  264  143 #> [424,]  263  142 #> [425,]  262  142 #> [426,]  261  141 #> [427,]  260  140 #> [428,]  259  139 #> [429,]  258  139 #> [430,]  257  138 #> [431,]  256  137 #> [432,]  255  136 #> [433,]  254  135 #> [434,]  253  134 #> [435,]  252  133 #> [436,]  251  133 #> [437,]  250  132 #> [438,]  249  131 #> [439,]  248  130 #> [440,]  247  129 #> [441,]  246  128 #> [442,]  245  127 #> [443,]  244  126 #> [444,]  243  125 #> [445,]  242  124 #> [446,]  241  123 #> [447,]  240  122 #> [448,]  239  121 #> [449,]  238  120 #> [450,]  237  119 #> [451,]  236  118 #> [452,]  235  117 #> [453,]  234  116 #> [454,]  233  115 #> [455,]  232  114 #> [456,]  231  113 #> [457,]  231  112 #> [458,]  230  111 #> [459,]  229  110 #> [460,]  228  109 #> [461,]  227  108 #> [462,]  226  107 #> [463,]  225  106 #> [464,]  224  105 #> [465,]  223  104 #> [466,]  223  103 #> [467,]  222  102 #> [468,]  221  101 #> [469,]  220  100 #> [470,]  219   99 #> [471,]  218   98 #> [472,]  218   97 #> [473,]  217   96 #> [474,]  216   95 #> [475,]  215   94 #> [476,]  214   93 #> [477,]  213   92 #> [478,]  213   91 #> [479,]  212   90 #> [480,]  211   89 #> [481,]  210   88 #> [482,]  209   87 #> [483,]  209   86 #> [484,]  208   85 #> [485,]  207   84 #> [486,]  206   83 #> [487,]  205   82 #> [488,]  205   81 #> [489,]  204   80 #> [490,]  203   79 #> [491,]  202   78 #> [492,]  202   77 #> [493,]  201   76 #> [494,]  200   75 #>  #> $chimay #>        [,1] [,2] #>   [1,]  200   76 #>   [2,]  200   75 #>   [3,]  199   74 #>   [4,]  198   73 #>   [5,]  198   72 #>   [6,]  197   71 #>   [7,]  197   70 #>   [8,]  196   69 #>   [9,]  195   68 #>  [10,]  195   67 #>  [11,]  194   66 #>  [12,]  194   65 #>  [13,]  193   64 #>  [14,]  192   63 #>  [15,]  192   62 #>  [16,]  191   61 #>  [17,]  190   60 #>  [18,]  190   59 #>  [19,]  189   58 #>  [20,]  189   57 #>  [21,]  188   56 #>  [22,]  187   55 #>  [23,]  187   54 #>  [24,]  186   53 #>  [25,]  186   52 #>  [26,]  185   51 #>  [27,]  184   50 #>  [28,]  184   49 #>  [29,]  183   48 #>  [30,]  183   47 #>  [31,]  182   46 #>  [32,]  181   45 #>  [33,]  181   44 #>  [34,]  181   43 #>  [35,]  180   42 #>  [36,]  179   41 #>  [37,]  179   40 #>  [38,]  178   39 #>  [39,]  177   38 #>  [40,]  176   37 #>  [41,]  175   37 #>  [42,]  174   37 #>  [43,]  173   37 #>  [44,]  172   37 #>  [45,]  171   37 #>  [46,]  170   37 #>  [47,]  169   37 #>  [48,]  168   37 #>  [49,]  167   37 #>  [50,]  166   37 #>  [51,]  165   37 #>  [52,]  164   37 #>  [53,]  163   37 #>  [54,]  162   37 #>  [55,]  161   37 #>  [56,]  160   37 #>  [57,]  159   37 #>  [58,]  158   37 #>  [59,]  157   37 #>  [60,]  156   37 #>  [61,]  155   37 #>  [62,]  154   37 #>  [63,]  153   37 #>  [64,]  152   37 #>  [65,]  151   37 #>  [66,]  150   37 #>  [67,]  149   37 #>  [68,]  148   37 #>  [69,]  147   37 #>  [70,]  146   37 #>  [71,]  145   37 #>  [72,]  144   37 #>  [73,]  143   37 #>  [74,]  142   37 #>  [75,]  141   37 #>  [76,]  140   37 #>  [77,]  139   37 #>  [78,]  138   37 #>  [79,]  137   37 #>  [80,]  136   37 #>  [81,]  135   37 #>  [82,]  134   37 #>  [83,]  133   37 #>  [84,]  132   37 #>  [85,]  131   37 #>  [86,]  130   37 #>  [87,]  129   37 #>  [88,]  128   37 #>  [89,]  127   37 #>  [90,]  126   37 #>  [91,]  125   37 #>  [92,]  124   37 #>  [93,]  123   37 #>  [94,]  122   37 #>  [95,]  121   37 #>  [96,]  120   37 #>  [97,]  119   37 #>  [98,]  118   37 #>  [99,]  117   37 #> [100,]  116   37 #> [101,]  115   37 #> [102,]  114   37 #> [103,]  113   37 #> [104,]  112   37 #> [105,]  111   37 #> [106,]  110   37 #> [107,]  109   37 #> [108,]  108   37 #> [109,]  107   37 #> [110,]  106   37 #> [111,]  105   37 #> [112,]  104   37 #> [113,]  103   37 #> [114,]  102   38 #> [115,]  103   39 #> [116,]  103   40 #> [117,]  104   41 #> [118,]  104   42 #> [119,]  105   43 #> [120,]  106   44 #> [121,]  106   45 #> [122,]  107   46 #> [123,]  107   47 #> [124,]  108   48 #> [125,]  108   49 #> [126,]  109   50 #> [127,]  110   51 #> [128,]  110   52 #> [129,]  111   53 #> [130,]  111   54 #> [131,]  112   55 #> [132,]  113   56 #> [133,]  113   57 #> [134,]  113   58 #> [135,]  114   59 #> [136,]  115   60 #> [137,]  115   61 #> [138,]  116   62 #> [139,]  117   63 #> [140,]  117   64 #> [141,]  117   65 #> [142,]  118   66 #> [143,]  119   67 #> [144,]  119   68 #> [145,]  120   69 #> [146,]  121   70 #> [147,]  121   71 #> [148,]  121   72 #> [149,]  122   73 #> [150,]  123   74 #> [151,]  123   75 #> [152,]  124   76 #> [153,]  125   77 #> [154,]  125   78 #> [155,]  126   79 #> [156,]  126   80 #> [157,]  127   81 #> [158,]  127   82 #> [159,]  128   83 #> [160,]  129   84 #> [161,]  129   85 #> [162,]  130   86 #> [163,]  130   87 #> [164,]  131   88 #> [165,]  131   89 #> [166,]  132   90 #> [167,]  132   91 #> [168,]  133   92 #> [169,]  134   93 #> [170,]  134   94 #> [171,]  135   95 #> [172,]  136   96 #> [173,]  136   97 #> [174,]  136   98 #> [175,]  137   99 #> [176,]  138  100 #> [177,]  138  101 #> [178,]  139  102 #> [179,]  140  103 #> [180,]  140  104 #> [181,]  140  105 #> [182,]  141  106 #> [183,]  142  107 #> [184,]  142  108 #> [185,]  143  109 #> [186,]  144  110 #> [187,]  144  111 #> [188,]  145  112 #> [189,]  145  113 #> [190,]  146  114 #> [191,]  146  115 #> [192,]  147  116 #> [193,]  148  117 #> [194,]  148  118 #> [195,]  149  119 #> [196,]  149  120 #> [197,]  150  121 #> [198,]  150  122 #> [199,]  151  123 #> [200,]  151  124 #> [201,]  152  125 #> [202,]  153  126 #> [203,]  153  127 #> [204,]  152  128 #> [205,]  151  129 #> [206,]  151  130 #> [207,]  150  131 #> [208,]  149  132 #> [209,]  149  133 #> [210,]  149  134 #> [211,]  148  135 #> [212,]  147  136 #> [213,]  147  137 #> [214,]  146  138 #> [215,]  145  139 #> [216,]  145  140 #> [217,]  145  141 #> [218,]  144  142 #> [219,]  143  143 #> [220,]  143  144 #> [221,]  142  145 #> [222,]  141  146 #> [223,]  141  147 #> [224,]  141  148 #> [225,]  140  149 #> [226,]  139  150 #> [227,]  139  151 #> [228,]  138  152 #> [229,]  137  153 #> [230,]  137  154 #> [231,]  137  155 #> [232,]  136  156 #> [233,]  135  157 #> [234,]  135  158 #> [235,]  134  159 #> [236,]  133  160 #> [237,]  133  161 #> [238,]  133  162 #> [239,]  132  163 #> [240,]  131  164 #> [241,]  131  165 #> [242,]  130  166 #> [243,]  129  167 #> [244,]  129  168 #> [245,]  129  169 #> [246,]  128  170 #> [247,]  127  171 #> [248,]  127  172 #> [249,]  126  173 #> [250,]  125  174 #> [251,]  125  175 #> [252,]  125  176 #> [253,]  124  177 #> [254,]  123  178 #> [255,]  123  179 #> [256,]  122  180 #> [257,]  121  181 #> [258,]  121  182 #> [259,]  121  183 #> [260,]  120  184 #> [261,]  119  185 #> [262,]  119  186 #> [263,]  118  187 #> [264,]  117  188 #> [265,]  117  189 #> [266,]  117  190 #> [267,]  116  191 #> [268,]  115  192 #> [269,]  115  193 #> [270,]  114  194 #> [271,]  113  195 #> [272,]  113  196 #> [273,]  113  197 #> [274,]  112  198 #> [275,]  111  199 #> [276,]  111  200 #> [277,]  110  201 #> [278,]  109  202 #> [279,]  109  203 #> [280,]  109  204 #> [281,]  108  205 #> [282,]  107  206 #> [283,]  107  207 #> [284,]  106  208 #> [285,]  105  209 #> [286,]  105  210 #> [287,]  105  211 #> [288,]  106  212 #> [289,]  107  212 #> [290,]  108  212 #> [291,]  109  212 #> [292,]  110  212 #> [293,]  111  212 #> [294,]  112  212 #> [295,]  113  212 #> [296,]  114  212 #> [297,]  115  212 #> [298,]  116  212 #> [299,]  117  212 #> [300,]  118  212 #> [301,]  119  212 #> [302,]  120  212 #> [303,]  121  212 #> [304,]  122  212 #> [305,]  123  212 #> [306,]  124  212 #> [307,]  125  212 #> [308,]  126  212 #> [309,]  127  212 #> [310,]  128  212 #> [311,]  129  212 #> [312,]  130  212 #> [313,]  131  212 #> [314,]  132  212 #> [315,]  133  212 #> [316,]  134  212 #> [317,]  135  212 #> [318,]  136  212 #> [319,]  137  212 #> [320,]  138  212 #> [321,]  139  212 #> [322,]  140  212 #> [323,]  141  212 #> [324,]  142  212 #> [325,]  143  212 #> [326,]  144  212 #> [327,]  145  212 #> [328,]  146  212 #> [329,]  147  212 #> [330,]  148  212 #> [331,]  149  212 #> [332,]  150  212 #> [333,]  151  212 #> [334,]  152  212 #> [335,]  153  212 #> [336,]  154  212 #> [337,]  155  212 #> [338,]  156  212 #> [339,]  157  212 #> [340,]  158  212 #> [341,]  159  212 #> [342,]  160  212 #> [343,]  161  212 #> [344,]  162  212 #> [345,]  163  212 #> [346,]  164  212 #> [347,]  165  212 #> [348,]  166  212 #> [349,]  167  212 #> [350,]  168  212 #> [351,]  169  212 #> [352,]  170  212 #> [353,]  171  212 #> [354,]  172  212 #> [355,]  173  212 #> [356,]  174  212 #> [357,]  175  212 #> [358,]  176  212 #> [359,]  177  212 #> [360,]  178  212 #> [361,]  179  212 #> [362,]  180  211 #> [363,]  181  210 #> [364,]  181  209 #> [365,]  182  208 #> [366,]  182  207 #> [367,]  183  206 #> [368,]  184  205 #> [369,]  184  204 #> [370,]  185  203 #> [371,]  186  202 #> [372,]  186  201 #> [373,]  187  200 #> [374,]  188  199 #> [375,]  188  198 #> [376,]  189  197 #> [377,]  189  196 #> [378,]  190  195 #> [379,]  191  194 #> [380,]  191  193 #> [381,]  192  192 #> [382,]  192  191 #> [383,]  193  190 #> [384,]  194  189 #> [385,]  194  188 #> [386,]  195  187 #> [387,]  195  186 #> [388,]  196  185 #> [389,]  197  184 #> [390,]  197  183 #> [391,]  198  182 #> [392,]  198  181 #> [393,]  199  180 #> [394,]  200  179 #> [395,]  200  178 #> [396,]  201  177 #> [397,]  201  176 #> [398,]  202  175 #> [399,]  203  174 #> [400,]  203  173 #> [401,]  204  173 #> [402,]  204  174 #> [403,]  205  175 #> [404,]  205  176 #> [405,]  206  177 #> [406,]  206  178 #> [407,]  207  179 #> [408,]  207  180 #> [409,]  208  181 #> [410,]  209  182 #> [411,]  209  183 #> [412,]  210  184 #> [413,]  211  185 #> [414,]  211  186 #> [415,]  212  187 #> [416,]  212  188 #> [417,]  213  189 #> [418,]  214  190 #> [419,]  214  191 #> [420,]  214  192 #> [421,]  215  193 #> [422,]  216  194 #> [423,]  216  195 #> [424,]  217  196 #> [425,]  217  197 #> [426,]  218  198 #> [427,]  219  199 #> [428,]  219  200 #> [429,]  220  201 #> [430,]  221  202 #> [431,]  221  203 #> [432,]  222  204 #> [433,]  222  205 #> [434,]  223  206 #> [435,]  224  207 #> [436,]  224  208 #> [437,]  224  209 #> [438,]  225  210 #> [439,]  226  211 #> [440,]  227  212 #> [441,]  228  212 #> [442,]  229  212 #> [443,]  230  212 #> [444,]  231  212 #> [445,]  232  212 #> [446,]  233  212 #> [447,]  234  212 #> [448,]  235  212 #> [449,]  236  212 #> [450,]  237  212 #> [451,]  238  212 #> [452,]  239  212 #> [453,]  240  212 #> [454,]  241  212 #> [455,]  242  212 #> [456,]  243  212 #> [457,]  244  212 #> [458,]  245  212 #> [459,]  246  212 #> [460,]  247  212 #> [461,]  248  212 #> [462,]  249  212 #> [463,]  250  212 #> [464,]  251  212 #> [465,]  252  212 #> [466,]  253  212 #> [467,]  254  212 #> [468,]  255  212 #> [469,]  256  212 #> [470,]  257  212 #> [471,]  258  212 #> [472,]  259  212 #> [473,]  260  212 #> [474,]  261  212 #> [475,]  262  212 #> [476,]  263  212 #> [477,]  264  212 #> [478,]  265  212 #> [479,]  266  212 #> [480,]  267  212 #> [481,]  268  212 #> [482,]  269  212 #> [483,]  270  212 #> [484,]  271  212 #> [485,]  272  212 #> [486,]  273  212 #> [487,]  274  212 #> [488,]  275  212 #> [489,]  276  212 #> [490,]  277  212 #> [491,]  278  212 #> [492,]  279  212 #> [493,]  280  212 #> [494,]  281  212 #> [495,]  282  212 #> [496,]  283  212 #> [497,]  284  212 #> [498,]  285  212 #> [499,]  286  212 #> [500,]  287  212 #> [501,]  288  212 #> [502,]  289  212 #> [503,]  290  212 #> [504,]  291  212 #> [505,]  292  212 #> [506,]  293  212 #> [507,]  294  212 #> [508,]  295  212 #> [509,]  296  212 #> [510,]  297  212 #> [511,]  298  212 #> [512,]  299  212 #> [513,]  300  211 #> [514,]  299  210 #> [515,]  299  209 #> [516,]  298  208 #> [517,]  297  207 #> [518,]  297  206 #> [519,]  297  205 #> [520,]  296  204 #> [521,]  295  203 #> [522,]  295  202 #> [523,]  294  201 #> [524,]  293  200 #> [525,]  293  199 #> [526,]  292  198 #> [527,]  292  197 #> [528,]  291  196 #> [529,]  291  195 #> [530,]  290  194 #> [531,]  289  193 #> [532,]  289  192 #> [533,]  288  191 #> [534,]  288  190 #> [535,]  287  189 #> [536,]  287  188 #> [537,]  286  187 #> [538,]  285  186 #> [539,]  285  185 #> [540,]  284  184 #> [541,]  284  183 #> [542,]  283  182 #> [543,]  282  181 #> [544,]  282  180 #> [545,]  282  179 #> [546,]  281  178 #> [547,]  280  177 #> [548,]  280  176 #> [549,]  279  175 #> [550,]  278  174 #> [551,]  278  173 #> [552,]  278  172 #> [553,]  277  171 #> [554,]  276  170 #> [555,]  276  169 #> [556,]  275  168 #> [557,]  274  167 #> [558,]  274  166 #> [559,]  274  165 #> [560,]  273  164 #> [561,]  272  163 #> [562,]  272  162 #> [563,]  271  161 #> [564,]  270  160 #> [565,]  270  159 #> [566,]  269  158 #> [567,]  269  157 #> [568,]  268  156 #> [569,]  268  155 #> [570,]  267  154 #> [571,]  266  153 #> [572,]  266  152 #> [573,]  265  151 #> [574,]  265  150 #> [575,]  264  149 #> [576,]  264  148 #> [577,]  263  147 #> [578,]  262  146 #> [579,]  262  145 #> [580,]  261  144 #> [581,]  261  143 #> [582,]  260  142 #> [583,]  259  141 #> [584,]  259  140 #> [585,]  259  139 #> [586,]  258  138 #> [587,]  257  137 #> [588,]  257  136 #> [589,]  256  135 #> [590,]  255  134 #> [591,]  255  133 #> [592,]  255  132 #> [593,]  254  131 #> [594,]  253  130 #> [595,]  253  129 #> [596,]  252  128 #> [597,]  251  127 #> [598,]  251  126 #> [599,]  252  125 #> [600,]  253  124 #> [601,]  253  123 #> [602,]  253  122 #> [603,]  254  121 #> [604,]  255  120 #> [605,]  255  119 #> [606,]  256  118 #> [607,]  257  117 #> [608,]  257  116 #> [609,]  257  115 #> [610,]  258  114 #> [611,]  259  113 #> [612,]  259  112 #> [613,]  260  111 #> [614,]  260  110 #> [615,]  261  109 #> [616,]  262  108 #> [617,]  262  107 #> [618,]  263  106 #> [619,]  263  105 #> [620,]  264  104 #> [621,]  264  103 #> [622,]  265  102 #> [623,]  266  101 #> [624,]  266  100 #> [625,]  267   99 #> [626,]  267   98 #> [627,]  268   97 #> [628,]  268   96 #> [629,]  269   95 #> [630,]  270   94 #> [631,]  270   93 #> [632,]  271   92 #> [633,]  272   91 #> [634,]  272   90 #> [635,]  272   89 #> [636,]  273   88 #> [637,]  274   87 #> [638,]  274   86 #> [639,]  275   85 #> [640,]  276   84 #> [641,]  276   83 #> [642,]  276   82 #> [643,]  277   81 #> [644,]  278   80 #> [645,]  278   79 #> [646,]  279   78 #> [647,]  279   77 #> [648,]  280   76 #> [649,]  281   75 #> [650,]  281   74 #> [651,]  282   73 #> [652,]  282   72 #> [653,]  283   71 #> [654,]  283   70 #> [655,]  284   69 #> [656,]  285   68 #> [657,]  285   67 #> [658,]  286   66 #> [659,]  286   65 #> [660,]  287   64 #> [661,]  287   63 #> [662,]  288   62 #> [663,]  289   61 #> [664,]  289   60 #> [665,]  290   59 #> [666,]  291   58 #> [667,]  291   57 #> [668,]  291   56 #> [669,]  292   55 #> [670,]  293   54 #> [671,]  293   53 #> [672,]  294   52 #> [673,]  295   51 #> [674,]  295   50 #> [675,]  295   49 #> [676,]  296   48 #> [677,]  297   47 #> [678,]  297   46 #> [679,]  298   45 #> [680,]  299   44 #> [681,]  299   43 #> [682,]  300   42 #> [683,]  300   41 #> [684,]  301   40 #> [685,]  301   39 #> [686,]  302   38 #> [687,]  301   37 #> [688,]  300   37 #> [689,]  299   37 #> [690,]  298   37 #> [691,]  297   37 #> [692,]  296   37 #> [693,]  295   37 #> [694,]  294   37 #> [695,]  293   37 #> [696,]  292   37 #> [697,]  291   37 #> [698,]  290   37 #> [699,]  289   37 #> [700,]  288   37 #> [701,]  287   37 #> [702,]  286   37 #> [703,]  285   37 #> [704,]  284   37 #> [705,]  283   37 #> [706,]  282   37 #> [707,]  281   37 #> [708,]  280   37 #> [709,]  279   37 #> [710,]  278   37 #> [711,]  277   37 #> [712,]  276   37 #> [713,]  275   37 #> [714,]  274   37 #> [715,]  273   37 #> [716,]  272   37 #> [717,]  271   37 #> [718,]  270   37 #> [719,]  269   37 #> [720,]  268   37 #> [721,]  267   37 #> [722,]  266   37 #> [723,]  265   37 #> [724,]  264   37 #> [725,]  263   37 #> [726,]  262   37 #> [727,]  261   37 #> [728,]  260   37 #> [729,]  259   37 #> [730,]  258   37 #> [731,]  257   37 #> [732,]  256   37 #> [733,]  255   37 #> [734,]  254   37 #> [735,]  253   37 #> [736,]  252   37 #> [737,]  251   37 #> [738,]  250   37 #> [739,]  249   37 #> [740,]  248   37 #> [741,]  247   37 #> [742,]  246   37 #> [743,]  245   37 #> [744,]  244   37 #> [745,]  243   37 #> [746,]  242   37 #> [747,]  241   37 #> [748,]  240   37 #> [749,]  239   37 #> [750,]  238   37 #> [751,]  237   37 #> [752,]  236   37 #> [753,]  235   37 #> [754,]  234   37 #> [755,]  233   37 #> [756,]  232   37 #> [757,]  231   37 #> [758,]  230   37 #> [759,]  229   37 #> [760,]  228   37 #> [761,]  227   37 #> [762,]  226   37 #> [763,]  225   38 #> [764,]  225   39 #> [765,]  224   40 #> [766,]  224   41 #> [767,]  223   42 #> [768,]  222   43 #> [769,]  222   44 #> [770,]  221   45 #> [771,]  221   46 #> [772,]  220   47 #> [773,]  219   48 #> [774,]  219   49 #> [775,]  218   50 #> [776,]  218   51 #> [777,]  217   52 #> [778,]  216   53 #> [779,]  216   54 #> [780,]  215   55 #> [781,]  214   56 #> [782,]  214   57 #> [783,]  213   58 #> [784,]  213   59 #> [785,]  212   60 #> [786,]  211   61 #> [787,]  211   62 #> [788,]  210   63 #> [789,]  210   64 #> [790,]  209   65 #> [791,]  208   66 #> [792,]  208   67 #> [793,]  207   68 #> [794,]  207   69 #> [795,]  206   70 #> [796,]  205   71 #> [797,]  205   72 #> [798,]  205   73 #> [799,]  204   74 #> [800,]  203   75 #> [801,]  203   76 #> [802,]  202   77 #> [803,]  202   78 #> [804,]  201   78 #> [805,]  201   77 #> [806,]  200   76 #>  #> $corona #>        [,1] [,2] #>   [1,]  200  106 #>   [2,]  199  105 #>   [3,]  198  105 #>   [4,]  197  106 #>   [5,]  196  105 #>   [6,]  195  105 #>   [7,]  194  105 #>   [8,]  193  106 #>   [9,]  192  106 #>  [10,]  191  106 #>  [11,]  190  106 #>  [12,]  189  106 #>  [13,]  188  106 #>  [14,]  187  106 #>  [15,]  186  106 #>  [16,]  185  106 #>  [17,]  184  106 #>  [18,]  183  106 #>  [19,]  182  106 #>  [20,]  181  106 #>  [21,]  180  106 #>  [22,]  179  106 #>  [23,]  178  106 #>  [24,]  177  107 #>  [25,]  176  107 #>  [26,]  175  107 #>  [27,]  174  107 #>  [28,]  173  107 #>  [29,]  172  107 #>  [30,]  171  107 #>  [31,]  170  107 #>  [32,]  169  107 #>  [33,]  168  108 #>  [34,]  167  108 #>  [35,]  166  108 #>  [36,]  165  108 #>  [37,]  164  108 #>  [38,]  163  107 #>  [39,]  162  107 #>  [40,]  161  106 #>  [41,]  160  105 #>  [42,]  160  104 #>  [43,]  159  103 #>  [44,]  158  102 #>  [45,]  157  101 #>  [46,]  156  100 #>  [47,]  156   99 #>  [48,]  155   98 #>  [49,]  154   97 #>  [50,]  153   96 #>  [51,]  153   95 #>  [52,]  152   94 #>  [53,]  151   93 #>  [54,]  150   92 #>  [55,]  149   91 #>  [56,]  148   90 #>  [57,]  147   89 #>  [58,]  146   88 #>  [59,]  145   87 #>  [60,]  144   86 #>  [61,]  143   85 #>  [62,]  142   85 #>  [63,]  141   84 #>  [64,]  140   83 #>  [65,]  139   83 #>  [66,]  138   82 #>  [67,]  137   81 #>  [68,]  136   80 #>  [69,]  135   79 #>  [70,]  134   79 #>  [71,]  133   78 #>  [72,]  132   77 #>  [73,]  131   76 #>  [74,]  130   75 #>  [75,]  129   74 #>  [76,]  128   73 #>  [77,]  128   72 #>  [78,]  127   71 #>  [79,]  126   70 #>  [80,]  125   69 #>  [81,]  125   68 #>  [82,]  124   67 #>  [83,]  124   66 #>  [84,]  124   65 #>  [85,]  123   64 #>  [86,]  123   63 #>  [87,]  123   62 #>  [88,]  123   61 #>  [89,]  122   60 #>  [90,]  122   59 #>  [91,]  122   58 #>  [92,]  122   57 #>  [93,]  122   56 #>  [94,]  123   55 #>  [95,]  124   54 #>  [96,]  125   53 #>  [97,]  126   52 #>  [98,]  127   52 #>  [99,]  128   51 #> [100,]  129   50 #> [101,]  129   49 #> [102,]  129   48 #> [103,]  128   47 #> [104,]  127   46 #> [105,]  126   46 #> [106,]  125   45 #> [107,]  124   45 #> [108,]  123   45 #> [109,]  122   45 #> [110,]  121   45 #> [111,]  120   45 #> [112,]  119   45 #> [113,]  118   45 #> [114,]  117   45 #> [115,]  116   45 #> [116,]  115   45 #> [117,]  114   45 #> [118,]  113   46 #> [119,]  112   46 #> [120,]  111   47 #> [121,]  110   48 #> [122,]  110   49 #> [123,]  110   50 #> [124,]  109   51 #> [125,]  109   52 #> [126,]  109   53 #> [127,]  109   54 #> [128,]  109   55 #> [129,]  109   56 #> [130,]  109   57 #> [131,]  109   58 #> [132,]  109   59 #> [133,]  109   60 #> [134,]  109   61 #> [135,]  109   62 #> [136,]  109   63 #> [137,]  109   64 #> [138,]  109   65 #> [139,]  109   66 #> [140,]  109   67 #> [141,]  109   68 #> [142,]  109   69 #> [143,]  109   70 #> [144,]  109   71 #> [145,]  109   72 #> [146,]  109   73 #> [147,]  109   74 #> [148,]  109   75 #> [149,]  109   76 #> [150,]  109   77 #> [151,]  109   78 #> [152,]  110   79 #> [153,]  111   80 #> [154,]  112   81 #> [155,]  113   82 #> [156,]  114   83 #> [157,]  115   84 #> [158,]  116   85 #> [159,]  117   86 #> [160,]  118   87 #> [161,]  119   88 #> [162,]  120   89 #> [163,]  121   90 #> [164,]  122   91 #> [165,]  122   92 #> [166,]  123   93 #> [167,]  124   94 #> [168,]  125   95 #> [169,]  125   96 #> [170,]  125   97 #> [171,]  126   98 #> [172,]  125   99 #> [173,]  126  100 #> [174,]  126  101 #> [175,]  125  101 #> [176,]  125  100 #> [177,]  124   99 #> [178,]  124   98 #> [179,]  123   97 #> [180,]  123   96 #> [181,]  122   95 #> [182,]  121   94 #> [183,]  120   93 #> [184,]  119   92 #> [185,]  118   91 #> [186,]  117   90 #> [187,]  116   89 #> [188,]  115   88 #> [189,]  114   87 #> [190,]  113   87 #> [191,]  112   86 #> [192,]  111   85 #> [193,]  110   85 #> [194,]  109   84 #> [195,]  108   84 #> [196,]  107   84 #> [197,]  106   83 #> [198,]  105   83 #> [199,]  104   82 #> [200,]  103   83 #> [201,]  103   84 #> [202,]  103   85 #> [203,]  104   86 #> [204,]  105   87 #> [205,]  106   88 #> [206,]  107   89 #> [207,]  108   90 #> [208,]  109   91 #> [209,]  110   92 #> [210,]  111   93 #> [211,]  111   94 #> [212,]  112   95 #> [213,]  112   96 #> [214,]  112   97 #> [215,]  113   98 #> [216,]  113   99 #> [217,]  113  100 #> [218,]  113  101 #> [219,]  114  102 #> [220,]  114  103 #> [221,]  114  104 #> [222,]  114  105 #> [223,]  114  106 #> [224,]  114  107 #> [225,]  115  108 #> [226,]  115  109 #> [227,]  114  110 #> [228,]  115  111 #> [229,]  115  112 #> [230,]  115  113 #> [231,]  115  114 #> [232,]  115  115 #> [233,]  115  116 #> [234,]  115  117 #> [235,]  116  118 #> [236,]  116  119 #> [237,]  116  120 #> [238,]  116  121 #> [239,]  116  122 #> [240,]  116  123 #> [241,]  115  124 #> [242,]  115  125 #> [243,]  115  126 #> [244,]  115  127 #> [245,]  115  128 #> [246,]  115  129 #> [247,]  115  130 #> [248,]  115  131 #> [249,]  115  132 #> [250,]  116  133 #> [251,]  115  134 #> [252,]  116  135 #> [253,]  116  136 #> [254,]  116  137 #> [255,]  117  138 #> [256,]  117  139 #> [257,]  117  140 #> [258,]  118  141 #> [259,]  118  142 #> [260,]  118  143 #> [261,]  119  144 #> [262,]  120  145 #> [263,]  120  146 #> [264,]  121  147 #> [265,]  121  148 #> [266,]  122  149 #> [267,]  123  150 #> [268,]  123  151 #> [269,]  124  152 #> [270,]  125  153 #> [271,]  126  154 #> [272,]  127  155 #> [273,]  128  156 #> [274,]  129  157 #> [275,]  130  158 #> [276,]  131  159 #> [277,]  132  160 #> [278,]  133  161 #> [279,]  134  161 #> [280,]  135  162 #> [281,]  136  162 #> [282,]  137  162 #> [283,]  138  163 #> [284,]  139  163 #> [285,]  140  163 #> [286,]  141  163 #> [287,]  142  164 #> [288,]  143  164 #> [289,]  144  164 #> [290,]  145  164 #> [291,]  146  164 #> [292,]  147  164 #> [293,]  148  165 #> [294,]  149  165 #> [295,]  150  165 #> [296,]  151  165 #> [297,]  152  165 #> [298,]  153  165 #> [299,]  154  166 #> [300,]  155  166 #> [301,]  156  165 #> [302,]  157  165 #> [303,]  158  165 #> [304,]  159  165 #> [305,]  160  166 #> [306,]  161  166 #> [307,]  162  166 #> [308,]  163  166 #> [309,]  164  166 #> [310,]  165  166 #> [311,]  166  166 #> [312,]  167  166 #> [313,]  168  166 #> [314,]  169  166 #> [315,]  170  166 #> [316,]  171  166 #> [317,]  172  166 #> [318,]  173  166 #> [319,]  174  166 #> [320,]  175  166 #> [321,]  176  166 #> [322,]  177  166 #> [323,]  178  166 #> [324,]  179  166 #> [325,]  180  166 #> [326,]  181  166 #> [327,]  182  166 #> [328,]  183  166 #> [329,]  184  166 #> [330,]  185  166 #> [331,]  186  166 #> [332,]  187  166 #> [333,]  188  166 #> [334,]  189  165 #> [335,]  190  165 #> [336,]  191  165 #> [337,]  192  165 #> [338,]  193  165 #> [339,]  194  165 #> [340,]  195  165 #> [341,]  196  165 #> [342,]  197  165 #> [343,]  198  165 #> [344,]  199  165 #> [345,]  200  165 #> [346,]  201  165 #> [347,]  202  165 #> [348,]  203  165 #> [349,]  204  165 #> [350,]  205  165 #> [351,]  206  166 #> [352,]  207  166 #> [353,]  208  166 #> [354,]  209  166 #> [355,]  210  166 #> [356,]  211  166 #> [357,]  212  166 #> [358,]  213  166 #> [359,]  214  166 #> [360,]  215  167 #> [361,]  216  167 #> [362,]  217  167 #> [363,]  218  167 #> [364,]  219  167 #> [365,]  220  168 #> [366,]  221  168 #> [367,]  222  168 #> [368,]  223  169 #> [369,]  224  169 #> [370,]  225  169 #> [371,]  226  170 #> [372,]  227  170 #> [373,]  228  171 #> [374,]  229  171 #> [375,]  230  172 #> [376,]  231  172 #> [377,]  232  173 #> [378,]  233  174 #> [379,]  234  174 #> [380,]  235  175 #> [381,]  236  176 #> [382,]  237  177 #> [383,]  238  178 #> [384,]  238  179 #> [385,]  239  180 #> [386,]  240  181 #> [387,]  241  182 #> [388,]  241  183 #> [389,]  242  184 #> [390,]  243  185 #> [391,]  243  186 #> [392,]  244  187 #> [393,]  245  188 #> [394,]  245  189 #> [395,]  246  190 #> [396,]  246  191 #> [397,]  247  192 #> [398,]  247  193 #> [399,]  248  194 #> [400,]  249  195 #> [401,]  249  196 #> [402,]  250  197 #> [403,]  250  198 #> [404,]  251  199 #> [405,]  251  200 #> [406,]  251  201 #> [407,]  252  202 #> [408,]  252  203 #> [409,]  253  204 #> [410,]  253  205 #> [411,]  254  206 #> [412,]  254  207 #> [413,]  254  208 #> [414,]  255  209 #> [415,]  255  210 #> [416,]  256  211 #> [417,]  256  212 #> [418,]  256  213 #> [419,]  257  214 #> [420,]  257  215 #> [421,]  257  216 #> [422,]  258  217 #> [423,]  258  218 #> [424,]  259  219 #> [425,]  260  220 #> [426,]  261  221 #> [427,]  262  222 #> [428,]  263  223 #> [429,]  264  224 #> [430,]  265  225 #> [431,]  266  225 #> [432,]  267  226 #> [433,]  268  226 #> [434,]  269  226 #> [435,]  270  227 #> [436,]  271  227 #> [437,]  272  227 #> [438,]  273  227 #> [439,]  274  227 #> [440,]  275  227 #> [441,]  276  227 #> [442,]  277  227 #> [443,]  278  227 #> [444,]  279  228 #> [445,]  280  227 #> [446,]  281  227 #> [447,]  282  227 #> [448,]  283  227 #> [449,]  284  226 #> [450,]  285  226 #> [451,]  286  225 #> [452,]  287  224 #> [453,]  288  224 #> [454,]  289  223 #> [455,]  290  222 #> [456,]  291  221 #> [457,]  292  220 #> [458,]  293  219 #> [459,]  294  218 #> [460,]  295  217 #> [461,]  295  216 #> [462,]  296  215 #> [463,]  297  215 #> [464,]  298  214 #> [465,]  299  214 #> [466,]  300  214 #> [467,]  301  214 #> [468,]  302  214 #> [469,]  303  214 #> [470,]  304  214 #> [471,]  305  214 #> [472,]  306  214 #> [473,]  307  214 #> [474,]  308  214 #> [475,]  309  214 #> [476,]  310  214 #> [477,]  311  214 #> [478,]  312  214 #> [479,]  313  214 #> [480,]  314  214 #> [481,]  315  213 #> [482,]  315  212 #> [483,]  316  211 #> [484,]  316  210 #> [485,]  316  209 #> [486,]  316  208 #> [487,]  316  207 #> [488,]  315  206 #> [489,]  316  205 #> [490,]  315  204 #> [491,]  316  203 #> [492,]  316  202 #> [493,]  316  201 #> [494,]  316  200 #> [495,]  316  199 #> [496,]  316  198 #> [497,]  316  197 #> [498,]  316  196 #> [499,]  315  195 #> [500,]  315  194 #> [501,]  314  193 #> [502,]  314  192 #> [503,]  313  191 #> [504,]  312  191 #> [505,]  311  190 #> [506,]  310  190 #> [507,]  309  189 #> [508,]  308  189 #> [509,]  307  189 #> [510,]  306  189 #> [511,]  305  189 #> [512,]  304  188 #> [513,]  303  188 #> [514,]  302  188 #> [515,]  301  188 #> [516,]  300  188 #> [517,]  299  188 #> [518,]  298  188 #> [519,]  297  188 #> [520,]  296  188 #> [521,]  295  188 #> [522,]  294  188 #> [523,]  293  187 #> [524,]  292  187 #> [525,]  291  186 #> [526,]  291  185 #> [527,]  291  184 #> [528,]  290  183 #> [529,]  290  182 #> [530,]  290  181 #> [531,]  289  180 #> [532,]  289  179 #> [533,]  288  178 #> [534,]  288  177 #> [535,]  288  176 #> [536,]  287  175 #> [537,]  287  174 #> [538,]  286  173 #> [539,]  286  172 #> [540,]  286  171 #> [541,]  285  170 #> [542,]  285  169 #> [543,]  284  168 #> [544,]  284  167 #> [545,]  284  166 #> [546,]  283  165 #> [547,]  283  164 #> [548,]  282  163 #> [549,]  282  162 #> [550,]  282  161 #> [551,]  281  160 #> [552,]  281  159 #> [553,]  280  158 #> [554,]  280  157 #> [555,]  280  156 #> [556,]  279  155 #> [557,]  279  154 #> [558,]  278  153 #> [559,]  278  152 #> [560,]  278  151 #> [561,]  277  150 #> [562,]  278  149 #> [563,]  277  148 #> [564,]  277  147 #> [565,]  277  146 #> [566,]  277  145 #> [567,]  277  144 #> [568,]  276  143 #> [569,]  276  142 #> [570,]  277  141 #> [571,]  276  140 #> [572,]  276  139 #> [573,]  276  138 #> [574,]  276  137 #> [575,]  276  136 #> [576,]  275  135 #> [577,]  276  134 #> [578,]  275  133 #> [579,]  275  132 #> [580,]  275  131 #> [581,]  275  130 #> [582,]  274  129 #> [583,]  274  128 #> [584,]  274  127 #> [585,]  274  126 #> [586,]  274  125 #> [587,]  273  124 #> [588,]  273  123 #> [589,]  273  122 #> [590,]  272  121 #> [591,]  272  120 #> [592,]  272  119 #> [593,]  271  118 #> [594,]  271  117 #> [595,]  270  116 #> [596,]  269  115 #> [597,]  268  114 #> [598,]  268  113 #> [599,]  267  112 #> [600,]  267  111 #> [601,]  267  110 #> [602,]  267  109 #> [603,]  267  108 #> [604,]  267  107 #> [605,]  266  106 #> [606,]  266  105 #> [607,]  266  104 #> [608,]  266  103 #> [609,]  266  102 #> [610,]  266  101 #> [611,]  266  100 #> [612,]  266   99 #> [613,]  266   98 #> [614,]  266   97 #> [615,]  266   96 #> [616,]  266   95 #> [617,]  266   94 #> [618,]  266   93 #> [619,]  266   92 #> [620,]  266   91 #> [621,]  266   90 #> [622,]  266   89 #> [623,]  266   88 #> [624,]  266   87 #> [625,]  266   86 #> [626,]  266   85 #> [627,]  266   84 #> [628,]  266   83 #> [629,]  266   82 #> [630,]  266   81 #> [631,]  266   80 #> [632,]  266   79 #> [633,]  266   78 #> [634,]  267   77 #> [635,]  267   76 #> [636,]  267   75 #> [637,]  267   74 #> [638,]  267   73 #> [639,]  267   72 #> [640,]  267   71 #> [641,]  267   70 #> [642,]  267   69 #> [643,]  267   68 #> [644,]  268   67 #> [645,]  267   66 #> [646,]  268   65 #> [647,]  268   64 #> [648,]  269   63 #> [649,]  270   62 #> [650,]  271   62 #> [651,]  272   61 #> [652,]  273   61 #> [653,]  274   60 #> [654,]  275   60 #> [655,]  276   59 #> [656,]  277   58 #> [657,]  277   57 #> [658,]  277   56 #> [659,]  277   55 #> [660,]  276   54 #> [661,]  275   53 #> [662,]  274   53 #> [663,]  273   52 #> [664,]  272   52 #> [665,]  271   51 #> [666,]  270   51 #> [667,]  269   50 #> [668,]  268   50 #> [669,]  267   50 #> [670,]  266   50 #> [671,]  265   50 #> [672,]  264   50 #> [673,]  263   50 #> [674,]  262   50 #> [675,]  261   51 #> [676,]  260   52 #> [677,]  260   53 #> [678,]  260   54 #> [679,]  259   55 #> [680,]  259   56 #> [681,]  259   57 #> [682,]  259   58 #> [683,]  258   59 #> [684,]  258   60 #> [685,]  258   61 #> [686,]  258   62 #> [687,]  258   63 #> [688,]  257   64 #> [689,]  257   65 #> [690,]  257   66 #> [691,]  257   67 #> [692,]  256   68 #> [693,]  256   69 #> [694,]  256   70 #> [695,]  256   71 #> [696,]  255   72 #> [697,]  255   73 #> [698,]  255   74 #> [699,]  254   75 #> [700,]  254   76 #> [701,]  254   77 #> [702,]  253   78 #> [703,]  253   79 #> [704,]  252   80 #> [705,]  252   81 #> [706,]  252   82 #> [707,]  251   83 #> [708,]  251   84 #> [709,]  250   85 #> [710,]  250   86 #> [711,]  249   87 #> [712,]  249   88 #> [713,]  249   89 #> [714,]  248   90 #> [715,]  248   91 #> [716,]  247   92 #> [717,]  247   93 #> [718,]  247   94 #> [719,]  246   95 #> [720,]  246   96 #> [721,]  245   97 #> [722,]  245   98 #> [723,]  244   99 #> [724,]  243  100 #> [725,]  243  101 #> [726,]  242  102 #> [727,]  241  103 #> [728,]  240  104 #> [729,]  239  104 #> [730,]  238  104 #> [731,]  237  104 #> [732,]  236  105 #> [733,]  235  105 #> [734,]  234  105 #> [735,]  233  105 #> [736,]  232  105 #> [737,]  231  105 #> [738,]  230  105 #> [739,]  229  105 #> [740,]  228  105 #> [741,]  227  105 #> [742,]  226  105 #> [743,]  225  105 #> [744,]  224  105 #> [745,]  223  105 #> [746,]  222  105 #> [747,]  221  105 #> [748,]  220  105 #> [749,]  219  105 #> [750,]  218  105 #> [751,]  217  105 #> [752,]  216  105 #> [753,]  215  106 #> [754,]  214  106 #> [755,]  213  106 #> [756,]  212  106 #> [757,]  211  106 #> [758,]  210  106 #> [759,]  209  106 #> [760,]  208  106 #> [761,]  207  106 #> [762,]  206  106 #> [763,]  205  106 #> [764,]  204  106 #> [765,]  203  106 #> [766,]  202  106 #> [767,]  201  106 #> [768,]  200  106 #>  #> $deusventrue #>        [,1] [,2] #>   [1,]  200   87 #>   [2,]  199   86 #>   [3,]  198   86 #>   [4,]  197   87 #>   [5,]  196   87 #>   [6,]  195   87 #>   [7,]  194   87 #>   [8,]  193   87 #>   [9,]  192   87 #>  [10,]  191   87 #>  [11,]  190   87 #>  [12,]  189   87 #>  [13,]  188   87 #>  [14,]  187   87 #>  [15,]  186   87 #>  [16,]  185   87 #>  [17,]  184   87 #>  [18,]  183   87 #>  [19,]  182   87 #>  [20,]  181   87 #>  [21,]  180   87 #>  [22,]  179   87 #>  [23,]  178   87 #>  [24,]  177   87 #>  [25,]  176   87 #>  [26,]  175   87 #>  [27,]  174   87 #>  [28,]  173   87 #>  [29,]  172   87 #>  [30,]  171   87 #>  [31,]  170   87 #>  [32,]  169   87 #>  [33,]  168   87 #>  [34,]  167   87 #>  [35,]  166   87 #>  [36,]  165   87 #>  [37,]  164   87 #>  [38,]  163   87 #>  [39,]  162   88 #>  [40,]  161   88 #>  [41,]  160   88 #>  [42,]  159   88 #>  [43,]  158   88 #>  [44,]  157   88 #>  [45,]  156   89 #>  [46,]  155   89 #>  [47,]  154   89 #>  [48,]  153   90 #>  [49,]  153   91 #>  [50,]  152   92 #>  [51,]  152   93 #>  [52,]  152   94 #>  [53,]  151   95 #>  [54,]  151   96 #>  [55,]  151   97 #>  [56,]  151   98 #>  [57,]  150   99 #>  [58,]  151  100 #>  [59,]  151  101 #>  [60,]  151  102 #>  [61,]  151  103 #>  [62,]  151  104 #>  [63,]  150  105 #>  [64,]  151  106 #>  [65,]  151  107 #>  [66,]  151  108 #>  [67,]  151  109 #>  [68,]  152  110 #>  [69,]  151  111 #>  [70,]  150  111 #>  [71,]  149  112 #>  [72,]  148  113 #>  [73,]  147  113 #>  [74,]  146  113 #>  [75,]  145  114 #>  [76,]  144  115 #>  [77,]  143  115 #>  [78,]  142  115 #>  [79,]  141  116 #>  [80,]  140  116 #>  [81,]  139  117 #>  [82,]  138  117 #>  [83,]  137  117 #>  [84,]  136  118 #>  [85,]  135  118 #>  [86,]  134  119 #>  [87,]  133  119 #>  [88,]  132  119 #>  [89,]  131  119 #>  [90,]  130  120 #>  [91,]  129  120 #>  [92,]  128  120 #>  [93,]  127  120 #>  [94,]  126  120 #>  [95,]  125  120 #>  [96,]  124  120 #>  [97,]  123  120 #>  [98,]  122  120 #>  [99,]  121  120 #> [100,]  120  120 #> [101,]  119  119 #> [102,]  118  119 #> [103,]  117  119 #> [104,]  116  119 #> [105,]  115  118 #> [106,]  114  118 #> [107,]  113  118 #> [108,]  112  118 #> [109,]  111  117 #> [110,]  110  117 #> [111,]  109  117 #> [112,]  108  116 #> [113,]  107  116 #> [114,]  106  115 #> [115,]  105  114 #> [116,]  104  114 #> [117,]  103  113 #> [118,]  102  113 #> [119,]  101  112 #> [120,]  100  111 #> [121,]   99  110 #> [122,]   98  109 #> [123,]   97  109 #> [124,]   96  108 #> [125,]   95  107 #> [126,]   94  106 #> [127,]   93  105 #> [128,]   92  104 #> [129,]   91  103 #> [130,]   90  102 #> [131,]   89  101 #> [132,]   88  100 #> [133,]   87  100 #> [134,]   86   99 #> [135,]   85   98 #> [136,]   84   97 #> [137,]   83   96 #> [138,]   82   95 #> [139,]   81   94 #> [140,]   80   93 #> [141,]   79   92 #> [142,]   78   91 #> [143,]   77   90 #> [144,]   76   89 #> [145,]   75   88 #> [146,]   74   88 #> [147,]   73   87 #> [148,]   72   86 #> [149,]   71   85 #> [150,]   70   84 #> [151,]   69   83 #> [152,]   68   83 #> [153,]   67   82 #> [154,]   66   81 #> [155,]   65   81 #> [156,]   64   80 #> [157,]   63   79 #> [158,]   62   79 #> [159,]   61   78 #> [160,]   60   78 #> [161,]   59   78 #> [162,]   58   77 #> [163,]   57   78 #> [164,]   56   78 #> [165,]   55   79 #> [166,]   54   80 #> [167,]   53   81 #> [168,]   53   82 #> [169,]   52   83 #> [170,]   52   84 #> [171,]   51   85 #> [172,]   51   86 #> [173,]   51   87 #> [174,]   51   88 #> [175,]   51   89 #> [176,]   50   90 #> [177,]   50   91 #> [178,]   50   92 #> [179,]   50   93 #> [180,]   50   94 #> [181,]   49   95 #> [182,]   49   96 #> [183,]   49   97 #> [184,]   50   98 #> [185,]   50   99 #> [186,]   50  100 #> [187,]   50  101 #> [188,]   50  102 #> [189,]   50  103 #> [190,]   50  104 #> [191,]   50  105 #> [192,]   50  106 #> [193,]   50  107 #> [194,]   50  108 #> [195,]   49  109 #> [196,]   50  110 #> [197,]   50  111 #> [198,]   50  112 #> [199,]   50  113 #> [200,]   50  114 #> [201,]   50  115 #> [202,]   50  116 #> [203,]   50  117 #> [204,]   51  118 #> [205,]   50  119 #> [206,]   51  120 #> [207,]   51  121 #> [208,]   51  122 #> [209,]   51  123 #> [210,]   51  124 #> [211,]   52  125 #> [212,]   52  126 #> [213,]   52  127 #> [214,]   53  128 #> [215,]   53  129 #> [216,]   54  130 #> [217,]   55  131 #> [218,]   55  132 #> [219,]   55  133 #> [220,]   54  134 #> [221,]   54  135 #> [222,]   53  136 #> [223,]   52  137 #> [224,]   52  138 #> [225,]   51  139 #> [226,]   50  140 #> [227,]   50  141 #> [228,]   49  142 #> [229,]   49  143 #> [230,]   48  144 #> [231,]   47  145 #> [232,]   47  146 #> [233,]   47  147 #> [234,]   46  148 #> [235,]   46  149 #> [236,]   45  150 #> [237,]   45  151 #> [238,]   45  152 #> [239,]   44  153 #> [240,]   44  154 #> [241,]   43  155 #> [242,]   43  156 #> [243,]   43  157 #> [244,]   42  158 #> [245,]   42  159 #> [246,]   42  160 #> [247,]   42  161 #> [248,]   41  162 #> [249,]   41  163 #> [250,]   41  164 #> [251,]   40  165 #> [252,]   40  166 #> [253,]   40  167 #> [254,]   40  168 #> [255,]   40  169 #> [256,]   39  170 #> [257,]   39  171 #> [258,]   39  172 #> [259,]   39  173 #> [260,]   39  174 #> [261,]   38  175 #> [262,]   39  176 #> [263,]   39  177 #> [264,]   39  178 #> [265,]   39  179 #> [266,]   39  180 #> [267,]   38  181 #> [268,]   39  182 #> [269,]   39  183 #> [270,]   39  184 #> [271,]   39  185 #> [272,]   40  186 #> [273,]   41  187 #> [274,]   42  188 #> [275,]   43  189 #> [276,]   44  190 #> [277,]   45  190 #> [278,]   46  190 #> [279,]   47  190 #> [280,]   48  190 #> [281,]   49  190 #> [282,]   50  190 #> [283,]   51  190 #> [284,]   52  190 #> [285,]   53  190 #> [286,]   54  189 #> [287,]   55  189 #> [288,]   56  189 #> [289,]   57  188 #> [290,]   58  188 #> [291,]   59  188 #> [292,]   60  187 #> [293,]   61  187 #> [294,]   62  186 #> [295,]   63  186 #> [296,]   64  185 #> [297,]   65  185 #> [298,]   66  184 #> [299,]   67  184 #> [300,]   68  183 #> [301,]   69  183 #> [302,]   70  182 #> [303,]   71  182 #> [304,]   72  181 #> [305,]   73  180 #> [306,]   74  180 #> [307,]   75  179 #> [308,]   76  179 #> [309,]   77  178 #> [310,]   78  177 #> [311,]   79  177 #> [312,]   80  176 #> [313,]   81  176 #> [314,]   82  175 #> [315,]   83  174 #> [316,]   84  174 #> [317,]   85  173 #> [318,]   86  173 #> [319,]   87  172 #> [320,]   88  171 #> [321,]   89  171 #> [322,]   90  170 #> [323,]   91  170 #> [324,]   92  169 #> [325,]   93  168 #> [326,]   94  168 #> [327,]   95  167 #> [328,]   96  166 #> [329,]   97  166 #> [330,]   98  165 #> [331,]   99  165 #> [332,]  100  164 #> [333,]  101  164 #> [334,]  102  163 #> [335,]  103  162 #> [336,]  104  162 #> [337,]  105  162 #> [338,]  106  161 #> [339,]  107  161 #> [340,]  108  160 #> [341,]  109  160 #> [342,]  110  160 #> [343,]  111  159 #> [344,]  112  159 #> [345,]  113  159 #> [346,]  114  158 #> [347,]  115  158 #> [348,]  116  158 #> [349,]  117  158 #> [350,]  118  157 #> [351,]  119  157 #> [352,]  120  157 #> [353,]  121  157 #> [354,]  122  157 #> [355,]  123  156 #> [356,]  124  157 #> [357,]  125  156 #> [358,]  126  157 #> [359,]  127  157 #> [360,]  128  157 #> [361,]  129  157 #> [362,]  130  158 #> [363,]  131  158 #> [364,]  132  158 #> [365,]  133  159 #> [366,]  134  159 #> [367,]  135  160 #> [368,]  136  160 #> [369,]  137  161 #> [370,]  138  161 #> [371,]  139  162 #> [372,]  140  162 #> [373,]  141  163 #> [374,]  142  164 #> [375,]  143  164 #> [376,]  144  165 #> [377,]  145  165 #> [378,]  146  166 #> [379,]  147  166 #> [380,]  148  167 #> [381,]  149  167 #> [382,]  150  168 #> [383,]  151  168 #> [384,]  152  169 #> [385,]  153  169 #> [386,]  154  170 #> [387,]  155  170 #> [388,]  156  171 #> [389,]  157  171 #> [390,]  158  172 #> [391,]  159  172 #> [392,]  160  173 #> [393,]  161  173 #> [394,]  162  174 #> [395,]  163  174 #> [396,]  164  174 #> [397,]  165  175 #> [398,]  166  175 #> [399,]  167  175 #> [400,]  168  176 #> [401,]  169  176 #> [402,]  168  177 #> [403,]  168  178 #> [404,]  167  179 #> [405,]  166  180 #> [406,]  165  181 #> [407,]  165  182 #> [408,]  164  183 #> [409,]  163  184 #> [410,]  162  185 #> [411,]  161  186 #> [412,]  160  187 #> [413,]  159  188 #> [414,]  159  189 #> [415,]  158  190 #> [416,]  157  191 #> [417,]  156  192 #> [418,]  155  193 #> [419,]  154  194 #> [420,]  153  195 #> [421,]  152  196 #> [422,]  151  197 #> [423,]  150  198 #> [424,]  149  199 #> [425,]  148  200 #> [426,]  147  201 #> [427,]  146  202 #> [428,]  145  203 #> [429,]  144  204 #> [430,]  143  205 #> [431,]  142  206 #> [432,]  142  207 #> [433,]  141  208 #> [434,]  140  209 #> [435,]  139  210 #> [436,]  138  211 #> [437,]  138  212 #> [438,]  137  213 #> [439,]  137  214 #> [440,]  137  215 #> [441,]  137  216 #> [442,]  138  217 #> [443,]  139  218 #> [444,]  140  218 #> [445,]  141  219 #> [446,]  142  219 #> [447,]  143  219 #> [448,]  144  219 #> [449,]  145  219 #> [450,]  146  220 #> [451,]  147  220 #> [452,]  148  220 #> [453,]  149  220 #> [454,]  150  220 #> [455,]  151  220 #> [456,]  152  220 #> [457,]  153  221 #> [458,]  154  220 #> [459,]  155  221 #> [460,]  156  221 #> [461,]  157  221 #> [462,]  158  221 #> [463,]  159  221 #> [464,]  160  221 #> [465,]  161  221 #> [466,]  162  221 #> [467,]  163  222 #> [468,]  164  221 #> [469,]  165  221 #> [470,]  166  221 #> [471,]  167  221 #> [472,]  168  221 #> [473,]  169  221 #> [474,]  170  221 #> [475,]  171  221 #> [476,]  172  221 #> [477,]  173  222 #> [478,]  174  222 #> [479,]  175  222 #> [480,]  176  222 #> [481,]  177  222 #> [482,]  178  222 #> [483,]  179  222 #> [484,]  180  222 #> [485,]  181  222 #> [486,]  182  222 #> [487,]  183  222 #> [488,]  184  222 #> [489,]  185  222 #> [490,]  186  222 #> [491,]  187  222 #> [492,]  188  222 #> [493,]  189  222 #> [494,]  190  222 #> [495,]  191  222 #> [496,]  192  222 #> [497,]  193  222 #> [498,]  194  222 #> [499,]  195  222 #> [500,]  196  222 #> [501,]  197  222 #> [502,]  198  222 #> [503,]  199  222 #> [504,]  200  222 #> [505,]  201  222 #> [506,]  202  222 #> [507,]  203  222 #> [508,]  204  222 #> [509,]  205  222 #> [510,]  206  222 #> [511,]  207  222 #> [512,]  208  221 #> [513,]  209  221 #> [514,]  210  221 #> [515,]  211  221 #> [516,]  212  221 #> [517,]  213  221 #> [518,]  214  221 #> [519,]  215  221 #> [520,]  216  221 #> [521,]  217  221 #> [522,]  218  221 #> [523,]  219  221 #> [524,]  220  221 #> [525,]  221  221 #> [526,]  222  221 #> [527,]  223  221 #> [528,]  224  221 #> [529,]  225  221 #> [530,]  226  221 #> [531,]  227  221 #> [532,]  228  221 #> [533,]  229  221 #> [534,]  230  220 #> [535,]  231  220 #> [536,]  232  220 #> [537,]  233  220 #> [538,]  234  220 #> [539,]  235  220 #> [540,]  236  220 #> [541,]  237  220 #> [542,]  238  220 #> [543,]  239  220 #> [544,]  240  220 #> [545,]  241  220 #> [546,]  242  219 #> [547,]  243  219 #> [548,]  244  219 #> [549,]  245  219 #> [550,]  246  219 #> [551,]  247  219 #> [552,]  248  219 #> [553,]  249  218 #> [554,]  250  218 #> [555,]  251  218 #> [556,]  252  218 #> [557,]  253  218 #> [558,]  254  218 #> [559,]  255  218 #> [560,]  256  217 #> [561,]  257  217 #> [562,]  258  217 #> [563,]  259  217 #> [564,]  260  216 #> [565,]  261  216 #> [566,]  262  216 #> [567,]  263  216 #> [568,]  264  215 #> [569,]  265  215 #> [570,]  266  215 #> [571,]  267  215 #> [572,]  268  214 #> [573,]  269  214 #> [574,]  270  214 #> [575,]  271  213 #> [576,]  272  213 #> [577,]  273  213 #> [578,]  274  212 #> [579,]  275  212 #> [580,]  276  212 #> [581,]  277  211 #> [582,]  278  211 #> [583,]  279  210 #> [584,]  280  210 #> [585,]  281  209 #> [586,]  282  209 #> [587,]  283  208 #> [588,]  284  208 #> [589,]  285  207 #> [590,]  286  207 #> [591,]  287  206 #> [592,]  288  206 #> [593,]  289  205 #> [594,]  290  205 #> [595,]  291  204 #> [596,]  292  203 #> [597,]  293  202 #> [598,]  294  202 #> [599,]  295  201 #> [600,]  296  200 #> [601,]  297  199 #> [602,]  298  198 #> [603,]  299  197 #> [604,]  300  196 #> [605,]  301  195 #> [606,]  302  194 #> [607,]  303  193 #> [608,]  303  192 #> [609,]  304  191 #> [610,]  305  190 #> [611,]  305  189 #> [612,]  306  188 #> [613,]  307  187 #> [614,]  308  186 #> [615,]  308  185 #> [616,]  309  184 #> [617,]  310  184 #> [618,]  311  184 #> [619,]  312  183 #> [620,]  313  183 #> [621,]  314  183 #> [622,]  315  182 #> [623,]  316  182 #> [624,]  317  182 #> [625,]  318  181 #> [626,]  319  181 #> [627,]  320  180 #> [628,]  321  180 #> [629,]  322  180 #> [630,]  323  179 #> [631,]  324  179 #> [632,]  325  178 #> [633,]  326  178 #> [634,]  327  178 #> [635,]  328  177 #> [636,]  329  177 #> [637,]  330  176 #> [638,]  331  176 #> [639,]  332  175 #> [640,]  333  174 #> [641,]  334  174 #> [642,]  335  173 #> [643,]  336  173 #> [644,]  337  172 #> [645,]  338  171 #> [646,]  339  171 #> [647,]  340  170 #> [648,]  341  170 #> [649,]  342  169 #> [650,]  343  168 #> [651,]  344  168 #> [652,]  345  167 #> [653,]  346  166 #> [654,]  347  165 #> [655,]  348  165 #> [656,]  349  164 #> [657,]  350  163 #> [658,]  351  162 #> [659,]  352  162 #> [660,]  353  161 #> [661,]  354  160 #> [662,]  355  159 #> [663,]  356  158 #> [664,]  357  157 #> [665,]  358  156 #> [666,]  359  155 #> [667,]  360  155 #> [668,]  361  154 #> [669,]  362  153 #> [670,]  362  152 #> [671,]  363  151 #> [672,]  364  150 #> [673,]  365  149 #> [674,]  366  148 #> [675,]  367  147 #> [676,]  368  146 #> [677,]  369  145 #> [678,]  370  144 #> [679,]  370  143 #> [680,]  371  142 #> [681,]  372  141 #> [682,]  373  140 #> [683,]  373  139 #> [684,]  374  138 #> [685,]  375  137 #> [686,]  375  136 #> [687,]  376  135 #> [688,]  377  134 #> [689,]  377  133 #> [690,]  378  132 #> [691,]  379  131 #> [692,]  379  130 #> [693,]  379  129 #> [694,]  380  128 #> [695,]  380  127 #> [696,]  381  126 #> [697,]  381  125 #> [698,]  382  124 #> [699,]  382  123 #> [700,]  382  122 #> [701,]  383  121 #> [702,]  383  120 #> [703,]  383  119 #> [704,]  384  118 #> [705,]  383  117 #> [706,]  383  116 #> [707,]  382  115 #> [708,]  381  114 #> [709,]  380  113 #> [710,]  379  112 #> [711,]  378  112 #> [712,]  377  111 #> [713,]  376  111 #> [714,]  375  110 #> [715,]  374  109 #> [716,]  373  109 #> [717,]  372  108 #> [718,]  371  107 #> [719,]  370  107 #> [720,]  369  106 #> [721,]  368  106 #> [722,]  367  105 #> [723,]  366  105 #> [724,]  365  105 #> [725,]  364  104 #> [726,]  363  103 #> [727,]  362  103 #> [728,]  361  103 #> [729,]  360  102 #> [730,]  359  102 #> [731,]  358  101 #> [732,]  357  101 #> [733,]  356  101 #> [734,]  355  100 #> [735,]  354  100 #> [736,]  353   99 #> [737,]  352   99 #> [738,]  351   99 #> [739,]  350   98 #> [740,]  349   98 #> [741,]  348   98 #> [742,]  347   97 #> [743,]  346   97 #> [744,]  345   97 #> [745,]  344   96 #> [746,]  343   96 #> [747,]  342   96 #> [748,]  341   95 #> [749,]  340   95 #> [750,]  339   95 #> [751,]  338   94 #> [752,]  337   94 #> [753,]  336   94 #> [754,]  335   94 #> [755,]  334   93 #> [756,]  333   93 #> [757,]  332   93 #> [758,]  331   93 #> [759,]  330   92 #> [760,]  329   92 #> [761,]  328   92 #> [762,]  327   92 #> [763,]  326   91 #> [764,]  325   91 #> [765,]  324   91 #> [766,]  323   91 #> [767,]  322   91 #> [768,]  321   90 #> [769,]  320   90 #> [770,]  319   90 #> [771,]  318   90 #> [772,]  317   90 #> [773,]  316   90 #> [774,]  315   89 #> [775,]  314   89 #> [776,]  313   89 #> [777,]  312   89 #> [778,]  311   89 #> [779,]  310   89 #> [780,]  309   88 #> [781,]  308   88 #> [782,]  307   88 #> [783,]  306   88 #> [784,]  305   88 #> [785,]  304   88 #> [786,]  303   88 #> [787,]  302   88 #> [788,]  301   88 #> [789,]  300   87 #> [790,]  299   87 #> [791,]  298   87 #> [792,]  297   87 #> [793,]  296   87 #> [794,]  295   87 #> [795,]  294   87 #> [796,]  293   87 #> [797,]  292   87 #> [798,]  291   87 #> [799,]  290   87 #> [800,]  289   87 #> [801,]  288   87 #> [802,]  287   87 #> [803,]  286   87 #> [804,]  285   87 #> [805,]  284   86 #> [806,]  283   86 #> [807,]  282   86 #> [808,]  282   85 #> [809,]  281   84 #> [810,]  281   83 #> [811,]  280   82 #> [812,]  280   81 #> [813,]  279   80 #> [814,]  278   79 #> [815,]  278   78 #> [816,]  278   77 #> [817,]  277   76 #> [818,]  276   75 #> [819,]  276   74 #> [820,]  276   73 #> [821,]  275   72 #> [822,]  274   71 #> [823,]  274   70 #> [824,]  273   69 #> [825,]  273   68 #> [826,]  272   67 #> [827,]  272   66 #> [828,]  271   65 #> [829,]  270   64 #> [830,]  270   63 #> [831,]  269   62 #> [832,]  269   61 #> [833,]  268   60 #> [834,]  267   59 #> [835,]  266   58 #> [836,]  266   57 #> [837,]  265   56 #> [838,]  264   55 #> [839,]  264   54 #> [840,]  263   53 #> [841,]  262   52 #> [842,]  261   51 #> [843,]  261   50 #> [844,]  260   49 #> [845,]  259   48 #> [846,]  258   47 #> [847,]  257   46 #> [848,]  256   45 #> [849,]  255   44 #> [850,]  254   43 #> [851,]  253   42 #> [852,]  252   42 #> [853,]  251   41 #> [854,]  250   41 #> [855,]  249   40 #> [856,]  248   40 #> [857,]  247   39 #> [858,]  246   39 #> [859,]  245   39 #> [860,]  244   39 #> [861,]  243   39 #> [862,]  242   39 #> [863,]  241   39 #> [864,]  240   39 #> [865,]  239   39 #> [866,]  238   40 #> [867,]  237   40 #> [868,]  236   41 #> [869,]  235   41 #> [870,]  234   42 #> [871,]  233   43 #> [872,]  233   44 #> [873,]  232   45 #> [874,]  231   46 #> [875,]  230   47 #> [876,]  230   48 #> [877,]  230   49 #> [878,]  229   50 #> [879,]  228   51 #> [880,]  228   52 #> [881,]  228   53 #> [882,]  227   54 #> [883,]  227   55 #> [884,]  227   56 #> [885,]  226   57 #> [886,]  226   58 #> [887,]  226   59 #> [888,]  226   60 #> [889,]  225   61 #> [890,]  225   62 #> [891,]  225   63 #> [892,]  224   64 #> [893,]  225   65 #> [894,]  224   66 #> [895,]  224   67 #> [896,]  224   68 #> [897,]  224   69 #> [898,]  224   70 #> [899,]  224   71 #> [900,]  224   72 #> [901,]  224   73 #> [902,]  224   74 #> [903,]  225   75 #> [904,]  224   76 #> [905,]  225   77 #> [906,]  225   78 #> [907,]  225   79 #> [908,]  226   80 #> [909,]  226   81 #> [910,]  226   82 #> [911,]  227   83 #> [912,]  227   84 #> [913,]  227   85 #> [914,]  228   86 #> [915,]  228   87 #> [916,]  227   87 #> [917,]  226   87 #> [918,]  225   88 #> [919,]  224   88 #> [920,]  223   87 #> [921,]  222   88 #> [922,]  221   88 #> [923,]  220   88 #> [924,]  219   88 #> [925,]  218   88 #> [926,]  217   89 #> [927,]  216   89 #> [928,]  215   89 #> [929,]  214   89 #> [930,]  213   89 #> [931,]  212   88 #> [932,]  211   88 #> [933,]  210   88 #> [934,]  209   88 #> [935,]  208   88 #> [936,]  207   88 #> [937,]  206   88 #> [938,]  205   87 #> [939,]  204   87 #> [940,]  203   87 #> [941,]  202   87 #> [942,]  201   87 #> [943,]  200   87 #>  #> $duvel #>        [,1] [,2] #>   [1,]   61  315 #>   [2,]   61  304 #>   [3,]   61  293 #>   [4,]   61  293 #>   [5,]   61  282 #>   [6,]   59  272 #>   [7,]   59  261 #>   [8,]   59  250 #>   [9,]   59  239 #>  [10,]   59  239 #>  [11,]   59  228 #>  [12,]   59  217 #>  [13,]   59  206 #>  [14,]   59  195 #>  [15,]   59  185 #>  [16,]   59  185 #>  [17,]   59  174 #>  [18,]   59  163 #>  [19,]   59  152 #>  [20,]   59  141 #>  [21,]   59  130 #>  [22,]   59  130 #>  [23,]   59  119 #>  [24,]   59  108 #>  [25,]   59   98 #>  [26,]   59   87 #>  [27,]   59   87 #>  [28,]   58   76 #>  [29,]   58   65 #>  [30,]   58   54 #>  [31,]   61   43 #>  [32,]   66   32 #>  [33,]   66   32 #>  [34,]   76   22 #>  [35,]   86   18 #>  [36,]   97   17 #>  [37,]  108   16 #>  [38,]  119   15 #>  [39,]  119   15 #>  [40,]  130   14 #>  [41,]  141   12 #>  [42,]  152   12 #>  [43,]  163   11 #>  [44,]  173   11 #>  [45,]  173   11 #>  [46,]  184   11 #>  [47,]  195   11 #>  [48,]  206   11 #>  [49,]  217   12 #>  [50,]  217   12 #>  [51,]  228   12 #>  [52,]  239   14 #>  [53,]  250   15 #>  [54,]  260   17 #>  [55,]  271   17 #>  [56,]  271   17 #>  [57,]  282   21 #>  [58,]  290   32 #>  [59,]  295   43 #>  [60,]  297   54 #>  [61,]  298   65 #>  [62,]  298   65 #>  [63,]  298   76 #>  [64,]  298   86 #>  [65,]  298   97 #>  [66,]  298  108 #>  [67,]  298  119 #>  [68,]  298  119 #>  [69,]  298  130 #>  [70,]  298  141 #>  [71,]  298  152 #>  [72,]  298  163 #>  [73,]  298  163 #>  [74,]  298  173 #>  [75,]  298  184 #>  [76,]  298  195 #>  [77,]  298  206 #>  [78,]  298  217 #>  [79,]  298  217 #>  [80,]  298  228 #>  [81,]  298  239 #>  [82,]  298  250 #>  [83,]  298  260 #>  [84,]  298  271 #>  [85,]  298  271 #>  [86,]  298  282 #>  [87,]  298  293 #>  [88,]  297  304 #>  [89,]  297  315 #>  [90,]  296  326 #>  [91,]  296  326 #>  [92,]  295  336 #>  [93,]  292  347 #>  [94,]  288  358 #>  [95,]  282  369 #>  [96,]  282  369 #>  [97,]  274  380 #>  [98,]  269  391 #>  [99,]  265  402 #> [100,]  263  413 #> [101,]  262  423 #> [102,]  262  423 #> [103,]  261  434 #> [104,]  258  445 #> [105,]  253  456 #> [106,]  248  467 #> [107,]  240  478 #> [108,]  240  478 #> [109,]  233  488 #> [110,]  227  499 #> [111,]  223  509 #> [112,]  221  520 #> [113,]  221  531 #> [114,]  221  531 #> [115,]  225  542 #> [116,]  226  553 #> [117,]  223  564 #> [118,]  224  575 #> [119,]  224  575 #> [120,]  226  586 #> [121,]  223  596 #> [122,]  215  606 #> [123,]  204  613 #> [124,]  193  616 #> [125,]  193  616 #> [126,]  182  617 #> [127,]  171  617 #> [128,]  160  616 #> [129,]  149  611 #> [130,]  140  605 #> [131,]  140  605 #> [132,]  135  595 #> [133,]  132  584 #> [134,]  135  573 #> [135,]  133  562 #> [136,]  131  551 #> [137,]  131  551 #> [138,]  133  540 #> [139,]  137  529 #> [140,]  136  519 #> [141,]  133  508 #> [142,]  133  508 #> [143,]  130  497 #> [144,]  123  487 #> [145,]  113  476 #> [146,]  107  465 #> [147,]  103  454 #> [148,]  103  454 #> [149,]   99  444 #> [150,]   96  434 #> [151,]   95  423 #> [152,]   93  412 #> [153,]   92  401 #> [154,]   92  401 #> [155,]   88  390 #> [156,]   81  379 #> [157,]   74  369 #> [158,]   69  358 #> [159,]   65  348 #> [160,]   65  348 #> [161,]   63  337 #>  # $fac grouping factors head(bot$fac) #> # A tibble: 6 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     # or if you know the name of the column of interest bot$type #>  [1] whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky #> [11] whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky #> [21] beer   beer   beer   beer   beer   beer   beer   beer   beer   beer   #> [31] beer   beer   beer   beer   beer   beer   beer   beer   beer   beer   #> Levels: beer whisky # table table(bot$fac) #>         fake #> type      a  b  c  d #>   beer    0  0 10 10 #>   whisky 10 10  0  0 # an internal view of an Out object str(bot) #> coo : List of 40 #>  $ brahma        : num [1:710, 1:2] 200 200 199 198 197 197 196 195 196 197 ... #>  $ caney         : num [1:494, 1:2] 200 199 199 198 197 197 196 195 194 194 ... #>  $ chimay        : num [1:806, 1:2] 200 200 199 198 198 197 197 196 195 195 ... #>  $ corona        : num [1:768, 1:2] 200 199 198 197 196 195 194 193 192 191 ... #>  $ deusventrue   : num [1:943, 1:2] 200 199 198 197 196 195 194 193 192 191 ... #>  $ duvel         : num [1:161, 1:2] 61 61 61 61 61 59 59 59 59 59 ... #>  $ franziskaner  : num [1:124, 1:2] 54 54 54 54 54 54 56 56 56 56 ... #>  $ grimbergen    : num [1:126, 1:2] 42 40 40 40 40 40 40 42 41 42 ... #>  $ guiness       : num [1:183, 1:2] 69 69 69 69 69 69 69 70 69 70 ... #>  $ hoegardeen    : num [1:193, 1:2] 42 40 40 40 40 40 40 40 40 40 ... #>  $ jupiler       : num [1:156, 1:2] 55 54 54 54 54 54 54 54 53 53 ... #>  $ kingfisher    : num [1:182, 1:2] 71 71 71 71 71 71 71 71 71 73 ... #>  $ latrappe      : num [1:136, 1:2] 26 25 25 25 25 26 26 26 26 26 ... #>  $ lindemanskriek: num [1:176, 1:2] 60 60 55 54 54 54 53 54 54 54 ... #>  $ nicechouffe   : num [1:146, 1:2] 82 81 77 77 76 75 75 75 75 74 ... #>  $ pecheresse    : num [1:129, 1:2] 63 61 61 60 58 58 58 58 58 58 ... #>  $ sierranevada  : num [1:176, 1:2] 61 61 61 61 61 61 61 61 61 61 ... #>  $ tanglefoot    : num [1:174, 1:2] 48 48 48 48 49 49 49 49 49 49 ... #>  $ tauro         : num [1:174, 1:2] 56 54 54 54 54 54 54 54 54 52 ... #>  $ westmalle     : num [1:141, 1:2] 70 70 67 67 66 66 66 66 66 66 ... #>  $ amrut         : num [1:191, 1:2] 57 57 57 57 57 57 57 57 57 57 ... #>  $ ballantines   : num [1:146, 1:2] 38 38 38 38 38 38 38 38 38 38 ... #>  $ bushmills     : num [1:165, 1:2] 72 72 72 72 72 72 73 74 74 74 ... #>  $ chivas        : num [1:164, 1:2] 33 31 29 29 29 29 30 30 30 31 ... #>  $ dalmore       : num [1:155, 1:2] 52 47 44 42 42 42 42 42 42 42 ... #>  $ famousgrouse  : num [1:169, 1:2] 99 99 99 99 99 99 99 99 99 99 ... #>  $ glendronach   : num [1:197, 1:2] 73 73 74 74 74 74 74 74 74 74 ... #>  $ glenmorangie  : num [1:179, 1:2] 53 54 54 54 55 57 57 57 57 58 ... #>  $ highlandpark  : num [1:169, 1:2] 42 42 42 42 42 42 42 42 41 42 ... #>  $ jackdaniels   : num [1:150, 1:2] 63 63 63 63 63 63 63 63 63 63 ... #>  $ jb            : num [1:174, 1:2] 43 43 42 42 43 43 43 43 43 43 ... #>  $ johnniewalker : num [1:168, 1:2] 133 133 133 133 134 134 134 134 134 134 ... #>  $ magallan      : num [1:141, 1:2] 78 78 80 80 81 81 81 83 83 84 ... #>  $ makersmark    : num [1:177, 1:2] 31 23 16 16 13 10 8 8 11 11 ... #>  $ oban          : num [1:179, 1:2] 74 74 74 74 74 74 75 75 75 75 ... #>  $ oldpotrero    : num [1:131, 1:2] 83 77 71 63 60 58 57 58 58 58 ... #>  $ redbreast     : num [1:177, 1:2] 105 103 101 98 98 97 97 97 97 97 ... #>  $ tamdhu        : num [1:176, 1:2] 49 49 49 49 49 50 50 50 50 50 ... #>  $ wildturkey    : num [1:185, 1:2] 18 18 18 18 18 18 18 18 18 18 ... #>  $ yoichi        : num [1:123, 1:2] 69 69 69 69 69 70 70 70 70 70 ... #> fac : tibble [40 × 2] (S3: tbl_df/tbl/data.frame) #> ldk :  list()  # subsetting # see ?filter, ?select, and their 'see also' section for the # complete list of dplyr-like verbs implemented in Momocs  length(bot) # the number of shapes #> [1] 40 names(bot) # access all individual names #>  [1] \"brahma\"         \"caney\"          \"chimay\"         \"corona\"         #>  [5] \"deusventrue\"    \"duvel\"          \"franziskaner\"   \"grimbergen\"     #>  [9] \"guiness\"        \"hoegardeen\"     \"jupiler\"        \"kingfisher\"     #> [13] \"latrappe\"       \"lindemanskriek\" \"nicechouffe\"    \"pecheresse\"     #> [17] \"sierranevada\"   \"tanglefoot\"     \"tauro\"          \"westmalle\"      #> [21] \"amrut\"          \"ballantines\"    \"bushmills\"      \"chivas\"         #> [25] \"dalmore\"        \"famousgrouse\"   \"glendronach\"    \"glenmorangie\"   #> [29] \"highlandpark\"   \"jackdaniels\"    \"jb\"             \"johnniewalker\"  #> [33] \"magallan\"       \"makersmark\"     \"oban\"           \"oldpotrero\"     #> [37] \"redbreast\"      \"tamdhu\"         \"wildturkey\"     \"yoichi\"         bot2 <- bot names(bot2) <- paste0('newnames', 1:length(bot2)) # define new names  # Add a $fac from scratch coo <- bot[1:5] # a list of five matrices length(coo) #> [1] 5 sapply(coo, class) #>      brahma   caney    chimay   corona   deusventrue #> [1,] \"matrix\" \"matrix\" \"matrix\" \"matrix\" \"matrix\"    #> [2,] \"array\"  \"array\"  \"array\"  \"array\"  \"array\"      fac <- data.frame(name=letters[1:5], value=c(5:1)) # Then you have to define the subclass using the right builder # here we have outlines, so we use Out x <- Out(coo, fac) x$coo #> $brahma #>        [,1] [,2] #>   [1,]  200   62 #>   [2,]  200   61 #>   [3,]  199   60 #>   [4,]  198   59 #>   [5,]  197   58 #>   [6,]  197   57 #>   [7,]  196   56 #>   [8,]  195   56 #>   [9,]  196   56 #>  [10,]  197   56 #>  [11,]  198   56 #>  [12,]  199   56 #>  [13,]  200   56 #>  [14,]  201   55 #>  [15,]  202   55 #>  [16,]  203   55 #>  [17,]  204   55 #>  [18,]  205   54 #>  [19,]  206   54 #>  [20,]  207   53 #>  [21,]  208   52 #>  [22,]  208   51 #>  [23,]  209   50 #>  [24,]  209   49 #>  [25,]  209   48 #>  [26,]  209   47 #>  [27,]  208   46 #>  [28,]  208   45 #>  [29,]  207   44 #>  [30,]  206   44 #>  [31,]  205   43 #>  [32,]  204   43 #>  [33,]  203   43 #>  [34,]  202   43 #>  [35,]  201   43 #>  [36,]  200   43 #>  [37,]  199   43 #>  [38,]  198   43 #>  [39,]  197   43 #>  [40,]  196   42 #>  [41,]  195   42 #>  [42,]  194   42 #>  [43,]  193   42 #>  [44,]  192   42 #>  [45,]  191   42 #>  [46,]  190   42 #>  [47,]  189   42 #>  [48,]  188   42 #>  [49,]  187   42 #>  [50,]  186   42 #>  [51,]  185   42 #>  [52,]  184   42 #>  [53,]  183   42 #>  [54,]  182   42 #>  [55,]  181   42 #>  [56,]  180   42 #>  [57,]  179   42 #>  [58,]  178   43 #>  [59,]  177   42 #>  [60,]  176   43 #>  [61,]  175   43 #>  [62,]  174   43 #>  [63,]  173   43 #>  [64,]  172   43 #>  [65,]  171   43 #>  [66,]  170   43 #>  [67,]  169   43 #>  [68,]  168   43 #>  [69,]  167   43 #>  [70,]  166   43 #>  [71,]  165   43 #>  [72,]  164   43 #>  [73,]  163   43 #>  [74,]  162   43 #>  [75,]  161   43 #>  [76,]  160   43 #>  [77,]  159   43 #>  [78,]  158   43 #>  [79,]  157   43 #>  [80,]  156   43 #>  [81,]  155   43 #>  [82,]  154   43 #>  [83,]  153   43 #>  [84,]  152   43 #>  [85,]  151   43 #>  [86,]  150   43 #>  [87,]  149   43 #>  [88,]  148   43 #>  [89,]  147   43 #>  [90,]  146   44 #>  [91,]  145   44 #>  [92,]  144   44 #>  [93,]  143   44 #>  [94,]  143   43 #>  [95,]  143   42 #>  [96,]  143   41 #>  [97,]  142   40 #>  [98,]  142   39 #>  [99,]  142   38 #> [100,]  142   37 #> [101,]  142   36 #> [102,]  142   35 #> [103,]  143   34 #> [104,]  143   33 #> [105,]  143   32 #> [106,]  144   31 #> [107,]  145   30 #> [108,]  145   29 #> [109,]  146   28 #> [110,]  147   27 #> [111,]  148   27 #> [112,]  149   26 #> [113,]  150   25 #> [114,]  151   25 #> [115,]  152   24 #> [116,]  153   24 #> [117,]  154   23 #> [118,]  155   23 #> [119,]  156   23 #> [120,]  157   22 #> [121,]  158   22 #> [122,]  159   22 #> [123,]  160   21 #> [124,]  161   21 #> [125,]  162   21 #> [126,]  163   21 #> [127,]  164   21 #> [128,]  165   20 #> [129,]  166   20 #> [130,]  167   20 #> [131,]  168   20 #> [132,]  169   20 #> [133,]  170   20 #> [134,]  171   20 #> [135,]  172   20 #> [136,]  173   20 #> [137,]  174   19 #> [138,]  175   19 #> [139,]  176   19 #> [140,]  177   19 #> [141,]  178   19 #> [142,]  179   19 #> [143,]  180   19 #> [144,]  181   20 #> [145,]  182   20 #> [146,]  183   20 #> [147,]  184   20 #> [148,]  185   20 #> [149,]  186   20 #> [150,]  187   20 #> [151,]  188   20 #> [152,]  189   21 #> [153,]  190   21 #> [154,]  191   21 #> [155,]  192   21 #> [156,]  193   21 #> [157,]  194   21 #> [158,]  195   22 #> [159,]  196   22 #> [160,]  197   22 #> [161,]  198   22 #> [162,]  199   22 #> [163,]  200   22 #> [164,]  201   22 #> [165,]  202   22 #> [166,]  203   22 #> [167,]  204   22 #> [168,]  205   22 #> [169,]  206   22 #> [170,]  207   21 #> [171,]  208   20 #> [172,]  208   19 #> [173,]  207   18 #> [174,]  206   17 #> [175,]  205   17 #> [176,]  204   16 #> [177,]  203   16 #> [178,]  202   15 #> [179,]  201   15 #> [180,]  200   14 #> [181,]  199   14 #> [182,]  198   14 #> [183,]  197   13 #> [184,]  196   13 #> [185,]  195   13 #> [186,]  194   12 #> [187,]  193   12 #> [188,]  192   12 #> [189,]  191   11 #> [190,]  190   11 #> [191,]  189   11 #> [192,]  188   11 #> [193,]  187   10 #> [194,]  186   10 #> [195,]  185   10 #> [196,]  184   10 #> [197,]  183    9 #> [198,]  182    9 #> [199,]  181   10 #> [200,]  180    9 #> [201,]  179    9 #> [202,]  178    9 #> [203,]  177    9 #> [204,]  176    9 #> [205,]  175    9 #> [206,]  174    9 #> [207,]  173    9 #> [208,]  172    9 #> [209,]  171    9 #> [210,]  170    9 #> [211,]  169    9 #> [212,]  168    9 #> [213,]  167    9 #> [214,]  166    9 #> [215,]  165    9 #> [216,]  164    9 #> [217,]  163    9 #> [218,]  162    9 #> [219,]  161    9 #> [220,]  160   10 #> [221,]  159   10 #> [222,]  158   10 #> [223,]  157   10 #> [224,]  156   10 #> [225,]  155   11 #> [226,]  154   11 #> [227,]  153   11 #> [228,]  152   12 #> [229,]  151   12 #> [230,]  150   12 #> [231,]  149   13 #> [232,]  148   13 #> [233,]  147   14 #> [234,]  146   14 #> [235,]  145   15 #> [236,]  144   15 #> [237,]  143   16 #> [238,]  142   17 #> [239,]  141   17 #> [240,]  140   18 #> [241,]  139   19 #> [242,]  138   20 #> [243,]  137   21 #> [244,]  136   22 #> [245,]  135   23 #> [246,]  134   24 #> [247,]  134   25 #> [248,]  133   26 #> [249,]  133   27 #> [250,]  132   28 #> [251,]  132   29 #> [252,]  131   30 #> [253,]  131   31 #> [254,]  131   32 #> [255,]  130   33 #> [256,]  130   34 #> [257,]  130   35 #> [258,]  130   36 #> [259,]  130   37 #> [260,]  130   38 #> [261,]  130   39 #> [262,]  130   40 #> [263,]  130   41 #> [264,]  130   42 #> [265,]  130   43 #> [266,]  130   44 #> [267,]  130   45 #> [268,]  131   46 #> [269,]  131   47 #> [270,]  131   48 #> [271,]  132   49 #> [272,]  132   50 #> [273,]  132   51 #> [274,]  133   52 #> [275,]  133   53 #> [276,]  133   54 #> [277,]  134   55 #> [278,]  135   56 #> [279,]  135   57 #> [280,]  135   58 #> [281,]  135   59 #> [282,]  136   60 #> [283,]  136   61 #> [284,]  135   62 #> [285,]  136   63 #> [286,]  136   64 #> [287,]  136   65 #> [288,]  136   66 #> [289,]  136   67 #> [290,]  135   68 #> [291,]  136   69 #> [292,]  135   70 #> [293,]  135   71 #> [294,]  135   72 #> [295,]  135   73 #> [296,]  135   74 #> [297,]  134   75 #> [298,]  135   76 #> [299,]  134   77 #> [300,]  134   78 #> [301,]  134   79 #> [302,]  134   80 #> [303,]  134   81 #> [304,]  134   82 #> [305,]  134   83 #> [306,]  133   84 #> [307,]  133   85 #> [308,]  134   86 #> [309,]  134   87 #> [310,]  134   88 #> [311,]  133   89 #> [312,]  133   90 #> [313,]  133   91 #> [314,]  133   92 #> [315,]  133   93 #> [316,]  133   94 #> [317,]  133   95 #> [318,]  133   96 #> [319,]  133   97 #> [320,]  133   98 #> [321,]  133   99 #> [322,]  133  100 #> [323,]  133  101 #> [324,]  133  102 #> [325,]  133  103 #> [326,]  133  104 #> [327,]  133  105 #> [328,]  133  106 #> [329,]  133  107 #> [330,]  133  108 #> [331,]  133  109 #> [332,]  134  110 #> [333,]  134  111 #> [334,]  133  112 #> [335,]  134  113 #> [336,]  134  114 #> [337,]  134  115 #> [338,]  134  116 #> [339,]  134  117 #> [340,]  135  118 #> [341,]  135  119 #> [342,]  135  120 #> [343,]  136  121 #> [344,]  136  122 #> [345,]  136  123 #> [346,]  137  124 #> [347,]  137  125 #> [348,]  138  126 #> [349,]  138  127 #> [350,]  139  128 #> [351,]  139  129 #> [352,]  140  130 #> [353,]  140  131 #> [354,]  141  132 #> [355,]  141  133 #> [356,]  142  134 #> [357,]  142  135 #> [358,]  143  136 #> [359,]  143  137 #> [360,]  144  138 #> [361,]  144  139 #> [362,]  145  140 #> [363,]  145  141 #> [364,]  146  142 #> [365,]  147  143 #> [366,]  148  144 #> [367,]  148  145 #> [368,]  149  146 #> [369,]  150  147 #> [370,]  150  148 #> [371,]  151  149 #> [372,]  152  150 #> [373,]  153  151 #> [374,]  154  152 #> [375,]  155  153 #> [376,]  156  154 #> [377,]  157  155 #> [378,]  158  156 #> [379,]  159  157 #> [380,]  160  158 #> [381,]  161  158 #> [382,]  162  159 #> [383,]  163  159 #> [384,]  164  160 #> [385,]  165  160 #> [386,]  166  160 #> [387,]  167  161 #> [388,]  168  161 #> [389,]  169  161 #> [390,]  170  162 #> [391,]  171  162 #> [392,]  172  162 #> [393,]  173  163 #> [394,]  174  164 #> [395,]  175  164 #> [396,]  176  165 #> [397,]  177  165 #> [398,]  178  166 #> [399,]  179  167 #> [400,]  180  167 #> [401,]  181  168 #> [402,]  182  169 #> [403,]  183  170 #> [404,]  184  171 #> [405,]  185  172 #> [406,]  186  173 #> [407,]  187  174 #> [408,]  187  175 #> [409,]  188  176 #> [410,]  189  177 #> [411,]  189  178 #> [412,]  190  179 #> [413,]  190  180 #> [414,]  191  181 #> [415,]  191  182 #> [416,]  191  183 #> [417,]  191  184 #> [418,]  191  185 #> [419,]  191  186 #> [420,]  191  187 #> [421,]  190  188 #> [422,]  191  189 #> [423,]  191  190 #> [424,]  191  191 #> [425,]  191  192 #> [426,]  192  193 #> [427,]  192  194 #> [428,]  192  195 #> [429,]  193  196 #> [430,]  193  197 #> [431,]  194  198 #> [432,]  194  199 #> [433,]  194  200 #> [434,]  195  201 #> [435,]  196  202 #> [436,]  196  203 #> [437,]  197  204 #> [438,]  197  205 #> [439,]  198  206 #> [440,]  199  207 #> [441,]  200  208 #> [442,]  201  209 #> [443,]  202  210 #> [444,]  203  210 #> [445,]  204  211 #> [446,]  205  212 #> [447,]  206  212 #> [448,]  207  213 #> [449,]  208  213 #> [450,]  209  214 #> [451,]  210  215 #> [452,]  211  216 #> [453,]  211  217 #> [454,]  211  218 #> [455,]  212  219 #> [456,]  212  220 #> [457,]  213  221 #> [458,]  213  222 #> [459,]  214  223 #> [460,]  215  224 #> [461,]  215  225 #> [462,]  216  226 #> [463,]  217  227 #> [464,]  217  228 #> [465,]  218  229 #> [466,]  219  230 #> [467,]  220  230 #> [468,]  221  231 #> [469,]  222  231 #> [470,]  223  230 #> [471,]  224  229 #> [472,]  225  228 #> [473,]  225  227 #> [474,]  225  226 #> [475,]  225  225 #> [476,]  226  224 #> [477,]  225  223 #> [478,]  225  222 #> [479,]  225  221 #> [480,]  226  220 #> [481,]  226  219 #> [482,]  226  218 #> [483,]  226  217 #> [484,]  226  216 #> [485,]  226  215 #> [486,]  226  214 #> [487,]  226  213 #> [488,]  226  212 #> [489,]  226  211 #> [490,]  227  211 #> [491,]  228  211 #> [492,]  229  210 #> [493,]  230  210 #> [494,]  231  210 #> [495,]  232  209 #> [496,]  233  209 #> [497,]  234  208 #> [498,]  235  208 #> [499,]  236  207 #> [500,]  237  207 #> [501,]  238  206 #> [502,]  238  205 #> [503,]  239  204 #> [504,]  240  203 #> [505,]  240  202 #> [506,]  241  201 #> [507,]  242  200 #> [508,]  243  199 #> [509,]  244  199 #> [510,]  245  199 #> [511,]  246  198 #> [512,]  247  198 #> [513,]  248  197 #> [514,]  249  196 #> [515,]  249  195 #> [516,]  250  194 #> [517,]  250  193 #> [518,]  249  192 #> [519,]  249  191 #> [520,]  249  190 #> [521,]  248  189 #> [522,]  248  188 #> [523,]  248  187 #> [524,]  247  186 #> [525,]  246  185 #> [526,]  245  184 #> [527,]  244  183 #> [528,]  243  182 #> [529,]  242  181 #> [530,]  241  180 #> [531,]  240  180 #> [532,]  239  179 #> [533,]  238  178 #> [534,]  237  178 #> [535,]  236  177 #> [536,]  235  176 #> [537,]  235  175 #> [538,]  235  174 #> [539,]  235  173 #> [540,]  235  172 #> [541,]  235  171 #> [542,]  235  170 #> [543,]  235  169 #> [544,]  236  168 #> [545,]  235  167 #> [546,]  236  166 #> [547,]  236  165 #> [548,]  236  164 #> [549,]  236  163 #> [550,]  236  162 #> [551,]  237  161 #> [552,]  236  160 #> [553,]  237  159 #> [554,]  237  158 #> [555,]  237  157 #> [556,]  237  156 #> [557,]  237  155 #> [558,]  237  154 #> [559,]  237  153 #> [560,]  238  152 #> [561,]  237  151 #> [562,]  237  150 #> [563,]  237  149 #> [564,]  237  148 #> [565,]  237  147 #> [566,]  238  146 #> [567,]  237  145 #> [568,]  237  144 #> [569,]  237  143 #> [570,]  237  142 #> [571,]  237  141 #> [572,]  237  140 #> [573,]  237  139 #> [574,]  237  138 #> [575,]  236  137 #> [576,]  236  136 #> [577,]  236  135 #> [578,]  235  134 #> [579,]  235  133 #> [580,]  235  132 #> [581,]  234  131 #> [582,]  234  130 #> [583,]  233  129 #> [584,]  232  128 #> [585,]  232  127 #> [586,]  231  126 #> [587,]  230  125 #> [588,]  230  124 #> [589,]  229  123 #> [590,]  228  122 #> [591,]  228  121 #> [592,]  227  120 #> [593,]  226  119 #> [594,]  226  118 #> [595,]  226  117 #> [596,]  225  116 #> [597,]  224  115 #> [598,]  224  114 #> [599,]  224  113 #> [600,]  223  112 #> [601,]  223  111 #> [602,]  223  110 #> [603,]  223  109 #> [604,]  222  108 #> [605,]  222  107 #> [606,]  222  106 #> [607,]  222  105 #> [608,]  222  104 #> [609,]  221  103 #> [610,]  221  102 #> [611,]  221  101 #> [612,]  221  100 #> [613,]  221   99 #> [614,]  221   98 #> [615,]  221   97 #> [616,]  221   96 #> [617,]  221   95 #> [618,]  221   94 #> [619,]  221   93 #> [620,]  221   92 #> [621,]  221   91 #> [622,]  221   90 #> [623,]  221   89 #> [624,]  221   88 #> [625,]  221   87 #> [626,]  221   86 #> [627,]  221   85 #> [628,]  221   84 #> [629,]  221   83 #> [630,]  221   82 #> [631,]  221   81 #> [632,]  221   80 #> [633,]  221   79 #> [634,]  221   78 #> [635,]  221   77 #> [636,]  221   76 #> [637,]  221   75 #> [638,]  221   74 #> [639,]  221   73 #> [640,]  221   72 #> [641,]  221   71 #> [642,]  221   70 #> [643,]  222   69 #> [644,]  222   68 #> [645,]  222   67 #> [646,]  222   66 #> [647,]  222   65 #> [648,]  222   64 #> [649,]  222   63 #> [650,]  223   62 #> [651,]  224   62 #> [652,]  225   61 #> [653,]  226   61 #> [654,]  227   61 #> [655,]  228   61 #> [656,]  229   60 #> [657,]  230   60 #> [658,]  231   60 #> [659,]  232   59 #> [660,]  232   58 #> [661,]  233   57 #> [662,]  232   56 #> [663,]  232   55 #> [664,]  231   54 #> [665,]  230   53 #> [666,]  229   52 #> [667,]  230   51 #> [668,]  229   50 #> [669,]  230   49 #> [670,]  229   48 #> [671,]  228   47 #> [672,]  227   46 #> [673,]  226   46 #> [674,]  225   45 #> [675,]  224   45 #> [676,]  223   45 #> [677,]  222   45 #> [678,]  221   45 #> [679,]  220   45 #> [680,]  219   45 #> [681,]  218   45 #> [682,]  217   45 #> [683,]  216   45 #> [684,]  215   46 #> [685,]  214   46 #> [686,]  213   47 #> [687,]  212   48 #> [688,]  211   49 #> [689,]  210   50 #> [690,]  209   51 #> [691,]  208   52 #> [692,]  208   53 #> [693,]  207   54 #> [694,]  206   55 #> [695,]  206   56 #> [696,]  205   57 #> [697,]  205   58 #> [698,]  204   59 #> [699,]  204   60 #> [700,]  203   61 #> [701,]  203   62 #> [702,]  203   63 #> [703,]  202   64 #> [704,]  202   65 #> [705,]  202   66 #> [706,]  201   66 #> [707,]  201   65 #> [708,]  201   64 #> [709,]  201   63 #> [710,]  200   62 #>  #> $caney #>        [,1] [,2] #>   [1,]  200   75 #>   [2,]  199   74 #>   [3,]  199   73 #>   [4,]  198   72 #>   [5,]  197   71 #>   [6,]  197   70 #>   [7,]  196   69 #>   [8,]  195   68 #>   [9,]  194   67 #>  [10,]  194   66 #>  [11,]  193   65 #>  [12,]  192   64 #>  [13,]  192   63 #>  [14,]  191   62 #>  [15,]  190   61 #>  [16,]  190   60 #>  [17,]  189   59 #>  [18,]  188   58 #>  [19,]  188   57 #>  [20,]  187   56 #>  [21,]  187   55 #>  [22,]  186   54 #>  [23,]  185   53 #>  [24,]  185   52 #>  [25,]  184   51 #>  [26,]  183   50 #>  [27,]  183   49 #>  [28,]  183   48 #>  [29,]  182   47 #>  [30,]  181   46 #>  [31,]  180   46 #>  [32,]  179   47 #>  [33,]  179   48 #>  [34,]  178   49 #>  [35,]  177   50 #>  [36,]  176   51 #>  [37,]  175   52 #>  [38,]  174   53 #>  [39,]  173   54 #>  [40,]  173   55 #>  [41,]  172   56 #>  [42,]  171   57 #>  [43,]  170   58 #>  [44,]  169   59 #>  [45,]  168   60 #>  [46,]  167   61 #>  [47,]  166   62 #>  [48,]  165   63 #>  [49,]  164   64 #>  [50,]  163   65 #>  [51,]  162   66 #>  [52,]  161   67 #>  [53,]  160   68 #>  [54,]  159   69 #>  [55,]  158   70 #>  [56,]  157   71 #>  [57,]  156   72 #>  [58,]  155   73 #>  [59,]  154   74 #>  [60,]  153   75 #>  [61,]  152   76 #>  [62,]  151   77 #>  [63,]  150   78 #>  [64,]  149   79 #>  [65,]  148   80 #>  [66,]  147   81 #>  [67,]  146   82 #>  [68,]  145   82 #>  [69,]  144   83 #>  [70,]  143   84 #>  [71,]  142   85 #>  [72,]  141   86 #>  [73,]  140   87 #>  [74,]  139   87 #>  [75,]  138   88 #>  [76,]  137   89 #>  [77,]  136   90 #>  [78,]  135   91 #>  [79,]  134   91 #>  [80,]  133   92 #>  [81,]  132   93 #>  [82,]  131   94 #>  [83,]  130   94 #>  [84,]  129   95 #>  [85,]  128   96 #>  [86,]  127   96 #>  [87,]  126   97 #>  [88,]  125   98 #>  [89,]  124   98 #>  [90,]  123   99 #>  [91,]  122  100 #>  [92,]  121  100 #>  [93,]  120  101 #>  [94,]  119  101 #>  [95,]  118  102 #>  [96,]  117  102 #>  [97,]  116  103 #>  [98,]  115  104 #>  [99,]  114  104 #> [100,]  113  105 #> [101,]  112  105 #> [102,]  111  106 #> [103,]  110  106 #> [104,]  109  107 #> [105,]  108  107 #> [106,]  107  107 #> [107,]  106  108 #> [108,]  105  108 #> [109,]  104  109 #> [110,]  105  110 #> [111,]  106  111 #> [112,]  107  111 #> [113,]  108  112 #> [114,]  109  113 #> [115,]  110  113 #> [116,]  111  114 #> [117,]  112  114 #> [118,]  113  115 #> [119,]  114  116 #> [120,]  115  116 #> [121,]  116  117 #> [122,]  117  117 #> [123,]  118  118 #> [124,]  119  119 #> [125,]  120  119 #> [126,]  121  120 #> [127,]  122  120 #> [128,]  123  121 #> [129,]  124  122 #> [130,]  125  122 #> [131,]  126  123 #> [132,]  127  123 #> [133,]  128  124 #> [134,]  129  125 #> [135,]  130  125 #> [136,]  131  126 #> [137,]  132  127 #> [138,]  133  127 #> [139,]  134  128 #> [140,]  135  128 #> [141,]  136  129 #> [142,]  137  130 #> [143,]  138  130 #> [144,]  139  131 #> [145,]  140  131 #> [146,]  141  132 #> [147,]  142  133 #> [148,]  143  133 #> [149,]  144  134 #> [150,]  145  134 #> [151,]  146  135 #> [152,]  147  136 #> [153,]  148  136 #> [154,]  149  137 #> [155,]  150  138 #> [156,]  151  138 #> [157,]  152  139 #> [158,]  153  139 #> [159,]  154  139 #> [160,]  155  138 #> [161,]  155  137 #> [162,]  156  136 #> [163,]  156  135 #> [164,]  157  134 #> [165,]  157  133 #> [166,]  158  132 #> [167,]  158  131 #> [168,]  159  130 #> [169,]  159  129 #> [170,]  160  128 #> [171,]  160  127 #> [172,]  161  126 #> [173,]  161  125 #> [174,]  162  124 #> [175,]  162  123 #> [176,]  163  122 #> [177,]  163  121 #> [178,]  164  120 #> [179,]  164  119 #> [180,]  165  118 #> [181,]  166  117 #> [182,]  166  116 #> [183,]  167  115 #> [184,]  167  114 #> [185,]  168  113 #> [186,]  168  112 #> [187,]  169  111 #> [188,]  169  110 #> [189,]  170  109 #> [190,]  170  108 #> [191,]  171  107 #> [192,]  171  106 #> [193,]  172  105 #> [194,]  172  104 #> [195,]  173  103 #> [196,]  173  102 #> [197,]  174  101 #> [198,]  174  100 #> [199,]  175   99 #> [200,]  175   98 #> [201,]  176   97 #> [202,]  176   96 #> [203,]  177   95 #> [204,]  177   94 #> [205,]  178   94 #> [206,]  178   95 #> [207,]  179   96 #> [208,]  179   97 #> [209,]  180   98 #> [210,]  180   99 #> [211,]  181  100 #> [212,]  181  101 #> [213,]  182  102 #> [214,]  182  103 #> [215,]  183  104 #> [216,]  183  105 #> [217,]  184  106 #> [218,]  184  107 #> [219,]  184  108 #> [220,]  185  109 #> [221,]  186  110 #> [222,]  186  111 #> [223,]  187  112 #> [224,]  187  113 #> [225,]  187  114 #> [226,]  188  115 #> [227,]  189  116 #> [228,]  189  117 #> [229,]  190  118 #> [230,]  190  119 #> [231,]  190  120 #> [232,]  191  121 #> [233,]  192  122 #> [234,]  192  123 #> [235,]  193  124 #> [236,]  193  125 #> [237,]  194  126 #> [238,]  195  127 #> [239,]  195  128 #> [240,]  195  129 #> [241,]  196  130 #> [242,]  197  131 #> [243,]  197  132 #> [244,]  198  133 #> [245,]  199  134 #> [246,]  199  135 #> [247,]  200  136 #> [248,]  200  137 #> [249,]  201  138 #> [250,]  201  139 #> [251,]  202  140 #> [252,]  203  141 #> [253,]  203  142 #> [254,]  204  143 #> [255,]  204  144 #> [256,]  205  145 #> [257,]  206  146 #> [258,]  207  147 #> [259,]  207  148 #> [260,]  208  149 #> [261,]  209  150 #> [262,]  209  151 #> [263,]  210  152 #> [264,]  211  153 #> [265,]  211  154 #> [266,]  212  155 #> [267,]  213  156 #> [268,]  213  157 #> [269,]  214  158 #> [270,]  215  159 #> [271,]  215  160 #> [272,]  216  161 #> [273,]  217  162 #> [274,]  218  163 #> [275,]  218  164 #> [276,]  219  165 #> [277,]  220  166 #> [278,]  221  167 #> [279,]  221  168 #> [280,]  222  169 #> [281,]  223  170 #> [282,]  224  171 #> [283,]  224  172 #> [284,]  225  173 #> [285,]  226  174 #> [286,]  227  175 #> [287,]  228  176 #> [288,]  229  177 #> [289,]  229  178 #> [290,]  230  179 #> [291,]  231  180 #> [292,]  232  181 #> [293,]  233  182 #> [294,]  234  183 #> [295,]  235  184 #> [296,]  235  185 #> [297,]  236  186 #> [298,]  237  187 #> [299,]  238  188 #> [300,]  239  189 #> [301,]  240  190 #> [302,]  241  191 #> [303,]  242  192 #> [304,]  243  193 #> [305,]  244  194 #> [306,]  245  195 #> [307,]  246  196 #> [308,]  247  197 #> [309,]  248  198 #> [310,]  249  198 #> [311,]  250  199 #> [312,]  251  200 #> [313,]  252  201 #> [314,]  253  202 #> [315,]  254  203 #> [316,]  255  204 #> [317,]  256  205 #> [318,]  257  205 #> [319,]  258  206 #> [320,]  259  207 #> [321,]  260  208 #> [322,]  261  208 #> [323,]  262  209 #> [324,]  263  210 #> [325,]  264  211 #> [326,]  265  211 #> [327,]  266  212 #> [328,]  267  213 #> [329,]  268  213 #> [330,]  269  214 #> [331,]  270  214 #> [332,]  271  215 #> [333,]  272  216 #> [334,]  273  216 #> [335,]  274  217 #> [336,]  275  217 #> [337,]  276  218 #> [338,]  277  219 #> [339,]  278  219 #> [340,]  279  218 #> [341,]  279  217 #> [342,]  279  216 #> [343,]  279  215 #> [344,]  278  214 #> [345,]  278  213 #> [346,]  278  212 #> [347,]  279  211 #> [348,]  278  210 #> [349,]  278  209 #> [350,]  278  208 #> [351,]  278  207 #> [352,]  278  206 #> [353,]  278  205 #> [354,]  277  204 #> [355,]  277  203 #> [356,]  278  202 #> [357,]  277  201 #> [358,]  277  200 #> [359,]  277  199 #> [360,]  277  198 #> [361,]  277  197 #> [362,]  277  196 #> [363,]  276  195 #> [364,]  276  194 #> [365,]  276  193 #> [366,]  277  192 #> [367,]  277  191 #> [368,]  276  190 #> [369,]  276  189 #> [370,]  276  188 #> [371,]  276  187 #> [372,]  276  186 #> [373,]  276  185 #> [374,]  276  184 #> [375,]  276  183 #> [376,]  276  182 #> [377,]  276  181 #> [378,]  276  180 #> [379,]  276  179 #> [380,]  276  178 #> [381,]  276  177 #> [382,]  276  176 #> [383,]  277  175 #> [384,]  276  174 #> [385,]  276  173 #> [386,]  277  172 #> [387,]  277  171 #> [388,]  277  170 #> [389,]  277  169 #> [390,]  277  168 #> [391,]  277  167 #> [392,]  278  166 #> [393,]  278  165 #> [394,]  278  164 #> [395,]  278  163 #> [396,]  279  162 #> [397,]  279  161 #> [398,]  279  160 #> [399,]  280  159 #> [400,]  280  158 #> [401,]  280  157 #> [402,]  281  156 #> [403,]  281  155 #> [404,]  282  154 #> [405,]  282  153 #> [406,]  281  152 #> [407,]  280  152 #> [408,]  279  152 #> [409,]  278  151 #> [410,]  277  151 #> [411,]  276  150 #> [412,]  275  150 #> [413,]  274  150 #> [414,]  273  149 #> [415,]  272  148 #> [416,]  271  148 #> [417,]  270  147 #> [418,]  269  146 #> [419,]  268  146 #> [420,]  267  145 #> [421,]  266  145 #> [422,]  265  144 #> [423,]  264  143 #> [424,]  263  142 #> [425,]  262  142 #> [426,]  261  141 #> [427,]  260  140 #> [428,]  259  139 #> [429,]  258  139 #> [430,]  257  138 #> [431,]  256  137 #> [432,]  255  136 #> [433,]  254  135 #> [434,]  253  134 #> [435,]  252  133 #> [436,]  251  133 #> [437,]  250  132 #> [438,]  249  131 #> [439,]  248  130 #> [440,]  247  129 #> [441,]  246  128 #> [442,]  245  127 #> [443,]  244  126 #> [444,]  243  125 #> [445,]  242  124 #> [446,]  241  123 #> [447,]  240  122 #> [448,]  239  121 #> [449,]  238  120 #> [450,]  237  119 #> [451,]  236  118 #> [452,]  235  117 #> [453,]  234  116 #> [454,]  233  115 #> [455,]  232  114 #> [456,]  231  113 #> [457,]  231  112 #> [458,]  230  111 #> [459,]  229  110 #> [460,]  228  109 #> [461,]  227  108 #> [462,]  226  107 #> [463,]  225  106 #> [464,]  224  105 #> [465,]  223  104 #> [466,]  223  103 #> [467,]  222  102 #> [468,]  221  101 #> [469,]  220  100 #> [470,]  219   99 #> [471,]  218   98 #> [472,]  218   97 #> [473,]  217   96 #> [474,]  216   95 #> [475,]  215   94 #> [476,]  214   93 #> [477,]  213   92 #> [478,]  213   91 #> [479,]  212   90 #> [480,]  211   89 #> [481,]  210   88 #> [482,]  209   87 #> [483,]  209   86 #> [484,]  208   85 #> [485,]  207   84 #> [486,]  206   83 #> [487,]  205   82 #> [488,]  205   81 #> [489,]  204   80 #> [490,]  203   79 #> [491,]  202   78 #> [492,]  202   77 #> [493,]  201   76 #> [494,]  200   75 #>  #> $chimay #>        [,1] [,2] #>   [1,]  200   76 #>   [2,]  200   75 #>   [3,]  199   74 #>   [4,]  198   73 #>   [5,]  198   72 #>   [6,]  197   71 #>   [7,]  197   70 #>   [8,]  196   69 #>   [9,]  195   68 #>  [10,]  195   67 #>  [11,]  194   66 #>  [12,]  194   65 #>  [13,]  193   64 #>  [14,]  192   63 #>  [15,]  192   62 #>  [16,]  191   61 #>  [17,]  190   60 #>  [18,]  190   59 #>  [19,]  189   58 #>  [20,]  189   57 #>  [21,]  188   56 #>  [22,]  187   55 #>  [23,]  187   54 #>  [24,]  186   53 #>  [25,]  186   52 #>  [26,]  185   51 #>  [27,]  184   50 #>  [28,]  184   49 #>  [29,]  183   48 #>  [30,]  183   47 #>  [31,]  182   46 #>  [32,]  181   45 #>  [33,]  181   44 #>  [34,]  181   43 #>  [35,]  180   42 #>  [36,]  179   41 #>  [37,]  179   40 #>  [38,]  178   39 #>  [39,]  177   38 #>  [40,]  176   37 #>  [41,]  175   37 #>  [42,]  174   37 #>  [43,]  173   37 #>  [44,]  172   37 #>  [45,]  171   37 #>  [46,]  170   37 #>  [47,]  169   37 #>  [48,]  168   37 #>  [49,]  167   37 #>  [50,]  166   37 #>  [51,]  165   37 #>  [52,]  164   37 #>  [53,]  163   37 #>  [54,]  162   37 #>  [55,]  161   37 #>  [56,]  160   37 #>  [57,]  159   37 #>  [58,]  158   37 #>  [59,]  157   37 #>  [60,]  156   37 #>  [61,]  155   37 #>  [62,]  154   37 #>  [63,]  153   37 #>  [64,]  152   37 #>  [65,]  151   37 #>  [66,]  150   37 #>  [67,]  149   37 #>  [68,]  148   37 #>  [69,]  147   37 #>  [70,]  146   37 #>  [71,]  145   37 #>  [72,]  144   37 #>  [73,]  143   37 #>  [74,]  142   37 #>  [75,]  141   37 #>  [76,]  140   37 #>  [77,]  139   37 #>  [78,]  138   37 #>  [79,]  137   37 #>  [80,]  136   37 #>  [81,]  135   37 #>  [82,]  134   37 #>  [83,]  133   37 #>  [84,]  132   37 #>  [85,]  131   37 #>  [86,]  130   37 #>  [87,]  129   37 #>  [88,]  128   37 #>  [89,]  127   37 #>  [90,]  126   37 #>  [91,]  125   37 #>  [92,]  124   37 #>  [93,]  123   37 #>  [94,]  122   37 #>  [95,]  121   37 #>  [96,]  120   37 #>  [97,]  119   37 #>  [98,]  118   37 #>  [99,]  117   37 #> [100,]  116   37 #> [101,]  115   37 #> [102,]  114   37 #> [103,]  113   37 #> [104,]  112   37 #> [105,]  111   37 #> [106,]  110   37 #> [107,]  109   37 #> [108,]  108   37 #> [109,]  107   37 #> [110,]  106   37 #> [111,]  105   37 #> [112,]  104   37 #> [113,]  103   37 #> [114,]  102   38 #> [115,]  103   39 #> [116,]  103   40 #> [117,]  104   41 #> [118,]  104   42 #> [119,]  105   43 #> [120,]  106   44 #> [121,]  106   45 #> [122,]  107   46 #> [123,]  107   47 #> [124,]  108   48 #> [125,]  108   49 #> [126,]  109   50 #> [127,]  110   51 #> [128,]  110   52 #> [129,]  111   53 #> [130,]  111   54 #> [131,]  112   55 #> [132,]  113   56 #> [133,]  113   57 #> [134,]  113   58 #> [135,]  114   59 #> [136,]  115   60 #> [137,]  115   61 #> [138,]  116   62 #> [139,]  117   63 #> [140,]  117   64 #> [141,]  117   65 #> [142,]  118   66 #> [143,]  119   67 #> [144,]  119   68 #> [145,]  120   69 #> [146,]  121   70 #> [147,]  121   71 #> [148,]  121   72 #> [149,]  122   73 #> [150,]  123   74 #> [151,]  123   75 #> [152,]  124   76 #> [153,]  125   77 #> [154,]  125   78 #> [155,]  126   79 #> [156,]  126   80 #> [157,]  127   81 #> [158,]  127   82 #> [159,]  128   83 #> [160,]  129   84 #> [161,]  129   85 #> [162,]  130   86 #> [163,]  130   87 #> [164,]  131   88 #> [165,]  131   89 #> [166,]  132   90 #> [167,]  132   91 #> [168,]  133   92 #> [169,]  134   93 #> [170,]  134   94 #> [171,]  135   95 #> [172,]  136   96 #> [173,]  136   97 #> [174,]  136   98 #> [175,]  137   99 #> [176,]  138  100 #> [177,]  138  101 #> [178,]  139  102 #> [179,]  140  103 #> [180,]  140  104 #> [181,]  140  105 #> [182,]  141  106 #> [183,]  142  107 #> [184,]  142  108 #> [185,]  143  109 #> [186,]  144  110 #> [187,]  144  111 #> [188,]  145  112 #> [189,]  145  113 #> [190,]  146  114 #> [191,]  146  115 #> [192,]  147  116 #> [193,]  148  117 #> [194,]  148  118 #> [195,]  149  119 #> [196,]  149  120 #> [197,]  150  121 #> [198,]  150  122 #> [199,]  151  123 #> [200,]  151  124 #> [201,]  152  125 #> [202,]  153  126 #> [203,]  153  127 #> [204,]  152  128 #> [205,]  151  129 #> [206,]  151  130 #> [207,]  150  131 #> [208,]  149  132 #> [209,]  149  133 #> [210,]  149  134 #> [211,]  148  135 #> [212,]  147  136 #> [213,]  147  137 #> [214,]  146  138 #> [215,]  145  139 #> [216,]  145  140 #> [217,]  145  141 #> [218,]  144  142 #> [219,]  143  143 #> [220,]  143  144 #> [221,]  142  145 #> [222,]  141  146 #> [223,]  141  147 #> [224,]  141  148 #> [225,]  140  149 #> [226,]  139  150 #> [227,]  139  151 #> [228,]  138  152 #> [229,]  137  153 #> [230,]  137  154 #> [231,]  137  155 #> [232,]  136  156 #> [233,]  135  157 #> [234,]  135  158 #> [235,]  134  159 #> [236,]  133  160 #> [237,]  133  161 #> [238,]  133  162 #> [239,]  132  163 #> [240,]  131  164 #> [241,]  131  165 #> [242,]  130  166 #> [243,]  129  167 #> [244,]  129  168 #> [245,]  129  169 #> [246,]  128  170 #> [247,]  127  171 #> [248,]  127  172 #> [249,]  126  173 #> [250,]  125  174 #> [251,]  125  175 #> [252,]  125  176 #> [253,]  124  177 #> [254,]  123  178 #> [255,]  123  179 #> [256,]  122  180 #> [257,]  121  181 #> [258,]  121  182 #> [259,]  121  183 #> [260,]  120  184 #> [261,]  119  185 #> [262,]  119  186 #> [263,]  118  187 #> [264,]  117  188 #> [265,]  117  189 #> [266,]  117  190 #> [267,]  116  191 #> [268,]  115  192 #> [269,]  115  193 #> [270,]  114  194 #> [271,]  113  195 #> [272,]  113  196 #> [273,]  113  197 #> [274,]  112  198 #> [275,]  111  199 #> [276,]  111  200 #> [277,]  110  201 #> [278,]  109  202 #> [279,]  109  203 #> [280,]  109  204 #> [281,]  108  205 #> [282,]  107  206 #> [283,]  107  207 #> [284,]  106  208 #> [285,]  105  209 #> [286,]  105  210 #> [287,]  105  211 #> [288,]  106  212 #> [289,]  107  212 #> [290,]  108  212 #> [291,]  109  212 #> [292,]  110  212 #> [293,]  111  212 #> [294,]  112  212 #> [295,]  113  212 #> [296,]  114  212 #> [297,]  115  212 #> [298,]  116  212 #> [299,]  117  212 #> [300,]  118  212 #> [301,]  119  212 #> [302,]  120  212 #> [303,]  121  212 #> [304,]  122  212 #> [305,]  123  212 #> [306,]  124  212 #> [307,]  125  212 #> [308,]  126  212 #> [309,]  127  212 #> [310,]  128  212 #> [311,]  129  212 #> [312,]  130  212 #> [313,]  131  212 #> [314,]  132  212 #> [315,]  133  212 #> [316,]  134  212 #> [317,]  135  212 #> [318,]  136  212 #> [319,]  137  212 #> [320,]  138  212 #> [321,]  139  212 #> [322,]  140  212 #> [323,]  141  212 #> [324,]  142  212 #> [325,]  143  212 #> [326,]  144  212 #> [327,]  145  212 #> [328,]  146  212 #> [329,]  147  212 #> [330,]  148  212 #> [331,]  149  212 #> [332,]  150  212 #> [333,]  151  212 #> [334,]  152  212 #> [335,]  153  212 #> [336,]  154  212 #> [337,]  155  212 #> [338,]  156  212 #> [339,]  157  212 #> [340,]  158  212 #> [341,]  159  212 #> [342,]  160  212 #> [343,]  161  212 #> [344,]  162  212 #> [345,]  163  212 #> [346,]  164  212 #> [347,]  165  212 #> [348,]  166  212 #> [349,]  167  212 #> [350,]  168  212 #> [351,]  169  212 #> [352,]  170  212 #> [353,]  171  212 #> [354,]  172  212 #> [355,]  173  212 #> [356,]  174  212 #> [357,]  175  212 #> [358,]  176  212 #> [359,]  177  212 #> [360,]  178  212 #> [361,]  179  212 #> [362,]  180  211 #> [363,]  181  210 #> [364,]  181  209 #> [365,]  182  208 #> [366,]  182  207 #> [367,]  183  206 #> [368,]  184  205 #> [369,]  184  204 #> [370,]  185  203 #> [371,]  186  202 #> [372,]  186  201 #> [373,]  187  200 #> [374,]  188  199 #> [375,]  188  198 #> [376,]  189  197 #> [377,]  189  196 #> [378,]  190  195 #> [379,]  191  194 #> [380,]  191  193 #> [381,]  192  192 #> [382,]  192  191 #> [383,]  193  190 #> [384,]  194  189 #> [385,]  194  188 #> [386,]  195  187 #> [387,]  195  186 #> [388,]  196  185 #> [389,]  197  184 #> [390,]  197  183 #> [391,]  198  182 #> [392,]  198  181 #> [393,]  199  180 #> [394,]  200  179 #> [395,]  200  178 #> [396,]  201  177 #> [397,]  201  176 #> [398,]  202  175 #> [399,]  203  174 #> [400,]  203  173 #> [401,]  204  173 #> [402,]  204  174 #> [403,]  205  175 #> [404,]  205  176 #> [405,]  206  177 #> [406,]  206  178 #> [407,]  207  179 #> [408,]  207  180 #> [409,]  208  181 #> [410,]  209  182 #> [411,]  209  183 #> [412,]  210  184 #> [413,]  211  185 #> [414,]  211  186 #> [415,]  212  187 #> [416,]  212  188 #> [417,]  213  189 #> [418,]  214  190 #> [419,]  214  191 #> [420,]  214  192 #> [421,]  215  193 #> [422,]  216  194 #> [423,]  216  195 #> [424,]  217  196 #> [425,]  217  197 #> [426,]  218  198 #> [427,]  219  199 #> [428,]  219  200 #> [429,]  220  201 #> [430,]  221  202 #> [431,]  221  203 #> [432,]  222  204 #> [433,]  222  205 #> [434,]  223  206 #> [435,]  224  207 #> [436,]  224  208 #> [437,]  224  209 #> [438,]  225  210 #> [439,]  226  211 #> [440,]  227  212 #> [441,]  228  212 #> [442,]  229  212 #> [443,]  230  212 #> [444,]  231  212 #> [445,]  232  212 #> [446,]  233  212 #> [447,]  234  212 #> [448,]  235  212 #> [449,]  236  212 #> [450,]  237  212 #> [451,]  238  212 #> [452,]  239  212 #> [453,]  240  212 #> [454,]  241  212 #> [455,]  242  212 #> [456,]  243  212 #> [457,]  244  212 #> [458,]  245  212 #> [459,]  246  212 #> [460,]  247  212 #> [461,]  248  212 #> [462,]  249  212 #> [463,]  250  212 #> [464,]  251  212 #> [465,]  252  212 #> [466,]  253  212 #> [467,]  254  212 #> [468,]  255  212 #> [469,]  256  212 #> [470,]  257  212 #> [471,]  258  212 #> [472,]  259  212 #> [473,]  260  212 #> [474,]  261  212 #> [475,]  262  212 #> [476,]  263  212 #> [477,]  264  212 #> [478,]  265  212 #> [479,]  266  212 #> [480,]  267  212 #> [481,]  268  212 #> [482,]  269  212 #> [483,]  270  212 #> [484,]  271  212 #> [485,]  272  212 #> [486,]  273  212 #> [487,]  274  212 #> [488,]  275  212 #> [489,]  276  212 #> [490,]  277  212 #> [491,]  278  212 #> [492,]  279  212 #> [493,]  280  212 #> [494,]  281  212 #> [495,]  282  212 #> [496,]  283  212 #> [497,]  284  212 #> [498,]  285  212 #> [499,]  286  212 #> [500,]  287  212 #> [501,]  288  212 #> [502,]  289  212 #> [503,]  290  212 #> [504,]  291  212 #> [505,]  292  212 #> [506,]  293  212 #> [507,]  294  212 #> [508,]  295  212 #> [509,]  296  212 #> [510,]  297  212 #> [511,]  298  212 #> [512,]  299  212 #> [513,]  300  211 #> [514,]  299  210 #> [515,]  299  209 #> [516,]  298  208 #> [517,]  297  207 #> [518,]  297  206 #> [519,]  297  205 #> [520,]  296  204 #> [521,]  295  203 #> [522,]  295  202 #> [523,]  294  201 #> [524,]  293  200 #> [525,]  293  199 #> [526,]  292  198 #> [527,]  292  197 #> [528,]  291  196 #> [529,]  291  195 #> [530,]  290  194 #> [531,]  289  193 #> [532,]  289  192 #> [533,]  288  191 #> [534,]  288  190 #> [535,]  287  189 #> [536,]  287  188 #> [537,]  286  187 #> [538,]  285  186 #> [539,]  285  185 #> [540,]  284  184 #> [541,]  284  183 #> [542,]  283  182 #> [543,]  282  181 #> [544,]  282  180 #> [545,]  282  179 #> [546,]  281  178 #> [547,]  280  177 #> [548,]  280  176 #> [549,]  279  175 #> [550,]  278  174 #> [551,]  278  173 #> [552,]  278  172 #> [553,]  277  171 #> [554,]  276  170 #> [555,]  276  169 #> [556,]  275  168 #> [557,]  274  167 #> [558,]  274  166 #> [559,]  274  165 #> [560,]  273  164 #> [561,]  272  163 #> [562,]  272  162 #> [563,]  271  161 #> [564,]  270  160 #> [565,]  270  159 #> [566,]  269  158 #> [567,]  269  157 #> [568,]  268  156 #> [569,]  268  155 #> [570,]  267  154 #> [571,]  266  153 #> [572,]  266  152 #> [573,]  265  151 #> [574,]  265  150 #> [575,]  264  149 #> [576,]  264  148 #> [577,]  263  147 #> [578,]  262  146 #> [579,]  262  145 #> [580,]  261  144 #> [581,]  261  143 #> [582,]  260  142 #> [583,]  259  141 #> [584,]  259  140 #> [585,]  259  139 #> [586,]  258  138 #> [587,]  257  137 #> [588,]  257  136 #> [589,]  256  135 #> [590,]  255  134 #> [591,]  255  133 #> [592,]  255  132 #> [593,]  254  131 #> [594,]  253  130 #> [595,]  253  129 #> [596,]  252  128 #> [597,]  251  127 #> [598,]  251  126 #> [599,]  252  125 #> [600,]  253  124 #> [601,]  253  123 #> [602,]  253  122 #> [603,]  254  121 #> [604,]  255  120 #> [605,]  255  119 #> [606,]  256  118 #> [607,]  257  117 #> [608,]  257  116 #> [609,]  257  115 #> [610,]  258  114 #> [611,]  259  113 #> [612,]  259  112 #> [613,]  260  111 #> [614,]  260  110 #> [615,]  261  109 #> [616,]  262  108 #> [617,]  262  107 #> [618,]  263  106 #> [619,]  263  105 #> [620,]  264  104 #> [621,]  264  103 #> [622,]  265  102 #> [623,]  266  101 #> [624,]  266  100 #> [625,]  267   99 #> [626,]  267   98 #> [627,]  268   97 #> [628,]  268   96 #> [629,]  269   95 #> [630,]  270   94 #> [631,]  270   93 #> [632,]  271   92 #> [633,]  272   91 #> [634,]  272   90 #> [635,]  272   89 #> [636,]  273   88 #> [637,]  274   87 #> [638,]  274   86 #> [639,]  275   85 #> [640,]  276   84 #> [641,]  276   83 #> [642,]  276   82 #> [643,]  277   81 #> [644,]  278   80 #> [645,]  278   79 #> [646,]  279   78 #> [647,]  279   77 #> [648,]  280   76 #> [649,]  281   75 #> [650,]  281   74 #> [651,]  282   73 #> [652,]  282   72 #> [653,]  283   71 #> [654,]  283   70 #> [655,]  284   69 #> [656,]  285   68 #> [657,]  285   67 #> [658,]  286   66 #> [659,]  286   65 #> [660,]  287   64 #> [661,]  287   63 #> [662,]  288   62 #> [663,]  289   61 #> [664,]  289   60 #> [665,]  290   59 #> [666,]  291   58 #> [667,]  291   57 #> [668,]  291   56 #> [669,]  292   55 #> [670,]  293   54 #> [671,]  293   53 #> [672,]  294   52 #> [673,]  295   51 #> [674,]  295   50 #> [675,]  295   49 #> [676,]  296   48 #> [677,]  297   47 #> [678,]  297   46 #> [679,]  298   45 #> [680,]  299   44 #> [681,]  299   43 #> [682,]  300   42 #> [683,]  300   41 #> [684,]  301   40 #> [685,]  301   39 #> [686,]  302   38 #> [687,]  301   37 #> [688,]  300   37 #> [689,]  299   37 #> [690,]  298   37 #> [691,]  297   37 #> [692,]  296   37 #> [693,]  295   37 #> [694,]  294   37 #> [695,]  293   37 #> [696,]  292   37 #> [697,]  291   37 #> [698,]  290   37 #> [699,]  289   37 #> [700,]  288   37 #> [701,]  287   37 #> [702,]  286   37 #> [703,]  285   37 #> [704,]  284   37 #> [705,]  283   37 #> [706,]  282   37 #> [707,]  281   37 #> [708,]  280   37 #> [709,]  279   37 #> [710,]  278   37 #> [711,]  277   37 #> [712,]  276   37 #> [713,]  275   37 #> [714,]  274   37 #> [715,]  273   37 #> [716,]  272   37 #> [717,]  271   37 #> [718,]  270   37 #> [719,]  269   37 #> [720,]  268   37 #> [721,]  267   37 #> [722,]  266   37 #> [723,]  265   37 #> [724,]  264   37 #> [725,]  263   37 #> [726,]  262   37 #> [727,]  261   37 #> [728,]  260   37 #> [729,]  259   37 #> [730,]  258   37 #> [731,]  257   37 #> [732,]  256   37 #> [733,]  255   37 #> [734,]  254   37 #> [735,]  253   37 #> [736,]  252   37 #> [737,]  251   37 #> [738,]  250   37 #> [739,]  249   37 #> [740,]  248   37 #> [741,]  247   37 #> [742,]  246   37 #> [743,]  245   37 #> [744,]  244   37 #> [745,]  243   37 #> [746,]  242   37 #> [747,]  241   37 #> [748,]  240   37 #> [749,]  239   37 #> [750,]  238   37 #> [751,]  237   37 #> [752,]  236   37 #> [753,]  235   37 #> [754,]  234   37 #> [755,]  233   37 #> [756,]  232   37 #> [757,]  231   37 #> [758,]  230   37 #> [759,]  229   37 #> [760,]  228   37 #> [761,]  227   37 #> [762,]  226   37 #> [763,]  225   38 #> [764,]  225   39 #> [765,]  224   40 #> [766,]  224   41 #> [767,]  223   42 #> [768,]  222   43 #> [769,]  222   44 #> [770,]  221   45 #> [771,]  221   46 #> [772,]  220   47 #> [773,]  219   48 #> [774,]  219   49 #> [775,]  218   50 #> [776,]  218   51 #> [777,]  217   52 #> [778,]  216   53 #> [779,]  216   54 #> [780,]  215   55 #> [781,]  214   56 #> [782,]  214   57 #> [783,]  213   58 #> [784,]  213   59 #> [785,]  212   60 #> [786,]  211   61 #> [787,]  211   62 #> [788,]  210   63 #> [789,]  210   64 #> [790,]  209   65 #> [791,]  208   66 #> [792,]  208   67 #> [793,]  207   68 #> [794,]  207   69 #> [795,]  206   70 #> [796,]  205   71 #> [797,]  205   72 #> [798,]  205   73 #> [799,]  204   74 #> [800,]  203   75 #> [801,]  203   76 #> [802,]  202   77 #> [803,]  202   78 #> [804,]  201   78 #> [805,]  201   77 #> [806,]  200   76 #>  #> $corona #>        [,1] [,2] #>   [1,]  200  106 #>   [2,]  199  105 #>   [3,]  198  105 #>   [4,]  197  106 #>   [5,]  196  105 #>   [6,]  195  105 #>   [7,]  194  105 #>   [8,]  193  106 #>   [9,]  192  106 #>  [10,]  191  106 #>  [11,]  190  106 #>  [12,]  189  106 #>  [13,]  188  106 #>  [14,]  187  106 #>  [15,]  186  106 #>  [16,]  185  106 #>  [17,]  184  106 #>  [18,]  183  106 #>  [19,]  182  106 #>  [20,]  181  106 #>  [21,]  180  106 #>  [22,]  179  106 #>  [23,]  178  106 #>  [24,]  177  107 #>  [25,]  176  107 #>  [26,]  175  107 #>  [27,]  174  107 #>  [28,]  173  107 #>  [29,]  172  107 #>  [30,]  171  107 #>  [31,]  170  107 #>  [32,]  169  107 #>  [33,]  168  108 #>  [34,]  167  108 #>  [35,]  166  108 #>  [36,]  165  108 #>  [37,]  164  108 #>  [38,]  163  107 #>  [39,]  162  107 #>  [40,]  161  106 #>  [41,]  160  105 #>  [42,]  160  104 #>  [43,]  159  103 #>  [44,]  158  102 #>  [45,]  157  101 #>  [46,]  156  100 #>  [47,]  156   99 #>  [48,]  155   98 #>  [49,]  154   97 #>  [50,]  153   96 #>  [51,]  153   95 #>  [52,]  152   94 #>  [53,]  151   93 #>  [54,]  150   92 #>  [55,]  149   91 #>  [56,]  148   90 #>  [57,]  147   89 #>  [58,]  146   88 #>  [59,]  145   87 #>  [60,]  144   86 #>  [61,]  143   85 #>  [62,]  142   85 #>  [63,]  141   84 #>  [64,]  140   83 #>  [65,]  139   83 #>  [66,]  138   82 #>  [67,]  137   81 #>  [68,]  136   80 #>  [69,]  135   79 #>  [70,]  134   79 #>  [71,]  133   78 #>  [72,]  132   77 #>  [73,]  131   76 #>  [74,]  130   75 #>  [75,]  129   74 #>  [76,]  128   73 #>  [77,]  128   72 #>  [78,]  127   71 #>  [79,]  126   70 #>  [80,]  125   69 #>  [81,]  125   68 #>  [82,]  124   67 #>  [83,]  124   66 #>  [84,]  124   65 #>  [85,]  123   64 #>  [86,]  123   63 #>  [87,]  123   62 #>  [88,]  123   61 #>  [89,]  122   60 #>  [90,]  122   59 #>  [91,]  122   58 #>  [92,]  122   57 #>  [93,]  122   56 #>  [94,]  123   55 #>  [95,]  124   54 #>  [96,]  125   53 #>  [97,]  126   52 #>  [98,]  127   52 #>  [99,]  128   51 #> [100,]  129   50 #> [101,]  129   49 #> [102,]  129   48 #> [103,]  128   47 #> [104,]  127   46 #> [105,]  126   46 #> [106,]  125   45 #> [107,]  124   45 #> [108,]  123   45 #> [109,]  122   45 #> [110,]  121   45 #> [111,]  120   45 #> [112,]  119   45 #> [113,]  118   45 #> [114,]  117   45 #> [115,]  116   45 #> [116,]  115   45 #> [117,]  114   45 #> [118,]  113   46 #> [119,]  112   46 #> [120,]  111   47 #> [121,]  110   48 #> [122,]  110   49 #> [123,]  110   50 #> [124,]  109   51 #> [125,]  109   52 #> [126,]  109   53 #> [127,]  109   54 #> [128,]  109   55 #> [129,]  109   56 #> [130,]  109   57 #> [131,]  109   58 #> [132,]  109   59 #> [133,]  109   60 #> [134,]  109   61 #> [135,]  109   62 #> [136,]  109   63 #> [137,]  109   64 #> [138,]  109   65 #> [139,]  109   66 #> [140,]  109   67 #> [141,]  109   68 #> [142,]  109   69 #> [143,]  109   70 #> [144,]  109   71 #> [145,]  109   72 #> [146,]  109   73 #> [147,]  109   74 #> [148,]  109   75 #> [149,]  109   76 #> [150,]  109   77 #> [151,]  109   78 #> [152,]  110   79 #> [153,]  111   80 #> [154,]  112   81 #> [155,]  113   82 #> [156,]  114   83 #> [157,]  115   84 #> [158,]  116   85 #> [159,]  117   86 #> [160,]  118   87 #> [161,]  119   88 #> [162,]  120   89 #> [163,]  121   90 #> [164,]  122   91 #> [165,]  122   92 #> [166,]  123   93 #> [167,]  124   94 #> [168,]  125   95 #> [169,]  125   96 #> [170,]  125   97 #> [171,]  126   98 #> [172,]  125   99 #> [173,]  126  100 #> [174,]  126  101 #> [175,]  125  101 #> [176,]  125  100 #> [177,]  124   99 #> [178,]  124   98 #> [179,]  123   97 #> [180,]  123   96 #> [181,]  122   95 #> [182,]  121   94 #> [183,]  120   93 #> [184,]  119   92 #> [185,]  118   91 #> [186,]  117   90 #> [187,]  116   89 #> [188,]  115   88 #> [189,]  114   87 #> [190,]  113   87 #> [191,]  112   86 #> [192,]  111   85 #> [193,]  110   85 #> [194,]  109   84 #> [195,]  108   84 #> [196,]  107   84 #> [197,]  106   83 #> [198,]  105   83 #> [199,]  104   82 #> [200,]  103   83 #> [201,]  103   84 #> [202,]  103   85 #> [203,]  104   86 #> [204,]  105   87 #> [205,]  106   88 #> [206,]  107   89 #> [207,]  108   90 #> [208,]  109   91 #> [209,]  110   92 #> [210,]  111   93 #> [211,]  111   94 #> [212,]  112   95 #> [213,]  112   96 #> [214,]  112   97 #> [215,]  113   98 #> [216,]  113   99 #> [217,]  113  100 #> [218,]  113  101 #> [219,]  114  102 #> [220,]  114  103 #> [221,]  114  104 #> [222,]  114  105 #> [223,]  114  106 #> [224,]  114  107 #> [225,]  115  108 #> [226,]  115  109 #> [227,]  114  110 #> [228,]  115  111 #> [229,]  115  112 #> [230,]  115  113 #> [231,]  115  114 #> [232,]  115  115 #> [233,]  115  116 #> [234,]  115  117 #> [235,]  116  118 #> [236,]  116  119 #> [237,]  116  120 #> [238,]  116  121 #> [239,]  116  122 #> [240,]  116  123 #> [241,]  115  124 #> [242,]  115  125 #> [243,]  115  126 #> [244,]  115  127 #> [245,]  115  128 #> [246,]  115  129 #> [247,]  115  130 #> [248,]  115  131 #> [249,]  115  132 #> [250,]  116  133 #> [251,]  115  134 #> [252,]  116  135 #> [253,]  116  136 #> [254,]  116  137 #> [255,]  117  138 #> [256,]  117  139 #> [257,]  117  140 #> [258,]  118  141 #> [259,]  118  142 #> [260,]  118  143 #> [261,]  119  144 #> [262,]  120  145 #> [263,]  120  146 #> [264,]  121  147 #> [265,]  121  148 #> [266,]  122  149 #> [267,]  123  150 #> [268,]  123  151 #> [269,]  124  152 #> [270,]  125  153 #> [271,]  126  154 #> [272,]  127  155 #> [273,]  128  156 #> [274,]  129  157 #> [275,]  130  158 #> [276,]  131  159 #> [277,]  132  160 #> [278,]  133  161 #> [279,]  134  161 #> [280,]  135  162 #> [281,]  136  162 #> [282,]  137  162 #> [283,]  138  163 #> [284,]  139  163 #> [285,]  140  163 #> [286,]  141  163 #> [287,]  142  164 #> [288,]  143  164 #> [289,]  144  164 #> [290,]  145  164 #> [291,]  146  164 #> [292,]  147  164 #> [293,]  148  165 #> [294,]  149  165 #> [295,]  150  165 #> [296,]  151  165 #> [297,]  152  165 #> [298,]  153  165 #> [299,]  154  166 #> [300,]  155  166 #> [301,]  156  165 #> [302,]  157  165 #> [303,]  158  165 #> [304,]  159  165 #> [305,]  160  166 #> [306,]  161  166 #> [307,]  162  166 #> [308,]  163  166 #> [309,]  164  166 #> [310,]  165  166 #> [311,]  166  166 #> [312,]  167  166 #> [313,]  168  166 #> [314,]  169  166 #> [315,]  170  166 #> [316,]  171  166 #> [317,]  172  166 #> [318,]  173  166 #> [319,]  174  166 #> [320,]  175  166 #> [321,]  176  166 #> [322,]  177  166 #> [323,]  178  166 #> [324,]  179  166 #> [325,]  180  166 #> [326,]  181  166 #> [327,]  182  166 #> [328,]  183  166 #> [329,]  184  166 #> [330,]  185  166 #> [331,]  186  166 #> [332,]  187  166 #> [333,]  188  166 #> [334,]  189  165 #> [335,]  190  165 #> [336,]  191  165 #> [337,]  192  165 #> [338,]  193  165 #> [339,]  194  165 #> [340,]  195  165 #> [341,]  196  165 #> [342,]  197  165 #> [343,]  198  165 #> [344,]  199  165 #> [345,]  200  165 #> [346,]  201  165 #> [347,]  202  165 #> [348,]  203  165 #> [349,]  204  165 #> [350,]  205  165 #> [351,]  206  166 #> [352,]  207  166 #> [353,]  208  166 #> [354,]  209  166 #> [355,]  210  166 #> [356,]  211  166 #> [357,]  212  166 #> [358,]  213  166 #> [359,]  214  166 #> [360,]  215  167 #> [361,]  216  167 #> [362,]  217  167 #> [363,]  218  167 #> [364,]  219  167 #> [365,]  220  168 #> [366,]  221  168 #> [367,]  222  168 #> [368,]  223  169 #> [369,]  224  169 #> [370,]  225  169 #> [371,]  226  170 #> [372,]  227  170 #> [373,]  228  171 #> [374,]  229  171 #> [375,]  230  172 #> [376,]  231  172 #> [377,]  232  173 #> [378,]  233  174 #> [379,]  234  174 #> [380,]  235  175 #> [381,]  236  176 #> [382,]  237  177 #> [383,]  238  178 #> [384,]  238  179 #> [385,]  239  180 #> [386,]  240  181 #> [387,]  241  182 #> [388,]  241  183 #> [389,]  242  184 #> [390,]  243  185 #> [391,]  243  186 #> [392,]  244  187 #> [393,]  245  188 #> [394,]  245  189 #> [395,]  246  190 #> [396,]  246  191 #> [397,]  247  192 #> [398,]  247  193 #> [399,]  248  194 #> [400,]  249  195 #> [401,]  249  196 #> [402,]  250  197 #> [403,]  250  198 #> [404,]  251  199 #> [405,]  251  200 #> [406,]  251  201 #> [407,]  252  202 #> [408,]  252  203 #> [409,]  253  204 #> [410,]  253  205 #> [411,]  254  206 #> [412,]  254  207 #> [413,]  254  208 #> [414,]  255  209 #> [415,]  255  210 #> [416,]  256  211 #> [417,]  256  212 #> [418,]  256  213 #> [419,]  257  214 #> [420,]  257  215 #> [421,]  257  216 #> [422,]  258  217 #> [423,]  258  218 #> [424,]  259  219 #> [425,]  260  220 #> [426,]  261  221 #> [427,]  262  222 #> [428,]  263  223 #> [429,]  264  224 #> [430,]  265  225 #> [431,]  266  225 #> [432,]  267  226 #> [433,]  268  226 #> [434,]  269  226 #> [435,]  270  227 #> [436,]  271  227 #> [437,]  272  227 #> [438,]  273  227 #> [439,]  274  227 #> [440,]  275  227 #> [441,]  276  227 #> [442,]  277  227 #> [443,]  278  227 #> [444,]  279  228 #> [445,]  280  227 #> [446,]  281  227 #> [447,]  282  227 #> [448,]  283  227 #> [449,]  284  226 #> [450,]  285  226 #> [451,]  286  225 #> [452,]  287  224 #> [453,]  288  224 #> [454,]  289  223 #> [455,]  290  222 #> [456,]  291  221 #> [457,]  292  220 #> [458,]  293  219 #> [459,]  294  218 #> [460,]  295  217 #> [461,]  295  216 #> [462,]  296  215 #> [463,]  297  215 #> [464,]  298  214 #> [465,]  299  214 #> [466,]  300  214 #> [467,]  301  214 #> [468,]  302  214 #> [469,]  303  214 #> [470,]  304  214 #> [471,]  305  214 #> [472,]  306  214 #> [473,]  307  214 #> [474,]  308  214 #> [475,]  309  214 #> [476,]  310  214 #> [477,]  311  214 #> [478,]  312  214 #> [479,]  313  214 #> [480,]  314  214 #> [481,]  315  213 #> [482,]  315  212 #> [483,]  316  211 #> [484,]  316  210 #> [485,]  316  209 #> [486,]  316  208 #> [487,]  316  207 #> [488,]  315  206 #> [489,]  316  205 #> [490,]  315  204 #> [491,]  316  203 #> [492,]  316  202 #> [493,]  316  201 #> [494,]  316  200 #> [495,]  316  199 #> [496,]  316  198 #> [497,]  316  197 #> [498,]  316  196 #> [499,]  315  195 #> [500,]  315  194 #> [501,]  314  193 #> [502,]  314  192 #> [503,]  313  191 #> [504,]  312  191 #> [505,]  311  190 #> [506,]  310  190 #> [507,]  309  189 #> [508,]  308  189 #> [509,]  307  189 #> [510,]  306  189 #> [511,]  305  189 #> [512,]  304  188 #> [513,]  303  188 #> [514,]  302  188 #> [515,]  301  188 #> [516,]  300  188 #> [517,]  299  188 #> [518,]  298  188 #> [519,]  297  188 #> [520,]  296  188 #> [521,]  295  188 #> [522,]  294  188 #> [523,]  293  187 #> [524,]  292  187 #> [525,]  291  186 #> [526,]  291  185 #> [527,]  291  184 #> [528,]  290  183 #> [529,]  290  182 #> [530,]  290  181 #> [531,]  289  180 #> [532,]  289  179 #> [533,]  288  178 #> [534,]  288  177 #> [535,]  288  176 #> [536,]  287  175 #> [537,]  287  174 #> [538,]  286  173 #> [539,]  286  172 #> [540,]  286  171 #> [541,]  285  170 #> [542,]  285  169 #> [543,]  284  168 #> [544,]  284  167 #> [545,]  284  166 #> [546,]  283  165 #> [547,]  283  164 #> [548,]  282  163 #> [549,]  282  162 #> [550,]  282  161 #> [551,]  281  160 #> [552,]  281  159 #> [553,]  280  158 #> [554,]  280  157 #> [555,]  280  156 #> [556,]  279  155 #> [557,]  279  154 #> [558,]  278  153 #> [559,]  278  152 #> [560,]  278  151 #> [561,]  277  150 #> [562,]  278  149 #> [563,]  277  148 #> [564,]  277  147 #> [565,]  277  146 #> [566,]  277  145 #> [567,]  277  144 #> [568,]  276  143 #> [569,]  276  142 #> [570,]  277  141 #> [571,]  276  140 #> [572,]  276  139 #> [573,]  276  138 #> [574,]  276  137 #> [575,]  276  136 #> [576,]  275  135 #> [577,]  276  134 #> [578,]  275  133 #> [579,]  275  132 #> [580,]  275  131 #> [581,]  275  130 #> [582,]  274  129 #> [583,]  274  128 #> [584,]  274  127 #> [585,]  274  126 #> [586,]  274  125 #> [587,]  273  124 #> [588,]  273  123 #> [589,]  273  122 #> [590,]  272  121 #> [591,]  272  120 #> [592,]  272  119 #> [593,]  271  118 #> [594,]  271  117 #> [595,]  270  116 #> [596,]  269  115 #> [597,]  268  114 #> [598,]  268  113 #> [599,]  267  112 #> [600,]  267  111 #> [601,]  267  110 #> [602,]  267  109 #> [603,]  267  108 #> [604,]  267  107 #> [605,]  266  106 #> [606,]  266  105 #> [607,]  266  104 #> [608,]  266  103 #> [609,]  266  102 #> [610,]  266  101 #> [611,]  266  100 #> [612,]  266   99 #> [613,]  266   98 #> [614,]  266   97 #> [615,]  266   96 #> [616,]  266   95 #> [617,]  266   94 #> [618,]  266   93 #> [619,]  266   92 #> [620,]  266   91 #> [621,]  266   90 #> [622,]  266   89 #> [623,]  266   88 #> [624,]  266   87 #> [625,]  266   86 #> [626,]  266   85 #> [627,]  266   84 #> [628,]  266   83 #> [629,]  266   82 #> [630,]  266   81 #> [631,]  266   80 #> [632,]  266   79 #> [633,]  266   78 #> [634,]  267   77 #> [635,]  267   76 #> [636,]  267   75 #> [637,]  267   74 #> [638,]  267   73 #> [639,]  267   72 #> [640,]  267   71 #> [641,]  267   70 #> [642,]  267   69 #> [643,]  267   68 #> [644,]  268   67 #> [645,]  267   66 #> [646,]  268   65 #> [647,]  268   64 #> [648,]  269   63 #> [649,]  270   62 #> [650,]  271   62 #> [651,]  272   61 #> [652,]  273   61 #> [653,]  274   60 #> [654,]  275   60 #> [655,]  276   59 #> [656,]  277   58 #> [657,]  277   57 #> [658,]  277   56 #> [659,]  277   55 #> [660,]  276   54 #> [661,]  275   53 #> [662,]  274   53 #> [663,]  273   52 #> [664,]  272   52 #> [665,]  271   51 #> [666,]  270   51 #> [667,]  269   50 #> [668,]  268   50 #> [669,]  267   50 #> [670,]  266   50 #> [671,]  265   50 #> [672,]  264   50 #> [673,]  263   50 #> [674,]  262   50 #> [675,]  261   51 #> [676,]  260   52 #> [677,]  260   53 #> [678,]  260   54 #> [679,]  259   55 #> [680,]  259   56 #> [681,]  259   57 #> [682,]  259   58 #> [683,]  258   59 #> [684,]  258   60 #> [685,]  258   61 #> [686,]  258   62 #> [687,]  258   63 #> [688,]  257   64 #> [689,]  257   65 #> [690,]  257   66 #> [691,]  257   67 #> [692,]  256   68 #> [693,]  256   69 #> [694,]  256   70 #> [695,]  256   71 #> [696,]  255   72 #> [697,]  255   73 #> [698,]  255   74 #> [699,]  254   75 #> [700,]  254   76 #> [701,]  254   77 #> [702,]  253   78 #> [703,]  253   79 #> [704,]  252   80 #> [705,]  252   81 #> [706,]  252   82 #> [707,]  251   83 #> [708,]  251   84 #> [709,]  250   85 #> [710,]  250   86 #> [711,]  249   87 #> [712,]  249   88 #> [713,]  249   89 #> [714,]  248   90 #> [715,]  248   91 #> [716,]  247   92 #> [717,]  247   93 #> [718,]  247   94 #> [719,]  246   95 #> [720,]  246   96 #> [721,]  245   97 #> [722,]  245   98 #> [723,]  244   99 #> [724,]  243  100 #> [725,]  243  101 #> [726,]  242  102 #> [727,]  241  103 #> [728,]  240  104 #> [729,]  239  104 #> [730,]  238  104 #> [731,]  237  104 #> [732,]  236  105 #> [733,]  235  105 #> [734,]  234  105 #> [735,]  233  105 #> [736,]  232  105 #> [737,]  231  105 #> [738,]  230  105 #> [739,]  229  105 #> [740,]  228  105 #> [741,]  227  105 #> [742,]  226  105 #> [743,]  225  105 #> [744,]  224  105 #> [745,]  223  105 #> [746,]  222  105 #> [747,]  221  105 #> [748,]  220  105 #> [749,]  219  105 #> [750,]  218  105 #> [751,]  217  105 #> [752,]  216  105 #> [753,]  215  106 #> [754,]  214  106 #> [755,]  213  106 #> [756,]  212  106 #> [757,]  211  106 #> [758,]  210  106 #> [759,]  209  106 #> [760,]  208  106 #> [761,]  207  106 #> [762,]  206  106 #> [763,]  205  106 #> [764,]  204  106 #> [765,]  203  106 #> [766,]  202  106 #> [767,]  201  106 #> [768,]  200  106 #>  #> $deusventrue #>        [,1] [,2] #>   [1,]  200   87 #>   [2,]  199   86 #>   [3,]  198   86 #>   [4,]  197   87 #>   [5,]  196   87 #>   [6,]  195   87 #>   [7,]  194   87 #>   [8,]  193   87 #>   [9,]  192   87 #>  [10,]  191   87 #>  [11,]  190   87 #>  [12,]  189   87 #>  [13,]  188   87 #>  [14,]  187   87 #>  [15,]  186   87 #>  [16,]  185   87 #>  [17,]  184   87 #>  [18,]  183   87 #>  [19,]  182   87 #>  [20,]  181   87 #>  [21,]  180   87 #>  [22,]  179   87 #>  [23,]  178   87 #>  [24,]  177   87 #>  [25,]  176   87 #>  [26,]  175   87 #>  [27,]  174   87 #>  [28,]  173   87 #>  [29,]  172   87 #>  [30,]  171   87 #>  [31,]  170   87 #>  [32,]  169   87 #>  [33,]  168   87 #>  [34,]  167   87 #>  [35,]  166   87 #>  [36,]  165   87 #>  [37,]  164   87 #>  [38,]  163   87 #>  [39,]  162   88 #>  [40,]  161   88 #>  [41,]  160   88 #>  [42,]  159   88 #>  [43,]  158   88 #>  [44,]  157   88 #>  [45,]  156   89 #>  [46,]  155   89 #>  [47,]  154   89 #>  [48,]  153   90 #>  [49,]  153   91 #>  [50,]  152   92 #>  [51,]  152   93 #>  [52,]  152   94 #>  [53,]  151   95 #>  [54,]  151   96 #>  [55,]  151   97 #>  [56,]  151   98 #>  [57,]  150   99 #>  [58,]  151  100 #>  [59,]  151  101 #>  [60,]  151  102 #>  [61,]  151  103 #>  [62,]  151  104 #>  [63,]  150  105 #>  [64,]  151  106 #>  [65,]  151  107 #>  [66,]  151  108 #>  [67,]  151  109 #>  [68,]  152  110 #>  [69,]  151  111 #>  [70,]  150  111 #>  [71,]  149  112 #>  [72,]  148  113 #>  [73,]  147  113 #>  [74,]  146  113 #>  [75,]  145  114 #>  [76,]  144  115 #>  [77,]  143  115 #>  [78,]  142  115 #>  [79,]  141  116 #>  [80,]  140  116 #>  [81,]  139  117 #>  [82,]  138  117 #>  [83,]  137  117 #>  [84,]  136  118 #>  [85,]  135  118 #>  [86,]  134  119 #>  [87,]  133  119 #>  [88,]  132  119 #>  [89,]  131  119 #>  [90,]  130  120 #>  [91,]  129  120 #>  [92,]  128  120 #>  [93,]  127  120 #>  [94,]  126  120 #>  [95,]  125  120 #>  [96,]  124  120 #>  [97,]  123  120 #>  [98,]  122  120 #>  [99,]  121  120 #> [100,]  120  120 #> [101,]  119  119 #> [102,]  118  119 #> [103,]  117  119 #> [104,]  116  119 #> [105,]  115  118 #> [106,]  114  118 #> [107,]  113  118 #> [108,]  112  118 #> [109,]  111  117 #> [110,]  110  117 #> [111,]  109  117 #> [112,]  108  116 #> [113,]  107  116 #> [114,]  106  115 #> [115,]  105  114 #> [116,]  104  114 #> [117,]  103  113 #> [118,]  102  113 #> [119,]  101  112 #> [120,]  100  111 #> [121,]   99  110 #> [122,]   98  109 #> [123,]   97  109 #> [124,]   96  108 #> [125,]   95  107 #> [126,]   94  106 #> [127,]   93  105 #> [128,]   92  104 #> [129,]   91  103 #> [130,]   90  102 #> [131,]   89  101 #> [132,]   88  100 #> [133,]   87  100 #> [134,]   86   99 #> [135,]   85   98 #> [136,]   84   97 #> [137,]   83   96 #> [138,]   82   95 #> [139,]   81   94 #> [140,]   80   93 #> [141,]   79   92 #> [142,]   78   91 #> [143,]   77   90 #> [144,]   76   89 #> [145,]   75   88 #> [146,]   74   88 #> [147,]   73   87 #> [148,]   72   86 #> [149,]   71   85 #> [150,]   70   84 #> [151,]   69   83 #> [152,]   68   83 #> [153,]   67   82 #> [154,]   66   81 #> [155,]   65   81 #> [156,]   64   80 #> [157,]   63   79 #> [158,]   62   79 #> [159,]   61   78 #> [160,]   60   78 #> [161,]   59   78 #> [162,]   58   77 #> [163,]   57   78 #> [164,]   56   78 #> [165,]   55   79 #> [166,]   54   80 #> [167,]   53   81 #> [168,]   53   82 #> [169,]   52   83 #> [170,]   52   84 #> [171,]   51   85 #> [172,]   51   86 #> [173,]   51   87 #> [174,]   51   88 #> [175,]   51   89 #> [176,]   50   90 #> [177,]   50   91 #> [178,]   50   92 #> [179,]   50   93 #> [180,]   50   94 #> [181,]   49   95 #> [182,]   49   96 #> [183,]   49   97 #> [184,]   50   98 #> [185,]   50   99 #> [186,]   50  100 #> [187,]   50  101 #> [188,]   50  102 #> [189,]   50  103 #> [190,]   50  104 #> [191,]   50  105 #> [192,]   50  106 #> [193,]   50  107 #> [194,]   50  108 #> [195,]   49  109 #> [196,]   50  110 #> [197,]   50  111 #> [198,]   50  112 #> [199,]   50  113 #> [200,]   50  114 #> [201,]   50  115 #> [202,]   50  116 #> [203,]   50  117 #> [204,]   51  118 #> [205,]   50  119 #> [206,]   51  120 #> [207,]   51  121 #> [208,]   51  122 #> [209,]   51  123 #> [210,]   51  124 #> [211,]   52  125 #> [212,]   52  126 #> [213,]   52  127 #> [214,]   53  128 #> [215,]   53  129 #> [216,]   54  130 #> [217,]   55  131 #> [218,]   55  132 #> [219,]   55  133 #> [220,]   54  134 #> [221,]   54  135 #> [222,]   53  136 #> [223,]   52  137 #> [224,]   52  138 #> [225,]   51  139 #> [226,]   50  140 #> [227,]   50  141 #> [228,]   49  142 #> [229,]   49  143 #> [230,]   48  144 #> [231,]   47  145 #> [232,]   47  146 #> [233,]   47  147 #> [234,]   46  148 #> [235,]   46  149 #> [236,]   45  150 #> [237,]   45  151 #> [238,]   45  152 #> [239,]   44  153 #> [240,]   44  154 #> [241,]   43  155 #> [242,]   43  156 #> [243,]   43  157 #> [244,]   42  158 #> [245,]   42  159 #> [246,]   42  160 #> [247,]   42  161 #> [248,]   41  162 #> [249,]   41  163 #> [250,]   41  164 #> [251,]   40  165 #> [252,]   40  166 #> [253,]   40  167 #> [254,]   40  168 #> [255,]   40  169 #> [256,]   39  170 #> [257,]   39  171 #> [258,]   39  172 #> [259,]   39  173 #> [260,]   39  174 #> [261,]   38  175 #> [262,]   39  176 #> [263,]   39  177 #> [264,]   39  178 #> [265,]   39  179 #> [266,]   39  180 #> [267,]   38  181 #> [268,]   39  182 #> [269,]   39  183 #> [270,]   39  184 #> [271,]   39  185 #> [272,]   40  186 #> [273,]   41  187 #> [274,]   42  188 #> [275,]   43  189 #> [276,]   44  190 #> [277,]   45  190 #> [278,]   46  190 #> [279,]   47  190 #> [280,]   48  190 #> [281,]   49  190 #> [282,]   50  190 #> [283,]   51  190 #> [284,]   52  190 #> [285,]   53  190 #> [286,]   54  189 #> [287,]   55  189 #> [288,]   56  189 #> [289,]   57  188 #> [290,]   58  188 #> [291,]   59  188 #> [292,]   60  187 #> [293,]   61  187 #> [294,]   62  186 #> [295,]   63  186 #> [296,]   64  185 #> [297,]   65  185 #> [298,]   66  184 #> [299,]   67  184 #> [300,]   68  183 #> [301,]   69  183 #> [302,]   70  182 #> [303,]   71  182 #> [304,]   72  181 #> [305,]   73  180 #> [306,]   74  180 #> [307,]   75  179 #> [308,]   76  179 #> [309,]   77  178 #> [310,]   78  177 #> [311,]   79  177 #> [312,]   80  176 #> [313,]   81  176 #> [314,]   82  175 #> [315,]   83  174 #> [316,]   84  174 #> [317,]   85  173 #> [318,]   86  173 #> [319,]   87  172 #> [320,]   88  171 #> [321,]   89  171 #> [322,]   90  170 #> [323,]   91  170 #> [324,]   92  169 #> [325,]   93  168 #> [326,]   94  168 #> [327,]   95  167 #> [328,]   96  166 #> [329,]   97  166 #> [330,]   98  165 #> [331,]   99  165 #> [332,]  100  164 #> [333,]  101  164 #> [334,]  102  163 #> [335,]  103  162 #> [336,]  104  162 #> [337,]  105  162 #> [338,]  106  161 #> [339,]  107  161 #> [340,]  108  160 #> [341,]  109  160 #> [342,]  110  160 #> [343,]  111  159 #> [344,]  112  159 #> [345,]  113  159 #> [346,]  114  158 #> [347,]  115  158 #> [348,]  116  158 #> [349,]  117  158 #> [350,]  118  157 #> [351,]  119  157 #> [352,]  120  157 #> [353,]  121  157 #> [354,]  122  157 #> [355,]  123  156 #> [356,]  124  157 #> [357,]  125  156 #> [358,]  126  157 #> [359,]  127  157 #> [360,]  128  157 #> [361,]  129  157 #> [362,]  130  158 #> [363,]  131  158 #> [364,]  132  158 #> [365,]  133  159 #> [366,]  134  159 #> [367,]  135  160 #> [368,]  136  160 #> [369,]  137  161 #> [370,]  138  161 #> [371,]  139  162 #> [372,]  140  162 #> [373,]  141  163 #> [374,]  142  164 #> [375,]  143  164 #> [376,]  144  165 #> [377,]  145  165 #> [378,]  146  166 #> [379,]  147  166 #> [380,]  148  167 #> [381,]  149  167 #> [382,]  150  168 #> [383,]  151  168 #> [384,]  152  169 #> [385,]  153  169 #> [386,]  154  170 #> [387,]  155  170 #> [388,]  156  171 #> [389,]  157  171 #> [390,]  158  172 #> [391,]  159  172 #> [392,]  160  173 #> [393,]  161  173 #> [394,]  162  174 #> [395,]  163  174 #> [396,]  164  174 #> [397,]  165  175 #> [398,]  166  175 #> [399,]  167  175 #> [400,]  168  176 #> [401,]  169  176 #> [402,]  168  177 #> [403,]  168  178 #> [404,]  167  179 #> [405,]  166  180 #> [406,]  165  181 #> [407,]  165  182 #> [408,]  164  183 #> [409,]  163  184 #> [410,]  162  185 #> [411,]  161  186 #> [412,]  160  187 #> [413,]  159  188 #> [414,]  159  189 #> [415,]  158  190 #> [416,]  157  191 #> [417,]  156  192 #> [418,]  155  193 #> [419,]  154  194 #> [420,]  153  195 #> [421,]  152  196 #> [422,]  151  197 #> [423,]  150  198 #> [424,]  149  199 #> [425,]  148  200 #> [426,]  147  201 #> [427,]  146  202 #> [428,]  145  203 #> [429,]  144  204 #> [430,]  143  205 #> [431,]  142  206 #> [432,]  142  207 #> [433,]  141  208 #> [434,]  140  209 #> [435,]  139  210 #> [436,]  138  211 #> [437,]  138  212 #> [438,]  137  213 #> [439,]  137  214 #> [440,]  137  215 #> [441,]  137  216 #> [442,]  138  217 #> [443,]  139  218 #> [444,]  140  218 #> [445,]  141  219 #> [446,]  142  219 #> [447,]  143  219 #> [448,]  144  219 #> [449,]  145  219 #> [450,]  146  220 #> [451,]  147  220 #> [452,]  148  220 #> [453,]  149  220 #> [454,]  150  220 #> [455,]  151  220 #> [456,]  152  220 #> [457,]  153  221 #> [458,]  154  220 #> [459,]  155  221 #> [460,]  156  221 #> [461,]  157  221 #> [462,]  158  221 #> [463,]  159  221 #> [464,]  160  221 #> [465,]  161  221 #> [466,]  162  221 #> [467,]  163  222 #> [468,]  164  221 #> [469,]  165  221 #> [470,]  166  221 #> [471,]  167  221 #> [472,]  168  221 #> [473,]  169  221 #> [474,]  170  221 #> [475,]  171  221 #> [476,]  172  221 #> [477,]  173  222 #> [478,]  174  222 #> [479,]  175  222 #> [480,]  176  222 #> [481,]  177  222 #> [482,]  178  222 #> [483,]  179  222 #> [484,]  180  222 #> [485,]  181  222 #> [486,]  182  222 #> [487,]  183  222 #> [488,]  184  222 #> [489,]  185  222 #> [490,]  186  222 #> [491,]  187  222 #> [492,]  188  222 #> [493,]  189  222 #> [494,]  190  222 #> [495,]  191  222 #> [496,]  192  222 #> [497,]  193  222 #> [498,]  194  222 #> [499,]  195  222 #> [500,]  196  222 #> [501,]  197  222 #> [502,]  198  222 #> [503,]  199  222 #> [504,]  200  222 #> [505,]  201  222 #> [506,]  202  222 #> [507,]  203  222 #> [508,]  204  222 #> [509,]  205  222 #> [510,]  206  222 #> [511,]  207  222 #> [512,]  208  221 #> [513,]  209  221 #> [514,]  210  221 #> [515,]  211  221 #> [516,]  212  221 #> [517,]  213  221 #> [518,]  214  221 #> [519,]  215  221 #> [520,]  216  221 #> [521,]  217  221 #> [522,]  218  221 #> [523,]  219  221 #> [524,]  220  221 #> [525,]  221  221 #> [526,]  222  221 #> [527,]  223  221 #> [528,]  224  221 #> [529,]  225  221 #> [530,]  226  221 #> [531,]  227  221 #> [532,]  228  221 #> [533,]  229  221 #> [534,]  230  220 #> [535,]  231  220 #> [536,]  232  220 #> [537,]  233  220 #> [538,]  234  220 #> [539,]  235  220 #> [540,]  236  220 #> [541,]  237  220 #> [542,]  238  220 #> [543,]  239  220 #> [544,]  240  220 #> [545,]  241  220 #> [546,]  242  219 #> [547,]  243  219 #> [548,]  244  219 #> [549,]  245  219 #> [550,]  246  219 #> [551,]  247  219 #> [552,]  248  219 #> [553,]  249  218 #> [554,]  250  218 #> [555,]  251  218 #> [556,]  252  218 #> [557,]  253  218 #> [558,]  254  218 #> [559,]  255  218 #> [560,]  256  217 #> [561,]  257  217 #> [562,]  258  217 #> [563,]  259  217 #> [564,]  260  216 #> [565,]  261  216 #> [566,]  262  216 #> [567,]  263  216 #> [568,]  264  215 #> [569,]  265  215 #> [570,]  266  215 #> [571,]  267  215 #> [572,]  268  214 #> [573,]  269  214 #> [574,]  270  214 #> [575,]  271  213 #> [576,]  272  213 #> [577,]  273  213 #> [578,]  274  212 #> [579,]  275  212 #> [580,]  276  212 #> [581,]  277  211 #> [582,]  278  211 #> [583,]  279  210 #> [584,]  280  210 #> [585,]  281  209 #> [586,]  282  209 #> [587,]  283  208 #> [588,]  284  208 #> [589,]  285  207 #> [590,]  286  207 #> [591,]  287  206 #> [592,]  288  206 #> [593,]  289  205 #> [594,]  290  205 #> [595,]  291  204 #> [596,]  292  203 #> [597,]  293  202 #> [598,]  294  202 #> [599,]  295  201 #> [600,]  296  200 #> [601,]  297  199 #> [602,]  298  198 #> [603,]  299  197 #> [604,]  300  196 #> [605,]  301  195 #> [606,]  302  194 #> [607,]  303  193 #> [608,]  303  192 #> [609,]  304  191 #> [610,]  305  190 #> [611,]  305  189 #> [612,]  306  188 #> [613,]  307  187 #> [614,]  308  186 #> [615,]  308  185 #> [616,]  309  184 #> [617,]  310  184 #> [618,]  311  184 #> [619,]  312  183 #> [620,]  313  183 #> [621,]  314  183 #> [622,]  315  182 #> [623,]  316  182 #> [624,]  317  182 #> [625,]  318  181 #> [626,]  319  181 #> [627,]  320  180 #> [628,]  321  180 #> [629,]  322  180 #> [630,]  323  179 #> [631,]  324  179 #> [632,]  325  178 #> [633,]  326  178 #> [634,]  327  178 #> [635,]  328  177 #> [636,]  329  177 #> [637,]  330  176 #> [638,]  331  176 #> [639,]  332  175 #> [640,]  333  174 #> [641,]  334  174 #> [642,]  335  173 #> [643,]  336  173 #> [644,]  337  172 #> [645,]  338  171 #> [646,]  339  171 #> [647,]  340  170 #> [648,]  341  170 #> [649,]  342  169 #> [650,]  343  168 #> [651,]  344  168 #> [652,]  345  167 #> [653,]  346  166 #> [654,]  347  165 #> [655,]  348  165 #> [656,]  349  164 #> [657,]  350  163 #> [658,]  351  162 #> [659,]  352  162 #> [660,]  353  161 #> [661,]  354  160 #> [662,]  355  159 #> [663,]  356  158 #> [664,]  357  157 #> [665,]  358  156 #> [666,]  359  155 #> [667,]  360  155 #> [668,]  361  154 #> [669,]  362  153 #> [670,]  362  152 #> [671,]  363  151 #> [672,]  364  150 #> [673,]  365  149 #> [674,]  366  148 #> [675,]  367  147 #> [676,]  368  146 #> [677,]  369  145 #> [678,]  370  144 #> [679,]  370  143 #> [680,]  371  142 #> [681,]  372  141 #> [682,]  373  140 #> [683,]  373  139 #> [684,]  374  138 #> [685,]  375  137 #> [686,]  375  136 #> [687,]  376  135 #> [688,]  377  134 #> [689,]  377  133 #> [690,]  378  132 #> [691,]  379  131 #> [692,]  379  130 #> [693,]  379  129 #> [694,]  380  128 #> [695,]  380  127 #> [696,]  381  126 #> [697,]  381  125 #> [698,]  382  124 #> [699,]  382  123 #> [700,]  382  122 #> [701,]  383  121 #> [702,]  383  120 #> [703,]  383  119 #> [704,]  384  118 #> [705,]  383  117 #> [706,]  383  116 #> [707,]  382  115 #> [708,]  381  114 #> [709,]  380  113 #> [710,]  379  112 #> [711,]  378  112 #> [712,]  377  111 #> [713,]  376  111 #> [714,]  375  110 #> [715,]  374  109 #> [716,]  373  109 #> [717,]  372  108 #> [718,]  371  107 #> [719,]  370  107 #> [720,]  369  106 #> [721,]  368  106 #> [722,]  367  105 #> [723,]  366  105 #> [724,]  365  105 #> [725,]  364  104 #> [726,]  363  103 #> [727,]  362  103 #> [728,]  361  103 #> [729,]  360  102 #> [730,]  359  102 #> [731,]  358  101 #> [732,]  357  101 #> [733,]  356  101 #> [734,]  355  100 #> [735,]  354  100 #> [736,]  353   99 #> [737,]  352   99 #> [738,]  351   99 #> [739,]  350   98 #> [740,]  349   98 #> [741,]  348   98 #> [742,]  347   97 #> [743,]  346   97 #> [744,]  345   97 #> [745,]  344   96 #> [746,]  343   96 #> [747,]  342   96 #> [748,]  341   95 #> [749,]  340   95 #> [750,]  339   95 #> [751,]  338   94 #> [752,]  337   94 #> [753,]  336   94 #> [754,]  335   94 #> [755,]  334   93 #> [756,]  333   93 #> [757,]  332   93 #> [758,]  331   93 #> [759,]  330   92 #> [760,]  329   92 #> [761,]  328   92 #> [762,]  327   92 #> [763,]  326   91 #> [764,]  325   91 #> [765,]  324   91 #> [766,]  323   91 #> [767,]  322   91 #> [768,]  321   90 #> [769,]  320   90 #> [770,]  319   90 #> [771,]  318   90 #> [772,]  317   90 #> [773,]  316   90 #> [774,]  315   89 #> [775,]  314   89 #> [776,]  313   89 #> [777,]  312   89 #> [778,]  311   89 #> [779,]  310   89 #> [780,]  309   88 #> [781,]  308   88 #> [782,]  307   88 #> [783,]  306   88 #> [784,]  305   88 #> [785,]  304   88 #> [786,]  303   88 #> [787,]  302   88 #> [788,]  301   88 #> [789,]  300   87 #> [790,]  299   87 #> [791,]  298   87 #> [792,]  297   87 #> [793,]  296   87 #> [794,]  295   87 #> [795,]  294   87 #> [796,]  293   87 #> [797,]  292   87 #> [798,]  291   87 #> [799,]  290   87 #> [800,]  289   87 #> [801,]  288   87 #> [802,]  287   87 #> [803,]  286   87 #> [804,]  285   87 #> [805,]  284   86 #> [806,]  283   86 #> [807,]  282   86 #> [808,]  282   85 #> [809,]  281   84 #> [810,]  281   83 #> [811,]  280   82 #> [812,]  280   81 #> [813,]  279   80 #> [814,]  278   79 #> [815,]  278   78 #> [816,]  278   77 #> [817,]  277   76 #> [818,]  276   75 #> [819,]  276   74 #> [820,]  276   73 #> [821,]  275   72 #> [822,]  274   71 #> [823,]  274   70 #> [824,]  273   69 #> [825,]  273   68 #> [826,]  272   67 #> [827,]  272   66 #> [828,]  271   65 #> [829,]  270   64 #> [830,]  270   63 #> [831,]  269   62 #> [832,]  269   61 #> [833,]  268   60 #> [834,]  267   59 #> [835,]  266   58 #> [836,]  266   57 #> [837,]  265   56 #> [838,]  264   55 #> [839,]  264   54 #> [840,]  263   53 #> [841,]  262   52 #> [842,]  261   51 #> [843,]  261   50 #> [844,]  260   49 #> [845,]  259   48 #> [846,]  258   47 #> [847,]  257   46 #> [848,]  256   45 #> [849,]  255   44 #> [850,]  254   43 #> [851,]  253   42 #> [852,]  252   42 #> [853,]  251   41 #> [854,]  250   41 #> [855,]  249   40 #> [856,]  248   40 #> [857,]  247   39 #> [858,]  246   39 #> [859,]  245   39 #> [860,]  244   39 #> [861,]  243   39 #> [862,]  242   39 #> [863,]  241   39 #> [864,]  240   39 #> [865,]  239   39 #> [866,]  238   40 #> [867,]  237   40 #> [868,]  236   41 #> [869,]  235   41 #> [870,]  234   42 #> [871,]  233   43 #> [872,]  233   44 #> [873,]  232   45 #> [874,]  231   46 #> [875,]  230   47 #> [876,]  230   48 #> [877,]  230   49 #> [878,]  229   50 #> [879,]  228   51 #> [880,]  228   52 #> [881,]  228   53 #> [882,]  227   54 #> [883,]  227   55 #> [884,]  227   56 #> [885,]  226   57 #> [886,]  226   58 #> [887,]  226   59 #> [888,]  226   60 #> [889,]  225   61 #> [890,]  225   62 #> [891,]  225   63 #> [892,]  224   64 #> [893,]  225   65 #> [894,]  224   66 #> [895,]  224   67 #> [896,]  224   68 #> [897,]  224   69 #> [898,]  224   70 #> [899,]  224   71 #> [900,]  224   72 #> [901,]  224   73 #> [902,]  224   74 #> [903,]  225   75 #> [904,]  224   76 #> [905,]  225   77 #> [906,]  225   78 #> [907,]  225   79 #> [908,]  226   80 #> [909,]  226   81 #> [910,]  226   82 #> [911,]  227   83 #> [912,]  227   84 #> [913,]  227   85 #> [914,]  228   86 #> [915,]  228   87 #> [916,]  227   87 #> [917,]  226   87 #> [918,]  225   88 #> [919,]  224   88 #> [920,]  223   87 #> [921,]  222   88 #> [922,]  221   88 #> [923,]  220   88 #> [924,]  219   88 #> [925,]  218   88 #> [926,]  217   89 #> [927,]  216   89 #> [928,]  215   89 #> [929,]  214   89 #> [930,]  213   89 #> [931,]  212   88 #> [932,]  211   88 #> [933,]  210   88 #> [934,]  209   88 #> [935,]  208   88 #> [936,]  207   88 #> [937,]  206   88 #> [938,]  205   87 #> [939,]  204   87 #> [940,]  203   87 #> [941,]  202   87 #> [942,]  201   87 #> [943,]  200   87 #>  x$fac #> # A tibble: 5 × 2 #>   name  value #>   <chr> <int> #> 1 a         5 #> 2 b         4 #> 3 c         3 #> 4 d         2 #> 5 e         1"},{"path":"http://momx.github.io/Momocs/reference/KMEANS.html","id":null,"dir":"Reference","previous_headings":"","what":"KMEANS on PCA objects — KMEANS","title":"KMEANS on PCA objects — KMEANS","text":"basic implementation k-means. Beware morphospaces calculated far 1st 2nd component.","code":""},{"path":"http://momx.github.io/Momocs/reference/KMEANS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KMEANS on PCA objects — KMEANS","text":"","code":"KMEANS(x, ...)  # S3 method for PCA KMEANS(x, centers, nax = 1:2, pch = 20, cex = 0.5, ...)"},{"path":"http://momx.github.io/Momocs/reference/KMEANS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMEANS on PCA objects — KMEANS","text":"x PCA object ... additional arguments passed kmeans centers numeric number centers nax numeric range PC components use (1:2 default) pch draw points cex draw points","code":""},{"path":"http://momx.github.io/Momocs/reference/KMEANS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KMEANS on PCA objects — KMEANS","text":"thing kmeans","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/KMEANS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KMEANS on PCA objects — KMEANS","text":"","code":"data(bot) bp <- PCA(efourier(bot, 10)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details KMEANS(bp, 2)  #> K-means clustering with 2 clusters of sizes 26, 14 #>  #> Cluster means: #>           PC1          PC2 #> 1 -0.04036460  0.001738792 #> 2  0.07496282 -0.003229186 #>  #> Clustering vector: #>         brahma          caney         chimay         corona    deusventrue  #>              1              1              2              1              1  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>              2              1              2              1              1  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>              1              1              2              1              1  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>              1              2              2              1              1  #>          amrut    ballantines      bushmills         chivas        dalmore  #>              1              2              1              2              2  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>              1              1              1              2              1  #>             jb  johnniewalker       magallan     makersmark           oban  #>              1              1              1              2              1  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>              2              2              1              1              2  #>  #> Within cluster sum of squares by cluster: #> [1] 0.02127484 0.03758606 #>  (between_SS / total_SS =  67.3 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\""},{"path":"http://momx.github.io/Momocs/reference/KMEDOIDS.html","id":null,"dir":"Reference","previous_headings":"","what":"KMEDOIDS — KMEDOIDS","title":"KMEDOIDS — KMEDOIDS","text":"basic implementation kmedoids top cluster::pam Beware morphospaces calculated far 1st 2nd component.","code":""},{"path":"http://momx.github.io/Momocs/reference/KMEDOIDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KMEDOIDS — KMEDOIDS","text":"","code":"KMEDOIDS(x, k, metric = \"euclidean\", ...)  # S3 method for default KMEDOIDS(x, k, metric = \"euclidean\", ...)  # S3 method for Coe KMEDOIDS(x, k, metric = \"euclidean\", ...)  # S3 method for PCA KMEDOIDS(x, k, metric = \"euclidean\", retain, ...)"},{"path":"http://momx.github.io/Momocs/reference/KMEDOIDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMEDOIDS — KMEDOIDS","text":"x Coe PCA object k numeric number centers metric one euclidean (default) manhattan, feed cluster::pam ... additional arguments feed cluster::pam retain passing PCA many PCs retain, proportion total variance, see LDA","code":""},{"path":"http://momx.github.io/Momocs/reference/KMEDOIDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KMEDOIDS — KMEDOIDS","text":"see cluster::pam. components returned (fac, etc.)","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/KMEDOIDS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KMEDOIDS — KMEDOIDS","text":"","code":"data(bot) bp <- PCA(efourier(bot, 10)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details KMEANS(bp, 2)  #> K-means clustering with 2 clusters of sizes 14, 26 #>  #> Cluster means: #>           PC1          PC2 #> 1  0.07496282 -0.003229186 #> 2 -0.04036460  0.001738792 #>  #> Clustering vector: #>         brahma          caney         chimay         corona    deusventrue  #>              2              2              1              2              2  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>              1              2              1              2              2  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>              2              2              1              2              2  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>              2              1              1              2              2  #>          amrut    ballantines      bushmills         chivas        dalmore  #>              2              1              2              1              1  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>              2              2              2              1              2  #>             jb  johnniewalker       magallan     makersmark           oban  #>              2              2              2              1              2  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>              1              1              2              2              1  #>  #> Within cluster sum of squares by cluster: #> [1] 0.03758606 0.02127484 #>  (between_SS / total_SS =  67.3 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"        set.seed(123) # for reproducibility on a dummy matrix matrix(rnorm(100, 10, 10)) %>% KMEDOIDS(5) #> Medoids: #>      ID           #> [1,] 10  5.543380 #> [2,] 30 22.538149 #> [3,]  4 10.705084 #> [4,]  7 14.609162 #> [5,] 78 -2.207177 #> Clustering vector: #>   [1] 1 1 2 3 3 2 4 5 1 1 2 4 4 3 1 2 4 5 4 1 5 1 5 1 1 5 4 3 5 2 4 1 2 2 4 4 4 #>  [38] 3 1 1 1 1 5 2 2 5 1 1 4 3 3 3 3 2 1 2 5 4 3 3 4 1 1 5 5 4 4 3 2 2 1 5 2 1 #>  [75] 1 2 1 5 3 3 3 4 1 4 1 4 2 4 1 2 2 4 3 1 2 1 2 2 1 5 #> Objective function: #>    build     swap  #> 2.132534 1.937061  #>  #> Available components: #>  [1] \"medoids\"       \"id.med\"        \"clustering\"    \"objective\"     #>  [5] \"isolation\"     \"clusinfo\"      \"silinfo\"       \"diss\"          #>  [9] \"call\"          \"data\"          \"k\"             \"ids_constant\"  #> [13] \"ids_collinear\"  # On a Coe bot_f <- bot %>% efourier() #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power)  bot_k <- bot_f %>% KMEDOIDS(2) #> removed these collinear columns:A1, B1, C1 # confusion matrix table(bot_k$fac$type, bot_k$clustering) #>          #>           1  2 #>   beer   12  8 #>   whisky 14  6  # on a PCA bot_k2 <- bot_f %>% PCA() %>% KMEDOIDS(12, retain=0.9)  # confusion matrix with(bot_k, table(fac$type, clustering)) #>         clustering #>           1  2 #>   beer   12  8 #>   whisky 14  6 # silhouette plot bot_k %>% plot_silhouette()   # average width as a function of k k_range <- 2:12 widths <- sapply(k_range, function(k) KMEDOIDS(bot_f, k=k)$silinfo$avg.width) #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 #> removed these collinear columns:A1, B1, C1 plot(k_range, widths, type=\"b\")"},{"path":"http://momx.github.io/Momocs/reference/LDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Discriminant Analysis on Coe objects — LDA","title":"Linear Discriminant Analysis on Coe objects — LDA","text":"Calculates LDA Coe top MASS::lda.","code":""},{"path":"http://momx.github.io/Momocs/reference/LDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Discriminant Analysis on Coe objects — LDA","text":"","code":"LDA(x, fac, retain, ...)  # S3 method for default LDA(x, fac, retain, ...)  # S3 method for PCA LDA(x, fac, retain = 0.99, ...)"},{"path":"http://momx.github.io/Momocs/reference/LDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Discriminant Analysis on Coe objects — LDA","text":"x  Coe PCA object fac grouping factor (names one $fac column column id) retain proportion total variance retain (retain<1) using scree, number PC axis (retain>1). ... additional arguments feed lda","code":""},{"path":"http://momx.github.io/Momocs/reference/LDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Discriminant Analysis on Coe objects — LDA","text":"'LDA' object apply plot.LDA, list components: x Coe object (matrix) fac grouping factor used removed ids columns original matrix removed since constant () mod raw lda mod lda mod.pred predicted model using x mod CV.fac cross-validated classification CV.tab cross-validation tabke CV.correct proportion correctly classified individuals CV.ce class error LDs unstandardized LD scores see Claude (2008) mshape mean values coefficients original matrix method inherited Coe object ()","code":""},{"path":"http://momx.github.io/Momocs/reference/LDA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Discriminant Analysis on Coe objects — LDA","text":"LDA.PCA, retain can passed vector (eg: 1:5, retain=1, retain=2, ..., retain=5) tried, \"best\" (retain=1:number_of_pc_axes used). Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/LDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Discriminant Analysis on Coe objects — LDA","text":"","code":"bot.f <- efourier(bot, 24) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.p <- PCA(bot.f) LDA(bot.p, 'type', retain=0.99) # retains 0.99 of the total variance #> 8 PC retained #>  * Cross-validation table ($CV.tab): #>         classified #> actual   beer whisky #>   beer     17      3 #>   whisky    1     19 #>  #>  * Class accuracy ($CV.ce): #>   beer whisky  #>   0.85   0.95  #>  #>  * Leave-one-out cross-validation ($CV.correct): (90% - 36/40):  LDA(bot.p, 'type', retain=5) # retain 5 axis #> 5 PC retained #>  * Cross-validation table ($CV.tab): #>         classified #> actual   beer whisky #>   beer     16      4 #>   whisky    4     16 #>  #>  * Class accuracy ($CV.ce): #>   beer whisky  #>    0.8    0.8  #>  #>  * Leave-one-out cross-validation ($CV.correct): (80% - 32/40):  bot.l <- LDA(bot.p, 'type', retain=0.99) #> 8 PC retained plot_LDA(bot.l) #> * Only two levels, so a single LD and preparing for an histogram  #> $xy #>                        LD1 #> brahma          2.06882655 #> caney           1.95733171 #> chimay          3.18567319 #> corona          1.91972111 #> deusventrue     1.51983847 #> duvel           3.25459981 #> franziskaner    1.20540643 #> grimbergen      1.78612198 #> guiness         0.31717542 #> hoegardeen      2.23601856 #> jupiler         2.41738081 #> kingfisher      1.17563178 #> latrappe        2.48017277 #> lindemanskriek  0.84132717 #> nicechouffe    -0.20973451 #> pecheresse      2.73987210 #> sierranevada    2.12878315 #> tanglefoot      0.50802841 #> tauro           2.45585085 #> westmalle       1.86373375 #> amrut          -1.63004033 #> ballantines    -3.31173062 #> bushmills      -1.09107572 #> chivas         -1.97923449 #> dalmore        -0.60822705 #> famousgrouse   -1.43517709 #> glendronach    -1.56712869 #> glenmorangie   -1.46854222 #> highlandpark   -2.62231929 #> jackdaniels    -0.70483285 #> jb             -2.24638367 #> johnniewalker  -0.97832954 #> magallan       -2.17603623 #> makersmark     -1.23316404 #> oban           -2.34336958 #> oldpotrero     -0.37639098 #> redbreast      -4.17639973 #> tamdhu         -0.09818091 #> wildturkey     -3.48193578 #> yoichi         -2.32326072 #>  #> $f #>  type1  type2  type3  type4  type5  type6  type7  type8  type9 type10 type11  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky  #> type12 type13 type14 type15 type16 type17 type18 type19 type20 type21 type22  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky   beer   beer  #> type23 type24 type25 type26 type27 type28 type29 type30 type31 type32 type33  #>   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer  #> type34 type35 type36 type37 type38 type39 type40  #>   beer   beer   beer   beer   beer   beer   beer  #> Levels: beer whisky #>  #> $colors_groups #> [1] \"#66C2A5FF\" \"#FC8D62FF\" #>  #> $colors_rowsobject #> [1] \"PCA\" #>  #> $axes #> [1] 1 #>  #> $palette #> function (n, transp = 0)  #> { #>     .pal_brewer(n, \"Set2\") %>% pal_alpha(transp = transp) #> } #> <bytecode: 0x55f56426dfb0> #> <environment: namespace:Momocs> #>  #> $method #> [1] \"LDAPCA\" #>  #> $mshape #> NULL #>  #> $cuts #> NULL #>  #> $eig #> NULL #>  #> $sdev #> [1] 11.33732 #>  #> $rotation #>               LD1 #> PC1 -0.0021966326 #> PC2 -0.0004659024 #> PC3  0.0028778651 #> PC4 -0.0020601963 #> PC5  0.0016842402 #> PC6 -0.0008112386 #> PC7 -0.0006776597 #> PC8 -0.0004229307 #>  #> $LDs #>               LD1 #> PC1 -0.0021966326 #> PC2 -0.0004659024 #> PC3  0.0028778651 #> PC4 -0.0020601963 #> PC5  0.0016842402 #> PC6 -0.0008112386 #> PC7 -0.0006776597 #> PC8 -0.0004229307 #>  #> $baseline1 #> NULL #>  #> $baseline2 #> NULL #>  #> $links #> NULL #>  bot.f <- mutate(bot.f, plop=factor(rep(letters[1:4], each=10))) bot.l <- LDA(PCA(bot.f), 'plop') #> 8 PC retained plot_LDA(bot.l) # will replace the former soon"},{"path":"http://momx.github.io/Momocs/reference/Ldk.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds an Ldk object — Ldk","title":"Builds an Ldk object — Ldk","text":"Momocs, Ldk classes objects lists configurations landmarks, optionnal components, generic methods plotting methods (e.g. stack) specific methods (e.g. fgProcrustes). Ldk objects primarily Coo objects. sense, morphometrics methods Ldk objects preserves (x, y) coordinates LdkCoe also Ldk objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/Ldk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds an Ldk object — Ldk","text":"","code":"Ldk(coo, fac = dplyr::tibble(), links = NULL, slidings = NULL)"},{"path":"http://momx.github.io/Momocs/reference/Ldk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds an Ldk object — Ldk","text":"coo list matrices (x; y) coordinates, array, Ldk object data.frame (friends) fac (optionnal) data.frame factors /numerics specifying grouping structure links (optionnal) 2-columns matrix 'links' landmarks, mainly plotting slidings (optionnal) 3-columns matrix defining () sliding landmarks","code":""},{"path":"http://momx.github.io/Momocs/reference/Ldk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds an Ldk object — Ldk","text":"Ldk object","code":""},{"path":"http://momx.github.io/Momocs/reference/Ldk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Builds an Ldk object — Ldk","text":"shapes x must number landmarks. trying make Ldk object Opn object, try coo_sample beforehand homogeneize number coordinates among shapes. Please note Ldk methods experimental. implementation $slidings inspired geomorph","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/Ldk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds an Ldk object — Ldk","text":"","code":"#Methods on Ldk methods(class=Ldk) #>  [1] MSHAPES         combine         coo_bookstein   coo_slice       #>  [5] d               def_links       def_slidings    fgProcrustes    #>  [9] fgsProcrustes   get_ldk         get_slidings    mosaic          #> [13] panel           pile            rearrange_ldk   slidings_scheme #> [17] stack           which_out       #> see '?methods' for accessing help and source code  str(mosquito) #> coo : List of 126 #>  $ shp1  : num [1:100, 1:2] -0.107 -0.134 -0.164 -0.199 -0.234 ... #>  $ shp2  : num [1:100, 1:2] -0.11 -0.137 -0.167 -0.2 -0.236 ... #>  $ shp3  : num [1:100, 1:2] -0.0877 -0.1085 -0.1325 -0.1601 -0.1895 ... #>  $ shp4  : num [1:100, 1:2] -0.0997 -0.1239 -0.1515 -0.1835 -0.218 ... #>  $ shp5  : num [1:100, 1:2] -0.0971 -0.1205 -0.145 -0.1729 -0.2037 ... #>  $ shp6  : num [1:100, 1:2] -0.0927 -0.1161 -0.1411 -0.1691 -0.2001 ... #>  $ shp7  : num [1:100, 1:2] -0.109 -0.136 -0.166 -0.2 -0.24 ... #>  $ shp8  : num [1:100, 1:2] -0.0991 -0.1245 -0.1532 -0.1837 -0.2199 ... #>  $ shp9  : num [1:100, 1:2] -0.101 -0.126 -0.155 -0.186 -0.223 ... #>  $ shp10 : num [1:100, 1:2] -0.0849 -0.1063 -0.129 -0.1529 -0.1811 ... #>  $ shp11 : num [1:100, 1:2] -0.0921 -0.1162 -0.1424 -0.1704 -0.2019 ... #>  $ shp12 : num [1:100, 1:2] -0.084 -0.104 -0.129 -0.154 -0.183 ... #>  $ shp13 : num [1:100, 1:2] -0.111 -0.139 -0.171 -0.206 -0.247 ... #>  $ shp14 : num [1:100, 1:2] -0.0932 -0.1147 -0.1368 -0.164 -0.1953 ... #>  $ shp15 : num [1:100, 1:2] -0.101 -0.124 -0.151 -0.183 -0.218 ... #>  $ shp16 : num [1:100, 1:2] -0.105 -0.131 -0.16 -0.193 -0.228 ... #>  $ shp17 : num [1:100, 1:2] -0.109 -0.137 -0.167 -0.198 -0.234 ... #>  $ shp18 : num [1:100, 1:2] -0.128 -0.16 -0.195 -0.235 -0.28 ... #>  $ shp19 : num [1:100, 1:2] -0.113 -0.139 -0.171 -0.206 -0.246 ... #>  $ shp20 : num [1:100, 1:2] -0.104 -0.131 -0.16 -0.192 -0.228 ... #>  $ shp21 : num [1:100, 1:2] -0.126 -0.157 -0.191 -0.23 -0.271 ... #>  $ shp22 : num [1:100, 1:2] -0.116 -0.146 -0.181 -0.217 -0.257 ... #>  $ shp23 : num [1:100, 1:2] -0.117 -0.146 -0.18 -0.216 -0.255 ... #>  $ shp24 : num [1:100, 1:2] -0.123 -0.154 -0.188 -0.225 -0.267 ... #>  $ shp25 : num [1:100, 1:2] -0.107 -0.134 -0.163 -0.196 -0.233 ... #>  $ shp26 : num [1:100, 1:2] -0.0917 -0.1141 -0.1381 -0.1675 -0.1995 ... #>  $ shp27 : num [1:100, 1:2] -0.0979 -0.1222 -0.1477 -0.1744 -0.2049 ... #>  $ shp28 : num [1:100, 1:2] -0.121 -0.151 -0.183 -0.217 -0.259 ... #>  $ shp29 : num [1:100, 1:2] -0.124 -0.156 -0.193 -0.234 -0.28 ... #>  $ shp30 : num [1:100, 1:2] -0.106 -0.132 -0.161 -0.193 -0.232 ... #>  $ shp31 : num [1:100, 1:2] -0.101 -0.126 -0.154 -0.186 -0.22 ... #>  $ shp32 : num [1:100, 1:2] -0.126 -0.157 -0.19 -0.228 -0.271 ... #>  $ shp33 : num [1:100, 1:2] -0.126 -0.157 -0.195 -0.237 -0.284 ... #>  $ shp34 : num [1:100, 1:2] -0.125 -0.155 -0.186 -0.224 -0.266 ... #>  $ shp35 : num [1:100, 1:2] -0.0985 -0.1235 -0.1506 -0.1799 -0.2125 ... #>  $ shp36 : num [1:100, 1:2] -0.119 -0.149 -0.183 -0.221 -0.263 ... #>  $ shp37 : num [1:100, 1:2] -0.113 -0.141 -0.173 -0.209 -0.248 ... #>  $ shp38 : num [1:100, 1:2] -0.0991 -0.1227 -0.1493 -0.1803 -0.2158 ... #>  $ shp39 : num [1:100, 1:2] -0.107 -0.134 -0.164 -0.196 -0.235 ... #>  $ shp40 : num [1:100, 1:2] -0.102 -0.128 -0.155 -0.186 -0.221 ... #>  $ shp41 : num [1:100, 1:2] -0.122 -0.153 -0.188 -0.23 -0.274 ... #>  $ shp42 : num [1:100, 1:2] -0.115 -0.145 -0.178 -0.214 -0.255 ... #>  $ shp43 : num [1:100, 1:2] -0.106 -0.133 -0.162 -0.196 -0.232 ... #>  $ shp44 : num [1:100, 1:2] -0.119 -0.151 -0.185 -0.225 -0.268 ... #>  $ shp45 : num [1:100, 1:2] -0.11 -0.137 -0.167 -0.203 -0.242 ... #>  $ shp46 : num [1:100, 1:2] -0.102 -0.126 -0.155 -0.188 -0.225 ... #>  $ shp47 : num [1:100, 1:2] -0.117 -0.146 -0.179 -0.218 -0.259 ... #>  $ shp48 : num [1:100, 1:2] -0.102 -0.126 -0.154 -0.184 -0.217 ... #>  $ shp49 : num [1:100, 1:2] -0.105 -0.132 -0.161 -0.193 -0.231 ... #>  $ shp50 : num [1:100, 1:2] -0.121 -0.151 -0.185 -0.224 -0.267 ... #>  $ shp51 : num [1:100, 1:2] -0.134 -0.168 -0.205 -0.245 -0.296 ... #>  $ shp52 : num [1:100, 1:2] -0.106 -0.133 -0.162 -0.193 -0.23 ... #>  $ shp53 : num [1:100, 1:2] -0.119 -0.148 -0.18 -0.217 -0.257 ... #>  $ shp54 : num [1:100, 1:2] -0.121 -0.151 -0.184 -0.221 -0.264 ... #>  $ shp55 : num [1:100, 1:2] -0.0875 -0.1083 -0.1316 -0.1588 -0.1877 ... #>  $ shp56 : num [1:100, 1:2] -0.104 -0.128 -0.159 -0.193 -0.229 ... #>  $ shp57 : num [1:100, 1:2] -0.128 -0.16 -0.197 -0.237 -0.283 ... #>  $ shp58 : num [1:100, 1:2] -0.101 -0.125 -0.151 -0.184 -0.22 ... #>  $ shp59 : num [1:100, 1:2] -0.105 -0.13 -0.16 -0.194 -0.231 ... #>  $ shp60 : num [1:100, 1:2] -0.135 -0.169 -0.208 -0.253 -0.304 ... #>  $ shp61 : num [1:100, 1:2] -0.104 -0.131 -0.161 -0.193 -0.229 ... #>  $ shp62 : num [1:100, 1:2] -0.0895 -0.1115 -0.1345 -0.1587 -0.1884 ... #>  $ shp63 : num [1:100, 1:2] -0.117 -0.147 -0.179 -0.216 -0.259 ... #>  $ shp64 : num [1:100, 1:2] -0.115 -0.144 -0.176 -0.214 -0.256 ... #>  $ shp65 : num [1:100, 1:2] -0.109 -0.135 -0.164 -0.2 -0.238 ... #>  $ shp66 : num [1:100, 1:2] -0.125 -0.158 -0.195 -0.234 -0.276 ... #>  $ shp67 : num [1:100, 1:2] -0.107 -0.135 -0.163 -0.195 -0.234 ... #>  $ shp68 : num [1:100, 1:2] -0.122 -0.152 -0.184 -0.221 -0.266 ... #>  $ shp69 : num [1:100, 1:2] -0.118 -0.145 -0.177 -0.216 -0.258 ... #>  $ shp70 : num [1:100, 1:2] -0.116 -0.144 -0.176 -0.21 -0.25 ... #>  $ shp71 : num [1:100, 1:2] -0.131 -0.164 -0.2 -0.244 -0.292 ... #>  $ shp72 : num [1:100, 1:2] -0.118 -0.148 -0.18 -0.215 -0.256 ... #>  $ shp73 : num [1:100, 1:2] -0.0996 -0.1229 -0.1496 -0.1778 -0.2106 ... #>  $ shp74 : num [1:100, 1:2] -0.118 -0.149 -0.181 -0.218 -0.259 ... #>  $ shp75 : num [1:100, 1:2] -0.118 -0.147 -0.179 -0.214 -0.252 ... #>  $ shp76 : num [1:100, 1:2] -0.128 -0.159 -0.191 -0.227 -0.268 ... #>  $ shp77 : num [1:100, 1:2] -0.126 -0.159 -0.193 -0.229 -0.271 ... #>  $ shp78 : num [1:100, 1:2] -0.111 -0.139 -0.173 -0.21 -0.249 ... #>  $ shp79 : num [1:100, 1:2] -0.121 -0.151 -0.183 -0.22 -0.261 ... #>  $ shp80 : num [1:100, 1:2] -0.117 -0.146 -0.178 -0.213 -0.253 ... #>  $ shp81 : num [1:100, 1:2] -0.109 -0.137 -0.168 -0.202 -0.243 ... #>  $ shp82 : num [1:100, 1:2] -0.118 -0.149 -0.184 -0.222 -0.264 ... #>  $ shp83 : num [1:100, 1:2] -0.12 -0.15 -0.183 -0.219 -0.256 ... #>  $ shp84 : num [1:100, 1:2] -0.135 -0.168 -0.207 -0.25 -0.299 ... #>  $ shp85 : num [1:100, 1:2] -0.118 -0.149 -0.181 -0.218 -0.261 ... #>  $ shp86 : num [1:100, 1:2] -0.119 -0.149 -0.181 -0.221 -0.265 ... #>  $ shp87 : num [1:100, 1:2] -0.106 -0.132 -0.162 -0.194 -0.232 ... #>  $ shp88 : num [1:100, 1:2] -0.104 -0.128 -0.157 -0.188 -0.22 ... #>  $ shp89 : num [1:100, 1:2] -0.106 -0.132 -0.162 -0.195 -0.23 ... #>  $ shp90 : num [1:100, 1:2] -0.127 -0.159 -0.195 -0.235 -0.282 ... #>  $ shp91 : num [1:100, 1:2] -0.111 -0.139 -0.168 -0.202 -0.238 ... #>  $ shp92 : num [1:100, 1:2] -0.101 -0.126 -0.154 -0.187 -0.224 ... #>  $ shp93 : num [1:100, 1:2] -0.127 -0.158 -0.193 -0.231 -0.278 ... #>  $ shp94 : num [1:100, 1:2] -0.104 -0.13 -0.159 -0.193 -0.23 ... #>  $ shp95 : num [1:100, 1:2] -0.0868 -0.1067 -0.1271 -0.1523 -0.182 ... #>  $ shp96 : num [1:100, 1:2] -0.103 -0.128 -0.156 -0.188 -0.225 ... #>  $ shp97 : num [1:100, 1:2] -0.102 -0.127 -0.156 -0.188 -0.222 ... #>  $ shp98 : num [1:100, 1:2] -0.104 -0.132 -0.161 -0.192 -0.225 ... #>  $ shp99 : num [1:100, 1:2] -0.108 -0.133 -0.16 -0.193 -0.227 ... #>   [list output truncated] #> fac : tibble [0 × 0] (S3: tbl_df/tbl/data.frame) #>  Named list() #> ldk :  list()"},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate analysis of (co)variance on Coe objects — MANOVA","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"Performs multivariate analysis variance PCA objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"","code":"MANOVA(x, fac, test = \"Hotelling\", retain, drop)  # S3 method for OpnCoe MANOVA(x, fac, test = \"Hotelling\", retain, drop)  # S3 method for OutCoe MANOVA(x, fac, test = \"Hotelling\", retain, drop)  # S3 method for PCA MANOVA(x, fac, test = \"Hotelling\", retain = 0.99, drop)"},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"x Coe object fac name colum $fac slot, id, formula test test manova ('Hotelling' default) retain many harmonics (polynomials) retain, PCA highest number PC axis retain, proportion variance capture. drop many harmonics (polynomials) drop","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"list matrices (x,y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"Performs MANOVA/MANCOVA PC scores. Just wrapper around manova. See examples multifactorial manova summary.manova details examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"Needs review considered experimental. Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/MANOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate analysis of (co)variance on Coe objects — MANOVA","text":"","code":"# MANOVA bot.p <- PCA(efourier(bot, 12)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details MANOVA(bot.p, 'type') #> PC axes 1 to 7 were retained #>           Df Hotelling-Lawley approx F num Df den Df    Pr(>F)     #> fac        1           2.7631   12.631      7     32 1.202e-07 *** #> Residuals 38                                                       #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  op <- PCA(npoly(olea, 5)) #> 'nb.pts' missing and set to: 91 MANOVA(op, 'domes') #> PC axes 1 to 2 were retained #>            Df Hotelling-Lawley approx F num Df den Df    Pr(>F)     #> fac         1          0.37378   38.686      2    207 5.315e-15 *** #> Residuals 208                                                       #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1   m <- manova(op$x[, 1:5] ~  op$fac$domes * op$fac$var)  summary(m) #>               Df  Pillai approx F num Df den Df    Pr(>F)     #> op$fac$domes   1 0.38594  25.3915      5    202 < 2.2e-16 *** #> op$fac$var     2 0.34192   8.3723     10    406 2.069e-12 *** #> Residuals    206                                              #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  summary.aov(m) #>  Response PC1 : #>               Df  Sum Sq Mean Sq F value  Pr(>F)    #> op$fac$domes   1   11.79  11.790  1.2623 0.26251    #> op$fac$var     2  109.81  54.903  5.8784 0.00329 ** #> Residuals    206 1924.02   9.340                    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  Response PC2 : #>               Df  Sum Sq Mean Sq F value    Pr(>F)     #> op$fac$domes   1  62.486  62.486  93.511 < 2.2e-16 *** #> op$fac$var     2  34.489  17.244  25.806  9.97e-11 *** #> Residuals    206 137.654   0.668                       #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  Response PC3 : #>               Df  Sum Sq  Mean Sq F value  Pr(>F)    #> op$fac$domes   1  0.2345 0.234541  3.9476 0.04826 *  #> op$fac$var     2  0.5998 0.299918  5.0479 0.00724 ** #> Residuals    206 12.2393 0.059414                    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  Response PC4 : #>               Df  Sum Sq  Mean Sq F value   Pr(>F)    #> op$fac$domes   1 0.12558 0.125582  8.5246 0.003894 ** #> op$fac$var     2 0.08698 0.043490  2.9521 0.054442 .  #> Residuals    206 3.03476 0.014732                     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  Response PC5 : #>               Df   Sum Sq    Mean Sq F value Pr(>F) #> op$fac$domes   1 0.000140 0.00014009  0.7838 0.3770 #> op$fac$var     2 0.000299 0.00014964  0.8372 0.4344 #> Residuals    206 0.036819 0.00017873                #>    # MANCOVA example  # we create a numeric variable, based on centroid size  bot %<>% mutate(cs=coo_centsize(.))  # same pipe  bot %>% efourier %>% PCA %>% MANOVA(\"cs\") #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) #> PC axes 1 to 7 were retained #>           Df Hotelling-Lawley approx F num Df den Df Pr(>F) #> fac        1          0.38135   1.7433      7     32 0.1341 #> Residuals 38"},{"path":"http://momx.github.io/Momocs/reference/MANOVA_PW.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Multivariate analyses of variance — MANOVA_PW","title":"Pairwise Multivariate analyses of variance — MANOVA_PW","text":"wrapper pairwise MANOVAs Coe objects. Calculates MANOVA every pairwise combination factor provided.","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA_PW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Multivariate analyses of variance — MANOVA_PW","text":"","code":"MANOVA_PW(x, ...)  # S3 method for PCA MANOVA_PW(x, fac, retain = 0.99, ...)"},{"path":"http://momx.github.io/Momocs/reference/MANOVA_PW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Multivariate analyses of variance — MANOVA_PW","text":"x PCA object ... arguments feed MANOVA fac name (id) grouping factor $fac factor formula. retain number PC axis retain (1:retain) proportion variance capture (0.99 par default).","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA_PW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Multivariate analyses of variance — MANOVA_PW","text":"list following components returned (invisibly $manovas may long, see examples): manovas list containing raw manovas summary stars.tab table 'significance stars', discutable largely used: '' Pr(>F) < 0.001; '' < 0.01; '' < 0.05; '.' < 0.10 '-' .","code":""},{"path":"http://momx.github.io/Momocs/reference/MANOVA_PW.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pairwise Multivariate analyses of variance — MANOVA_PW","text":"Needs review considered experimental. fac passed two levels, pair equivalent MANOVA. MANOVA_PW.PCA works regular manova.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/MANOVA_PW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise Multivariate analyses of variance — MANOVA_PW","text":"","code":"# we create a fake factor with 4 levels bot$fac$fake <- factor(rep(letters[1:4], each=10)) bot.p <- PCA(efourier(bot, 8)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details MANOVA_PW(bot.p, 'fake') # or MANOVA_PW(bot.p, 2) #> PC axes 1 to 6 were retained #> ab #> ac #> ad #> bc #> bd #> cd #> $stars.tab #>   a b c  d  #> a   - ** ** #> b     *  *  #> c        -  #>  #> $summary (see also $manovas) #>       Df Pillai approx F num Df den Df   Pr(>F) #> a - b  1 0.1848   0.4912      6     13 0.803857 #> a - c  1 0.7785   7.6167      6     13 0.001157 #> a - d  1 0.6865   4.7449      6     13 0.009007 #> b - c  1 0.6634   4.2700      6     13 0.013537 #> b - d  1 0.5793   2.9830      6     13 0.046573 #> c - d  1 0.3489   1.1611      6     13 0.383292  # an example on open outlines op <- PCA(npoly(olea)) #> 'nb.pts' missing and set to: 91 #> 'degree' missing and set to: 5 MANOVA_PW(op, 'domes') #> PC axes 1 to 2 were retained #> cultwild #> $stars.tab #>      cult wild #> cult      ***  #>  #> $summary (see also $manovas) #>             Df Pillai approx F num Df den Df    Pr(>F) #> cult - wild  1 0.2721    38.69      2    207 5.315e-15 # to get the results res <- MANOVA_PW(op, 'domes') #> PC axes 1 to 2 were retained #> cultwild #> $stars.tab #>      cult wild #> cult      ***  #>  #> $summary (see also $manovas) #>             Df Pillai approx F num Df den Df    Pr(>F) #> cult - wild  1 0.2721    38.69      2    207 5.315e-15 res$manovas #> $`cult - wild` #>            Df  Pillai approx F num Df den Df    Pr(>F)     #> fac.i       1 0.27208   38.686      2    207 5.315e-15 *** #> Residuals 208                                              #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  res$stars.tab #>      cult wild #> cult      ***  res$summary #>             Df    Pillai approx F num Df den Df       Pr(>F) #> cult - wild  1 0.2720825 38.68644      2    207 5.315003e-15"},{"path":"http://momx.github.io/Momocs/reference/MDS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Metric) multidimensional scaling — MDS","title":"(Metric) multidimensional scaling — MDS","text":"wrapper around stats::cmdscale.","code":""},{"path":"http://momx.github.io/Momocs/reference/MDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Metric) multidimensional scaling — MDS","text":"","code":"MDS(x, method = \"euclidean\", k = 2, ...)"},{"path":"http://momx.github.io/Momocs/reference/MDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Metric) multidimensional scaling — MDS","text":"x Coe object method dissiminarity index feed method stats::dist (default: euclidean) k numeric number dimensions feed stats::cmdscale (default: 2) ... additional parameters feed stats::cmdscale","code":""},{"path":"http://momx.github.io/Momocs/reference/MDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Metric) multidimensional scaling — MDS","text":"returned stats::dist plus $fac. prepend MDS class .","code":""},{"path":"http://momx.github.io/Momocs/reference/MDS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Metric) multidimensional scaling — MDS","text":"Details, see vegan::metaMDS","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/MDS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Metric) multidimensional scaling — MDS","text":"","code":"x <- bot %>% efourier %>% MDS #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) x #> $x #>                       [,1]          [,2] #> brahma         -0.05277530 -0.0230987121 #> caney          -0.03692797  0.0072496676 #> chimay          0.08091319 -0.0047905849 #> corona         -0.06936747  0.0022942672 #> deusventrue    -0.01117242  0.0475689844 #> duvel           0.11514484 -0.0169960574 #> franziskaner   -0.04425459 -0.0185989836 #> grimbergen      0.02874996  0.0099554795 #> guiness         0.01231138  0.0006027416 #> hoegardeen     -0.04579716  0.0056378311 #> jupiler        -0.05431287  0.0072952179 #> kingfisher     -0.03821463 -0.0034548056 #> latrappe        0.13300133 -0.0384264345 #> lindemanskriek -0.03540248  0.0147002348 #> nicechouffe    -0.02097431  0.0133514818 #> pecheresse     -0.05277659  0.0083010974 #> sierranevada    0.03905169 -0.0068665050 #> tanglefoot      0.07741376 -0.0020813543 #> tauro          -0.05456357  0.0073871372 #> westmalle      -0.05000066  0.0065364611 #> amrut          -0.04851067  0.0003233973 #> ballantines     0.12125872 -0.0671656955 #> bushmills      -0.03619504 -0.0540035080 #> chivas          0.07579382  0.0395367090 #> dalmore         0.10196157  0.0535941215 #> famousgrouse   -0.03460400 -0.0243909943 #> glendronach    -0.05266032 -0.0003142188 #> glenmorangie   -0.06127392  0.0037530633 #> highlandpark    0.08332158 -0.0437952867 #> jackdaniels     0.01064050 -0.0005682657 #> jb             -0.04043031  0.0088167995 #> johnniewalker  -0.03553374 -0.0387787659 #> magallan       -0.07106980 -0.0303786761 #> makersmark      0.06020727  0.0476203806 #> oban           -0.06297482  0.0061352696 #> oldpotrero      0.03373439  0.0616822707 #> redbreast       0.06482559  0.0494227507 #> tamdhu         -0.04715671 -0.0061720938 #> wildturkey     -0.01548202  0.0145967715 #> yoichi          0.03410175 -0.0364811930 #>  #> $fac #> # A tibble: 40 × 2 #>    type   fake  #>    <fct>  <fct> #>  1 whisky a     #>  2 whisky a     #>  3 whisky a     #>  4 whisky a     #>  5 whisky a     #>  6 whisky a     #>  7 whisky a     #>  8 whisky a     #>  9 whisky a     #> 10 whisky a     #> # ℹ 30 more rows #>  #> attr(,\"class\") #> [1] \"MDS\"  \"list\""},{"path":"http://momx.github.io/Momocs/reference/MSHAPES.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean shape calculation for Coo, Coe, etc. — MSHAPES","title":"Mean shape calculation for Coo, Coe, etc. — MSHAPES","text":"Quite versatile function calculates mean (median, whatever function) list array shapes, Ldk object. can also used Coe objects. case, reverse transformation (coefficients shapes) calculated, (within groups defined fac argument provided) Coe object also returned ($Coe) along list shapes ($shp) can passed plot_MSHAPES.","code":""},{"path":"http://momx.github.io/Momocs/reference/MSHAPES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean shape calculation for Coo, Coe, etc. — MSHAPES","text":"","code":"MSHAPES(x, fac = NULL, FUN = mean, nb.pts = 120, ...)"},{"path":"http://momx.github.io/Momocs/reference/MSHAPES.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean shape calculation for Coo, Coe, etc. — MSHAPES","text":"x list, array, Ldk, LdkCoe, OutCoe OpnCoe PCA object fac factor specification fac_dispatcher FUN function compute mean shape (mean default, median can considered) nb.pts numeric number points calculated shapes (Coe objects) ... useless .","code":""},{"path":"http://momx.github.io/Momocs/reference/MSHAPES.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean shape calculation for Coo, Coe, etc. — MSHAPES","text":"averaged shape; Coe objects, list two components: $Coe object class, $shp list matrices (x, y) coordinates. PCA LDA objects, FUN (typically mean median) scores PCs LDs. method used latter objects may moved another function point.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/MSHAPES.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean shape calculation for Coo, Coe, etc. — MSHAPES","text":"","code":"#### on shapes MSHAPES(wings) #>               x            y #> 1  -0.472151969  0.026257480 #> 2   0.009588976  0.082756693 #> 3   0.231342520  0.063322047 #> 4   0.249218898  0.044129134 #> 5   0.254361417  0.022457480 #> 6   0.249206299  0.003249606 #> 7   0.230685827 -0.017059843 #> 8   0.186659843 -0.041403937 #> 9   0.116231496 -0.063584252 #> 10  0.030126772 -0.087316535 #> 11 -0.080339370 -0.103129134 #> 12 -0.405025984 -0.014459055 #> 13 -0.388690551  0.023895276 #> 14 -0.177349606  0.029181102 #> 15  0.066421260  0.043376378 #> 16 -0.027141732  0.019349606 #> 17  0.067113386 -0.009022047 #> 18 -0.140259843 -0.022011024 MSHAPES(wings$coo) #>               x            y #> 1  -0.472151969  0.026257480 #> 2   0.009588976  0.082756693 #> 3   0.231342520  0.063322047 #> 4   0.249218898  0.044129134 #> 5   0.254361417  0.022457480 #> 6   0.249206299  0.003249606 #> 7   0.230685827 -0.017059843 #> 8   0.186659843 -0.041403937 #> 9   0.116231496 -0.063584252 #> 10  0.030126772 -0.087316535 #> 11 -0.080339370 -0.103129134 #> 12 -0.405025984 -0.014459055 #> 13 -0.388690551  0.023895276 #> 14 -0.177349606  0.029181102 #> 15  0.066421260  0.043376378 #> 16 -0.027141732  0.019349606 #> 17  0.067113386 -0.009022047 #> 18 -0.140259843 -0.022011024 MSHAPES(coo_sample(bot, 24)$coo) #>          x       y #> 1   60.725 419.125 #> 2   58.350 344.200 #> 3   59.025 266.000 #> 4   59.925 189.900 #> 5   60.100 112.650 #> 6   72.025  40.300 #> 7  146.625  21.375 #> 8  222.175  24.600 #> 9  278.800  63.475 #> 10 286.850 136.775 #> 11 287.250 211.100 #> 12 287.925 288.400 #> 13 287.700 365.725 #> 14 283.325 441.375 #> 15 262.675 517.250 #> 16 237.325 586.950 #> 17 222.700 664.275 #> 18 215.900 739.350 #> 19 208.550 809.525 #> 20 137.150 808.650 #> 21 128.475 739.425 #> 22 123.650 663.775 #> 23 109.650 590.000 #> 24  83.625 514.500 stack(wings) coo_draw(MSHAPES(wings))   bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details MSHAPES(bot.f) # the mean (global) shape #> no 'fac' provided, returns meanshape #>                   x             y #>   [1,]  1.168906286 -0.0001651753 #>   [2,]  1.163078247  0.0421600553 #>   [3,]  1.145987931  0.0791545836 #>   [4,]  1.119080936  0.1068491537 #>   [5,]  1.084462899  0.1234921899 #>   [6,]  1.044515489  0.1298160330 #>   [7,]  1.001501085  0.1286134238 #>   [8,]  0.957247869  0.1237878526 #>   [9,]  0.912978161  0.1191956670 #>  [10,]  0.869298497  0.1176432074 #>  [11,]  0.826324964  0.1203279475 #>  [12,]  0.783884894  0.1268487171 #>  [13,]  0.741725082  0.1357159282 #>  [14,]  0.699667837  0.1451353059 #>  [15,]  0.657683275  0.1537690869 #>  [16,]  0.615878472  0.1612150898 #>  [17,]  0.574430083  0.1680667629 #>  [18,]  0.533499333  0.1755775102 #>  [19,]  0.493164879  0.1850912925 #>  [20,]  0.453393981  0.1974710400 #>  [21,]  0.414053341  0.2127369864 #>  [22,]  0.374945749  0.2300322600 #>  [23,]  0.335852608  0.2479030949 #>  [24,]  0.296566207  0.2647662777 #>  [25,]  0.256905612  0.2793783445 #>  [26,]  0.216720688  0.2911371254 #>  [27,]  0.175894459  0.3001249134 #>  [28,]  0.134352476  0.3069092041 #>  [29,]  0.092080418  0.3122084326 #>  [30,]  0.049142076  0.3165718347 #>  [31,]  0.005684547  0.3202014303 #>  [32,] -0.038080617  0.3229727379 #>  [33,] -0.081922450  0.3246211931 #>  [34,] -0.125651137  0.3249912594 #>  [35,] -0.169173183  0.3242231538 #>  [36,] -0.212517809  0.3227854829 #>  [37,] -0.255819333  0.3213351308 #>  [38,] -0.299256747  0.3204663421 #>  [39,] -0.342970452  0.3204641335 #>  [40,] -0.386988991  0.3211796377 #>  [41,] -0.431199127  0.3220947589 #>  [42,] -0.475378578  0.3225609447 #>  [43,] -0.519286078  0.3221164568 #>  [44,] -0.562776943  0.3207428677 #>  [45,] -0.605894989  0.3189350982 #>  [46,] -0.648891824  0.3175276310 #>  [47,] -0.692145046  0.3173174414 #>  [48,] -0.735982396  0.3186132956 #>  [49,] -0.780457859  0.3208847676 #>  [50,] -0.825153563  0.3226624581 #>  [51,] -0.869086061  0.3217583294 #>  [52,] -0.910772394  0.3157606556 #>  [53,] -0.948465170  0.3026542245 #>  [54,] -0.980510370  0.2813630409 #>  [55,] -1.005735148  0.2520318883 #>  [56,] -1.023752227  0.2159499153 #>  [57,] -1.035081884  0.1751434820 #>  [58,] -1.041039987  0.1317817301 #>  [59,] -1.043407694  0.0876037220 #>  [60,] -1.043964872  0.0435658071 #>  [61,] -1.044013564 -0.0001747867 #>  [62,] -1.044025203 -0.0439492146 #>  [63,] -1.043512254 -0.0880697136 #>  [64,] -1.041161156 -0.1323293477 #>  [65,] -1.035188270 -0.1757099138 #>  [66,] -1.023817167 -0.2164219884 #>  [67,] -1.005743392 -0.2522778444 #>  [68,] -0.980460978 -0.2812740940 #>  [69,] -0.948369940 -0.3021819671 #>  [70,] -0.910650551 -0.3149377945 #>  [71,] -0.868957121 -0.3206959085 #>  [72,] -0.825030797 -0.3215245758 #>  [73,] -0.780344469 -0.3198490360 #>  [74,] -0.735871551 -0.3178294420 #>  [75,] -0.692023558 -0.3168762464 #>  [76,] -0.648746041 -0.3174481558 #>  [77,] -0.605716737 -0.3191716238 #>  [78,] -0.562567403 -0.3212066058 #>  [79,] -0.519056221 -0.3227031290 #>  [80,] -0.475145999 -0.3231749465 #>  [81,] -0.430982360 -0.3226635945 #>  [82,] -0.386801287 -0.3216571441 #>  [83,] -0.342815151 -0.3208256181 #>  [84,] -0.299125898 -0.3207013096 #>  [85,] -0.255696084 -0.3214429085 #>  [86,] -0.212381865 -0.3227761919 #>  [87,] -0.169007586 -0.3241225855 #>  [88,] -0.125448199 -0.3248451835 #>  [89,] -0.081686941 -0.3244939182 #>  [90,] -0.037829212 -0.3229368063 #>  [91,]  0.005927348 -0.3203193572 #>  [92,]  0.049350196 -0.3168750705 #>  [93,]  0.092232630 -0.3126812931 #>  [94,]  0.134436974 -0.3074850475 #>  [95,]  0.175910258 -0.3006982100 #>  [96,]  0.216675572 -0.2915894535 #>  [97,]  0.256811552 -0.2796108642 #>  [98,]  0.296433966 -0.2647280865 #>  [99,]  0.335687496 -0.2476054872 #> [100,]  0.374746057 -0.2295433326 #> [101,]  0.413812022 -0.2121578168 #> [102,]  0.453102987 -0.1969013652 #> [103,]  0.492820622 -0.1845967071 #> [104,]  0.533107240 -0.1751700190 #> [105,]  0.574006481 -0.1677059544 #> [106,]  0.615448834 -0.1608297786 #> [107,]  0.657277055 -0.1532916765 #> [108,]  0.699311281 -0.1445361651 #> [109,]  0.741434152 -0.1350246853 #> [110,]  0.783660554 -0.1261538349 #> [111,]  0.826152488 -0.1197537224 #> [112,]  0.869151275 -0.1173116512 #> [113,]  0.912825186 -0.1191865197 #> [114,]  0.957062915 -0.1241110447 #> [115,]  1.001270984 -0.1292041692 #> [116,]  1.044245114 -0.1305548005 #> [117,]  1.084175273 -0.1242429094 #> [118,]  1.118812297 -0.1075023934 #> [119,]  1.145778947 -0.0796605231 #> [120,]  1.162963747 -0.0425396294 ms <- MSHAPES(bot.f, 'type') ms$Coe #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 2 outlines described, 12 harmonics #> # A tibble: 2 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 beer   c     #> 2 whisky a     class(ms$Coe) #> [1] \"OutCoe\" \"Coe\"    ms <- ms$shp coo_plot(ms$beer) coo_draw(ms$whisky, border='forestgreen')"},{"path":"http://momx.github.io/Momocs/reference/Momocs.html","id":null,"dir":"Reference","previous_headings":"","what":"Momocs — Momocs","title":"Momocs — Momocs","text":"goal Momocs provide complete, convenient, reproducible open-source toolkit 2D morphometrics. includes common 2D morphometrics approaches outlines, open outlines, configurations landmarks, traditional morphometrics, facilities data preparation, manipulation visualization consistent grammar throughout. allows reproducible, complex morphometric analyses morphometrics approaches easy plug , develop , top canvas.","code":""},{"path":"http://momx.github.io/Momocs/reference/Momocs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Momocs — Momocs","text":"nothing","code":""},{"path":"http://momx.github.io/Momocs/reference/Momocs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Momocs — Momocs","text":"cite Momocs publications: citation(\"Momocs\").","code":""},{"path":"http://momx.github.io/Momocs/reference/Momocs.html","id":"cheers","dir":"Reference","previous_headings":"","what":"Cheers","title":"Momocs — Momocs","text":"grateful (alphabetical order): Sean Asselin, Laurent Bouby, Matt Bulbert, Simon Crameri, Julia Cooke, April Dinwiddie, Carl Lipo, Cedric Gaucherel, Catherine Girard, QGouil (GitHub), Christian Steven Hoggard, Sarah Ivorra, Glynis Jones, Nathalie Keller, Ricardo Kriebel, Remi Laffont, Fabien Lafuma, Matthias Mace, Stas Malavin, Neus Martinez, Ben Marwick, Sabrina Renaud, Marcelo Reginato, Evan Saitta, Bill Sellers, David Siddons, Eleanor Stillman, Theodore Stammer, Tom Stubbs, Norbert Telmon, Jean-Frederic Terral, Bill Venables, Daniele Ventura, Michael Wallace, Asher Wishkerman, John Wood helpful ideas bug reports.","code":""},{"path":"http://momx.github.io/Momocs/reference/Momocs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Momocs — Momocs","text":"Bonhomme V, Picq S, Gaucherel C, Claude J. 2014. Momocs: Outline Analysis Using R. Journal Statistical Software 56. https://www.jstatsoft.org/v56/i13. Claude J. 2008. Morphometrics R. Springer-Verlag, New-York.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/NMDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Non metric multidimensional scaling — NMDS","title":"Non metric multidimensional scaling — NMDS","text":"wrapper around vegan::metaMDS.","code":""},{"path":"http://momx.github.io/Momocs/reference/NMDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non metric multidimensional scaling — NMDS","text":"","code":"NMDS(x, distance = \"bray\", k = 2, try = 20, trymax = 20, ...)"},{"path":"http://momx.github.io/Momocs/reference/NMDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non metric multidimensional scaling — NMDS","text":"x Coe object distance dissiminarity index feed vegan::vegdist (default: bray) k numeric number dimensions feed vegan::metaMDS (default: 2) try numeric minimum number random starts feed vegan::metaMDS (default: 20) trymax numeric minimum number random starts feed vegan::metaMDS (default: 20) ... additional parameters feed vegan::metaMDS","code":""},{"path":"http://momx.github.io/Momocs/reference/NMDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non metric multidimensional scaling — NMDS","text":"returned vegan::metaMDS plus $fac. prepend NMDS class .","code":""},{"path":"http://momx.github.io/Momocs/reference/NMDS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non metric multidimensional scaling — NMDS","text":"Details, see vegan::metaMDS","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/NMDS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non metric multidimensional scaling — NMDS","text":"","code":"x <- bot %>% efourier %>% NMDS #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) #> 'comm' has negative data: 'autotransform', 'noshare' and 'wascores' set to FALSE #> Warning: results may be meaningless because data have negative entries #>                  in method “bray” #> Run 0 stress 0.07227125  #> Run 1 stress 0.07227125  #> ... New best solution #> ... Procrustes: rmse 3.936046e-06  max resid 1.87576e-05  #> ... Similar to previous best #> Run 2 stress 0.1536609  #> Run 3 stress 0.1729702  #> Run 4 stress 0.07227125  #> ... Procrustes: rmse 5.981988e-06  max resid 2.874886e-05  #> ... Similar to previous best #> Run 5 stress 0.07227125  #> ... Procrustes: rmse 2.19081e-06  max resid 8.275813e-06  #> ... Similar to previous best #> Run 6 stress 0.07227125  #> ... Procrustes: rmse 7.02888e-06  max resid 2.808569e-05  #> ... Similar to previous best #> Run 7 stress 0.07227125  #> ... Procrustes: rmse 9.669054e-06  max resid 3.852924e-05  #> ... Similar to previous best #> Run 8 stress 0.1476475  #> Run 9 stress 0.07227125  #> ... Procrustes: rmse 1.146136e-06  max resid 4.040052e-06  #> ... Similar to previous best #> Run 10 stress 0.07227125  #> ... Procrustes: rmse 2.035528e-06  max resid 8.084339e-06  #> ... Similar to previous best #> Run 11 stress 0.07227126  #> ... Procrustes: rmse 7.291375e-06  max resid 2.685535e-05  #> ... Similar to previous best #> Run 12 stress 0.1647891  #> Run 13 stress 0.07227125  #> ... Procrustes: rmse 6.998249e-06  max resid 2.725125e-05  #> ... Similar to previous best #> Run 14 stress 0.07227125  #> ... Procrustes: rmse 5.714742e-06  max resid 2.216745e-05  #> ... Similar to previous best #> Run 15 stress 0.1606935  #> Run 16 stress 0.07227125  #> ... Procrustes: rmse 6.971938e-06  max resid 2.720148e-05  #> ... Similar to previous best #> Run 17 stress 0.07227125  #> ... Procrustes: rmse 8.281581e-07  max resid 2.450366e-06  #> ... Similar to previous best #> Run 18 stress 0.1776127  #> Run 19 stress 0.07227125  #> ... Procrustes: rmse 4.920737e-06  max resid 1.945613e-05  #> ... Similar to previous best #> Run 20 stress 0.07227125  #> ... Procrustes: rmse 1.953093e-06  max resid 6.877957e-06  #> ... Similar to previous best #> *** Best solution repeated 14 times  # Shepard diagram # before a Momocs wrapper # vegan::stressplot(x)"},{"path":"http://momx.github.io/Momocs/reference/Opn.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds an Opn object — Opn","title":"Builds an Opn object — Opn","text":"Momocs, Opn classes objects lists open outlines, optionnal components, generic methods plotting methods (e.g. stack) specific methods (e.g. npoly can applied. Opn objects primarily Coo objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/Opn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds an Opn object — Opn","text":"","code":"Opn(x, fac = dplyr::tibble(), ldk = list())"},{"path":"http://momx.github.io/Momocs/reference/Opn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds an Opn object — Opn","text":"x list matrices (x; y) coordinates, array, data.frame (friends) fac (optionnal) data.frame factors /numerics specifying grouping structure ldk (optionnal) list landmarks row number indices","code":""},{"path":"http://momx.github.io/Momocs/reference/Opn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds an Opn object — Opn","text":"Opn object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/Opn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds an Opn object — Opn","text":"","code":"#Methods on Opn methods(class=Opn) #>  [1] add_ldk           combine           coo_bookstein     coo_sample        #>  [5] coo_sample_prop   coo_slice         coo_smoothcurve   def_ldk           #>  [9] def_ldk_angle     def_ldk_direction def_ldk_tips      dfourier          #> [13] fgProcrustes      get_ldk           mosaic            npoly             #> [17] opoly             panel             pile              rearrange_ldk     #> see '?methods' for accessing help and source code # we load some open outlines. See ?olea for credits olea #> Opn (curves) #>   - 210 curves, 99 +/- 3 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk panel(olea)  # orthogonal polynomials op <- opoly(olea, degree=5) #> 'nb.pts' missing and set to 91 # we print the Coe op #> An OpnCoe object [ opoly analysis ] #> -------------------- #>  - $coe: 210 open outlines described #>  - $baseline1: (-0.5; 0), $baseline2: (0.5; 0) #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows # Let's do a PCA on it op.p <- PCA(op) plot(op.p, 'domes') #> will be deprecated soon, see ?plot_PCA  plot(op.p, 'var') #> will be deprecated soon, see ?plot_PCA  # and now an LDA after a PCA olda <- LDA(PCA(op), 'var') #> 4 PC retained # for CV table and others olda #>  * Cross-validation table ($CV.tab): #>         classified #> actual   Aglan Cypre MouBo1 PicMa #>   Aglan     21     2     17    20 #>   Cypre     12     4     14     0 #>   MouBo1     4     2     54     0 #>   PicMa     22     1      2    35 #>  #>  * Class accuracy ($CV.ce): #>     Aglan     Cypre    MouBo1     PicMa  #> 0.3500000 0.1333333 0.9000000 0.5833333  #>  #>  * Leave-one-out cross-validation ($CV.correct): (54.3% - 114/210):  plot_LDA(olda)"},{"path":"http://momx.github.io/Momocs/reference/OpnCoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds an OpnCoe object — OpnCoe","title":"Builds an OpnCoe object — OpnCoe","text":"Momocs, OpnCoe classes objects wrapping around lists morphometric coefficients, along informations, generic methods plotting methods (e.g. boxplot) specific methods can applied. OpnCoe objects primarily Coe objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/OpnCoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds an OpnCoe object — OpnCoe","text":"","code":"OpnCoe(   coe = matrix(),   fac = dplyr::tibble(),   method = character(),   baseline1 = numeric(),   baseline2 = numeric(),   mod = list(),   r2 = numeric() )"},{"path":"http://momx.github.io/Momocs/reference/OpnCoe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds an OpnCoe object — OpnCoe","text":"coe matrix morphometric coefficients fac (optionnal) data.frame factors, specifying grouping structure method used obtain coefficients baseline1 \\((x; y)\\) coordinates first baseline point baseline2 \\((x; y)\\) coordinates second baseline point mod R lm object, used reconstruct shapes r2 numeric, r-squared every model","code":""},{"path":"http://momx.github.io/Momocs/reference/OpnCoe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds an OpnCoe object — OpnCoe","text":"OpnCoe object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/OpnCoe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds an OpnCoe object — OpnCoe","text":"","code":"# all OpnCoe classes methods(class='OpnCoe') #> [1] MANOVA  MSHAPES PCA     boxplot combine print   #> see '?methods' for accessing help and source code"},{"path":"http://momx.github.io/Momocs/reference/Out.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds an Out object — Out","title":"Builds an Out object — Out","text":"Momocs, -classes objects lists closed outlines, optional components, generic methods plotting methods (e.g. stack) specific methods (e.g. efourier can applied. objects primarily Coo objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/Out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds an Out object — Out","text":"","code":"Out(x, fac = dplyr::tibble(), ldk = list())"},{"path":"http://momx.github.io/Momocs/reference/Out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds an Out object — Out","text":"x list matrices (x; y) coordinates, array object Ldk object, data.frame (friends) fac (optional) data.frame factors /numerics specifying grouping structure ldk (optional) list landmarks row number indices","code":""},{"path":"http://momx.github.io/Momocs/reference/Out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds an Out object — Out","text":"object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/Out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds an Out object — Out","text":"","code":"methods(class=Out) #>  [1] add_ldk           combine           coo_bookstein     coo_down          #>  [5] coo_left          coo_right         coo_sample        coo_sample_prop   #>  [9] coo_slice         coo_up            d                 def_ldk           #> [13] def_ldk_angle     def_ldk_direction efourier          fgProcrustes      #> [17] get_ldk           mosaic            panel             pile              #> [21] rearrange_ldk     rfourier          sfourier          tfourier          #> see '?methods' for accessing help and source code"},{"path":"http://momx.github.io/Momocs/reference/OutCoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds an OutCoe object — OutCoe","title":"Builds an OutCoe object — OutCoe","text":"Momocs, OutCoe classes objects wrapping around lists morphometric coefficients, along informations, generic methods plotting methods (e.g. boxplot) specific methods can applied. OutCoe objects primarily Coe objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/OutCoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds an OutCoe object — OutCoe","text":"","code":"OutCoe(coe = matrix(), fac = dplyr::tibble(), method, norm)"},{"path":"http://momx.github.io/Momocs/reference/OutCoe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds an OutCoe object — OutCoe","text":"coe matrix harmonic coefficients fac (optional) data.frame factors, specifying grouping structure method used obtain coefficients norm normalisation used obtain coefficients","code":""},{"path":"http://momx.github.io/Momocs/reference/OutCoe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds an OutCoe object — OutCoe","text":"OutCoe object","code":""},{"path":"http://momx.github.io/Momocs/reference/OutCoe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Builds an OutCoe object — OutCoe","text":"methods can applied objects:","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/OutCoe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds an OutCoe object — OutCoe","text":"","code":"# all OutCoe methods methods(class='OutCoe') #>  [1] MANOVA   MSHAPES  PCA      boxplot  combine  hcontrib print    rm_asym  #>  [9] rm_sym   symmetry #> see '?methods' for accessing help and source code"},{"path":"http://momx.github.io/Momocs/reference/PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal component analysis on Coe objects — PCA","title":"Principal component analysis on Coe objects — PCA","text":"Performs PCA Coe objects, using prcomp.","code":""},{"path":"http://momx.github.io/Momocs/reference/PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal component analysis on Coe objects — PCA","text":"","code":"PCA(x, scale., center, fac)  # S3 method for OutCoe PCA(x, scale. = FALSE, center = TRUE, fac)  # S3 method for OpnCoe PCA(x, scale. = FALSE, center = TRUE, fac)  # S3 method for LdkCoe PCA(x, scale. = FALSE, center = TRUE, fac)  # S3 method for TraCoe PCA(x, scale. = TRUE, center = TRUE, fac)  # S3 method for default PCA(x, scale. = TRUE, center = TRUE, fac = dplyr::tibble())  as_PCA(x, fac)"},{"path":"http://momx.github.io/Momocs/reference/PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal component analysis on Coe objects — PCA","text":"x Coe object appropriate object (eg prcomp) as_PCA scale. logical whether scale input data center logical whether center input data fac factor data.frame passed as_PCA use plot.PCA","code":""},{"path":"http://momx.github.io/Momocs/reference/PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal component analysis on Coe objects — PCA","text":"'PCA' object apply plot.PCA, among others. list several components, inherited prcomp object: sdev standard deviations principal components (.e., square roots eigenvalues covariance/correlation matrix, though calculation actually done singular values data matrix) eig cumulated proportion variance along PC axes rotation matrix variable loadings (.e., matrix whose columns contain eigenvectors). function princomp returns element loadings. center, scale centering scaling used x PCA scores (value rotated data (centred (scaled requested) data multiplied rotation matrix)) components inherited Coe object passed PCA, eg fac, mshape, method, baseline1 baseline2, etc. documented corresponding *Coe file.","code":""},{"path":"http://momx.github.io/Momocs/reference/PCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal component analysis on Coe objects — PCA","text":"default, methods Coe object scale input data center . also generic method (eg traditional morphometrics) centers scales data.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal component analysis on Coe objects — PCA","text":"","code":"bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.p <- PCA(bot.f) bot.p #> A PCA object #> -------------------- #>  - 40 shapes  #>  - $method: [ efourier analysis ] #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows #>  - All components: sdev, rotation, center, scale, x, eig, fac, mshape, method, cuts. plot(bot.p, morpho=FALSE) #> will be deprecated soon, see ?plot_PCA  plot(bot.p, 'type') #> will be deprecated soon, see ?plot_PCA   op <- npoly(olea, 5) #> 'nb.pts' missing and set to: 91 op.p <- PCA(op) op.p #> A PCA object #> -------------------- #>  - 210 shapes  #>  - $method: [ npoly analysis ] #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>  - All components: sdev, rotation, center, scale, x, eig, fac, mshape, method, mod, baseline1, baseline2, cuts. plot(op.p, 1, morpho=TRUE) #> will be deprecated soon, see ?plot_PCA   wp <- fgProcrustes(wings, tol=1e-4) #> iteration:  1 \tgain: 53084  #> iteration:  2 \tgain: 0.1323  #> iteration:  3 \tgain: 0.056732  #> iteration:  4 \tgain: 0.00012401  #> iteration:  5 \tgain: 0.038609  #> iteration:  6 \tgain: 0.018221  #> iteration:  7 \tgain: 0.0014165  #> iteration:  8 \tgain: 6.1489e-06  wpp <- PCA(wp) wpp #> A PCA object #> -------------------- #>  - 127 shapes  #>  - $method: [ procrustes analysis ] #> # A tibble: 127 × 1 #>   group #>   <fct> #> 1 AN    #> 2 AN    #> 3 AN    #> 4 AN    #> 5 AN    #> 6 AN    #> # ℹ 121 more rows #>  - All components: sdev, rotation, center, scale, x, eig, fac, mshape, method, cuts, links. plot(wpp, 1) #> will be deprecated soon, see ?plot_PCA   # \"foreign prcomp\" head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa iris.p <- prcomp(iris[, 1:4]) iris.p <- as_PCA(iris.p, iris[, 5]) class(iris.p) #> [1] \"PCA\"    \"prcomp\" plot(iris.p, 1) #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/PCcontrib.html","id":null,"dir":"Reference","previous_headings":"","what":"Shape variation along PC axes — PCcontrib","title":"Shape variation along PC axes — PCcontrib","text":"Calculates plots shape variation along Principal Component axes.","code":""},{"path":"http://momx.github.io/Momocs/reference/PCcontrib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shape variation along PC axes — PCcontrib","text":"","code":"PCcontrib(PCA, ...)  # S3 method for PCA PCcontrib(PCA, nax, sd.r = c(-2, -1, -0.5, 0, 0.5, 1, 2), gap = 1, ...)"},{"path":"http://momx.github.io/Momocs/reference/PCcontrib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shape variation along PC axes — PCcontrib","text":"PCA PCA object ... additional parameter pass coo_draw nax range PCs plot (1 99pc total variance default) sd.r single range mean +/- sd values (eg: c(-1, 0, 1)) gap combined-Coe, adjustment variable gap shapes. (bug)Default 1 (whish never superimpose shapes), reduce get compact plot.","code":""},{"path":"http://momx.github.io/Momocs/reference/PCcontrib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shape variation along PC axes — PCcontrib","text":"(invisibly) list gg ggplot object shp list shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/PCcontrib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shape variation along PC axes — PCcontrib","text":"","code":"bot.p <- PCA(efourier(bot, 12)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details PCcontrib(bot.p, nax=1:3) #> Warning: `mutate_()` was deprecated in dplyr 0.7.0. #> ℹ Please use `mutate()` instead. #> ℹ See vignette('programming') for more help #> ℹ The deprecated feature was likely used in the Momocs package. #>   Please report the issue at <https://github.com/MomX/Momocs/issues>.  # \\donttest{ library(ggplot2) gg <- PCcontrib(bot.p, nax=1:8, sd.r=c(-5, -3, -2, -1, -0.5, 0, 0.5, 1, 2, 3, 5))  gg$gg + geom_polygon(fill=\"slategrey\", col=\"black\") + ggtitle(\"A nice title\")  # }"},{"path":"http://momx.github.io/Momocs/reference/Ptolemy.html","id":null,"dir":"Reference","previous_headings":"","what":"Ptolemaic ellipses and illustration of efourier — Ptolemy","title":"Ptolemaic ellipses and illustration of efourier — Ptolemy","text":"Calculate display Ptolemaic ellipses illustrates intuitively principle behing elliptical Fourier analysis.","code":""},{"path":"http://momx.github.io/Momocs/reference/Ptolemy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ptolemaic ellipses and illustration of efourier — Ptolemy","text":"","code":"Ptolemy(   coo,   t = seq(0, 2 * pi, length = 7)[-1],   nb.h = 3,   nb.pts = 360,   palette = col_heat,   zoom = 5/4,   legend = TRUE,   ... )"},{"path":"http://momx.github.io/Momocs/reference/Ptolemy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ptolemaic ellipses and illustration of efourier — Ptolemy","text":"coo matrix (x; y) coordinates t vector af angles (radians) display ellipses nb.h integer. number harmonics display nb.pts integer. number points use display shapes palette color palette zoom numeric zoom factor coo_plot legend logical. Whether plot legend box ... additional parameters feed coo_plot","code":""},{"path":"http://momx.github.io/Momocs/reference/Ptolemy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ptolemaic ellipses and illustration of efourier — Ptolemy","text":"drawing last plot","code":""},{"path":"http://momx.github.io/Momocs/reference/Ptolemy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ptolemaic ellipses and illustration of efourier — Ptolemy","text":"method inspired figures found followings papers. Kuhl FP, Giardina CR. 1982. Elliptic Fourier features closed contour. Computer Graphics Image Processing 18: 236-258. Crampton JS. 1995. Elliptical Fourier shape analysis fossil bivalves: practical considerations. Lethaia 28: 179-186.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/Ptolemy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ptolemaic ellipses and illustration of efourier — Ptolemy","text":"","code":"cat <- shapes[4] Ptolemy(cat, main=\"An EFT cat\")"},{"path":"http://momx.github.io/Momocs/reference/TraCoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Traditional morphometrics class — TraCoe","title":"Traditional morphometrics class — TraCoe","text":"Defines builder traditional measurement class Momocs. intended ease calculations, data handling multivariate statistics just ad Momocs' classes","code":""},{"path":"http://momx.github.io/Momocs/reference/TraCoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traditional morphometrics class — TraCoe","text":"","code":"TraCoe(coe = matrix(), fac = dplyr::tibble())"},{"path":"http://momx.github.io/Momocs/reference/TraCoe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traditional morphometrics class — TraCoe","text":"coe matrix measurements fac data.frame covariates","code":""},{"path":"http://momx.github.io/Momocs/reference/TraCoe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Traditional morphometrics class — TraCoe","text":"list class TraCoe","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/TraCoe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Traditional morphometrics class — TraCoe","text":"","code":"# let's (more or less) rebuild the flower dataset fl <- TraCoe(iris[, 1:4], dplyr::tibble(sp=iris$Species)) fl %>% PCA() %>% plot(\"sp\") #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/add_ldk.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds new landmarks on Out and Opn objects — add_ldk","title":"Adds new landmarks on Out and Opn objects — add_ldk","text":"Helps add new landmarks Coo object top existing ones. number landmarks must specified rows indices correspond nearest points clicked every outlines stored $ldk slot Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/add_ldk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds new landmarks on Out and Opn objects — add_ldk","text":"","code":"add_ldk(Coo, nb.ldk)"},{"path":"http://momx.github.io/Momocs/reference/add_ldk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds new landmarks on Out and Opn objects — add_ldk","text":"Coo Opn object nb.ldk number landmarks add every shape","code":""},{"path":"http://momx.github.io/Momocs/reference/add_ldk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds new landmarks on Out and Opn objects — add_ldk","text":"Opn object landmarks defined","code":""},{"path":"http://momx.github.io/Momocs/reference/add_ldk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds new landmarks on Out and Opn objects — add_ldk","text":"Note landmarks already defined, function equivalent def_ldk.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/add_ldk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds new landmarks on Out and Opn objects — add_ldk","text":"","code":"if (FALSE) { hearts <- slice(hearts, 1:5) # to make it shorter to try # click on 3 points, 5 times. hearts <- def_ldk(hearts, 3) # Don't forget to save the object returned by def_ldk... hearts2 <- add_ldk(hearts, 3) stack(hearts2) hearts2$ldk }"},{"path":"http://momx.github.io/Momocs/reference/arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange rows by variables — arrange","title":"Arrange rows by variables — arrange","text":"Arrange shapes variables, $fac. See examples ?dplyr::arrange.","code":""},{"path":"http://momx.github.io/Momocs/reference/arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange rows by variables — arrange","text":"","code":"arrange(.data, ...)"},{"path":"http://momx.github.io/Momocs/reference/arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange rows by variables — arrange","text":".data Coo, Coe, PCA object ... logical conditions","code":""},{"path":"http://momx.github.io/Momocs/reference/arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange rows by variables — arrange","text":"Momocs object class.","code":""},{"path":"http://momx.github.io/Momocs/reference/arrange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arrange rows by variables — arrange","text":"dplyr verbs maintained.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange rows by variables — arrange","text":"","code":"olea #> Opn (curves) #>   - 210 curves, 99 +/- 3 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk # we create a new column olea %>% mutate(id=1:length(.)) %$% fac$id #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 #> [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 #> [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #> [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 #> [163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 #> [181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 #> [199] 199 200 201 202 203 204 205 206 207 208 209 210 # same but now, shapes are arranged in a desc order, based on id olea %>% mutate(id=1:length(.)) %>% arrange(desc(id)) %$% fac$id #>   [1] 210 209 208 207 206 205 204 203 202 201 200 199 198 197 196 195 194 193 #>  [19] 192 191 190 189 188 187 186 185 184 183 182 181 180 179 178 177 176 175 #>  [37] 174 173 172 171 170 169 168 167 166 165 164 163 162 161 160 159 158 157 #>  [55] 156 155 154 153 152 151 150 149 148 147 146 145 144 143 142 141 140 139 #>  [73] 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 #>  [91] 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 #> [109] 102 101 100  99  98  97  96  95  94  93  92  91  90  89  88  87  86  85 #> [127]  84  83  82  81  80  79  78  77  76  75  74  73  72  71  70  69  68  67 #> [145]  66  65  64  63  62  61  60  59  58  57  56  55  54  53  52  51  50  49 #> [163]  48  47  46  45  44  43  42  41  40  39  38  37  36  35  34  33  32  31 #> [181]  30  29  28  27  26  25  24  23  22  21  20  19  18  17  16  15  14  13 #> [199]  12  11  10   9   8   7   6   5   4   3   2   1"},{"path":"http://momx.github.io/Momocs/reference/as_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn Momocs objects into tydy data_frames — as_df","title":"Turn Momocs objects into tydy data_frames — as_df","text":"Used particular compatibility tidyverse","code":""},{"path":"http://momx.github.io/Momocs/reference/as_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn Momocs objects into tydy data_frames — as_df","text":"","code":"as_df(x, ...)  # S3 method for Coo as_df(x, ...)  # S3 method for Coe as_df(x, ...)  # S3 method for PCA as_df(x, retain, ...)  # S3 method for LDA as_df(x, retain, ...)"},{"path":"http://momx.github.io/Momocs/reference/as_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn Momocs objects into tydy data_frames — as_df","text":"x object, typically Momocs object ... useless retain numeric use scree methods. Defaut . <1, enough axes retain proportion variance; >1, number axes.","code":""},{"path":"http://momx.github.io/Momocs/reference/as_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn Momocs objects into tydy data_frames — as_df","text":"dplyr::tibble()","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/as_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn Momocs objects into tydy data_frames — as_df","text":"","code":"# first, some (baby) objects b <- bot %>% coo_sample(12) bf <- b %>% efourier(5, norm=TRUE) # Coo object b %>% as_df #> # A tibble: 40 × 3 #>    coo            type   fake  #>    <named list>   <fct>  <fct> #>  1 <dbl [12 × 2]> whisky a     #>  2 <dbl [12 × 2]> whisky a     #>  3 <dbl [12 × 2]> whisky a     #>  4 <dbl [12 × 2]> whisky a     #>  5 <dbl [12 × 2]> whisky a     #>  6 <dbl [12 × 2]> whisky a     #>  7 <dbl [12 × 2]> whisky a     #>  8 <dbl [12 × 2]> whisky a     #>  9 <dbl [12 × 2]> whisky a     #> 10 <dbl [12 × 2]> whisky a     #> # ℹ 30 more rows # Coe object bf %>% as_df #> # A tibble: 40 × 22 #>    type   fake     A1      A2     A3      A4     A5    B1        B2       B3 #>    <fct>  <fct> <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <dbl>     <dbl>    <dbl> #>  1 whisky a         1 0.0120  0.0917 0.0124  0.0248     0 -0.00112  -0.00100 #>  2 whisky a         1 0.0110  0.0918 0.0124  0.0224     0 -0.00125  -0.00280 #>  3 whisky a         1 0.0213  0.0770 0.0240  0.0140     0 -0.00637   0.00124 #>  4 whisky a         1 0.00905 0.0960 0.00971 0.0263     0 -0.000555 -0.00204 #>  5 whisky a         1 0.0208  0.0913 0.0208  0.0193     0 -0.00108   0.00113 #>  6 whisky a         1 0.0200  0.0722 0.0213  0.0119     0 -0.00215   0.00349 #>  7 whisky a         1 0.00998 0.0912 0.0122  0.0248     0 -0.000172 -0.00124 #>  8 whisky a         1 0.0197  0.0845 0.0217  0.0164     0 -0.000464 -0.00144 #>  9 whisky a         1 0.0194  0.0864 0.0214  0.0191     0 -0.00288  -0.00196 #> 10 whisky a         1 0.0128  0.0929 0.0141  0.0236     0 -0.000998 -0.00170 #> # ℹ 30 more rows #> # ℹ 12 more variables: B4 <dbl>, B5 <dbl>, C1 <dbl>, C2 <dbl>, C3 <dbl>, #> #   C4 <dbl>, C5 <dbl>, D1 <dbl>, D2 <dbl>, D3 <dbl>, D4 <dbl>, D5 <dbl>  # PCA object bf %>% PCA %>% as_df     # all PCs by default #> `retain` is too ambitious. All axes returned #> # A tibble: 40 × 22 #>    type   fake      PC1      PC2       PC3       PC4       PC5      PC6      PC7 #>    <fct>  <fct>   <dbl>    <dbl>     <dbl>     <dbl>     <dbl>    <dbl>    <dbl> #>  1 whisky a     -0.0520 -0.0226   0.00517  -0.00866    1.31e-2 -1.09e-3 -5.06e-3 #>  2 whisky a     -0.0356  0.00197 -0.00880  -0.00800    1.67e-3  4.14e-3  3.06e-5 #>  3 whisky a      0.0811 -0.00232 -0.00202   0.00307    7.56e-4  3.99e-3 -3.37e-3 #>  4 whisky a     -0.0694 -0.00396 -0.0115   -0.00718   -1.72e-3  4.63e-3 -1.78e-3 #>  5 whisky a     -0.0146  0.0455  -0.00662   0.00305   -2.45e-5 -1.69e-2  1.31e-3 #>  6 whisky a      0.121  -0.0208  -0.00168  -0.0115     2.42e-3  2.48e-3  2.55e-3 #>  7 whisky a     -0.0428 -0.0170  -0.00359  -0.000329  -3.13e-3 -1.78e-3 -4.73e-3 #>  8 whisky a      0.0343  0.00950 -0.000959 -0.00764    6.12e-3 -2.03e-3  5.70e-4 #>  9 whisky a      0.0114  0.00619  0.00207   0.00298    5.44e-3  2.31e-4 -3.57e-3 #> 10 whisky a     -0.0440  0.00410 -0.00285  -0.00367    3.75e-3 -7.95e-4  2.55e-4 #> # ℹ 30 more rows #> # ℹ 13 more variables: PC8 <dbl>, PC9 <dbl>, PC10 <dbl>, PC11 <dbl>, #> #   PC12 <dbl>, PC13 <dbl>, PC14 <dbl>, PC15 <dbl>, PC16 <dbl>, PC17 <dbl>, #> #   PC18 <dbl>, PC19 <dbl>, PC20 <dbl> bf %>% PCA %>% as_df(2) # or 2 #> # A tibble: 40 × 4 #>    type   fake      PC1      PC2 #>    <fct>  <fct>   <dbl>    <dbl> #>  1 whisky a     -0.0520 -0.0226  #>  2 whisky a     -0.0356  0.00197 #>  3 whisky a      0.0811 -0.00232 #>  4 whisky a     -0.0694 -0.00396 #>  5 whisky a     -0.0146  0.0455  #>  6 whisky a      0.121  -0.0208  #>  7 whisky a     -0.0428 -0.0170  #>  8 whisky a      0.0343  0.00950 #>  9 whisky a      0.0114  0.00619 #> 10 whisky a     -0.0440  0.00410 #> # ℹ 30 more rows bf %>% PCA %>% as_df(0.99) # or enough for 99% #> # A tibble: 40 × 8 #>    type   fake      PC1      PC2       PC3       PC4        PC5       PC6 #>    <fct>  <fct>   <dbl>    <dbl>     <dbl>     <dbl>      <dbl>     <dbl> #>  1 whisky a     -0.0520 -0.0226   0.00517  -0.00866   0.0131    -0.00109  #>  2 whisky a     -0.0356  0.00197 -0.00880  -0.00800   0.00167    0.00414  #>  3 whisky a      0.0811 -0.00232 -0.00202   0.00307   0.000756   0.00399  #>  4 whisky a     -0.0694 -0.00396 -0.0115   -0.00718  -0.00172    0.00463  #>  5 whisky a     -0.0146  0.0455  -0.00662   0.00305  -0.0000245 -0.0169   #>  6 whisky a      0.121  -0.0208  -0.00168  -0.0115    0.00242    0.00248  #>  7 whisky a     -0.0428 -0.0170  -0.00359  -0.000329 -0.00313   -0.00178  #>  8 whisky a      0.0343  0.00950 -0.000959 -0.00764   0.00612   -0.00203  #>  9 whisky a      0.0114  0.00619  0.00207   0.00298   0.00544    0.000231 #> 10 whisky a     -0.0440  0.00410 -0.00285  -0.00367   0.00375   -0.000795 #> # ℹ 30 more rows  # LDA object bf %>% LDA(~fake) %>% as_df #> removed these collinear columns:A1, B1, C1 #> # A tibble: 40 × 8 #>    actual predicted posterior type   fake     LD1    LD2     LD3 #>    <fct>  <fct>         <dbl> <fct>  <fct>  <dbl>  <dbl>   <dbl> #>  1 a      a             1.00  whisky a     -4.19   1.84  -1.56   #>  2 a      a             0.997 whisky a     -2.74   1.68  -0.0456 #>  3 a      a             0.878 whisky a     -2.26   0.171 -0.293  #>  4 a      a             0.935 whisky a     -3.17  -0.527 -0.611  #>  5 a      a             0.997 whisky a     -2.97   1.54   0.665  #>  6 a      a             0.989 whisky a     -4.64  -0.937  0.385  #>  7 a      d             0.620 whisky a     -0.109  2.26  -0.0356 #>  8 a      a             0.999 whisky a     -4.20   0.797  0.520  #>  9 a      a             0.994 whisky a     -2.97   0.925 -0.640  #> 10 a      b             0.826 whisky a     -1.52  -0.749  0.113  #> # ℹ 30 more rows # same options apply"},{"path":"http://momx.github.io/Momocs/reference/at_least.html","id":null,"dir":"Reference","previous_headings":"","what":"Retain groups with at least n shapes — at_least","title":"Retain groups with at least n shapes — at_least","text":"Examples self-speaking.","code":""},{"path":"http://momx.github.io/Momocs/reference/at_least.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retain groups with at least n shapes — at_least","text":"","code":"at_least(x, fac, N)"},{"path":"http://momx.github.io/Momocs/reference/at_least.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retain groups with at least n shapes — at_least","text":"x Momocs object fac id name $fac column N minimal number individuals retain group","code":""},{"path":"http://momx.github.io/Momocs/reference/at_least.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retain groups with at least n shapes — at_least","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/at_least.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retain groups with at least n shapes — at_least","text":"N ambitious original object returned message","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/at_least.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retain groups with at least n shapes — at_least","text":"","code":"table(trilo$onto) #>  #>  a  b  c  d  #>  7 16 18  9  at_least(trilo, \"onto\", 9) #> Out (outlines) #>   - 43 outlines, 64 +/- 0 coords (in $coo) #>   - 1 classifiers (in $fac):  #> # A tibble: 43 × 1 #>   onto  #>   <fct> #> 1 b     #> 2 b     #> 3 b     #> 4 b     #> 5 b     #> 6 b     #> # ℹ 37 more rows #>   - also: $ldk at_least(trilo, \"onto\", 16) #> Out (outlines) #>   - 34 outlines, 64 +/- 0 coords (in $coo) #>   - 1 classifiers (in $fac):  #> # A tibble: 34 × 1 #>   onto  #>   <fct> #> 1 b     #> 2 b     #> 3 b     #> 4 b     #> 5 b     #> 6 b     #> # ℹ 28 more rows #>   - also: $ldk at_least(trilo, \"onto\", 2000) # too ambitious ! #> no group with at least 2000 indidivuals #> empty Out"},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"Useful convert (x; y) coordinates chain-coded coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"","code":"pix2chc(coo)  chc2pix(chc)"},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"coo (x; y) coordinates passed matrix chc chain coordinates","code":""},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"matrix numeric","code":""},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"Note function deprecated Momocs Momacs Momit fully operationnal.","code":""},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"Kuhl, F. P., & Giardina, C. R. (1982). Elliptic Fourier features closed contour. Computer Graphics Image Processing, 18(3), 236-258.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/babel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert (x; y) coordinates to chaincoded coordinates — pix2chc","text":"","code":"pix2chc(shapes[1]) %T>% print %>% # from pix to chc chc2pix()                         # and back #>   [1] 5 4 3 2 4 4 3 4 4 3 4 4 3 4 3 3 4 3 4 3 3 4 3 3 3 4 3 3 3 3 3 3 3 3 3 2 3 #>  [38] 3 3 2 3 3 2 3 3 2 3 2 3 2 3 3 2 3 2 2 3 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 #>  [75] 2 3 2 1 2 3 2 2 2 2 3 2 2 2 3 2 3 2 3 4 3 4 4 4 4 3 4 4 5 4 4 4 5 4 5 5 5 #> [112] 5 5 5 6 5 5 6 5 5 6 5 6 5 6 5 5 5 6 5 5 5 5 5 5 5 5 4 5 4 5 4 5 4 5 4 5 4 #> [149] 4 4 5 4 4 4 4 4 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #> [186] 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #> [223] 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #> [260] 1 0 1 1 1 1 1 2 1 2 1 2 1 1 2 1 2 1 1 2 1 1 1 2 1 1 1 1 1 0 1 1 0 1 0 1 0 #> [297] 1 0 1 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #> [334] 0 7 0 0 0 7 0 0 0 7 0 7 0 7 0 7 0 7 0 7 7 7 7 0 7 7 6 7 7 7 7 6 7 7 6 7 7 #> [371] 6 7 6 6 7 6 7 6 6 7 6 6 7 6 6 7 6 6 6 7 6 6 7 6 6 6 7 6 6 6 7 6 6 6 7 6 6 #> [408] 6 7 6 6 7 6 7 6 7 6 7 7 7 7 7 0 0 7 0 0 1 0 0 1 0 1 1 1 2 1 2 1 2 1 2 1 2 #> [445] 2 1 2 2 1 2 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 1 2 1 1 1 1 1 1 0 1 1 0 #> [482] 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #> [519] 0 0 1 7 1 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 2 2 3 2 2 2 #> [556] 2 2 1 2 1 1 0 0 0 0 1 7 0 7 0 7 0 7 7 0 7 7 0 7 7 7 0 7 7 0 7 7 7 0 7 7 0 #> [593] 7 7 0 7 7 7 0 7 7 0 7 7 7 0 7 7 0 7 7 0 7 7 7 0 7 7 0 7 7 7 0 7 7 0 7 7 0 #> [630] 7 7 7 0 7 7 0 7 7 7 0 7 7 0 7 7 0 7 7 7 0 7 7 0 7 5 5 5 4 5 5 4 5 5 5 4 5 #> [667] 5 4 5 5 5 4 5 5 4 5 5 4 5 5 5 4 5 5 4 5 5 5 4 5 5 4 5 5 4 5 5 5 4 5 5 4 5 #> [704] 5 4 5 5 5 4 5 5 5 4 5 5 4 5 5 4 5 5 5 4 5 5 4 5 5 4 5 5 5 4 5 5 4 5 5 4 5 #> [741] 4 4 4 5 3 4 3 3 3 3 2 2 2 2 2 2 2 1 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 #> [778] 2 2 2 1 2 2 1 3 4 4 3 4 4 4 4 4 4 4 4 5 4 4 4 5 4 5 5 6 6 5 6 6 5 6 5 6 6 #> [815] 5 6 5 6 6 5 6 5 6 6 5 6 5 6 5 6 5 6 5 5 6 5 6 5 5 5 6 5 5 5 5 5 5 5 5 5 5 #> [852] 4 5 4 5 5 4 5 4 5 4 4 5 4 4 4 5 4 4 4 4 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #>        [,1] [,2] #>   [1,]   -1   -1 #>   [2,]   -2   -1 #>   [3,]   -3    0 #>   [4,]   -3    1 #>   [5,]   -4    1 #>   [6,]   -5    1 #>   [7,]   -6    2 #>   [8,]   -7    2 #>   [9,]   -8    2 #>  [10,]   -9    3 #>  [11,]  -10    3 #>  [12,]  -11    3 #>  [13,]  -12    4 #>  [14,]  -13    4 #>  [15,]  -14    5 #>  [16,]  -15    6 #>  [17,]  -16    6 #>  [18,]  -17    7 #>  [19,]  -18    7 #>  [20,]  -19    8 #>  [21,]  -20    9 #>  [22,]  -21    9 #>  [23,]  -22   10 #>  [24,]  -23   11 #>  [25,]  -24   12 #>  [26,]  -25   12 #>  [27,]  -26   13 #>  [28,]  -27   14 #>  [29,]  -28   15 #>  [30,]  -29   16 #>  [31,]  -30   17 #>  [32,]  -31   18 #>  [33,]  -32   19 #>  [34,]  -33   20 #>  [35,]  -34   21 #>  [36,]  -34   22 #>  [37,]  -35   23 #>  [38,]  -36   24 #>  [39,]  -37   25 #>  [40,]  -37   26 #>  [41,]  -38   27 #>  [42,]  -39   28 #>  [43,]  -39   29 #>  [44,]  -40   30 #>  [45,]  -41   31 #>  [46,]  -41   32 #>  [47,]  -42   33 #>  [48,]  -42   34 #>  [49,]  -43   35 #>  [50,]  -43   36 #>  [51,]  -44   37 #>  [52,]  -45   38 #>  [53,]  -45   39 #>  [54,]  -46   40 #>  [55,]  -46   41 #>  [56,]  -46   42 #>  [57,]  -47   43 #>  [58,]  -47   44 #>  [59,]  -47   45 #>  [60,]  -48   46 #>  [61,]  -48   47 #>  [62,]  -48   48 #>  [63,]  -48   49 #>  [64,]  -48   50 #>  [65,]  -49   51 #>  [66,]  -49   52 #>  [67,]  -49   53 #>  [68,]  -49   54 #>  [69,]  -49   55 #>  [70,]  -50   56 #>  [71,]  -50   57 #>  [72,]  -50   58 #>  [73,]  -50   59 #>  [74,]  -50   60 #>  [75,]  -50   61 #>  [76,]  -51   62 #>  [77,]  -51   63 #>  [78,]  -50   64 #>  [79,]  -50   65 #>  [80,]  -51   66 #>  [81,]  -51   67 #>  [82,]  -51   68 #>  [83,]  -51   69 #>  [84,]  -51   70 #>  [85,]  -52   71 #>  [86,]  -52   72 #>  [87,]  -52   73 #>  [88,]  -52   74 #>  [89,]  -53   75 #>  [90,]  -53   76 #>  [91,]  -54   77 #>  [92,]  -54   78 #>  [93,]  -55   79 #>  [94,]  -56   79 #>  [95,]  -57   80 #>  [96,]  -58   80 #>  [97,]  -59   80 #>  [98,]  -60   80 #>  [99,]  -61   80 #> [100,]  -62   81 #> [101,]  -63   81 #> [102,]  -64   81 #> [103,]  -65   80 #> [104,]  -66   80 #> [105,]  -67   80 #> [106,]  -68   80 #> [107,]  -69   79 #> [108,]  -70   79 #> [109,]  -71   78 #> [110,]  -72   77 #> [111,]  -73   76 #> [112,]  -74   75 #> [113,]  -75   74 #> [114,]  -76   73 #> [115,]  -76   72 #> [116,]  -77   71 #> [117,]  -78   70 #> [118,]  -78   69 #> [119,]  -79   68 #> [120,]  -80   67 #> [121,]  -80   66 #> [122,]  -81   65 #> [123,]  -81   64 #> [124,]  -82   63 #> [125,]  -82   62 #> [126,]  -83   61 #> [127,]  -84   60 #> [128,]  -85   59 #> [129,]  -85   58 #> [130,]  -86   57 #> [131,]  -87   56 #> [132,]  -88   55 #> [133,]  -89   54 #> [134,]  -90   53 #> [135,]  -91   52 #> [136,]  -92   51 #> [137,]  -93   50 #> [138,]  -94   50 #> [139,]  -95   49 #> [140,]  -96   49 #> [141,]  -97   48 #> [142,]  -98   48 #> [143,]  -99   47 #> [144,] -100   47 #> [145,] -101   46 #> [146,] -102   46 #> [147,] -103   45 #> [148,] -104   45 #> [149,] -105   45 #> [150,] -106   45 #> [151,] -107   44 #> [152,] -108   44 #> [153,] -109   44 #> [154,] -110   44 #> [155,] -111   44 #> [156,] -112   44 #> [157,] -113   43 #> [158,] -114   43 #> [159,] -115   43 #> [160,] -116   43 #> [161,] -117   43 #> [162,] -118   43 #> [163,] -119   43 #> [164,] -120   43 #> [165,] -121   43 #> [166,] -122   43 #> [167,] -123   43 #> [168,] -124   43 #> [169,] -125   43 #> [170,] -126   43 #> [171,] -127   43 #> [172,] -128   43 #> [173,] -129   43 #> [174,] -130   43 #> [175,] -131   43 #> [176,] -132   43 #> [177,] -133   43 #> [178,] -134   43 #> [179,] -135   43 #> [180,] -136   43 #> [181,] -137   43 #> [182,] -138   43 #> [183,] -139   43 #> [184,] -140   43 #> [185,] -141   43 #> [186,] -142   43 #> [187,] -143   43 #> [188,] -144   43 #> [189,] -145   43 #> [190,] -146   44 #> [191,] -146   45 #> [192,] -146   46 #> [193,] -146   47 #> [194,] -146   48 #> [195,] -146   49 #> [196,] -146   50 #> [197,] -146   51 #> [198,] -146   52 #> [199,] -146   53 #> [200,] -146   54 #> [201,] -146   55 #> [202,] -146   56 #> [203,] -146   57 #> [204,] -146   58 #> [205,] -146   59 #> [206,] -146   60 #> [207,] -146   61 #> [208,] -146   62 #> [209,] -146   63 #> [210,] -146   64 #> [211,] -146   65 #> [212,] -146   66 #> [213,] -146   67 #> [214,] -146   68 #> [215,] -146   69 #> [216,] -146   70 #> [217,] -146   71 #> [218,] -146   72 #> [219,] -146   73 #> [220,] -146   74 #> [221,] -146   75 #> [222,] -146   76 #> [223,] -146   77 #> [224,] -146   78 #> [225,] -146   79 #> [226,] -146   80 #> [227,] -146   81 #> [228,] -146   82 #> [229,] -146   83 #> [230,] -146   84 #> [231,] -146   85 #> [232,] -146   86 #> [233,] -145   87 #> [234,] -144   87 #> [235,] -143   87 #> [236,] -142   87 #> [237,] -141   87 #> [238,] -140   87 #> [239,] -139   87 #> [240,] -138   87 #> [241,] -137   87 #> [242,] -136   87 #> [243,] -135   87 #> [244,] -134   87 #> [245,] -133   87 #> [246,] -132   87 #> [247,] -131   87 #> [248,] -130   87 #> [249,] -129   87 #> [250,] -128   87 #> [251,] -127   87 #> [252,] -126   87 #> [253,] -125   87 #> [254,] -124   87 #> [255,] -123   87 #> [256,] -122   87 #> [257,] -121   87 #> [258,] -120   87 #> [259,] -119   87 #> [260,] -118   88 #> [261,] -117   88 #> [262,] -116   89 #> [263,] -115   90 #> [264,] -114   91 #> [265,] -113   92 #> [266,] -112   93 #> [267,] -112   94 #> [268,] -111   95 #> [269,] -111   96 #> [270,] -110   97 #> [271,] -110   98 #> [272,] -109   99 #> [273,] -108  100 #> [274,] -108  101 #> [275,] -107  102 #> [276,] -107  103 #> [277,] -106  104 #> [278,] -105  105 #> [279,] -105  106 #> [280,] -104  107 #> [281,] -103  108 #> [282,] -102  109 #> [283,] -102  110 #> [284,] -101  111 #> [285,] -100  112 #> [286,]  -99  113 #> [287,]  -98  114 #> [288,]  -97  115 #> [289,]  -96  115 #> [290,]  -95  116 #> [291,]  -94  117 #> [292,]  -93  117 #> [293,]  -92  118 #> [294,]  -91  118 #> [295,]  -90  119 #> [296,]  -89  119 #> [297,]  -88  120 #> [298,]  -87  120 #> [299,]  -86  121 #> [300,]  -85  121 #> [301,]  -84  122 #> [302,]  -83  122 #> [303,]  -82  122 #> [304,]  -81  122 #> [305,]  -80  123 #> [306,]  -79  123 #> [307,]  -78  123 #> [308,]  -77  123 #> [309,]  -76  123 #> [310,]  -75  124 #> [311,]  -74  124 #> [312,]  -73  124 #> [313,]  -72  124 #> [314,]  -71  124 #> [315,]  -70  124 #> [316,]  -69  124 #> [317,]  -68  124 #> [318,]  -67  124 #> [319,]  -66  124 #> [320,]  -65  124 #> [321,]  -64  124 #> [322,]  -63  124 #> [323,]  -62  124 #> [324,]  -61  124 #> [325,]  -60  124 #> [326,]  -59  124 #> [327,]  -58  124 #> [328,]  -57  124 #> [329,]  -56  124 #> [330,]  -55  124 #> [331,]  -54  124 #> [332,]  -53  124 #> [333,]  -52  124 #> [334,]  -51  124 #> [335,]  -50  123 #> [336,]  -49  123 #> [337,]  -48  123 #> [338,]  -47  123 #> [339,]  -46  122 #> [340,]  -45  122 #> [341,]  -44  122 #> [342,]  -43  122 #> [343,]  -42  121 #> [344,]  -41  121 #> [345,]  -40  120 #> [346,]  -39  120 #> [347,]  -38  119 #> [348,]  -37  119 #> [349,]  -36  118 #> [350,]  -35  118 #> [351,]  -34  117 #> [352,]  -33  117 #> [353,]  -32  116 #> [354,]  -31  115 #> [355,]  -30  114 #> [356,]  -29  113 #> [357,]  -28  113 #> [358,]  -27  112 #> [359,]  -26  111 #> [360,]  -26  110 #> [361,]  -25  109 #> [362,]  -24  108 #> [363,]  -23  107 #> [364,]  -22  106 #> [365,]  -22  105 #> [366,]  -21  104 #> [367,]  -20  103 #> [368,]  -20  102 #> [369,]  -19  101 #> [370,]  -18  100 #> [371,]  -18   99 #> [372,]  -17   98 #> [373,]  -17   97 #> [374,]  -17   96 #> [375,]  -16   95 #> [376,]  -16   94 #> [377,]  -15   93 #> [378,]  -15   92 #> [379,]  -15   91 #> [380,]  -14   90 #> [381,]  -14   89 #> [382,]  -14   88 #> [383,]  -13   87 #> [384,]  -13   86 #> [385,]  -13   85 #> [386,]  -12   84 #> [387,]  -12   83 #> [388,]  -12   82 #> [389,]  -12   81 #> [390,]  -11   80 #> [391,]  -11   79 #> [392,]  -11   78 #> [393,]  -10   77 #> [394,]  -10   76 #> [395,]  -10   75 #> [396,]  -10   74 #> [397,]   -9   73 #> [398,]   -9   72 #> [399,]   -9   71 #> [400,]   -9   70 #> [401,]   -8   69 #> [402,]   -8   68 #> [403,]   -8   67 #> [404,]   -8   66 #> [405,]   -7   65 #> [406,]   -7   64 #> [407,]   -7   63 #> [408,]   -7   62 #> [409,]   -6   61 #> [410,]   -6   60 #> [411,]   -6   59 #> [412,]   -5   58 #> [413,]   -5   57 #> [414,]   -4   56 #> [415,]   -4   55 #> [416,]   -3   54 #> [417,]   -3   53 #> [418,]   -2   52 #> [419,]   -1   51 #> [420,]    0   50 #> [421,]    1   49 #> [422,]    2   48 #> [423,]    3   48 #> [424,]    4   48 #> [425,]    5   47 #> [426,]    6   47 #> [427,]    7   47 #> [428,]    8   48 #> [429,]    9   48 #> [430,]   10   48 #> [431,]   11   49 #> [432,]   12   49 #> [433,]   13   50 #> [434,]   14   51 #> [435,]   15   52 #> [436,]   15   53 #> [437,]   16   54 #> [438,]   16   55 #> [439,]   17   56 #> [440,]   17   57 #> [441,]   18   58 #> [442,]   18   59 #> [443,]   19   60 #> [444,]   19   61 #> [445,]   19   62 #> [446,]   20   63 #> [447,]   20   64 #> [448,]   20   65 #> [449,]   21   66 #> [450,]   21   67 #> [451,]   21   68 #> [452,]   22   69 #> [453,]   22   70 #> [454,]   22   71 #> [455,]   23   72 #> [456,]   23   73 #> [457,]   24   74 #> [458,]   24   75 #> [459,]   24   76 #> [460,]   25   77 #> [461,]   25   78 #> [462,]   26   79 #> [463,]   26   80 #> [464,]   27   81 #> [465,]   27   82 #> [466,]   28   83 #> [467,]   28   84 #> [468,]   29   85 #> [469,]   30   86 #> [470,]   31   87 #> [471,]   31   88 #> [472,]   32   89 #> [473,]   33   90 #> [474,]   34   91 #> [475,]   35   92 #> [476,]   36   93 #> [477,]   37   94 #> [478,]   38   94 #> [479,]   39   95 #> [480,]   40   96 #> [481,]   41   96 #> [482,]   42   97 #> [483,]   43   97 #> [484,]   44   98 #> [485,]   45   98 #> [486,]   46   99 #> [487,]   47   99 #> [488,]   48   99 #> [489,]   49  100 #> [490,]   50  100 #> [491,]   51  100 #> [492,]   52  100 #> [493,]   53  101 #> [494,]   54  101 #> [495,]   55  101 #> [496,]   56  101 #> [497,]   57  101 #> [498,]   58  101 #> [499,]   59  101 #> [500,]   60  101 #> [501,]   61  101 #> [502,]   62  101 #> [503,]   63  101 #> [504,]   64  101 #> [505,]   65  101 #> [506,]   66  101 #> [507,]   67  101 #> [508,]   68  101 #> [509,]   69  101 #> [510,]   70  101 #> [511,]   71  101 #> [512,]   72  101 #> [513,]   73  101 #> [514,]   74  101 #> [515,]   75  101 #> [516,]   76  101 #> [517,]   77  101 #> [518,]   78  101 #> [519,]   79  101 #> [520,]   80  101 #> [521,]   81  102 #> [522,]   82  101 #> [523,]   83  102 #> [524,]   82  103 #> [525,]   82  104 #> [526,]   82  105 #> [527,]   82  106 #> [528,]   81  107 #> [529,]   81  108 #> [530,]   81  109 #> [531,]   81  110 #> [532,]   80  111 #> [533,]   80  112 #> [534,]   80  113 #> [535,]   80  114 #> [536,]   79  115 #> [537,]   79  116 #> [538,]   79  117 #> [539,]   78  118 #> [540,]   78  119 #> [541,]   78  120 #> [542,]   78  121 #> [543,]   77  122 #> [544,]   77  123 #> [545,]   77  124 #> [546,]   77  125 #> [547,]   76  126 #> [548,]   76  127 #> [549,]   76  128 #> [550,]   76  129 #> [551,]   76  130 #> [552,]   75  131 #> [553,]   75  132 #> [554,]   75  133 #> [555,]   75  134 #> [556,]   75  135 #> [557,]   75  136 #> [558,]   76  137 #> [559,]   76  138 #> [560,]   77  139 #> [561,]   78  140 #> [562,]   79  140 #> [563,]   80  140 #> [564,]   81  140 #> [565,]   82  140 #> [566,]   83  141 #> [567,]   84  140 #> [568,]   85  140 #> [569,]   86  139 #> [570,]   87  139 #> [571,]   88  138 #> [572,]   89  138 #> [573,]   90  137 #> [574,]   91  136 #> [575,]   92  136 #> [576,]   93  135 #> [577,]   94  134 #> [578,]   95  134 #> [579,]   96  133 #> [580,]   97  132 #> [581,]   98  131 #> [582,]   99  131 #> [583,]  100  130 #> [584,]  101  129 #> [585,]  102  129 #> [586,]  103  128 #> [587,]  104  127 #> [588,]  105  126 #> [589,]  106  126 #> [590,]  107  125 #> [591,]  108  124 #> [592,]  109  124 #> [593,]  110  123 #> [594,]  111  122 #> [595,]  112  122 #> [596,]  113  121 #> [597,]  114  120 #> [598,]  115  119 #> [599,]  116  119 #> [600,]  117  118 #> [601,]  118  117 #> [602,]  119  117 #> [603,]  120  116 #> [604,]  121  115 #> [605,]  122  114 #> [606,]  123  114 #> [607,]  124  113 #> [608,]  125  112 #> [609,]  126  112 #> [610,]  127  111 #> [611,]  128  110 #> [612,]  129  110 #> [613,]  130  109 #> [614,]  131  108 #> [615,]  132  107 #> [616,]  133  107 #> [617,]  134  106 #> [618,]  135  105 #> [619,]  136  105 #> [620,]  137  104 #> [621,]  138  103 #> [622,]  139  102 #> [623,]  140  102 #> [624,]  141  101 #> [625,]  142  100 #> [626,]  143  100 #> [627,]  144   99 #> [628,]  145   98 #> [629,]  146   98 #> [630,]  147   97 #> [631,]  148   96 #> [632,]  149   95 #> [633,]  150   95 #> [634,]  151   94 #> [635,]  152   93 #> [636,]  153   93 #> [637,]  154   92 #> [638,]  155   91 #> [639,]  156   90 #> [640,]  157   90 #> [641,]  158   89 #> [642,]  159   88 #> [643,]  160   88 #> [644,]  161   87 #> [645,]  162   86 #> [646,]  163   86 #> [647,]  164   85 #> [648,]  165   84 #> [649,]  166   83 #> [650,]  167   83 #> [651,]  168   82 #> [652,]  169   81 #> [653,]  170   81 #> [654,]  171   80 #> [655,]  170   79 #> [656,]  169   78 #> [657,]  168   77 #> [658,]  167   77 #> [659,]  166   76 #> [660,]  165   75 #> [661,]  164   75 #> [662,]  163   74 #> [663,]  162   73 #> [664,]  161   72 #> [665,]  160   72 #> [666,]  159   71 #> [667,]  158   70 #> [668,]  157   70 #> [669,]  156   69 #> [670,]  155   68 #> [671,]  154   67 #> [672,]  153   67 #> [673,]  152   66 #> [674,]  151   65 #> [675,]  150   65 #> [676,]  149   64 #> [677,]  148   63 #> [678,]  147   63 #> [679,]  146   62 #> [680,]  145   61 #> [681,]  144   60 #> [682,]  143   60 #> [683,]  142   59 #> [684,]  141   58 #> [685,]  140   58 #> [686,]  139   57 #> [687,]  138   56 #> [688,]  137   55 #> [689,]  136   55 #> [690,]  135   54 #> [691,]  134   53 #> [692,]  133   53 #> [693,]  132   52 #> [694,]  131   51 #> [695,]  130   51 #> [696,]  129   50 #> [697,]  128   49 #> [698,]  127   48 #> [699,]  126   48 #> [700,]  125   47 #> [701,]  124   46 #> [702,]  123   46 #> [703,]  122   45 #> [704,]  121   44 #> [705,]  120   44 #> [706,]  119   43 #> [707,]  118   42 #> [708,]  117   41 #> [709,]  116   41 #> [710,]  115   40 #> [711,]  114   39 #> [712,]  113   38 #> [713,]  112   38 #> [714,]  111   37 #> [715,]  110   36 #> [716,]  109   36 #> [717,]  108   35 #> [718,]  107   34 #> [719,]  106   34 #> [720,]  105   33 #> [721,]  104   32 #> [722,]  103   31 #> [723,]  102   31 #> [724,]  101   30 #> [725,]  100   29 #> [726,]   99   29 #> [727,]   98   28 #> [728,]   97   27 #> [729,]   96   27 #> [730,]   95   26 #> [731,]   94   25 #> [732,]   93   24 #> [733,]   92   24 #> [734,]   91   23 #> [735,]   90   22 #> [736,]   89   22 #> [737,]   88   21 #> [738,]   87   20 #> [739,]   86   20 #> [740,]   85   19 #> [741,]   84   19 #> [742,]   83   19 #> [743,]   82   19 #> [744,]   81   18 #> [745,]   80   19 #> [746,]   79   19 #> [747,]   78   20 #> [748,]   77   21 #> [749,]   76   22 #> [750,]   75   23 #> [751,]   75   24 #> [752,]   75   25 #> [753,]   75   26 #> [754,]   75   27 #> [755,]   75   28 #> [756,]   75   29 #> [757,]   75   30 #> [758,]   76   31 #> [759,]   76   32 #> [760,]   76   33 #> [761,]   77   34 #> [762,]   77   35 #> [763,]   77   36 #> [764,]   77   37 #> [765,]   78   38 #> [766,]   78   39 #> [767,]   78   40 #> [768,]   78   41 #> [769,]   79   42 #> [770,]   79   43 #> [771,]   79   44 #> [772,]   79   45 #> [773,]   80   46 #> [774,]   80   47 #> [775,]   80   48 #> [776,]   80   49 #> [777,]   81   50 #> [778,]   81   51 #> [779,]   81   52 #> [780,]   81   53 #> [781,]   82   54 #> [782,]   82   55 #> [783,]   82   56 #> [784,]   83   57 #> [785,]   82   58 #> [786,]   81   58 #> [787,]   80   58 #> [788,]   79   59 #> [789,]   78   59 #> [790,]   77   59 #> [791,]   76   59 #> [792,]   75   59 #> [793,]   74   59 #> [794,]   73   59 #> [795,]   72   59 #> [796,]   71   59 #> [797,]   70   58 #> [798,]   69   58 #> [799,]   68   58 #> [800,]   67   58 #> [801,]   66   57 #> [802,]   65   57 #> [803,]   64   56 #> [804,]   63   55 #> [805,]   63   54 #> [806,]   63   53 #> [807,]   62   52 #> [808,]   62   51 #> [809,]   62   50 #> [810,]   61   49 #> [811,]   61   48 #> [812,]   60   47 #> [813,]   60   46 #> [814,]   60   45 #> [815,]   59   44 #> [816,]   59   43 #> [817,]   58   42 #> [818,]   58   41 #> [819,]   58   40 #> [820,]   57   39 #> [821,]   57   38 #> [822,]   56   37 #> [823,]   56   36 #> [824,]   56   35 #> [825,]   55   34 #> [826,]   55   33 #> [827,]   54   32 #> [828,]   54   31 #> [829,]   53   30 #> [830,]   53   29 #> [831,]   52   28 #> [832,]   52   27 #> [833,]   51   26 #> [834,]   50   25 #> [835,]   50   24 #> [836,]   49   23 #> [837,]   49   22 #> [838,]   48   21 #> [839,]   47   20 #> [840,]   46   19 #> [841,]   46   18 #> [842,]   45   17 #> [843,]   44   16 #> [844,]   43   15 #> [845,]   42   14 #> [846,]   41   13 #> [847,]   40   12 #> [848,]   39   11 #> [849,]   38   10 #> [850,]   37    9 #> [851,]   36    8 #> [852,]   35    8 #> [853,]   34    7 #> [854,]   33    7 #> [855,]   32    6 #> [856,]   31    5 #> [857,]   30    5 #> [858,]   29    4 #> [859,]   28    4 #> [860,]   27    3 #> [861,]   26    3 #> [862,]   25    3 #> [863,]   24    2 #> [864,]   23    2 #> [865,]   22    2 #> [866,]   21    2 #> [867,]   20    1 #> [868,]   19    1 #> [869,]   18    1 #> [870,]   17    1 #> [871,]   16    1 #> [872,]   15    0 #> [873,]   14    0 #> [874,]   13    0 #> [875,]   12    0 #> [876,]   11    0 #> [877,]   10    0 #> [878,]    9    0 #> [879,]    8    0 #> [880,]    7    0 #> [881,]    6    0 #> [882,]    5    0 #> [883,]    4    0 #> [884,]    3    0 #> [885,]    2    0 #> [886,]    1    0 #> [887,]    0    0"},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Bezier coefficients from a shape — bezier","title":"Calculates Bezier coefficients from a shape — bezier","text":"Calculates Bezier coefficients shape","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Bezier coefficients from a shape — bezier","text":"","code":"bezier(coo, n)"},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Bezier coefficients from a shape — bezier","text":"coo matrix list (x; y) coordinates n degree, default number coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Bezier coefficients from a shape — bezier","text":"list components: $J matrix Bezier coefficients $B matrix Bezier vertices.","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculates Bezier coefficients from a shape — bezier","text":"Directly borrowed Claude (2008), also called bezier . implemented open outlines may useful purposes.","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates Bezier coefficients from a shape — bezier","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/bezier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Bezier coefficients from a shape — bezier","text":"","code":"set.seed(34) x <- coo_sample(efourier_shape(), 5)  plot(x, ylim=c(-3, 3), asp=1, type='b', pch=20) b <- bezier(x) bi <- bezier_i(b$B) lines(bi, col='red')"},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates a shape from Bezier coefficients — bezier_i","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"Calculates shape Bezier coefficients","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"","code":"bezier_i(B, nb.pts = 120)"},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"B matrix Bezier vertices, produced bezier nb.pts number points sample along curve.","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"matrix (x; y) coordinates","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"Directly borrowed Claude (2008), called beziercurve . implemented open outlines may useful purposes.","code":""},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/bezier_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates a shape from Bezier coefficients — bezier_i","text":"","code":"set.seed(34) x <- coo_sample(efourier_shape(), 5)  plot(x, ylim=c(-3, 3), asp=1, type='b', pch=20) b <- bezier(x) bi <- bezier_i(b$B) lines(bi, col='red')"},{"path":"http://momx.github.io/Momocs/reference/boxplot.OutCoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of morphometric coefficients — boxplot.OutCoe","title":"Boxplot of morphometric coefficients — boxplot.OutCoe","text":"Explores distribution coefficient values.","code":""},{"path":"http://momx.github.io/Momocs/reference/boxplot.OutCoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of morphometric coefficients — boxplot.OutCoe","text":"","code":"# S3 method for OutCoe boxplot(x, ...)"},{"path":"http://momx.github.io/Momocs/reference/boxplot.OutCoe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of morphometric coefficients — boxplot.OutCoe","text":"x Coe object ... useless ","code":""},{"path":"http://momx.github.io/Momocs/reference/boxplot.OutCoe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot of morphometric coefficients — boxplot.OutCoe","text":"ggplot2 object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/boxplot.OutCoe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of morphometric coefficients — boxplot.OutCoe","text":"","code":"# on OutCoe bot %>% efourier(9) %>% rm_harm(1) %>% boxplot() #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details   data(olea) op <- opoly(olea) #> 'nb.pts' missing and set to 91 #> 'degree' missing and set to 5 boxplot(op)"},{"path":"http://momx.github.io/Momocs/reference/boxplot.PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot on PCA objects — boxplot.PCA","title":"Boxplot on PCA objects — boxplot.PCA","text":"Boxplot PCA objects","code":""},{"path":"http://momx.github.io/Momocs/reference/boxplot.PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot on PCA objects — boxplot.PCA","text":"","code":"# S3 method for PCA boxplot(x, fac = NULL, nax, ...)"},{"path":"http://momx.github.io/Momocs/reference/boxplot.PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot on PCA objects — boxplot.PCA","text":"x PCA, typically obtained PCA fac factor, name column id $fac slot nax range PC plot (1 99pc total variance default) ... useless ","code":""},{"path":"http://momx.github.io/Momocs/reference/boxplot.PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot on PCA objects — boxplot.PCA","text":"ggplot object","code":""},{"path":"http://momx.github.io/Momocs/reference/boxplot.PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot on PCA objects — boxplot.PCA","text":"","code":"bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.p <- PCA(bot.f) boxplot(bot.p) #> `prop` not provided. All axes returned  p <- boxplot(bot.p, 1) #> `prop` not provided. All axes returned #p +  theme_minimal() + scale_fill_grey() #p + facet_wrap(~PC, scales = \"free\")"},{"path":"http://momx.github.io/Momocs/reference/breed.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitters Coe (and others) objects — breed","title":"Jitters Coe (and others) objects — breed","text":"methods applies column-wise coe Coe object relies function can used matrix. simply uses rnorm mean sd calculated every column (row). Coe object, every colum, randomly generates coefficients values centered mean column, sd equals standard deviates multiplied rate.","code":""},{"path":"http://momx.github.io/Momocs/reference/breed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitters Coe (and others) objects — breed","text":"","code":"breed(x, ...)  # S3 method for default breed(x, fac, margin = 2, size, rate = 1, ...)  # S3 method for Coe breed(x, fac, size, rate = 1, ...)"},{"path":"http://momx.github.io/Momocs/reference/breed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitters Coe (and others) objects — breed","text":"x object permute ... useless fac column, formula column id $fac margin numeric whether 1 2 (rows columns) size numeric required size final object, size default rate numeric number sd rnorm, 1 default.","code":""},{"path":"http://momx.github.io/Momocs/reference/breed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitters Coe (and others) objects — breed","text":"Coe object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/breed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitters Coe (and others) objects — breed","text":"","code":"m <- matrix(1:12, nrow=3) breed(m, margin=2, size=4) #>          [,1]     [,2]     [,3]      [,4] #> [1,] 2.670620 4.597120 8.401255  9.157338 #> [2,] 1.150985 5.719108 9.356390 10.720259 #> [3,] 3.066805 4.819941 8.019227  9.469230 #> [4,] 1.992539 6.046191 7.530582 13.546154 breed(m, margin=1, size=10) #>              [,1]     [,2]       [,3] #>  [1,]  1.30970018 1.769321 -1.5597512 #>  [2,] -0.01744358 6.486750  0.5512378 #>  [3,]  7.13301779 9.320377  7.0219317 #>  [4,]  8.52622563 4.558342 10.8915399 #>  [5,]  2.01645375 7.194958  8.0983293 #>  [6,]  3.54852287 6.733022 14.7962926 #>  [7,]  4.57290872 6.963033  4.4282392 #>  [8,] 10.02364430 6.407625 10.4446975 #>  [9,]  2.40882230 3.826442 11.5882377 #> [10,] 10.19002487 4.197451  3.2041191  bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.m <- breed(bot.f, size=80) bot.m %>% PCA %>% plot #> will be deprecated soon, see ?plot_PCA   # breed fac wise # bot.f %>%  breed(~type, size=50) %>% PCA %>% plot(~type)"},{"path":"http://momx.github.io/Momocs/reference/bridges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between different classes — bridges","title":"Convert between different classes — bridges","text":"Convert different classes","code":""},{"path":"http://momx.github.io/Momocs/reference/bridges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between different classes — bridges","text":"","code":"l2m(l)  m2l(m)  d2m(d)  m2d(m)  l2a(l)  a2l(a)  a2m(a)  m2a(m)  m2ll(m, index = NULL)"},{"path":"http://momx.github.io/Momocs/reference/bridges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between different classes — bridges","text":"l list x y coordinates components m matrix (x; y) coordinates d data.frame two columns array (x; y) coordinates index numeric, number coordinates every slice","code":""},{"path":"http://momx.github.io/Momocs/reference/bridges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between different classes — bridges","text":"data required class","code":""},{"path":"http://momx.github.io/Momocs/reference/bridges.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert between different classes — bridges","text":"a2m/m2a change, essence, dimension data. m2ll used internally hanle coo cur Ldk objects may useful elsewhere","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/bridges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between different classes — bridges","text":"","code":"# matrix/list wings[1] %>% coo_sample(4) %>%    m2l() %T>% print %>%        # matrix to list    l2m()                       # and back #> $x #> [1] -0.4933  0.2645  0.0424 -0.1768 #>  #> $y #> [1]  0.0130  0.0261 -0.0966  0.0341 #>  #>            x       y #> [1,] -0.4933  0.0130 #> [2,]  0.2645  0.0261 #> [3,]  0.0424 -0.0966 #> [4,] -0.1768  0.0341  # data.frame/matrix wings[1] %>% coo_sample(4) %>%    m2d() %T>% print %>%        # matrix to data.frame    d2m                         # and back #> # A tibble: 4 × 2 #>         x       y #>     <dbl>   <dbl> #> 1 -0.493   0.013  #> 2  0.264   0.0261 #> 3  0.0424 -0.0966 #> 4 -0.177   0.0341 #>            x       y #> [1,] -0.4933  0.0130 #> [2,]  0.2645  0.0261 #> [3,]  0.0424 -0.0966 #> [4,] -0.1768  0.0341   # list/array  wings %>% slice(1:2) %$%  coo %>% l2a %T>% print %>%    # list to array  a2l                           # and back #> , , AN1 #>  #>          x       y #> 1  -0.4933  0.0130 #> 2  -0.0777  0.0832 #> 3   0.2231  0.0861 #> 4   0.2641  0.0462 #> 5   0.2645  0.0261 #> 6   0.2471  0.0003 #> 7   0.2311 -0.0228 #> 8   0.2040 -0.0452 #> 9   0.1282 -0.0742 #> 10  0.0424 -0.0966 #> 11 -0.0674 -0.1108 #> 12 -0.4102 -0.0163 #> 13 -0.3140  0.0318 #> 14 -0.1768  0.0341 #> 15  0.0715  0.0509 #> 16 -0.0540  0.0238 #> 17  0.0575 -0.0059 #> 18 -0.1401 -0.0240 #>  #> , , AN2 #>  #>          x       y #> 1  -0.4814  0.0135 #> 2  -0.0058  0.0780 #> 3   0.2345  0.0644 #> 4   0.2460  0.0467 #> 5   0.2487  0.0281 #> 6   0.2430  0.0115 #> 7   0.2316 -0.0039 #> 8   0.1956 -0.0305 #> 9   0.1462 -0.0545 #> 10  0.0483 -0.0866 #> 11 -0.0520 -0.1047 #> 12 -0.4016 -0.0250 #> 13 -0.3868  0.0166 #> 14 -0.1808  0.0229 #> 15  0.0484  0.0405 #> 16 -0.0519  0.0164 #> 17  0.0623 -0.0047 #> 18 -0.1444 -0.0286 #>  #> [[1]] #>          x       y #> 1  -0.4933  0.0130 #> 2  -0.0777  0.0832 #> 3   0.2231  0.0861 #> 4   0.2641  0.0462 #> 5   0.2645  0.0261 #> 6   0.2471  0.0003 #> 7   0.2311 -0.0228 #> 8   0.2040 -0.0452 #> 9   0.1282 -0.0742 #> 10  0.0424 -0.0966 #> 11 -0.0674 -0.1108 #> 12 -0.4102 -0.0163 #> 13 -0.3140  0.0318 #> 14 -0.1768  0.0341 #> 15  0.0715  0.0509 #> 16 -0.0540  0.0238 #> 17  0.0575 -0.0059 #> 18 -0.1401 -0.0240 #>  #> [[2]] #>          x       y #> 1  -0.4814  0.0135 #> 2  -0.0058  0.0780 #> 3   0.2345  0.0644 #> 4   0.2460  0.0467 #> 5   0.2487  0.0281 #> 6   0.2430  0.0115 #> 7   0.2316 -0.0039 #> 8   0.1956 -0.0305 #> 9   0.1462 -0.0545 #> 10  0.0483 -0.0866 #> 11 -0.0520 -0.1047 #> 12 -0.4016 -0.0250 #> 13 -0.3868  0.0166 #> 14 -0.1808  0.0229 #> 15  0.0484  0.0405 #> 16 -0.0519  0.0164 #> 17  0.0623 -0.0047 #> 18 -0.1444 -0.0286 #>    # array/matrix  wings %>% slice(1:2) %$%  l2a(coo) %>%                  # and array (from a list)  a2m %T>% print %>%            # to matrix  m2a                           # and back #>          x1      x2     x3     x4     x5     x6     x7     x8     x9    x10 #> AN1 -0.4933 -0.0777 0.2231 0.2641 0.2645 0.2471 0.2311 0.2040 0.1282 0.0424 #> AN2 -0.4814 -0.0058 0.2345 0.2460 0.2487 0.2430 0.2316 0.1956 0.1462 0.0483 #>         x11     x12     x13     x14    x15     x16    x17     x18     y1     y2 #> AN1 -0.0674 -0.4102 -0.3140 -0.1768 0.0715 -0.0540 0.0575 -0.1401 0.0130 0.0832 #> AN2 -0.0520 -0.4016 -0.3868 -0.1808 0.0484 -0.0519 0.0623 -0.1444 0.0135 0.0780 #>         y3     y4     y5     y6      y7      y8      y9     y10     y11     y12 #> AN1 0.0861 0.0462 0.0261 0.0003 -0.0228 -0.0452 -0.0742 -0.0966 -0.1108 -0.0163 #> AN2 0.0644 0.0467 0.0281 0.0115 -0.0039 -0.0305 -0.0545 -0.0866 -0.1047 -0.0250 #>        y13    y14    y15    y16     y17     y18 #> AN1 0.0318 0.0341 0.0509 0.0238 -0.0059 -0.0240 #> AN2 0.0166 0.0229 0.0405 0.0164 -0.0047 -0.0286 #> , , AN1 #>  #>          x       y #> 1  -0.4933  0.0130 #> 2  -0.0777  0.0832 #> 3   0.2231  0.0861 #> 4   0.2641  0.0462 #> 5   0.2645  0.0261 #> 6   0.2471  0.0003 #> 7   0.2311 -0.0228 #> 8   0.2040 -0.0452 #> 9   0.1282 -0.0742 #> 10  0.0424 -0.0966 #> 11 -0.0674 -0.1108 #> 12 -0.4102 -0.0163 #> 13 -0.3140  0.0318 #> 14 -0.1768  0.0341 #> 15  0.0715  0.0509 #> 16 -0.0540  0.0238 #> 17  0.0575 -0.0059 #> 18 -0.1401 -0.0240 #>  #> , , AN2 #>  #>          x       y #> 1  -0.4814  0.0135 #> 2  -0.0058  0.0780 #> 3   0.2345  0.0644 #> 4   0.2460  0.0467 #> 5   0.2487  0.0281 #> 6   0.2430  0.0115 #> 7   0.2316 -0.0039 #> 8   0.1956 -0.0305 #> 9   0.1462 -0.0545 #> 10  0.0483 -0.0866 #> 11 -0.0520 -0.1047 #> 12 -0.4016 -0.0250 #> 13 -0.3868  0.0166 #> 14 -0.1808  0.0229 #> 15  0.0484  0.0405 #> 16 -0.0519  0.0164 #> 17  0.0623 -0.0047 #> 18 -0.1444 -0.0286 #>    # m2ll m2ll(wings[1], c(6, 4, 3, 5)) # grab slices and coordinates #> [[1]] #>         [,1]   [,2] #> [1,] -0.4933 0.0130 #> [2,] -0.0777 0.0832 #> [3,]  0.2231 0.0861 #> [4,]  0.2641 0.0462 #> [5,]  0.2645 0.0261 #> [6,]  0.2471 0.0003 #>  #> [[2]] #>        [,1]    [,2] #> [1,] 0.2311 -0.0228 #> [2,] 0.2040 -0.0452 #> [3,] 0.1282 -0.0742 #> [4,] 0.0424 -0.0966 #>  #> [[3]] #>         [,1]    [,2] #> [1,] -0.0674 -0.1108 #> [2,] -0.4102 -0.0163 #> [3,] -0.3140  0.0318 #>  #> [[4]] #>         [,1]    [,2] #> [1,] -0.1768  0.0341 #> [2,]  0.0715  0.0509 #> [3,] -0.0540  0.0238 #> [4,]  0.0575 -0.0059 #> [5,] -0.1401 -0.0240 #>"},{"path":"http://momx.github.io/Momocs/reference/calibrate_deviations.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","title":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","text":"Calculate deviations original reconstructed shapes using range harmonic number.","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_deviations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","text":"","code":"calibrate_deviations()  calibrate_deviations_efourier(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )  calibrate_deviations_tfourier(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )  calibrate_deviations_rfourier(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )  calibrate_deviations_sfourier(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )  calibrate_deviations_npoly(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )  calibrate_deviations_opoly(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )  calibrate_deviations_dfourier(   x,   id = 1,   range,   norm.centsize = TRUE,   dist.method = edm_nearest,   interpolate.factor = 1,   dist.nbpts = 120,   plot = TRUE )"},{"path":"http://momx.github.io/Momocs/reference/calibrate_deviations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","text":"x Opn object calibrate_deviations id shape perform calibrate_deviations range vector harmonics (degree opoly npoly Opn) perform calibrate_deviations. provided, harmonics corresponding 0.9, 0.95 0.99% harmonic power used. norm.centsize logical whether normalize deviation centroid size dist.method method edm_nearest calculate deviations interpolate.factor numeric increase number points original shape (1 default) dist.nbpts numeric number points use deviations calculations plot logical whether print graph (FALSE just want calculations)","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_deviations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","text":"ggplot object full list intermediate results. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_deviations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","text":"Note version 1.1, calculation changed fixed problem. , 'best' possible shape calculated using highest possible number harmonics. worked well efourier others (eg rfourier, tfourier) known unstable high number harmonics. now , Momocs uses 'real' shape, (must centered) uses coo_interpolate produce interpolate.factor times coordinates shape using default dist.method, eg edm_nearest, latter finds euclidean distance, point reconstructed shape, closest point interpolated shape. interpolate.factor set 1 default, interpolation made ask . Note, interpolation decrease artefactual errors may also done outside calibrate_deviations probably removed versions. Note also code quite old now need good review, planned 2018. *poly methods Opn objects, deviations calculated degree 12 polynom.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/calibrate_deviations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantitative calibration, through deviations, for Out and Opn objects — calibrate_deviations","text":"","code":"b5 <- slice(bot, 1:5) #for the sake of speed b5 %>% calibrate_deviations_efourier()  b5 %>% calibrate_deviations_rfourier() #> 'range' was too high and set to 4 15 27 39 51 63  b5 %>% calibrate_deviations_tfourier() #> 'range' was too high and set to 4 15 27 39 51 63  b5 %>% calibrate_deviations_sfourier()   o5 <- slice(olea, 1:5) #for the sake of speed o5 %>% calibrate_deviations_opoly() #> 'range' was missing and set to 1:8 #> deviations calculated from a degree 12 polynom  o5 %>% calibrate_deviations_npoly() #> 'range' was missing and set to 1:8 #> deviations calculated from a degree 12 polynom  o5 %>% calibrate_deviations_dfourier() #> 'range' was missing and set to 1:8"},{"path":"http://momx.github.io/Momocs/reference/calibrate_harmonicpower.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","title":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","text":"Estimates number harmonics required four Fourier methods implemented Momocs: elliptical Fourier analysis (see efourier), radii variation analysis (see rfourier) tangent angle analysis (see tfourier) discrete Fourier transform (see dfourier). returns can plot cumulated harmonic power whether dropping first harmonic , based maximum possible number harmonics Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_harmonicpower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","text":"","code":"calibrate_harmonicpower()  calibrate_harmonicpower_efourier(   x,   id = 1:length(x),   nb.h,   drop = 1,   thresh = c(90, 95, 99, 99.9),   plot = TRUE )  calibrate_harmonicpower_rfourier(   x,   id = 1:length(x),   nb.h,   drop = 1,   thresh = c(90, 95, 99, 99.9),   plot = TRUE )  calibrate_harmonicpower_tfourier(   x,   id = 1:length(x),   nb.h,   drop = 1,   thresh = c(90, 95, 99, 99.9),   plot = TRUE )  calibrate_harmonicpower_sfourier(   x,   id = 1:length(x),   nb.h,   drop = 1,   thresh = c(90, 95, 99, 99.9),   plot = TRUE )  calibrate_harmonicpower_dfourier(   x,   id = 1:length(x),   nb.h,   drop = 1,   thresh = c(90, 95, 99, 99.9),   plot = TRUE )"},{"path":"http://momx.github.io/Momocs/reference/calibrate_harmonicpower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","text":"x Coo Opn object id shapes perform calibrate_harmonicpower. default nb.h numeric maximum number harmonic, base cumsum drop numeric number harmonics drop cumulative sum thresh vector numeric drawing horizontal lines, also used minh plot logical whether plot result simply return matrix Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_harmonicpower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","text":"returns list component: gg ggplot object, q quantile matrix minh quick summary returns number harmonics required achieve certain proportion total harmonic power.","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_harmonicpower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","text":"power given harmonic \\(n\\) calculated follows elliptical Fourier analysis n-th harmonic: \\(HarmonicPower_n \\frac{^2_n+B^2_n+C^2_n+D^2_n}{2}\\) follows radii variation tangent angle: \\(HarmonicPower_n= \\frac{^2_n+B^2_n+C^2_n+D^2_n}{2}\\)","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/calibrate_harmonicpower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantitative calibration, through harmonic power, for Out and Opn objects — calibrate_harmonicpower","text":"","code":"b5 <- bot %>% slice(1:5) b5  %>% calibrate_harmonicpower_efourier(nb.h=12) #> $gg  #>  #> $q #>                   h1       h2       h3       h4       h5       h6       h7 #> brahma      12.04060 75.93567 84.25707 96.30510 97.54758 98.98871 99.14762 #> caney       25.32919 83.82352 85.52977 97.63251 97.95722 98.48376 98.74498 #> chimay      43.52623 81.74374 87.15624 95.19669 97.62725 98.26072 99.08266 #> corona      18.77387 85.07047 86.60786 97.10591 97.52603 98.19450 98.53979 #> deusventrue 50.01648 89.72983 91.60975 97.48378 98.24316 98.89288 99.54427 #>                   h8       h9      h10 h11 #> brahma      99.17820 99.56150 99.70128 100 #> caney       99.09524 99.82995 99.92629 100 #> chimay      99.13936 99.92633 99.95030 100 #> corona      99.35699 99.85405 99.92437 100 #> deusventrue 99.59558 99.85220 99.85638 100 #>  #> $minh #>   90%   95%   99% 99.9%  #>     5     5     8    11  #>  b5  %>% calibrate_harmonicpower_rfourier(nb.h=12)  #> $gg  #>  #> $q #>                   h1       h2       h3       h4       h5       h6       h7 #> brahma      18.78231 33.31995 46.22113 58.10127 67.82970 75.05028 80.97400 #> caney       17.93853 31.33704 42.78188 53.62717 63.27019 70.92538 77.13956 #> chimay      20.15608 32.00851 42.30386 53.69956 63.83688 70.62474 75.70937 #> corona      18.06902 31.19196 42.46484 53.47544 63.40792 71.15173 77.21493 #> deusventrue 16.53275 28.35109 38.13251 47.97348 57.90690 66.78889 74.09914 #>                   h8       h9      h10 h11 #> brahma      86.70633 92.03264 96.35923 100 #> caney       83.17596 89.45355 95.26884 100 #> chimay      81.97629 89.53235 95.96736 100 #> corona      83.10189 89.40501 95.31295 100 #> deusventrue 80.55553 87.12697 93.87388 100 #>  #> $minh #>   90%   95%   99% 99.9%  #>    11    11    12    12  #>  b5  %>% calibrate_harmonicpower_tfourier(nb.h=12)  #> $gg  #>  #> $q #>                   h1       h2       h3       h4       h5       h6       h7 #> brahma      59.14067 61.93044 70.84946 73.04960 78.52305 82.00362 83.54236 #> caney       74.23211 77.03198 79.47862 80.42583 81.02169 83.35008 88.47033 #> chimay      51.55592 60.87755 75.55970 82.94807 85.87674 86.60314 87.96999 #> corona      78.37418 84.46833 88.93940 91.30081 91.99456 92.38160 96.07474 #> deusventrue 57.24983 77.47110 86.13551 88.20041 90.42190 93.82247 94.37464 #>                   h8       h9      h10 h11 #> brahma      88.78847 90.73935 95.65795 100 #> caney       92.95646 93.61725 99.86646 100 #> chimay      95.63758 95.97542 98.66043 100 #> corona      96.39414 97.01762 99.03821 100 #> deusventrue 97.00523 98.45247 99.28416 100 #>  #> $minh #>   90%   95%   99% 99.9%  #>     9     9    11    12  #>  b5  %>% calibrate_harmonicpower_sfourier(nb.h=12)  #> $gg  #>  #> $q #>                   h1       h2       h3       h4       h5       h6       h7 #> brahma      99.38619 99.44134 99.59446 99.83182 99.92895 99.93156 99.94529 #> caney       99.16488 99.60429 99.82594 99.87251 99.91648 99.95231 99.95269 #> chimay      97.21123 99.21819 99.30029 99.82089 99.87238 99.93107 99.95593 #> corona      99.36094 99.61770 99.72283 99.76601 99.89668 99.95608 99.95715 #> deusventrue 97.32291 99.46403 99.50564 99.53357 99.60031 99.93841 99.94526 #>                   h8       h9      h10 h11 #> brahma      99.98484 99.98487 99.98688 100 #> caney       99.99360 99.99611 99.99624 100 #> chimay      99.99704 99.99727 99.99749 100 #> corona      99.98672 99.99443 99.99756 100 #> deusventrue 99.97166 99.97681 99.99946 100 #>  #> $minh #>   90%   95%   99% 99.9%  #>     2     2     2     7  #>   # on Opn olea %>% slice(1:5) %>%     calibrate_harmonicpower_dfourier(nb.h=12)  #> $gg  #>  #> $q #>                         h1       h2       h3       h4       h5       h6 #> 0001-cAglan_O10VD 82.53723 88.47281 96.36372 96.81316 98.24342 98.36453 #> 0001-cAglan_O10VL 73.05735 86.54342 94.76133 95.98041 97.40877 97.59487 #> 0001-cAglan_O11VD 76.24284 87.88560 93.49305 94.48904 96.36358 96.62580 #> 0001-cAglan_O11VL 84.21060 91.19903 96.81949 97.09514 98.06219 98.13718 #> 0001-cAglan_O12VD 83.66767 87.90200 95.83034 95.91726 97.55019 97.57227 #>                         h7       h8       h9      h10 h11 #> 0001-cAglan_O10VD 98.95059 98.99292 99.48780 99.50151 100 #> 0001-cAglan_O10VL 98.45031 98.49851 99.23945 99.26011 100 #> 0001-cAglan_O11VD 97.63205 97.76921 98.91878 99.00197 100 #> 0001-cAglan_O11VL 98.80533 98.83142 99.42881 99.43860 100 #> 0001-cAglan_O12VD 98.59264 98.60478 99.36939 99.37605 100 #>  #> $minh #>   90%   95%   99% 99.9%  #>     4     4    10    12  #>  # \\donttest{ # let customize the ggplot library(ggplot2) cal <- b5  %>% calibrate_harmonicpower_efourier(nb.h=12) cal$gg + theme_minimal() + coord_cartesian(xlim=c(3.5, 12.5), ylim=c(90, 100)) + ggtitle(\"Harmonic power calibration\") #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one.  # }"},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitative r2 calibration for Opn objects — calibrate_r2","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"Estimates r2 calibrate degree npoly opoly methods. Also returns plot","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"","code":"calibrate_r2()  calibrate_r2_opoly(   Opn,   id = 1:length(Opn),   degree.range = 1:8,   thresh = c(0.9, 0.95, 0.99, 0.999),   plot = TRUE,   ... )  calibrate_r2_npoly(   Opn,   id = 1:length(Opn),   degree.range = 1:8,   thresh = c(0.9, 0.95, 0.99, 0.999),   plot = TRUE,   ... )"},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"Opn Opn object id ids shapes calculate r2 (default) degree.range calculate r2 thresh threshold return diagnostic plot logical whether print plot ... useless ","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"ggpot2 object","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"May long, can estimate sample either id , one sample_n sample_frac","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/calibrate_r2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantitative r2 calibration for Opn objects — calibrate_r2","text":"","code":"olea %>% slice(1:5) %>% #for the sake of spped     calibrate_r2_opoly(degree.range=1:5, thresh=c(0.9, 0.99))  #> $gg  #>  #> $q #>                        degree1   degree2   degree3   degree4   degree5 #> 0001-cAglan_O10VD 0.0004287127 0.9821251 0.9831469 0.9986415 0.9987220 #> 0001-cAglan_O10VL 0.0011742448 0.9838978 0.9841793 0.9955520 0.9972836 #> 0001-cAglan_O11VD 0.0123113197 0.9706618 0.9906431 0.9965470 0.9965690 #> 0001-cAglan_O11VL 0.0151312838 0.9459654 0.9796698 0.9958102 0.9963290 #> 0001-cAglan_O12VD 0.0002310795 0.9673982 0.9674270 0.9912600 0.9938820 #>  #> $mind #>  0.9 0.99  #>    2    4  #>   olea %>% slice(1:5) %>% #for the sake of spped     calibrate_r2_npoly(degree.range=1:5, thresh=c(0.9, 0.99))  #> $gg  #>  #> $q #>                        degree1   degree2   degree3   degree4   degree5 #> 0001-cAglan_O10VD 0.0004287127 0.9821251 0.9831469 0.9986415 0.9987220 #> 0001-cAglan_O10VL 0.0011742448 0.9838978 0.9841793 0.9955520 0.9972836 #> 0001-cAglan_O11VD 0.0123113197 0.9706618 0.9906431 0.9965470 0.9965690 #> 0001-cAglan_O11VL 0.0151312838 0.9459654 0.9796698 0.9958102 0.9963290 #> 0001-cAglan_O12VD 0.0002310795 0.9673982 0.9674270 0.9912600 0.9938820 #>  #> $mind #>  0.9 0.99  #>    2    4  #>"},{"path":"http://momx.github.io/Momocs/reference/calibrate_reconstructions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate using reconstructed shapes — calibrate_reconstructions","title":"Calibrate using reconstructed shapes — calibrate_reconstructions","text":"Calculate displays reconstructed shapes using range harmonic number. Compare visually maximal fit. explicitely demonstrates robust efourier compared tfourier rfourier.","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_reconstructions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate using reconstructed shapes — calibrate_reconstructions","text":"","code":"calibrate_reconstructions_efourier(x, id, range = 1:9)  calibrate_reconstructions_rfourier(x, id, range = 1:9)  calibrate_reconstructions_tfourier(x, id, range = 1:9)  calibrate_reconstructions_sfourier(x, id, range = 1:9)  calibrate_reconstructions_npoly(   x,   id,   range = 2:10,   baseline1 = c(-1, 0),   baseline2 = c(1, 0) )  calibrate_reconstructions_opoly(   x,   id,   range = 2:10,   baseline1 = c(-1, 0),   baseline2 = c(1, 0) )  calibrate_reconstructions_dfourier(   x,   id,   range = 2:10,   baseline1 = c(-1, 0),   baseline2 = c(1, 0) )"},{"path":"http://momx.github.io/Momocs/reference/calibrate_reconstructions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate using reconstructed shapes — calibrate_reconstructions","text":"x Coo object calibrate_reconstructions id shape perform calibrate_reconstructions range vector harmonics perform calibrate_reconstructions baseline1 \\((x; y)\\) coordinates first point baseline baseline2 \\((x; y)\\) coordinates second point baseline","code":""},{"path":"http://momx.github.io/Momocs/reference/calibrate_reconstructions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate using reconstructed shapes — calibrate_reconstructions","text":"ggplot object full list intermediate results. See examples.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/calibrate_reconstructions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate using reconstructed shapes — calibrate_reconstructions","text":"","code":"### On Out shapes %>%     calibrate_reconstructions_efourier(id=1, range=1:6)   # you may prefer efourier... shapes %>%     calibrate_reconstructions_tfourier(id=1, range=1:6)   #' you may prefer efourier... shapes %>%     calibrate_reconstructions_rfourier(id=1, range=1:6)   #' you may prefer efourier... # todo #shapes %>% #     calibrate_reconstructions_sfourier(id=5, range=1:6)  ### On Opn olea %>%     calibrate_reconstructions_opoly(id=1)   olea %>%     calibrate_reconstructions_npoly(id=1)   olea %>%     calibrate_reconstructions_dfourier(id=1)"},{"path":"http://momx.github.io/Momocs/reference/chop.html","id":null,"dir":"Reference","previous_headings":"","what":"Split to several objects based on a factor — chop","title":"Split to several objects based on a factor — chop","text":"Rougher slicing accepts classifier ie column name $fac Momocs classes. Returns named (every level) list can lapply-ed combined. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/chop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split to several objects based on a factor — chop","text":"","code":"chop(.data, fac)"},{"path":"http://momx.github.io/Momocs/reference/chop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split to several objects based on a factor — chop","text":".data Coo Coe object fac column name $fac","code":""},{"path":"http://momx.github.io/Momocs/reference/chop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split to several objects based on a factor — chop","text":"named list Coo Coe objects","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/chop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split to several objects based on a factor — chop","text":"","code":"olea %>%       filter(var == \"Aglan\") %>% # to have a balanced nb of 'view'       chop(~view) %>%    # split into a list of 2       npoly %>%          # separately apply npoly                          # strict equivalent to lapply(npoly)       combine %>%       # recombine       PCA %>% plot      # an illustration of the 2 views #> 'nb.pts' missing and set to: 95 #> 'degree' missing and set to: 5 #> 'nb.pts' missing and set to: 91 #> 'degree' missing and set to: 5 #> will be deprecated soon, see ?plot_PCA        # treated separately"},{"path":"http://momx.github.io/Momocs/reference/classification_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate classification metrics on a confusion matrix — classification_metrics","title":"Calculate classification metrics on a confusion matrix — classification_metrics","text":"cases, class correctness proportion correctly classified individuals enough, detailed metrics working classification.","code":""},{"path":"http://momx.github.io/Momocs/reference/classification_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate classification metrics on a confusion matrix — classification_metrics","text":"","code":"classification_metrics(x)"},{"path":"http://momx.github.io/Momocs/reference/classification_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate classification metrics on a confusion matrix — classification_metrics","text":"x table LDA object","code":""},{"path":"http://momx.github.io/Momocs/reference/classification_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate classification metrics on a confusion matrix — classification_metrics","text":"list following components returned: accuracy  fraction instances correctly classified macro_prf data.frame containing precision (fraction correct predictions certain class); recall, fraction instances class correctly predicted; f1 harmonic mean (weighted average) precision recall. macro_avg, just average three macro_prf indices ova list one-vs-confusion matrices class ova_sum single ova matrices kappa measure agreement predictions actual labels","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/classification_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate classification metrics on a confusion matrix — classification_metrics","text":"","code":"# some morphometrics on 'hearts' hearts %>% fgProcrustes(tol=1) %>% coo_slide(ldk=1) %>% efourier(norm=FALSE) %>% PCA() %>% # now the LDA and its summary LDA(~aut) %>% classification_metrics() #> iteration:  1 \tgain: 30322  #> iteration:  2 \tgain: 1.2498  #> iteration:  3 \tgain: 0.34194  #> 'nb.h' set to 7 (99% harmonic power) #> 11 PC retained #> $accuracy #> [1] 0.7666667 #>  #> $macro_prf #> # A tibble: 8 × 3 #>   precision recall    f1 #>       <dbl>  <dbl> <dbl> #> 1     0.839  0.867 0.852 #> 2     0.75   0.8   0.774 #> 3     0.542  0.433 0.481 #> 4     0.893  0.833 0.862 #> 5     0.893  0.833 0.862 #> 6     0.812  0.867 0.839 #> 7     0.871  0.9   0.885 #> 8     0.529  0.6   0.562 #>  #> $macro_avg #> # A tibble: 1 × 3 #>   avg_precision avg_recall avg_f1 #>           <dbl>      <dbl>  <dbl> #> 1         0.766      0.767  0.765 #>  #> $ova #> $ova$ced #>         classified #> actual   ced others #>   ced     26      4 #>   others   5    205 #>  #> $ova$jeya #>         classified #> actual   jeya others #>   jeya     24      6 #>   others    8    202 #>  #> $ova$mat #>         classified #> actual   mat others #>   mat     13     17 #>   others  11    199 #>  #> $ova$ponnu #>         classified #> actual   ponnu others #>   ponnu     25      5 #>   others     3    207 #>  #> $ova$remi #>         classified #> actual   remi others #>   remi     25      5 #>   others    3    207 #>  #> $ova$rom #>         classified #> actual   rom others #>   rom     26      4 #>   others   6    204 #>  #> $ova$ruks #>         classified #> actual   ruks others #>   ruks     27      3 #>   others    4    206 #>  #> $ova$vince #>         classified #> actual   vince others #>   vince     18     12 #>   others    16    194 #>  #>  #> $ova_sum #>           classified #> actual     relevant others #>   relevant      184     56 #>   others         56   1624 #>  #> $kappa #> [1] 0.7333333 #>"},{"path":"http://momx.github.io/Momocs/reference/coeff_rearrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrange a matrix of (typically Fourier) coefficients — coeff_rearrange","title":"Rearrange a matrix of (typically Fourier) coefficients — coeff_rearrange","text":"Momocs uses colnamed matrices store (typically) Fourier coefficients Coe objects (typically OutCoe). arranged rank-wise: A1, A2, ..., , B1, ..., Bn, C1, ..., Cn, D1, ..., Dn. softwares may arrive A1, B1, C1, D1, ..., , Bn, Cn, Dn, functions helps go one format. short, function rearranges column order. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_rearrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrange a matrix of (typically Fourier) coefficients — coeff_rearrange","text":"","code":"coeff_rearrange(x, by = c(\"name\", \"rank\")[1])"},{"path":"http://momx.github.io/Momocs/reference/coeff_rearrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrange a matrix of (typically Fourier) coefficients — coeff_rearrange","text":"x matrix (colnames) character either \"name\" (A1, A2, ..) \"rank\" (A1, B1, ...)","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_rearrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrange a matrix of (typically Fourier) coefficients — coeff_rearrange","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_rearrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rearrange a matrix of (typically Fourier) coefficients — coeff_rearrange","text":"","code":"m_name <- m_rank <- matrix(1:32, 2, 16) # this one is ordered by name colnames(m_name) <- paste0(rep(letters[1:4], each=4), 1:4) # this one is ordered by rank colnames(m_rank) <- paste0(letters[1:4], rep(1:4, each=4))  m_rank #>      a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3 a4 b4 c4 d4 #> [1,]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 #> [2,]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 m_rank %>% coeff_rearrange(by=\"name\") #> Warning: `arrange_()` was deprecated in dplyr 0.7.0. #> ℹ Please use `arrange()` instead. #> ℹ See vignette('programming') for more help #> ℹ The deprecated feature was likely used in the Momocs package. #>   Please report the issue at <https://github.com/MomX/Momocs/issues>. #>      a1 a2 a3 a4 b1 b2 b3 b4 c1 c2 c3 c4 d1 d2 d3 d4 #> [1,]  1  9 17 25  3 11 19 27  5 13 21 29  7 15 23 31 #> [2,]  2 10 18 26  4 12 20 28  6 14 22 30  8 16 24 32 m_rank %>% coeff_rearrange(by=\"rank\") #no change #>      a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3 a4 b4 c4 d4 #> [1,]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 #> [2,]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32  m_name #>      a1 a2 a3 a4 b1 b2 b3 b4 c1 c2 c3 c4 d1 d2 d3 d4 #> [1,]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 #> [2,]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 m_name %>% coeff_rearrange(by=\"name\") # no change #>      a1 a2 a3 a4 b1 b2 b3 b4 c1 c2 c3 c4 d1 d2 d3 d4 #> [1,]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 #> [2,]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 m_name %>% coeff_rearrange(by=\"rank\") #>      a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3 a4 b4 c4 d4 #> [1,]  1  9 17 25  3 11 19 27  5 13 21 29  7 15 23 31 #> [2,]  2 10 18 26  4 12 20 28  6 14 22 30  8 16 24 32"},{"path":"http://momx.github.io/Momocs/reference/coeff_sel.html","id":null,"dir":"Reference","previous_headings":"","what":"Helps to select a given number of harmonics from a numerical vector. — coeff_sel","title":"Helps to select a given number of harmonics from a numerical vector. — coeff_sel","text":"coeff_sel helps select given number harmonics returning indices arranged numeric vector. instance, harmonic coefficients arranged $coe slot Coe-objects way: \\(A_1, \\dots, A_n, B_1, \\dots, B_n, C_1, \\dots, C_n, D_1, \\dots, D-n\\) elliptical Fourier analysis (see efourier efourier) \\(C_n D_n\\) harmonic absent radii variation tangent angle approaches (see rfourier tfourier respectively). . function used internally might interest elwewhere.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_sel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helps to select a given number of harmonics from a numerical vector. — coeff_sel","text":"","code":"coeff_sel(retain = 8, drop = 0, nb.h = 32, cph = 4)"},{"path":"http://momx.github.io/Momocs/reference/coeff_sel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helps to select a given number of harmonics from a numerical vector. — coeff_sel","text":"retain numeric. number harmonics retain. drop numeric. number harmonics drop nb.h numeric. maximum harmonic rank. cph numeric. Must set 2 rfourier tfourier used.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_sel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helps to select a given number of harmonics from a numerical vector. — coeff_sel","text":"coeff_sel returns indices can used select columns harmonic coefficient matrix. coeff_split returns named list coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_sel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helps to select a given number of harmonics from a numerical vector. — coeff_sel","text":"","code":"bot.f <- efourier(bot, 32) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details coe <- bot.f$coe # the raw matrix coe #>                A1           A2         A3         A4          A5          A6 #> brahma          1  0.006766531 0.09348184 0.01374288 0.023818571 0.008592275 #> caney           1  0.007368844 0.09542847 0.01449765 0.022207326 0.006665955 #> chimay          1  0.016535135 0.07571705 0.02736989 0.009876978 0.014306122 #> corona          1  0.007486279 0.09616977 0.01220177 0.022887407 0.007281456 #> deusventrue     1  0.019627538 0.09281761 0.02230953 0.015264921 0.014857953 #> duvel           1  0.022177771 0.06895598 0.03354560 0.009316683 0.021131541 #> franziskaner    1  0.007314669 0.09110003 0.01294912 0.023136784 0.010558958 #> grimbergen      1  0.009522713 0.08573641 0.01974880 0.012878126 0.008485338 #> guiness         1  0.009589570 0.08825041 0.02268926 0.017770767 0.010695823 #> hoegardeen      1  0.009598003 0.09186435 0.01393702 0.020136724 0.008952962 #> jupiler         1  0.008152360 0.09595083 0.01206957 0.023549986 0.007484692 #> kingfisher      1  0.007788546 0.09459391 0.01346605 0.024571428 0.009229773 #> latrappe        1  0.018476561 0.06035470 0.03974568 0.010493387 0.026379718 #> lindemanskriek  1  0.012406103 0.09289294 0.01773845 0.020632152 0.010949655 #> nicechouffe     1  0.015167563 0.09058037 0.02094971 0.020007417 0.014345165 #> pecheresse      1  0.008436476 0.09409400 0.01181167 0.022221176 0.007960411 #> sierranevada    1  0.015038107 0.08208708 0.02647382 0.013697543 0.013869924 #> tanglefoot      1  0.018782346 0.07275504 0.03848616 0.008439294 0.018172933 #> tauro           1  0.007333709 0.09536301 0.01149374 0.023043384 0.007093187 #> westmalle       1  0.009100416 0.09469091 0.01450202 0.023460557 0.009582984 #> amrut           1  0.004198631 0.09500128 0.02143863 0.026005715 0.011729658 #> ballantines     1 -0.000653116 0.05733309 0.03154946 0.017516836 0.034198742 #> bushmills       1 -0.004927807 0.08149528 0.01036776 0.023910616 0.017320375 #> chivas          1  0.021613712 0.08642271 0.04314511 0.008460823 0.014376414 #> dalmore         1  0.038669436 0.07265717 0.05680730 0.003277741 0.019363348 #> famousgrouse    1  0.003373189 0.08802317 0.02019928 0.025507211 0.016776448 #> glendronach     1  0.003257554 0.09526153 0.02074249 0.026167146 0.010932661 #> glenmorangie    1  0.008572527 0.09410920 0.02136020 0.024756735 0.011430941 #> highlandpark    1 -0.002122354 0.06989902 0.03612531 0.023554876 0.027350465 #> jackdaniels     1  0.008777794 0.08626120 0.02940216 0.019373419 0.015295504 #> jb              1  0.004384491 0.09517564 0.02460733 0.023505329 0.010741163 #> johnniewalker   1  0.002370576 0.08321025 0.01719991 0.022474617 0.017724976 #> magallan        1 -0.008648015 0.09924533 0.01455296 0.037258989 0.011586345 #> makersmark      1  0.016536161 0.10229688 0.03388156 0.008773613 0.010192259 #> oban            1  0.001652893 0.09909342 0.02127249 0.028337047 0.009671380 #> oldpotrero      1  0.022935601 0.09391465 0.03109455 0.009138035 0.012979620 #> redbreast       1  0.017769276 0.09281598 0.04425688 0.011246633 0.012792733 #> tamdhu          1  0.005270821 0.09375949 0.02020814 0.025073663 0.010943288 #> wildturkey      1  0.008605609 0.09229119 0.03228916 0.020978082 0.013010663 #> yoichi          1 -0.001738226 0.07733113 0.02843759 0.024035740 0.023420967 #>                           A7          A8            A9           A10 #> brahma          0.0031835706 0.005158502 -7.262824e-04  0.0047287291 #> caney           0.0035527091 0.007010166  1.214949e-03  0.0038734169 #> chimay         -0.0047412879 0.007814037 -2.112661e-03  0.0022043011 #> corona          0.0055045888 0.007852411  8.767189e-04  0.0044201528 #> deusventrue     0.0025214510 0.011391904 -1.733965e-03  0.0062083192 #> duvel          -0.0016871288 0.011025502 -1.042906e-04  0.0017042044 #> franziskaner    0.0045813399 0.006927102 -5.793922e-04  0.0045217266 #> grimbergen     -0.0021957902 0.008213656 -1.577404e-03  0.0026346248 #> guiness        -0.0015195731 0.008550727  2.093772e-04  0.0060163830 #> hoegardeen      0.0024034912 0.007507503 -1.234721e-03  0.0046892597 #> jupiler         0.0055270378 0.006597011  1.073131e-03  0.0041448892 #> kingfisher      0.0059527872 0.006778517  1.169809e-03  0.0044984721 #> latrappe       -0.0057950372 0.005954999 -5.463098e-03 -0.0001140651 #> lindemanskriek  0.0033428880 0.008381096 -1.707332e-04  0.0050506285 #> nicechouffe     0.0026214920 0.010288304 -4.913646e-04  0.0065828560 #> pecheresse      0.0046954032 0.006669592  4.015144e-05  0.0042466561 #> sierranevada   -0.0043828769 0.009275932 -1.465646e-03  0.0059555586 #> tanglefoot     -0.0108560295 0.008370133 -2.988319e-03  0.0052185654 #> tauro           0.0052560957 0.006425077  9.461829e-04  0.0040141970 #> westmalle       0.0051463840 0.006848999  3.534839e-04  0.0042382642 #> amrut           0.0019176785 0.008515916  1.392307e-03  0.0089150426 #> ballantines     0.0045419501 0.014014932 -5.273138e-03  0.0006083616 #> bushmills       0.0095020099 0.012457087 -3.988679e-04  0.0048132802 #> chivas         -0.0053775410 0.013797633  2.198119e-03  0.0031741809 #> dalmore        -0.0072008170 0.012093037  5.368701e-03  0.0025492686 #> famousgrouse    0.0035195429 0.008617844 -1.621645e-03  0.0075384656 #> glendronach     0.0018504691 0.007851391  1.483976e-03  0.0086527932 #> glenmorangie    0.0023552959 0.007521806  1.103445e-03  0.0069834516 #> highlandpark   -0.0024258364 0.003973480 -7.894105e-03  0.0013284975 #> jackdaniels    -0.0047279969 0.008903250 -2.124758e-03  0.0090062900 #> jb             -0.0015584637 0.008915452  4.097146e-04  0.0089915939 #> johnniewalker   0.0034197782 0.009945811 -3.913888e-03  0.0059350940 #> magallan        0.0095026108 0.003088506  1.575409e-03  0.0054824432 #> makersmark      0.0003303914 0.016520390 -1.901653e-03  0.0031138042 #> oban            0.0022492968 0.007479292  2.478319e-03  0.0090114539 #> oldpotrero      0.0015843674 0.012237947 -4.671411e-04  0.0023549220 #> redbreast      -0.0046107656 0.015170859  3.884228e-03  0.0045806501 #> tamdhu          0.0013188307 0.006535142  1.700604e-04  0.0072170216 #> wildturkey     -0.0038244377 0.010171775  1.641229e-03  0.0092477531 #> yoichi         -0.0011328612 0.006117569 -8.008551e-03  0.0034639875 #>                          A11           A12           A13           A14 #> brahma         -0.0013733386  0.0016363823 -2.308262e-03 -8.638239e-05 #> caney          -0.0018777601  0.0011330555 -6.140388e-04  9.095865e-04 #> chimay         -0.0012371979 -0.0018514226  4.671292e-04 -2.460672e-03 #> corona         -0.0021742849  0.0026300698 -1.040704e-03  1.308265e-03 #> deusventrue    -0.0007936789  0.0028680575 -3.667224e-05  4.628731e-04 #> duvel          -0.0006045816 -0.0028942242  1.911167e-03 -1.075121e-03 #> franziskaner   -0.0015947508  0.0021935018 -1.336804e-03  4.860914e-04 #> grimbergen     -0.0035563564 -0.0004162333 -4.598763e-04 -6.524229e-04 #> guiness        -0.0015222476  0.0005646464 -7.106716e-04  2.998013e-04 #> hoegardeen     -0.0024579838  0.0023152691 -1.583256e-03  6.149144e-04 #> jupiler        -0.0009974596  0.0023379940 -7.214137e-04  9.925517e-04 #> kingfisher     -0.0004648420  0.0023788807 -4.654563e-04  7.413209e-04 #> latrappe        0.0015068375 -0.0015514855  2.342018e-03 -3.056608e-03 #> lindemanskriek -0.0009359325  0.0022848386 -6.636932e-04  3.522544e-04 #> nicechouffe    -0.0007619565  0.0033654095  1.927898e-05  1.210854e-03 #> pecheresse     -0.0013782823  0.0024185755 -1.351070e-03  7.509854e-04 #> sierranevada   -0.0017933279 -0.0005349683 -1.031914e-03 -1.110401e-03 #> tanglefoot     -0.0003179777 -0.0031166695 -6.330130e-04 -4.040699e-03 #> tauro          -0.0010466330  0.0023514452 -6.553020e-04  1.065380e-03 #> westmalle      -0.0004882420  0.0023217071 -3.503062e-04  3.148159e-04 #> amrut          -0.0004155995  0.0028189180 -2.329164e-03  1.315932e-03 #> ballantines    -0.0024674938 -0.0002274846  3.091761e-03  4.251026e-05 #> bushmills      -0.0043970618  0.0017818484 -2.593370e-03  1.904341e-03 #> chivas         -0.0016654883 -0.0026415175  2.038443e-03 -1.394657e-03 #> dalmore         0.0025922354 -0.0039822137  2.797073e-03 -1.626359e-03 #> famousgrouse    0.0001300206  0.0046515437 -1.163558e-03  2.084764e-04 #> glendronach    -0.0002084792  0.0025405566 -2.450515e-03  8.307668e-04 #> glenmorangie   -0.0001692272  0.0025838514 -1.298884e-03  1.028122e-03 #> highlandpark    0.0023214993  0.0028070218  3.398979e-03 -2.715598e-03 #> jackdaniels    -0.0011544544  0.0013660407 -3.023216e-03 -1.495727e-03 #> jb             -0.0026073348  0.0016289320 -3.506245e-03  1.398710e-03 #> johnniewalker  -0.0026799451  0.0046998857 -7.408889e-04  1.724087e-03 #> magallan        0.0034410693  0.0056372281  7.595009e-04  1.320484e-03 #> makersmark     -0.0037381840  0.0031052372  4.824121e-04 -7.739096e-04 #> oban           -0.0000555700  0.0026159662 -2.336986e-03  1.677681e-03 #> oldpotrero      0.0002650070  0.0005717670  1.200764e-03 -1.479504e-03 #> redbreast      -0.0017153754 -0.0017080604  2.956339e-03 -2.516789e-04 #> tamdhu         -0.0004660552  0.0022520466 -2.360201e-03  1.825931e-04 #> wildturkey     -0.0011040540  0.0003877287 -1.425560e-03  7.482844e-04 #> yoichi         -0.0005670111  0.0040850862  1.536049e-03 -1.112175e-03 #>                          A15           A16           A17           A18 #> brahma         -1.150816e-03 -3.765755e-04 -8.576746e-04 -0.0011152905 #> caney          -4.470877e-04 -9.307845e-04 -6.102760e-04 -0.0008460017 #> chimay          1.560010e-05 -2.625393e-03 -6.111634e-04 -0.0014908027 #> corona         -1.317478e-03 -5.180094e-04 -7.007916e-04 -0.0006290111 #> deusventrue     9.538496e-04 -6.759098e-04  7.618085e-04 -0.0011834834 #> duvel           2.113421e-03 -1.342867e-03 -5.580321e-04 -0.0007953381 #> franziskaner   -8.169832e-04 -7.064707e-04 -4.330142e-04 -0.0013097566 #> grimbergen     -4.937948e-04 -2.362703e-03 -7.577334e-04 -0.0016389273 #> guiness         9.445264e-04 -1.014837e-03 -3.870126e-04 -0.0018246820 #> hoegardeen     -9.359774e-04 -6.806132e-04 -3.723940e-04 -0.0012041744 #> jupiler        -6.500301e-04 -8.059191e-05 -3.572447e-04 -0.0005173527 #> kingfisher     -4.322282e-04 -3.220011e-04 -1.490105e-04 -0.0007168806 #> latrappe       -3.929165e-05 -2.305825e-03 -1.500329e-03 -0.0005806765 #> lindemanskriek -7.095128e-05 -5.265070e-04  9.090133e-05 -0.0011401438 #> nicechouffe     4.131153e-04 -1.060484e-05  4.958279e-04 -0.0004262323 #> pecheresse     -1.039373e-03 -2.814305e-04 -7.590926e-04 -0.0008703985 #> sierranevada    1.197254e-03 -1.569161e-03  4.580294e-05 -0.0020229627 #> tanglefoot      1.578694e-03 -2.481082e-03  3.148731e-06 -0.0022741243 #> tauro          -5.776374e-04  2.422874e-05 -2.473503e-04 -0.0004171947 #> westmalle      -4.421245e-04 -7.338895e-04  1.612346e-05 -0.0007666637 #> amrut           4.652313e-04  1.135970e-03  3.402538e-04 -0.0011307959 #> ballantines     2.624766e-03 -1.653235e-03 -9.878081e-05 -0.0017287563 #> bushmills      -1.332454e-04  1.113376e-03  1.602089e-04 -0.0006916012 #> chivas          1.116103e-03 -2.491530e-03 -9.913464e-04 -0.0011585308 #> dalmore         1.019313e-03 -9.423920e-04 -2.075399e-03 -0.0001835038 #> famousgrouse   -1.222042e-03 -3.192907e-04  1.028735e-03  0.0001611504 #> glendronach     1.969121e-04  6.973513e-04  1.810040e-04 -0.0014310821 #> glenmorangie   -4.077866e-05  2.974758e-04  2.699506e-05 -0.0009470779 #> highlandpark   -1.096361e-03 -4.080900e-03 -8.356537e-04 -0.0007232859 #> jackdaniels     4.450744e-04 -7.898984e-04  8.654690e-04 -0.0026841687 #> jb              4.497643e-05  3.343889e-04 -1.017336e-03 -0.0020327924 #> johnniewalker  -8.204066e-04 -1.173419e-03 -4.161162e-04 -0.0016445323 #> magallan       -1.109793e-03  6.828727e-04  7.119352e-04  0.0013949777 #> makersmark     -7.150888e-04 -2.119718e-03  4.641016e-04 -0.0020552953 #> oban            7.127703e-04  1.418921e-03  1.652713e-04 -0.0011940845 #> oldpotrero      6.516221e-04 -1.263670e-03 -3.276935e-04 -0.0007770829 #> redbreast       1.664233e-03 -2.352226e-03 -3.191507e-04 -0.0007444397 #> tamdhu         -3.765004e-04  2.690095e-04 -2.278638e-05 -0.0013093652 #> wildturkey      2.107198e-03 -5.335998e-04 -5.539288e-07 -0.0025142726 #> yoichi         -1.089887e-03 -3.844364e-03 -6.121975e-04 -0.0019437166 #>                          A19           A20           A21           A22 #> brahma         -8.360520e-04 -1.095155e-03 -5.439578e-04 -0.0008608038 #> caney           2.301119e-05 -8.399357e-04 -5.178245e-04 -0.0009469597 #> chimay         -1.119706e-03 -9.775433e-04 -1.256788e-03 -0.0002828775 #> corona         -3.339722e-04 -1.281244e-03 -4.441549e-04 -0.0010768982 #> deusventrue     4.696431e-04 -8.906751e-04 -3.783424e-05 -0.0004364503 #> duvel          -1.052150e-03  1.767706e-04 -1.315824e-03  0.0001575196 #> franziskaner   -2.487242e-04 -1.440287e-03 -2.906736e-04 -0.0013413124 #> grimbergen     -5.092226e-04 -1.388491e-03 -1.047057e-03 -0.0009030433 #> guiness        -5.134258e-04 -9.406369e-04 -7.035895e-04 -0.0010718354 #> hoegardeen     -3.030391e-05 -1.375411e-03 -1.083590e-04 -0.0012010324 #> jupiler        -1.746120e-04 -7.555265e-04 -2.440347e-04 -0.0007606965 #> kingfisher     -1.248337e-04 -9.013070e-04 -2.490120e-04 -0.0009173615 #> latrappe       -1.798539e-03  1.557989e-04 -1.580709e-03 -0.0003042140 #> lindemanskriek -1.527305e-05 -1.022777e-03 -1.208019e-04 -0.0008309589 #> nicechouffe     3.237215e-04 -4.025861e-04 -3.535202e-05 -0.0003365178 #> pecheresse     -6.085669e-04 -9.703236e-04 -4.706892e-04 -0.0008515637 #> sierranevada   -3.026415e-04 -6.164256e-04 -4.048992e-04 -0.0002228167 #> tanglefoot     -1.678775e-03 -6.763154e-04 -1.661378e-03  0.0002811837 #> tauro          -1.242105e-04 -6.929686e-04 -1.750296e-04 -0.0006968736 #> westmalle       4.796447e-05 -9.153239e-04 -3.625213e-04 -0.0007776180 #> amrut          -2.937597e-04 -1.042779e-03  4.676933e-04 -0.0005584716 #> ballantines    -1.095479e-03 -5.664907e-04 -1.334292e-03 -0.0001309159 #> bushmills      -4.243124e-04 -1.597220e-03 -3.746931e-04 -0.0012943033 #> chivas         -1.143344e-03 -1.503350e-04 -1.506499e-03 -0.0005578037 #> dalmore        -2.332470e-03  4.045078e-04 -1.415380e-03 -0.0005555167 #> famousgrouse    1.049511e-03 -9.742276e-04 -2.767390e-04 -0.0013519075 #> glendronach    -3.271808e-04 -1.252161e-03  4.876743e-04 -0.0007595878 #> glenmorangie   -6.036688e-05 -1.153601e-03  6.282828e-05 -0.0010084062 #> highlandpark    9.189143e-06  3.409179e-04 -1.179990e-03 -0.0003642734 #> jackdaniels    -5.032865e-04 -2.133471e-03  1.457150e-04 -0.0007421376 #> jb             -6.252763e-04 -1.068694e-03  2.480485e-04 -0.0012779648 #> johnniewalker   5.173429e-04 -1.616008e-03  3.050870e-04 -0.0017541528 #> magallan        1.070598e-03  2.807696e-05 -9.598212e-06 -0.0008434404 #> makersmark      2.630934e-04 -1.571250e-03 -3.711217e-04 -0.0014299088 #> oban           -2.798357e-04 -9.061662e-04  7.605150e-04 -0.0005982398 #> oldpotrero     -7.682701e-04 -3.189202e-04 -1.292703e-03 -0.0004288338 #> redbreast      -4.639071e-04 -6.413198e-05 -1.338260e-03 -0.0002888724 #> tamdhu         -7.332551e-04 -1.369532e-03 -2.418841e-04 -0.0008026583 #> wildturkey      1.454628e-04 -8.134531e-04  2.078593e-04 -0.0009947430 #> yoichi          5.982287e-04 -6.939296e-04 -3.599693e-04 -0.0010059628 #>                          A23           A24           A25           A26 #> brahma         -5.735915e-04 -7.299627e-04 -5.033864e-04 -4.409200e-04 #> caney          -3.939390e-04 -4.249811e-04 -3.278067e-04 -2.777037e-04 #> chimay         -6.410642e-04 -3.497060e-04 -3.987327e-04 -3.797373e-04 #> corona         -1.717514e-04 -8.503422e-04 -5.002657e-04 -6.613581e-04 #> deusventrue    -2.719114e-04 -1.349406e-04 -4.678471e-04 -6.742999e-05 #> duvel          -7.818289e-04  3.932732e-04 -9.314404e-06 -2.825668e-05 #> franziskaner   -4.046305e-04 -1.021761e-03 -4.715859e-04 -6.988167e-04 #> grimbergen     -7.620525e-04 -3.869953e-04 -6.922240e-04 -3.085118e-04 #> guiness        -1.351687e-03 -8.291494e-04 -9.365808e-04 -3.617216e-04 #> hoegardeen     -2.498091e-04 -8.130813e-04 -3.461347e-04 -4.976229e-04 #> jupiler        -2.215773e-04 -5.697297e-04 -2.066056e-04 -4.092564e-04 #> kingfisher     -3.967327e-04 -7.678531e-04 -5.048256e-04 -5.527247e-04 #> latrappe       -1.006108e-03 -8.063068e-04 -1.898781e-04 -8.045060e-04 #> lindemanskriek -3.973242e-04 -5.696441e-04 -5.273803e-04 -3.157960e-04 #> nicechouffe    -3.297171e-04 -2.842429e-04 -4.972024e-04 -2.750759e-04 #> pecheresse     -4.105892e-04 -5.570638e-04 -2.828138e-04 -3.578320e-04 #> sierranevada   -1.099662e-03 -1.387875e-04 -9.442991e-04  1.096631e-04 #> tanglefoot     -1.635148e-03 -4.770303e-05 -1.168425e-03 -3.445467e-04 #> tauro          -1.625056e-04 -5.661598e-04 -1.964170e-04 -4.236883e-04 #> westmalle      -4.429987e-04 -3.005871e-04 -4.540035e-04 -1.575977e-04 #> amrut          -7.244893e-05 -8.542750e-04 -5.559353e-04 -3.654990e-04 #> ballantines    -1.390100e-03 -1.531693e-04 -8.488486e-04 -2.444936e-04 #> bushmills      -7.789744e-05 -8.117072e-04 -1.020809e-04 -5.697088e-04 #> chivas         -1.346262e-03 -5.894841e-04 -3.746380e-04 -6.807200e-04 #> dalmore        -7.044950e-04 -1.289471e-03  5.765490e-05 -1.174635e-03 #> famousgrouse   -5.212407e-04 -5.448013e-04 -3.704556e-04 -1.542122e-04 #> glendronach    -1.149506e-04 -1.118511e-03 -6.721453e-04 -5.846057e-04 #> glenmorangie   -2.822714e-04 -8.637078e-04 -6.676302e-04 -4.433941e-04 #> highlandpark   -1.555117e-03 -4.896530e-04 -7.493971e-04 -2.547851e-04 #> jackdaniels    -4.989083e-04 -7.889162e-04 -1.216612e-03 -2.005722e-04 #> jb             -7.216180e-04 -1.498284e-03 -5.639723e-04 -6.661035e-04 #> johnniewalker  -8.869808e-05 -1.130499e-03 -6.767161e-05 -5.211472e-04 #> magallan        1.136414e-04 -3.351403e-04  4.998842e-04 -1.129039e-04 #> makersmark     -8.579604e-04 -2.116652e-04 -7.427828e-04 -2.690318e-04 #> oban            5.678546e-05 -1.123786e-03 -3.954051e-04 -5.501621e-04 #> oldpotrero     -9.468502e-04 -4.171101e-04 -7.033424e-04 -7.954337e-04 #> redbreast      -1.186983e-03 -3.016778e-04 -5.536010e-04 -4.264666e-04 #> tamdhu         -3.844344e-04 -8.220193e-04 -7.701044e-04 -5.589579e-04 #> wildturkey     -1.178700e-03 -7.132883e-04 -9.516387e-04 -4.435690e-05 #> yoichi         -1.459839e-03 -7.921361e-04 -1.086323e-03  8.118876e-06 #>                          A27           A28           A29           A30 #> brahma         -3.652079e-04 -2.976623e-04 -3.220750e-04 -2.405557e-04 #> caney          -4.543725e-04 -1.340038e-04 -1.715288e-04  8.287078e-05 #> chimay          1.897326e-04 -3.220192e-04  1.012090e-04 -3.939649e-04 #> corona         -5.628453e-04 -2.866408e-04 -6.301550e-04 -2.277373e-04 #> deusventrue    -4.081023e-04 -6.793693e-06 -2.278672e-04 -1.602607e-04 #> duvel          -4.501744e-05 -5.229843e-04  8.047695e-05 -3.443646e-04 #> franziskaner   -4.854885e-04 -4.750621e-04 -4.823508e-04 -3.278401e-04 #> grimbergen     -4.197697e-04 -1.283767e-04 -1.685585e-04 -1.590373e-04 #> guiness        -6.925029e-04 -3.580901e-04 -5.165405e-04 -1.183717e-04 #> hoegardeen     -4.969737e-04 -2.495808e-04 -4.912037e-04 -6.346919e-05 #> jupiler        -2.483571e-04 -2.993651e-04 -1.920937e-04 -1.788899e-04 #> kingfisher     -5.448135e-04 -4.650672e-04 -5.979427e-04 -3.497510e-04 #> latrappe        1.533756e-04 -5.493115e-04  5.599578e-05 -7.649463e-05 #> lindemanskriek -5.437426e-04 -1.937430e-04 -5.135849e-04 -9.406325e-05 #> nicechouffe    -3.740962e-04 -2.387508e-04 -2.592933e-04 -3.671187e-04 #> pecheresse     -2.370723e-04 -2.125326e-04 -1.635507e-04 -1.002369e-04 #> sierranevada   -5.741030e-04 -3.442510e-05 -3.438660e-04 -1.891307e-04 #> tanglefoot     -1.719313e-04 -4.589738e-04  3.812701e-04 -6.044718e-04 #> tauro          -2.674869e-04 -3.421696e-04 -1.858056e-04 -2.076248e-04 #> westmalle      -5.645719e-04 -1.247868e-04 -4.182225e-04 -4.248077e-05 #> amrut          -3.710587e-04 -6.939239e-05 -6.261379e-04 -2.992623e-04 #> ballantines    -3.251060e-04 -5.994957e-04 -2.757254e-04 -8.154587e-04 #> bushmills      -2.720945e-04 -3.599923e-04 -3.414174e-04 -2.377839e-04 #> chivas         -2.255766e-04 -8.637994e-04 -1.458373e-04 -3.882162e-04 #> dalmore        -9.942863e-05 -7.848302e-04 -5.977677e-04 -2.299701e-04 #> famousgrouse   -6.485656e-04 -2.158172e-04 -7.140961e-04 -1.036337e-04 #> glendronach    -4.429512e-04 -1.668512e-04 -6.373005e-04 -3.195863e-04 #> glenmorangie   -7.765482e-04 -2.094619e-04 -8.242601e-04 -2.409561e-04 #> highlandpark    9.675349e-05 -9.874542e-05  2.967982e-04 -2.470293e-04 #> jackdaniels    -8.279356e-04  2.860995e-04 -6.585185e-04  1.297801e-04 #> jb             -3.654559e-04 -6.181808e-04 -6.228425e-04 -5.440835e-04 #> johnniewalker  -4.614923e-04 -4.769614e-04 -9.140300e-04 -3.536712e-04 #> magallan        1.930942e-04 -4.644705e-04 -1.875115e-04 -4.003883e-04 #> makersmark     -1.422649e-03 -3.876731e-05 -4.450249e-04  2.762661e-04 #> oban           -1.373020e-04 -1.436324e-04 -4.904222e-04 -3.352663e-04 #> oldpotrero     -4.396750e-04 -5.793447e-04 -2.152387e-04 -5.552859e-04 #> redbreast      -2.394329e-04 -7.978188e-04 -2.390723e-04 -5.929331e-04 #> tamdhu         -6.472657e-04 -2.331427e-04 -4.991397e-04 -1.900026e-04 #> wildturkey     -9.059420e-04 -3.046609e-04 -8.375680e-04 -3.434517e-04 #> yoichi         -3.472393e-04  1.165942e-04 -2.819714e-04 -3.541959e-04 #>                          A31           A32 B1            B2            B3 #> brahma         -1.974790e-04 -8.094538e-05  0 -1.900652e-04  3.306231e-04 #> caney          -5.975848e-05 -7.681466e-06  0  5.012013e-04 -3.851293e-04 #> chimay          3.467138e-05 -3.425039e-05  0  1.843629e-04  4.196107e-04 #> corona         -6.391514e-04 -7.778089e-05  0 -3.586724e-04  1.711055e-05 #> deusventrue    -5.672855e-05 -9.370594e-05  0  1.774985e-04 -8.326845e-05 #> duvel           2.041590e-04 -1.384422e-04  0 -4.198782e-04  7.447638e-05 #> franziskaner   -3.511246e-04 -1.887467e-04  0 -8.367911e-04 -3.508429e-04 #> grimbergen     -1.034722e-04 -1.074542e-04  0 -4.478525e-04 -1.575351e-04 #> guiness        -9.701532e-05  9.185850e-06  0  4.379065e-05 -3.284575e-04 #> hoegardeen     -3.894108e-04 -1.449367e-05  0 -1.402306e-05  3.803656e-04 #> jupiler        -1.358161e-04 -1.366520e-04  0  1.831345e-04 -1.827727e-04 #> kingfisher     -4.164633e-04 -2.558914e-04  0 -1.644074e-04 -3.059412e-04 #> latrappe       -6.701359e-05  2.760955e-04  0  2.164816e-04  1.803082e-04 #> lindemanskriek -2.873840e-04  2.669199e-06  0  4.100249e-04  2.208045e-04 #> nicechouffe    -1.738180e-04 -3.703168e-04  0  5.495158e-04 -2.042167e-05 #> pecheresse     -1.028221e-04 -5.676952e-05  0  2.181959e-04 -7.311833e-05 #> sierranevada   -3.941502e-05 -1.245511e-04  0 -2.089826e-04 -3.847117e-04 #> tanglefoot      3.701320e-04 -3.628268e-04  0  2.257469e-04 -2.009399e-04 #> tauro          -1.470322e-04 -2.627287e-04  0  1.762712e-04 -8.961804e-05 #> westmalle      -1.340963e-04 -3.584753e-05  0  2.683034e-04  5.829510e-04 #> amrut          -6.740665e-04 -1.263649e-04  0  3.259091e-04  3.840090e-04 #> ballantines    -3.000458e-04 -5.620135e-04  0 -8.980074e-06  1.013064e-03 #> bushmills      -3.951078e-04 -2.398475e-04  0  8.084328e-04  8.012671e-04 #> chivas         -6.925496e-05 -8.800981e-06  0  6.073651e-04  3.070684e-04 #> dalmore        -7.809275e-04  7.011618e-05  0  1.097768e-03  6.881659e-04 #> famousgrouse   -4.672213e-04 -9.582100e-05  0  1.287495e-04 -1.324051e-04 #> glendronach    -7.048583e-04 -1.975745e-04  0  4.149836e-04  1.394907e-04 #> glenmorangie   -6.325151e-04 -2.741086e-04  0  8.773153e-05 -6.257124e-05 #> highlandpark   -7.059637e-05 -2.569712e-04  0 -6.291662e-04 -7.091405e-04 #> jackdaniels    -4.208486e-04  7.987137e-05  0  1.828207e-04 -5.854778e-04 #> jb             -3.650894e-04 -2.691260e-04  0  5.770034e-04  1.295536e-04 #> johnniewalker  -8.042786e-04 -1.053716e-04  0  1.610309e-03  1.521699e-03 #> magallan       -1.549710e-04 -9.098292e-05  0 -1.110357e-03 -1.017379e-03 #> makersmark     -5.759001e-04 -6.063122e-04  0 -2.272912e-03 -1.921977e-03 #> oban           -6.414803e-04 -1.069347e-04  0  5.217373e-04  3.289690e-04 #> oldpotrero     -3.440437e-04 -2.888371e-04  0 -4.566144e-04  2.434271e-04 #> redbreast       1.079718e-05 -2.434157e-04  0  1.568632e-04  1.213587e-04 #> tamdhu         -4.031862e-04 -2.196594e-04  0  1.013117e-03  4.671170e-04 #> wildturkey     -3.706899e-04 -3.840752e-04  0  9.489660e-04  9.344159e-04 #> yoichi         -2.793226e-04 -3.702781e-04  0  2.371406e-04  3.337929e-04 #>                           B4            B5            B6            B7 #> brahma         -5.191749e-04  1.067446e-04 -9.218905e-05  5.604686e-07 #> caney           3.333918e-04 -2.899903e-04  7.350207e-05 -4.952054e-04 #> chimay          3.227901e-04 -2.906714e-05  5.573360e-04  1.059517e-04 #> corona         -5.501057e-04 -1.907425e-04 -4.256287e-04 -2.147013e-04 #> deusventrue    -1.403373e-03 -3.240180e-04 -9.330047e-04  6.515692e-04 #> duvel          -6.627095e-04  6.107940e-05 -4.746985e-04  2.450959e-04 #> franziskaner   -6.983186e-04 -1.894199e-04 -5.170165e-04  5.988419e-05 #> grimbergen      1.554676e-04  5.257427e-05  1.132609e-04 -6.848791e-05 #> guiness        -1.677242e-04 -5.817648e-04 -2.853668e-04 -5.620867e-04 #> hoegardeen      3.285812e-04  4.813766e-04  3.691213e-04  5.309204e-04 #> jupiler        -4.540203e-05 -1.242456e-04 -5.198885e-05 -2.289954e-04 #> kingfisher     -1.751841e-04  3.014782e-05  2.132220e-04  4.144846e-04 #> latrappe        5.468038e-04  2.303760e-04  5.053959e-04  2.603399e-04 #> lindemanskriek  2.791269e-04 -2.076986e-04 -1.312595e-04 -1.367999e-04 #> nicechouffe     2.492854e-04  2.171344e-04  2.155297e-04  1.621249e-04 #> pecheresse      2.879648e-04  3.072908e-05  1.503582e-04  2.875235e-05 #> sierranevada    2.254752e-04 -1.582761e-04  3.201773e-04 -2.506594e-04 #> tanglefoot     -3.556495e-04 -4.589428e-04 -1.231722e-04 -1.030225e-04 #> tauro           8.045507e-05  4.030041e-05  1.942858e-04  7.124766e-05 #> westmalle       2.086425e-04  5.569697e-04 -1.481080e-04  2.680453e-04 #> amrut           2.692429e-04  2.370884e-04  4.975910e-05  1.929742e-04 #> ballantines    -2.175286e-04  1.006239e-03 -2.063087e-04  6.874951e-04 #> bushmills       9.888621e-04  5.333749e-04  6.026329e-04  3.382499e-07 #> chivas          1.231654e-04 -3.404412e-05  8.988476e-05  1.476812e-04 #> dalmore         2.545366e-04  1.352642e-04 -1.253930e-04  2.101188e-04 #> famousgrouse   -1.274614e-04  2.141211e-04 -1.073666e-04  1.188717e-05 #> glendronach     1.071609e-04 -2.016928e-04 -6.904446e-05 -1.327779e-04 #> glenmorangie    1.913928e-04 -9.675222e-05  1.480796e-04 -8.118855e-05 #> highlandpark   -2.204109e-04 -5.021317e-04  3.287316e-04 -2.505046e-04 #> jackdaniels    -7.969529e-04 -4.880520e-04 -1.903562e-04  3.092736e-04 #> jb             -1.422141e-04 -2.056778e-04 -2.053789e-04  1.048725e-04 #> johnniewalker   1.140415e-03  1.505532e-04  2.156619e-04 -1.772208e-04 #> magallan       -7.964354e-04 -6.143625e-04 -3.734865e-04 -1.291146e-04 #> makersmark     -3.452843e-04 -1.437534e-04  4.289043e-04 -9.732915e-04 #> oban            3.351843e-04  4.359254e-05  1.826487e-05 -6.027186e-05 #> oldpotrero     -2.060062e-04  3.778706e-05 -5.576392e-04  2.258336e-04 #> redbreast      -1.087561e-04 -1.587376e-04 -9.420764e-05 -7.636860e-06 #> tamdhu          2.449976e-04  3.452581e-05 -1.344683e-04  1.407481e-04 #> wildturkey      2.048265e-04  1.038328e-04  7.988232e-06  2.379076e-04 #> yoichi          2.790195e-04  2.201285e-04  1.423493e-05 -5.626562e-05 #>                           B8            B9           B10           B11 #> brahma          6.268503e-06 -1.960132e-04  1.334431e-04  4.058288e-05 #> caney           8.536695e-05 -4.143363e-04  1.667420e-04 -3.134942e-04 #> chimay          6.209192e-04  1.441644e-04  1.715223e-04  5.930974e-05 #> corona         -1.931107e-04 -3.048499e-04 -2.065499e-04 -2.244684e-04 #> deusventrue    -8.354423e-04  2.287499e-05 -6.080012e-04  2.971827e-04 #> duvel          -1.676532e-04  1.512500e-04  6.986965e-05  2.318703e-04 #> franziskaner   -3.810484e-04  5.133436e-05 -3.407356e-04  5.681736e-05 #> grimbergen     -9.289817e-05  2.532879e-05  1.655384e-04  3.086461e-04 #> guiness        -1.496463e-04 -4.662246e-04 -1.905673e-04 -3.642220e-04 #> hoegardeen      3.462062e-04  4.557837e-04  4.205444e-04  3.080245e-04 #> jupiler        -8.073101e-05 -2.203453e-04 -1.514837e-04 -1.572771e-04 #> kingfisher      1.324881e-05  1.991329e-04  1.802238e-04  2.681872e-04 #> latrappe        1.829641e-04  2.106651e-04 -1.447749e-04  2.756836e-04 #> lindemanskriek  4.871774e-05 -4.788973e-05 -2.120403e-04 -1.394498e-04 #> nicechouffe     1.463372e-04  2.488056e-04  8.034353e-05  2.586078e-04 #> pecheresse      2.759482e-04  1.481251e-05  1.433130e-04 -1.556835e-05 #> sierranevada    1.406542e-04 -1.888577e-04  6.806233e-05 -5.042849e-05 #> tanglefoot      5.673867e-06 -2.751261e-04 -3.002656e-04 -2.455063e-04 #> tauro           2.932668e-04  1.286768e-04  1.547277e-04  1.336644e-04 #> westmalle      -1.539093e-04  4.586356e-04  1.799417e-05  3.301881e-04 #> amrut           1.570262e-04  2.548664e-04  1.115168e-04  7.490810e-06 #> ballantines    -3.868333e-05  3.003380e-04  1.592670e-04 -5.079525e-05 #> bushmills       2.135771e-04 -2.019147e-04  1.348464e-04 -1.302260e-04 #> chivas          1.332194e-04  1.056333e-04  2.227781e-05  4.227956e-05 #> dalmore        -4.021158e-06  2.679348e-04 -2.632871e-05  1.881627e-04 #> famousgrouse   -2.566731e-04  2.195639e-04 -7.568478e-05  1.842423e-04 #> glendronach     2.453495e-05 -7.915842e-06 -1.865175e-05 -6.786263e-05 #> glenmorangie    1.557411e-04 -3.527084e-06  1.414448e-04 -9.027797e-06 #> highlandpark    3.870735e-04 -4.437162e-04  1.970082e-04 -4.866817e-04 #> jackdaniels    -1.751848e-04 -3.777874e-05 -1.953733e-04  2.389926e-04 #> jb              1.396719e-04  1.902920e-04 -7.877557e-05  4.429623e-05 #> johnniewalker   5.133497e-04  1.719490e-04  5.339652e-04 -1.814410e-04 #> magallan       -1.577770e-04 -1.006505e-04 -1.482048e-04 -8.058980e-06 #> makersmark     -5.600587e-04 -7.200799e-04  4.777646e-04  2.581853e-04 #> oban            8.787835e-05  1.113193e-04  1.307306e-04 -2.483305e-05 #> oldpotrero     -3.831452e-04  2.156873e-04 -5.679089e-04  2.063675e-04 #> redbreast       2.541246e-05  2.426826e-05 -8.753325e-05 -8.652635e-06 #> tamdhu         -3.383952e-05  3.365051e-04 -1.785979e-04 -4.280721e-06 #> wildturkey      3.002663e-04  1.207047e-04  1.615231e-04 -7.004425e-06 #> yoichi         -1.168653e-04 -8.227670e-05  5.854442e-05  8.229082e-05 #>                          B12           B13           B14           B15 #> brahma         -1.917814e-04 -4.415768e-05 -1.760152e-06  2.542883e-05 #> caney           2.011956e-05 -2.220739e-04  9.710885e-05 -2.929034e-05 #> chimay         -3.197006e-06  3.218682e-04 -2.136764e-04  2.996248e-04 #> corona         -6.091420e-06 -1.616363e-04 -1.409505e-05 -3.036983e-04 #> deusventrue    -2.794108e-04 -2.410553e-04 -5.766037e-06 -1.013081e-04 #> duvel           1.659893e-04 -2.147276e-05 -7.372516e-05 -1.697182e-05 #> franziskaner   -2.140707e-04  1.309236e-04 -1.825897e-05  9.453212e-05 #> grimbergen      1.890428e-04  2.030487e-04  4.494496e-05  2.047563e-04 #> guiness        -2.602631e-04 -1.363068e-04 -1.037229e-05  4.860333e-05 #> hoegardeen      2.814325e-04  1.153058e-04  7.690851e-05 -7.760464e-05 #> jupiler        -1.151375e-04 -1.062093e-04 -1.414838e-04 -5.844711e-06 #> kingfisher      1.550433e-04  3.863328e-05  1.987871e-04  8.556756e-05 #> latrappe       -1.942322e-04  3.505642e-04 -2.308454e-04  6.983853e-05 #> lindemanskriek -5.113408e-05  4.601614e-05  2.027442e-05 -3.838834e-05 #> nicechouffe     4.652882e-05  1.804172e-04 -1.750016e-04  2.230781e-04 #> pecheresse      1.587407e-04 -2.017244e-05  7.161075e-05 -1.571287e-04 #> sierranevada    3.125122e-05  4.681375e-05 -5.698779e-05  5.098577e-05 #> tanglefoot     -9.215486e-05  2.005060e-05 -6.143058e-05 -1.075625e-04 #> tauro           1.226045e-04  1.507290e-04  8.074917e-05  1.647359e-04 #> westmalle       4.757341e-05  1.853084e-04  3.602525e-05 -1.202643e-06 #> amrut          -9.179140e-05 -1.098218e-04 -7.874144e-05 -6.180094e-05 #> ballantines     3.235267e-04 -2.822891e-04  3.832439e-04 -3.134129e-04 #> bushmills       2.015409e-04 -9.005687e-05  1.551691e-04 -1.474612e-04 #> chivas         -6.666931e-05  2.594754e-05 -1.465818e-04 -3.962153e-05 #> dalmore        -9.894417e-05  1.384451e-04 -3.536678e-05  1.404756e-04 #> famousgrouse   -7.211196e-05  3.016994e-05 -2.020980e-04 -1.375501e-04 #> glendronach    -9.224044e-05 -7.327995e-05 -4.780469e-05 -6.055072e-05 #> glenmorangie    6.261072e-05 -3.298471e-05  8.810869e-05  7.353097e-05 #> highlandpark    1.369676e-04 -2.344619e-04  1.400952e-04 -7.669050e-05 #> jackdaniels     3.169089e-04  3.555232e-04  1.821979e-04  7.868212e-05 #> jb             -5.463792e-05  1.038743e-04 -1.519486e-05 -1.559990e-05 #> johnniewalker  -5.200179e-05 -4.843014e-04 -2.187679e-04 -2.056380e-04 #> magallan       -1.072102e-04  1.704278e-05 -6.741317e-05 -2.205709e-05 #> makersmark      8.085419e-06 -3.964151e-04 -3.192971e-04  5.139474e-04 #> oban           -6.805926e-05 -6.673682e-05  7.219949e-05  1.027476e-04 #> oldpotrero     -3.604369e-04  2.247342e-04 -4.303685e-04  9.031801e-05 #> redbreast       1.217829e-04  9.014972e-05  1.107807e-04 -3.676530e-05 #> tamdhu         -2.219702e-04  1.160413e-05 -4.931877e-05  5.098733e-05 #> wildturkey      2.260401e-05  5.912870e-06  2.723819e-05  2.216640e-05 #> yoichi          1.472054e-04  3.703653e-06  3.359119e-05 -7.624301e-05 #>                          B16           B17           B18           B19 #> brahma         -1.024642e-04 -8.031982e-05 -7.433041e-05  2.949173e-05 #> caney           1.467454e-04 -1.500259e-05  8.962807e-05  1.017678e-04 #> chimay         -4.160132e-04  2.173693e-04 -2.232850e-04  1.410948e-04 #> corona          1.562544e-04 -1.863667e-04  1.898815e-04 -3.051700e-04 #> deusventrue     2.687631e-04 -5.866990e-05  2.532389e-04  4.683303e-05 #> duvel           8.924870e-05  1.724312e-04  1.497399e-04  1.188058e-04 #> franziskaner    2.076190e-05  5.303781e-05  1.447445e-04  2.813898e-05 #> grimbergen      1.197492e-04  9.559379e-05 -1.078603e-04 -4.345587e-05 #> guiness        -1.231218e-04  8.402517e-05 -5.232981e-05  1.549783e-04 #> hoegardeen      5.139144e-05 -1.331768e-04 -2.258407e-05 -2.391701e-04 #> jupiler        -9.634201e-05  7.584032e-05 -2.484072e-05  1.230285e-04 #> kingfisher      1.629910e-04  1.538249e-05  6.406877e-05 -8.623734e-05 #> latrappe       -3.333379e-04 -2.151666e-04 -1.793420e-04 -1.972264e-04 #> lindemanskriek  1.913674e-05 -2.214246e-05  6.308868e-05  1.058368e-04 #> nicechouffe    -1.476434e-04  1.487541e-04 -3.189322e-04  7.671453e-05 #> pecheresse     -1.502647e-05 -1.256547e-04 -2.111016e-05 -1.795287e-04 #> sierranevada   -1.612513e-04  6.781737e-05 -1.868408e-04  1.545018e-04 #> tanglefoot     -2.075450e-04 -6.190151e-05  7.110212e-05  1.907329e-04 #> tauro          -2.608415e-05  7.036816e-05 -1.112206e-04 -2.070534e-07 #> westmalle       1.555977e-04  2.494345e-05  2.457638e-04 -3.753649e-05 #> amrut          -5.808395e-05 -5.726583e-05 -4.347323e-05 -4.142367e-05 #> ballantines     2.695725e-04 -1.723254e-04  6.902277e-05 -2.491346e-05 #> bushmills       2.003848e-05 -1.361937e-04 -3.959514e-05 -8.151185e-05 #> chivas         -8.163047e-05  6.400487e-05  2.496293e-05  3.670116e-07 #> dalmore         5.018616e-05 -2.426364e-05  1.517115e-05 -7.169745e-05 #> famousgrouse   -5.272581e-05  2.433801e-05  7.999124e-05  1.472625e-05 #> glendronach    -3.899954e-05 -1.372083e-04 -6.680409e-05 -1.191487e-04 #> glenmorangie    9.340889e-05  8.779820e-06  1.467657e-06 -4.863149e-05 #> highlandpark   -5.506078e-05 -4.375426e-05 -1.601530e-04  1.023000e-05 #> jackdaniels     1.592122e-04  1.994958e-04  4.570234e-04  2.251557e-04 #> jb             -1.185695e-04 -8.893584e-05  3.900650e-06  1.331244e-05 #> johnniewalker   1.378430e-04  1.149116e-04  3.109675e-04  2.515221e-04 #> magallan       -1.015593e-04 -4.418979e-06 -3.238623e-05  3.993857e-05 #> makersmark      1.443085e-04  1.724064e-04 -5.251779e-04  1.746597e-04 #> oban            9.860858e-05 -4.593528e-05 -8.084187e-05 -5.853302e-05 #> oldpotrero     -2.725407e-04  1.367096e-04 -1.893404e-04 -2.795346e-06 #> redbreast       1.181494e-04 -9.309777e-06  1.628999e-04 -2.745219e-05 #> tamdhu         -4.983723e-05 -7.376290e-05 -1.044426e-04 -7.987732e-05 #> wildturkey     -1.630103e-04 -3.611579e-06 -1.779304e-04 -3.570358e-05 #> yoichi          2.484339e-05  1.257615e-05  9.503541e-05  2.723700e-05 #>                          B20           B21           B22           B23 #> brahma         -1.727433e-05  3.737724e-05 -9.462283e-06 -4.267458e-05 #> caney           1.631617e-04  1.508881e-04  1.414211e-04  1.088653e-04 #> chimay         -3.610984e-05 -1.712342e-04  2.100688e-05 -3.082575e-04 #> corona          5.852024e-05 -1.892126e-04  1.439899e-04 -1.701985e-04 #> deusventrue     1.245832e-04  7.313250e-06 -1.170924e-04  1.347852e-04 #> duvel           1.101660e-04 -1.728305e-05  9.542637e-05 -1.277279e-04 #> franziskaner    1.795671e-04  6.095791e-06  1.990743e-04  7.411105e-06 #> grimbergen     -5.951324e-05 -1.402638e-05 -1.801951e-04 -1.396215e-04 #> guiness        -2.255777e-05 -1.319653e-05 -1.127083e-04 -8.149761e-05 #> hoegardeen     -1.346868e-04 -3.083842e-04 -1.133545e-04 -2.005817e-04 #> jupiler        -2.427445e-05  1.297878e-04  3.863779e-05  1.328010e-04 #> kingfisher      1.719032e-05 -8.315015e-05 -5.685565e-06 -4.528561e-05 #> latrappe        7.799543e-05 -1.931198e-04  5.065654e-05 -2.027860e-04 #> lindemanskriek  9.064003e-05  1.285962e-04 -7.498356e-05  9.866433e-05 #> nicechouffe    -2.076616e-04  3.715694e-05 -1.897096e-04 -8.192524e-05 #> pecheresse     -6.967807e-05 -1.204336e-04 -4.034586e-05 -8.286053e-05 #> sierranevada   -1.253536e-04  2.231407e-04 -7.914671e-05  2.030511e-04 #> tanglefoot      1.265752e-04  3.645141e-05  8.153378e-05  1.463325e-04 #> tauro          -1.673200e-04 -3.795493e-05 -2.216782e-04 -9.138492e-05 #> westmalle       1.513049e-04 -8.741209e-05  1.191689e-04  4.122166e-05 #> amrut          -1.620938e-05 -4.241691e-05 -2.872726e-05 -7.706793e-05 #> ballantines    -9.511720e-05  3.497929e-05 -1.525410e-04  3.344485e-05 #> bushmills      -1.692696e-05 -1.985027e-05 -5.673431e-05 -4.245935e-05 #> chivas         -3.520791e-05 -3.239497e-05  3.624818e-05 -7.905990e-05 #> dalmore         1.335714e-04  4.821092e-05  3.029999e-05 -2.866421e-05 #> famousgrouse    3.446106e-05 -9.287266e-05 -5.252847e-05 -1.166408e-04 #> glendronach    -8.818028e-06 -5.284867e-05 -4.842191e-05 -1.083835e-04 #> glenmorangie   -1.128407e-05  4.185137e-05  6.424851e-05  3.040985e-05 #> highlandpark   -6.621924e-05  2.623244e-05  5.174724e-05 -4.722625e-05 #> jackdaniels     3.551884e-04  1.445123e-06  2.762319e-04  1.240702e-04 #> jb             -2.384959e-06 -6.979310e-05 -8.136968e-05 -2.918739e-05 #> johnniewalker   2.572639e-04  2.352637e-04  2.062948e-04  1.853106e-04 #> magallan        8.388080e-05  2.286704e-05  8.619190e-05 -1.114752e-06 #> makersmark      1.772977e-04  4.534530e-04 -1.701385e-04 -2.389260e-04 #> oban            5.722186e-05  9.730784e-05  2.947083e-05 -4.596947e-05 #> oldpotrero     -9.109679e-05 -1.485829e-05  8.622920e-05 -7.160617e-05 #> redbreast       1.465601e-04 -2.217205e-05  6.081711e-05  5.593471e-05 #> tamdhu         -4.444590e-05 -9.622733e-05 -5.446212e-05 -7.968429e-05 #> wildturkey     -6.312522e-05 -8.731978e-05 -9.045224e-05 -1.442588e-04 #> yoichi         -6.770553e-06 -7.074253e-06 -3.277625e-05  3.448357e-05 #>                          B24           B25           B26           B27 #> brahma          3.357899e-05  1.692467e-05  1.346898e-04  1.323552e-05 #> caney           8.041007e-05  1.705793e-04  6.811154e-05  6.205877e-05 #> chimay          6.975068e-05 -3.230519e-04  2.772097e-05 -1.930852e-04 #> corona          2.066873e-05 -1.628616e-04  7.895544e-05  9.425535e-06 #> deusventrue    -1.235701e-04  1.790799e-04 -1.724233e-04  1.249888e-04 #> duvel           7.759496e-05 -1.131994e-04  1.749479e-04  5.630411e-05 #> franziskaner    2.096840e-04  5.258363e-05  2.046122e-04  9.602614e-05 #> grimbergen     -1.934331e-04 -5.077219e-05 -9.668195e-05 -1.152902e-05 #> guiness        -3.540174e-05 -1.382297e-04 -7.048572e-05 -2.514223e-04 #> hoegardeen     -1.012696e-04 -2.098450e-04 -1.981990e-04 -1.709484e-04 #> jupiler         4.995495e-05  9.924240e-05  3.292957e-05  6.028515e-05 #> kingfisher     -4.338832e-05  2.094242e-06 -1.091127e-04  1.809903e-05 #> latrappe        4.481099e-05 -9.750492e-07  1.320075e-04  1.075270e-04 #> lindemanskriek -6.757003e-05  1.553763e-04 -7.707839e-05  5.131619e-05 #> nicechouffe    -5.530183e-05 -1.113497e-04  1.000706e-04 -1.285347e-04 #> pecheresse      3.202237e-05 -8.922353e-07  7.525484e-05  6.328643e-06 #> sierranevada   -3.979424e-05  2.215211e-04  6.707671e-05  1.786146e-04 #> tanglefoot      2.668517e-04  2.207476e-04  1.806422e-04  1.175903e-04 #> tauro          -2.201592e-04 -1.334780e-04 -1.668332e-04 -1.334782e-04 #> westmalle       1.494564e-04  7.630565e-05  6.478230e-05  8.574062e-05 #> amrut          -7.423616e-05 -9.642488e-05 -6.096081e-05 -5.130361e-05 #> ballantines    -1.139455e-04 -5.063695e-06 -7.587876e-06 -8.630156e-05 #> bushmills      -1.070090e-04 -5.351683e-05 -6.508694e-05 -4.250557e-05 #> chivas         -6.203789e-05 -1.131152e-04 -2.118968e-05 -2.011372e-05 #> dalmore        -1.052443e-04  1.314585e-04  6.223813e-05  8.974265e-05 #> famousgrouse    9.201751e-06 -3.069921e-05  6.168392e-05 -2.812213e-05 #> glendronach    -9.443193e-05 -9.402038e-05 -6.862198e-05 -6.239359e-05 #> glenmorangie    8.064676e-06 -9.115729e-05  2.092771e-05 -6.525547e-06 #> highlandpark    1.656563e-04 -1.197451e-04  1.990472e-04 -1.607961e-04 #> jackdaniels     3.141428e-04  1.438902e-04  1.360127e-04  7.677775e-05 #> jb             -5.981547e-06  3.209775e-05 -5.872919e-05 -4.055534e-05 #> johnniewalker   1.090105e-04  2.440030e-05  4.631195e-05 -6.158105e-05 #> magallan        4.078643e-05 -5.422248e-05  9.397643e-05  1.807366e-05 #> makersmark      7.660151e-05  2.869973e-04  3.123278e-04 -1.724480e-04 #> oban           -8.787218e-05  1.336036e-05  6.898514e-05  1.098895e-04 #> oldpotrero      1.298368e-04 -1.188172e-04  1.233055e-04 -9.419603e-05 #> redbreast       1.608830e-05  1.972762e-05 -8.025162e-06  3.855603e-05 #> tamdhu         -7.215626e-05 -5.300043e-05 -6.775627e-05  2.119539e-05 #> wildturkey     -4.169666e-05 -8.994826e-05  2.380420e-05 -4.889098e-05 #> yoichi         -1.328858e-05  3.447740e-05 -3.698146e-05 -2.869228e-05 #>                          B28           B29           B30           B31 #> brahma          9.806530e-05 -1.691212e-05  1.229728e-04  6.153001e-06 #> caney           4.057485e-05  3.928378e-05  3.848225e-05  5.608283e-05 #> chimay         -2.670005e-05  2.629625e-05 -4.657436e-05  1.626961e-04 #> corona         -1.115351e-05  1.797628e-05 -6.512991e-05  1.430262e-04 #> deusventrue    -1.098118e-04 -7.708499e-06 -1.093334e-04 -1.335296e-04 #> duvel           8.996050e-05 -1.871001e-05 -1.512385e-04 -1.753386e-05 #> franziskaner    1.770497e-04  7.088446e-05  8.138285e-05  5.397908e-05 #> grimbergen     -1.034470e-04  7.562129e-05 -2.509585e-05  1.318461e-04 #> guiness        -1.343019e-05 -2.135015e-04  6.528218e-05 -2.138696e-04 #> hoegardeen     -1.891331e-04 -2.027795e-05 -1.994452e-04  8.440574e-06 #> jupiler         3.698933e-05  4.153355e-05 -1.269451e-05  2.996676e-06 #> kingfisher     -5.937101e-05  4.782661e-05 -4.637724e-05 -1.873467e-05 #> latrappe        3.127671e-05  6.155545e-05  1.090250e-05  1.042136e-04 #> lindemanskriek -7.184754e-05  1.818455e-05 -3.242323e-05 -4.990771e-05 #> nicechouffe     1.757105e-04 -2.027842e-04  2.059657e-04 -1.480986e-04 #> pecheresse      6.500181e-05  3.025513e-05  4.663718e-05  2.857271e-05 #> sierranevada    4.103579e-05  4.237471e-05  8.981611e-05  3.178064e-06 #> tanglefoot      1.359892e-04  1.424025e-04  9.431909e-05  5.521421e-05 #> tauro          -1.277568e-04 -1.387930e-04 -9.102122e-05 -7.700952e-05 #> westmalle       1.603183e-05  4.180181e-05  6.597365e-05  1.291222e-04 #> amrut          -3.381274e-05 -5.523538e-05 -5.099306e-05 -5.156172e-05 #> ballantines     7.017023e-05 -1.808696e-04  3.999426e-05 -1.901792e-04 #> bushmills      -1.565836e-05 -2.836986e-05 -1.194452e-05 -5.279559e-05 #> chivas         -4.979588e-05 -8.638138e-06 -7.040279e-05  4.772406e-05 #> dalmore        -6.494053e-05 -9.744864e-05  6.715816e-05  3.921296e-05 #> famousgrouse    3.214914e-05 -1.031722e-05  8.491463e-05  5.581120e-05 #> glendronach    -6.552423e-05 -4.747638e-05 -6.498987e-05 -2.314333e-05 #> glenmorangie    9.980637e-05 -2.982313e-05  5.485448e-05 -7.232008e-05 #> highlandpark    1.333362e-04 -1.101299e-04  5.583464e-05  3.249483e-05 #> jackdaniels     6.961363e-05  1.125400e-04  6.535658e-05  1.682956e-04 #> jb             -1.163580e-04  1.168139e-05 -1.820077e-05  7.989656e-05 #> johnniewalker   1.843935e-04 -4.029596e-05  2.282147e-04 -1.093759e-04 #> magallan        1.905241e-04 -7.821211e-06  9.830610e-05 -1.616843e-05 #> makersmark     -1.527610e-05 -1.083002e-05  2.667490e-04  5.665387e-05 #> oban           -1.219200e-05 -3.906020e-05 -6.570052e-05  4.842028e-05 #> oldpotrero      1.395086e-04 -1.457807e-05  8.504515e-05 -1.657986e-05 #> redbreast       1.937056e-05 -3.090785e-05  1.655432e-05 -5.152611e-05 #> tamdhu         -7.750763e-05  1.806773e-06 -1.030223e-04 -6.475153e-06 #> wildturkey      2.116661e-05 -3.808603e-05  2.629787e-06  1.485641e-06 #> yoichi         -1.436536e-05 -6.982657e-06  4.571619e-05 -2.867356e-05 #>                          B32 C1            C2            C3            C4 #> brahma          1.217078e-04  0 -1.637571e-03 -3.936895e-03  5.408096e-03 #> caney           1.227213e-05  0  1.239828e-03 -2.845651e-04  3.757825e-04 #> chimay         -4.552776e-05  0 -3.757608e-03 -1.797357e-03 -2.127924e-03 #> corona         -4.547231e-05  0 -1.652864e-03  1.573302e-03  4.897281e-04 #> deusventrue     5.762098e-05  0  1.552775e-03  7.706329e-04 -1.416448e-03 #> duvel          -1.615768e-04  0  2.872128e-04 -5.422392e-06 -7.785717e-04 #> franziskaner    5.143834e-05  0 -1.253868e-03  3.476506e-04  1.004621e-03 #> grimbergen     -7.062906e-05  0  1.700875e-03 -1.452474e-04  4.332935e-04 #> guiness         7.815836e-05  0 -5.088378e-04  1.628258e-03  5.025916e-05 #> hoegardeen     -2.171328e-04  0 -2.538102e-03  6.627214e-04 -1.481847e-03 #> jupiler        -2.081774e-05  0  9.877198e-04 -8.223351e-05  1.286204e-04 #> kingfisher     -3.244750e-05  0  8.355893e-04 -2.193322e-03 -9.853901e-04 #> latrappe        7.681797e-05  0  2.026476e-03  6.109498e-04 -1.518299e-04 #> lindemanskriek -4.318610e-05  0 -1.736348e-03  1.465734e-03 -1.513403e-03 #> nicechouffe     2.418090e-04  0 -5.467071e-04  2.799211e-04 -4.577128e-04 #> pecheresse      5.132538e-05  0  1.796104e-03 -3.206383e-04 -1.338857e-04 #> sierranevada    1.230683e-04  0  9.370620e-04 -7.543929e-04  2.972714e-04 #> tanglefoot     -7.568911e-06  0 -7.405447e-04  3.028807e-04  6.337466e-04 #> tauro           7.872342e-07  0  1.122815e-04 -2.572009e-04 -8.133564e-04 #> westmalle       1.478645e-04  0  1.228197e-03 -2.741133e-04  9.140310e-05 #> amrut          -2.042009e-05  0  4.658444e-04 -4.347520e-04 -3.326225e-05 #> ballantines    -8.925358e-06  0 -5.591149e-04  1.469581e-03 -1.536579e-03 #> bushmills      -2.889262e-05  0 -3.958316e-04  1.944836e-03 -7.053533e-05 #> chivas         -7.474859e-05  0 -1.172232e-03 -1.218925e-03 -3.262755e-05 #> dalmore         8.076785e-05  0  6.958725e-04 -1.680610e-03  6.152298e-04 #> famousgrouse    1.145499e-04  0  7.115395e-05  8.468121e-04 -4.933730e-04 #> glendronach    -4.912820e-05  0 -7.099606e-05  6.421159e-04 -4.706785e-04 #> glenmorangie    1.828692e-05  0 -8.919633e-06 -2.628346e-04  9.674043e-05 #> highlandpark   -4.147565e-05  0 -1.617000e-03  5.528353e-04 -3.372340e-04 #> jackdaniels     6.663192e-06  0  5.328968e-04 -1.540810e-03 -5.769145e-04 #> jb             -6.291564e-05  0 -2.505933e-03 -9.424246e-04 -8.780719e-04 #> johnniewalker   1.655345e-04  0  4.677592e-03 -4.233763e-04 -1.898993e-03 #> magallan        3.047713e-05  0  2.189543e-04  4.632813e-04  1.888985e-04 #> makersmark      1.662543e-05  0  1.698257e-03 -6.596354e-04  3.533379e-04 #> oban            5.922167e-05  0  6.795967e-07  1.085005e-06 -4.641661e-04 #> oldpotrero      5.577825e-05  0 -6.093255e-05  4.513517e-05 -4.902640e-04 #> redbreast       7.687024e-05  0 -1.468386e-03  1.265193e-04 -1.396525e-04 #> tamdhu         -7.372278e-05  0  9.586941e-04  6.330302e-04 -2.779959e-04 #> wildturkey     -4.151273e-05  0 -9.213008e-05 -1.129525e-03 -4.176692e-04 #> yoichi          3.983470e-06  0  5.380772e-05 -7.906572e-05 -7.656576e-04 #>                           C5            C6            C7            C8 #> brahma         -1.259407e-03 -3.994402e-03  3.268582e-03  4.792269e-04 #> caney          -4.017802e-05  4.699805e-04  2.518166e-04  6.300072e-04 #> chimay         -4.663387e-04 -7.424827e-05 -8.096453e-05  9.946667e-04 #> corona          1.867708e-04  6.888736e-04  3.145355e-04  5.189042e-04 #> deusventrue     1.463377e-03  9.055123e-04 -2.834923e-04 -1.443910e-03 #> duvel           3.178998e-04  2.219253e-04  5.438377e-04 -3.518900e-06 #> franziskaner    1.054384e-03  2.433412e-04  9.526672e-04  8.662476e-04 #> grimbergen     -6.417041e-04 -1.403671e-03  1.850428e-04  1.990252e-04 #> guiness         8.516115e-05  5.947385e-04 -3.856099e-04  2.426892e-04 #> hoegardeen     -6.536099e-04 -5.091092e-04 -6.872483e-04 -4.089876e-04 #> jupiler         4.242307e-04  1.903101e-04 -1.512322e-04  3.486794e-04 #> kingfisher      1.200089e-03  4.039578e-05 -2.246083e-04 -6.682649e-04 #> latrappe       -2.100725e-04  4.680496e-04  1.907268e-04 -1.386083e-04 #> lindemanskriek  2.721525e-04 -8.593526e-04 -1.905709e-04  1.402970e-04 #> nicechouffe    -4.033887e-04 -3.674008e-04 -1.582921e-04 -3.898917e-04 #> pecheresse     -3.165154e-04 -6.798663e-04 -1.857663e-04 -5.070674e-04 #> sierranevada    4.903049e-04  5.175725e-04 -5.450918e-04 -6.169308e-04 #> tanglefoot      6.556462e-04  1.058980e-03  8.585128e-04  5.745493e-04 #> tauro          -4.748704e-04 -3.315681e-04 -4.564306e-04 -3.514821e-04 #> westmalle      -4.491227e-04 -2.495132e-04 -7.270457e-05 -1.344863e-04 #> amrut           8.477464e-05 -1.080422e-04  2.126076e-04 -9.256970e-05 #> ballantines     6.528392e-04 -2.944984e-04 -5.656855e-04  1.789388e-04 #> bushmills       9.280815e-04 -4.013982e-04 -6.650163e-04 -5.644542e-04 #> chivas          1.300827e-04 -3.851168e-05  4.239507e-05  1.334791e-04 #> dalmore        -2.964899e-04 -1.304289e-04  7.782306e-04 -4.877421e-04 #> famousgrouse    6.303902e-04 -1.322629e-04 -2.372041e-04 -2.550728e-05 #> glendronach    -3.501431e-04 -2.525866e-04  3.742212e-04  1.133101e-04 #> glenmorangie   -3.395833e-04 -4.246431e-04 -3.274667e-04  1.061570e-04 #> highlandpark    6.066669e-04  1.088092e-03  5.256719e-04  5.273203e-04 #> jackdaniels     1.023982e-03  9.323203e-04  1.214171e-03  5.898250e-04 #> jb              2.339479e-04  3.473492e-04  3.733691e-04  1.626720e-04 #> johnniewalker  -8.686486e-04 -1.355694e-03  1.175580e-03  3.264915e-04 #> magallan        2.310078e-04 -1.038695e-04 -1.026307e-05  1.023165e-04 #> makersmark     -5.037028e-04 -1.240866e-04 -7.956100e-05 -6.606345e-05 #> oban           -3.076544e-04 -4.937905e-04 -1.310019e-05 -2.416906e-04 #> oldpotrero     -5.717320e-04 -9.307817e-04  1.291075e-04 -5.512552e-04 #> redbreast      -6.765261e-04  1.325618e-04  4.297985e-04  3.419357e-04 #> tamdhu         -1.871447e-04 -1.524034e-04  6.923348e-05 -5.932353e-04 #> wildturkey     -5.568095e-04  1.396939e-04 -3.130911e-04 -2.441291e-05 #> yoichi         -1.807137e-04 -7.887244e-04 -4.647802e-04 -2.321719e-04 #>                           C9           C10           C11           C12 #> brahma         -1.321861e-03  7.225736e-04  2.052451e-04  1.666890e-04 #> caney           4.837212e-04 -3.443095e-04  1.349160e-04  4.336526e-06 #> chimay         -5.660053e-04  2.292011e-04  3.851391e-04 -2.066153e-05 #> corona          3.419355e-04 -4.427112e-05  5.053095e-04  2.703064e-04 #> deusventrue     5.149210e-05  4.983572e-04 -8.471361e-05  3.773608e-04 #> duvel           4.727181e-05  8.518990e-04  5.267156e-05 -7.761916e-06 #> franziskaner    4.052798e-04  2.307566e-04  5.425481e-04  8.822035e-04 #> grimbergen     -4.235811e-04 -1.047152e-04  8.528320e-05 -4.862829e-04 #> guiness         2.578559e-05 -4.057230e-04  3.454914e-04  3.070080e-04 #> hoegardeen     -2.093222e-04 -8.166019e-05 -5.849685e-04 -1.080950e-04 #> jupiler         3.426590e-04  1.476449e-04  3.134641e-04  2.698336e-04 #> kingfisher      1.267526e-04  2.565541e-04 -2.246671e-04  6.355569e-05 #> latrappe       -4.351985e-06 -5.637614e-05  4.355069e-04  3.406179e-04 #> lindemanskriek -4.691485e-04  6.262551e-04  3.619995e-05  5.173449e-04 #> nicechouffe    -2.084102e-04  4.207808e-04  7.211961e-05 -7.528575e-05 #> pecheresse     -2.691263e-04 -5.693772e-04 -3.209598e-04  2.785471e-04 #> sierranevada    1.686643e-04  2.583335e-04  8.547137e-04 -1.139936e-04 #> tanglefoot      7.740523e-04  4.070373e-04  5.906937e-04  9.596081e-04 #> tauro          -3.210499e-04 -2.265987e-04  5.213196e-05  1.560054e-07 #> westmalle       4.839335e-04  5.801730e-05  1.736045e-04 -1.456983e-04 #> amrut          -1.864115e-04 -2.461486e-04 -3.925113e-04 -1.058934e-04 #> ballantines    -5.195587e-04  3.044292e-04 -2.940957e-04 -8.254562e-05 #> bushmills      -7.180710e-04  9.032786e-05 -3.120552e-04  3.338259e-04 #> chivas         -3.525098e-05 -9.088640e-05  2.114664e-04 -4.123221e-05 #> dalmore         2.200639e-05 -1.248926e-04 -1.755355e-06  2.379108e-04 #> famousgrouse   -3.212998e-04  3.215665e-04 -7.784050e-05 -5.945648e-04 #> glendronach     9.391914e-05  1.721023e-04 -5.496005e-04 -4.452810e-05 #> glenmorangie   -1.452951e-05  2.274608e-05  8.210480e-05  2.227747e-04 #> highlandpark   -1.043832e-04  2.593737e-04  7.274696e-06 -7.945600e-05 #> jackdaniels    -6.541464e-05  8.873609e-04  3.142194e-04  5.911319e-04 #> jb             -2.944987e-04  2.504811e-05 -2.127576e-05 -1.962938e-04 #> johnniewalker  -8.111435e-05 -2.403699e-04 -1.403144e-03 -1.314933e-04 #> magallan        4.068423e-04  5.073294e-04  1.401801e-04  3.243760e-04 #> makersmark      4.971815e-04  6.070002e-04  1.442476e-05 -8.225582e-05 #> oban           -1.976049e-04 -2.813942e-04 -2.577944e-04 -9.115022e-05 #> oldpotrero     -5.682370e-04  1.529407e-07 -2.873197e-04 -1.840435e-04 #> redbreast      -3.874401e-05  4.931648e-05  3.073398e-04  8.441133e-05 #> tamdhu         -5.985664e-04 -4.647946e-04 -1.822017e-04  1.592463e-04 #> wildturkey      1.524887e-05 -6.414600e-04  2.874523e-04 -2.824274e-05 #> yoichi         -2.834302e-04  1.556736e-04 -8.243757e-05  1.918715e-04 #>                          C13           C14           C15           C16 #> brahma         -7.782826e-05 -1.930624e-05  3.379892e-04 -9.611430e-05 #> caney           5.571557e-05  1.585334e-04 -3.676568e-04 -2.424919e-04 #> chimay          2.069414e-04 -1.059161e-04 -5.895162e-05 -4.070464e-04 #> corona         -3.358855e-05  3.794088e-04  7.431417e-05  7.851392e-04 #> deusventrue    -2.738947e-04  7.547067e-04  2.411713e-04  2.337981e-04 #> duvel          -2.899095e-04  1.153102e-04  4.201454e-04 -9.309399e-05 #> franziskaner    2.887549e-04  1.838704e-04 -1.076209e-04 -8.678411e-05 #> grimbergen     -5.441140e-04 -1.117367e-04  8.398864e-05  4.536624e-06 #> guiness         1.002552e-04  4.035924e-04  4.794422e-04 -1.503013e-04 #> hoegardeen     -6.620343e-04 -4.558427e-05  1.793707e-04 -2.548946e-04 #> jupiler         4.922288e-05 -5.590358e-08  1.921737e-04 -1.287978e-04 #> kingfisher     -9.293274e-07  6.058292e-04  1.754447e-04 -1.321970e-04 #> latrappe        1.258799e-05 -4.563834e-04 -3.980325e-04 -3.632376e-05 #> lindemanskriek  3.942243e-05  1.639314e-04  3.621133e-04  2.603456e-05 #> nicechouffe     8.805995e-05  2.917660e-04  1.356673e-04 -1.709613e-04 #> pecheresse     -4.861071e-04 -4.521904e-05 -4.938033e-05  1.569629e-04 #> sierranevada   -2.667776e-04  5.072602e-05 -1.791841e-04 -7.011575e-05 #> tanglefoot      2.953027e-04 -9.831802e-06 -8.747989e-05  1.619364e-04 #> tauro          -9.632911e-05 -9.375203e-05 -4.284123e-05 -2.047570e-04 #> westmalle      -1.393513e-04 -1.584604e-04 -3.324221e-04  2.549518e-04 #> amrut           4.297953e-05  1.515928e-04  8.652384e-05 -1.182304e-04 #> ballantines     1.275977e-04 -1.152623e-04 -9.205056e-05 -4.163553e-09 #> bushmills      -3.457626e-04  4.250469e-05  3.552076e-05 -5.053800e-04 #> chivas         -1.777372e-04 -9.492327e-05 -2.055696e-04  5.817240e-05 #> dalmore         2.367824e-05  3.601473e-04 -1.802035e-04 -7.233793e-05 #> famousgrouse   -5.629740e-04  1.716016e-04  4.970078e-04  1.638608e-04 #> glendronach    -1.861826e-04 -2.166241e-04 -2.725060e-05 -2.919820e-04 #> glenmorangie    4.284188e-04 -3.059123e-04  1.548577e-07  5.323021e-05 #> highlandpark   -5.202986e-05 -4.127667e-05  2.586090e-05 -1.032951e-04 #> jackdaniels     5.896938e-05 -4.375330e-04  4.011936e-04  2.314189e-04 #> jb             -2.916919e-04 -5.900720e-04 -2.136720e-04  7.329517e-05 #> johnniewalker  -1.479419e-04  3.073803e-04  3.149823e-04  3.938711e-04 #> magallan        1.154100e-04  2.200612e-04  3.321945e-04  7.696785e-05 #> makersmark      3.337325e-04 -1.068357e-05  4.436158e-04  1.721234e-04 #> oban           -2.999197e-04  1.035791e-04 -1.810039e-04 -1.185358e-04 #> oldpotrero     -5.099520e-04 -2.591210e-04 -1.489559e-04 -4.091994e-04 #> redbreast      -1.790354e-04 -2.991022e-04  1.768442e-04  1.061400e-05 #> tamdhu          2.201204e-04  3.136042e-04 -7.139993e-05 -3.052562e-04 #> wildturkey     -4.051933e-04  1.346852e-05  2.079652e-04 -1.649571e-04 #> yoichi         -1.379502e-04 -2.627384e-04  2.209794e-04  4.497007e-05 #>                          C17           C18           C19           C20 #> brahma         -2.462206e-05  4.542898e-05  2.594677e-04  1.484945e-04 #> caney          -3.200717e-04 -2.643818e-04  1.448941e-04 -1.295417e-04 #> chimay          2.615626e-04  1.230016e-04 -2.602910e-04  4.566772e-04 #> corona          1.619221e-04 -1.010082e-04 -9.475160e-05  4.604978e-05 #> deusventrue     4.889298e-04  3.580373e-04  2.948538e-04 -2.065040e-05 #> duvel           2.191614e-04  8.201863e-05  5.854558e-06 -8.940682e-05 #> franziskaner   -8.092666e-05 -6.457841e-05 -2.824789e-04 -3.859311e-04 #> grimbergen     -3.961946e-04  3.650999e-05  3.213716e-04  1.180102e-04 #> guiness         2.115046e-04  1.749610e-04 -1.746358e-04 -1.581495e-04 #> hoegardeen      7.197760e-05 -2.012077e-04 -2.334965e-04  4.422896e-05 #> jupiler        -2.008260e-05 -2.470511e-04 -1.663822e-04 -1.150708e-04 #> kingfisher     -1.203436e-04  1.416556e-05  1.233551e-04 -1.424855e-04 #> latrappe       -3.509800e-04 -3.539077e-04 -3.910480e-04 -1.488442e-04 #> lindemanskriek  4.564241e-04  6.139873e-05  2.472946e-04 -7.212713e-05 #> nicechouffe     2.088775e-05 -3.045093e-04 -4.116058e-05  9.187509e-05 #> pecheresse      3.099554e-04 -1.756667e-04  1.277428e-04 -9.767197e-05 #> sierranevada   -2.374147e-04  1.934474e-04  3.562142e-04 -2.243221e-05 #> tanglefoot      2.693295e-04 -1.713949e-04 -4.543909e-05 -1.225435e-04 #> tauro          -8.921517e-05 -3.763435e-05  2.081496e-05  5.772223e-05 #> westmalle      -2.914399e-04 -1.082880e-04 -2.262683e-04 -1.303860e-04 #> amrut          -2.450964e-04 -2.485646e-04 -1.839206e-04 -1.708371e-04 #> ballantines    -1.568616e-04 -3.125000e-04 -5.701268e-05 -4.566974e-04 #> bushmills       4.389152e-04  1.152775e-04 -2.553003e-05 -2.255408e-04 #> chivas          7.206033e-05 -4.803968e-06  1.003524e-04 -5.006564e-05 #> dalmore        -1.373879e-04 -3.425411e-04  1.887325e-04 -6.857783e-05 #> famousgrouse    1.098427e-04  3.769386e-04 -4.635939e-05 -4.732985e-04 #> glendronach     7.079193e-05  6.679345e-05 -1.471216e-05 -3.174342e-05 #> glenmorangie   -2.887843e-04  3.663345e-06  8.615632e-05  1.443928e-04 #> highlandpark    4.361895e-05 -3.546641e-04 -2.543206e-04 -1.334150e-04 #> jackdaniels     6.397125e-04  3.132485e-04 -2.083165e-04  2.659526e-04 #> jb             -1.357708e-05  6.999975e-06  1.014748e-04  1.390686e-04 #> johnniewalker   2.315024e-04 -7.245385e-04 -2.532287e-04 -1.843753e-04 #> magallan        2.912400e-04  2.959502e-04  2.326573e-04  2.930574e-04 #> makersmark     -2.361525e-04 -2.818088e-05  4.879862e-04  3.105270e-05 #> oban           -1.633058e-04 -9.438665e-05  1.228272e-04  3.653250e-05 #> oldpotrero      5.903880e-06 -3.358189e-04  1.091066e-04  3.691985e-04 #> redbreast      -2.352497e-04  3.310177e-04  4.139320e-05  6.943862e-05 #> tamdhu         -3.526671e-04 -1.708794e-04 -2.559883e-04 -1.303370e-04 #> wildturkey     -1.566046e-04  3.186305e-04 -2.758046e-04 -4.246431e-05 #> yoichi          9.430638e-06  2.581787e-04  1.886038e-04 -4.095463e-05 #>                          C21           C22           C23           C24 #> brahma         -2.357683e-04 -3.255489e-04 -3.888181e-05  1.601136e-04 #> caney           1.953747e-04 -2.101846e-04 -1.492333e-04  3.676434e-04 #> chimay         -2.692597e-04  2.257056e-04 -1.397033e-05 -5.646081e-05 #> corona          1.999724e-04  6.189685e-05 -3.340597e-04 -1.953675e-04 #> deusventrue     1.591834e-04 -2.832760e-04  1.458864e-04 -8.427409e-05 #> duvel          -2.955388e-04 -1.892748e-05 -2.437293e-04 -1.378691e-04 #> franziskaner   -1.525330e-04  1.618032e-04 -5.139084e-05 -1.606879e-05 #> grimbergen      3.164260e-04 -1.221952e-05  1.167013e-04  3.467071e-04 #> guiness        -3.339505e-04 -1.886574e-04 -2.230582e-04 -1.727871e-04 #> hoegardeen      1.874664e-04  1.600131e-04  1.958262e-04 -1.223848e-04 #> jupiler        -1.957295e-04  1.587807e-04 -1.426824e-04  8.126834e-06 #> kingfisher     -1.145588e-04  3.095102e-04  1.748363e-04 -2.958698e-05 #> latrappe       -1.023105e-04 -4.186424e-04 -1.825023e-04 -3.951876e-05 #> lindemanskriek -1.380429e-04 -1.370311e-04 -1.728854e-04  1.500360e-04 #> nicechouffe    -3.201139e-04 -4.944808e-04 -1.371930e-05  1.532805e-04 #> pecheresse      2.436237e-04  1.596311e-04 -2.128184e-04  3.576426e-04 #> sierranevada   -1.687220e-05 -5.977664e-05  3.650123e-05  1.326880e-04 #> tanglefoot     -3.427494e-04 -1.813205e-04 -4.801367e-05  5.543276e-06 #> tauro           9.933100e-05  7.064143e-05  2.098766e-04  6.374442e-05 #> westmalle       3.884283e-05  2.556888e-04  2.913800e-04  2.358729e-05 #> amrut          -2.513723e-05 -4.865046e-05  6.915158e-05  9.554616e-05 #> ballantines    -1.402023e-05 -1.177383e-04 -3.066781e-04  1.301059e-04 #> bushmills      -1.016039e-04 -6.256814e-06 -2.782939e-05 -1.900221e-04 #> chivas         -1.197585e-04 -2.656528e-05 -5.029721e-05 -7.452762e-05 #> dalmore         7.727193e-06  4.643119e-06 -1.397221e-04  1.462100e-04 #> famousgrouse   -1.411842e-04  1.102486e-04  3.261561e-05 -1.482466e-04 #> glendronach     1.970525e-07  3.802927e-05 -1.079405e-04 -1.582899e-04 #> glenmorangie    8.129446e-05  3.967154e-05 -3.128011e-04 -1.635773e-05 #> highlandpark   -1.802191e-04 -8.267955e-05 -1.275983e-04  1.323282e-04 #> jackdaniels    -3.325901e-05 -3.256437e-05 -1.762269e-04 -5.790588e-04 #> jb             -2.625235e-04 -1.667028e-04 -3.018992e-05 -5.868382e-05 #> johnniewalker  -2.834732e-04 -4.393571e-04 -5.273623e-04 -5.014701e-04 #> magallan        6.945665e-05 -4.596990e-05  1.673075e-04  1.056113e-04 #> makersmark     -5.032255e-04 -1.915835e-04 -7.805228e-05  2.830415e-04 #> oban            1.973869e-04 -5.481002e-05  1.739785e-05  8.027456e-05 #> oldpotrero      9.772372e-05  5.074158e-04 -1.364118e-04  1.254921e-04 #> redbreast       1.239392e-04 -8.674632e-05  1.488872e-04 -1.211999e-04 #> tamdhu          1.950283e-04  2.290251e-04  1.358859e-04  2.243632e-04 #> wildturkey      1.942568e-04 -2.562719e-04  1.268438e-04  1.317126e-04 #> yoichi         -3.707432e-05  1.186764e-04  2.174843e-04 -1.334328e-04 #>                          C25           C26           C27           C28 #> brahma         -2.168918e-04  5.311528e-06 -1.087851e-04 -1.129037e-04 #> caney           1.277543e-04  1.380997e-04  2.220567e-04  3.358853e-04 #> chimay         -1.984526e-05 -2.262631e-04  9.411602e-05 -1.216533e-04 #> corona         -1.099958e-04 -2.321293e-04  9.791988e-05 -3.093851e-04 #> deusventrue    -3.818007e-04 -1.202012e-04 -8.165642e-05 -2.065725e-04 #> duvel           6.570113e-05  1.163622e-05 -1.505426e-04 -3.998066e-04 #> franziskaner    1.056867e-04  2.160659e-04  9.652675e-05 -1.456826e-04 #> grimbergen      1.243239e-04  2.355805e-04  1.329031e-04  2.166290e-04 #> guiness        -3.127194e-04 -2.147014e-04 -9.180930e-05  6.054615e-06 #> hoegardeen     -1.352939e-04  6.037898e-05  1.957805e-04  4.256147e-04 #> jupiler         1.463359e-04 -3.338668e-05  1.760442e-04  5.815076e-05 #> kingfisher      2.531356e-04 -2.597102e-04 -2.809453e-05 -1.026030e-04 #> latrappe        1.588111e-04  2.847210e-04  1.358552e-04  2.016904e-04 #> lindemanskriek  3.932121e-05  1.442253e-04  2.350166e-05 -2.638866e-05 #> nicechouffe    -3.689553e-04  8.847560e-05 -7.805075e-05 -2.565099e-04 #> pecheresse      6.242504e-05 -2.132918e-04 -3.333979e-05  1.240727e-04 #> sierranevada   -3.679124e-05 -9.493554e-05 -1.092878e-04 -2.741258e-05 #> tanglefoot     -1.101320e-04 -2.362401e-04 -2.339105e-04 -1.321334e-04 #> tauro           8.184466e-05  6.090987e-05 -1.724211e-04  7.187784e-05 #> westmalle       1.390117e-04 -8.097500e-06  2.799535e-04 -2.956551e-05 #> amrut          -9.040566e-06  1.628774e-04  4.928935e-05  1.955840e-04 #> ballantines    -1.881555e-04  7.913061e-05  1.784297e-04  5.278585e-05 #> bushmills      -1.882944e-04  2.576531e-04  1.135306e-04  7.203581e-05 #> chivas         -1.217136e-05  1.459306e-04 -9.685215e-05 -2.166137e-04 #> dalmore        -9.665762e-05 -1.115235e-05 -1.083964e-05 -1.765557e-04 #> famousgrouse    3.163937e-04  4.802734e-04  5.904108e-05 -6.039223e-05 #> glendronach    -1.026367e-04  2.392065e-06 -6.767780e-05  4.176678e-05 #> glenmorangie    2.048456e-04 -1.662791e-04  2.088261e-04  1.762876e-04 #> highlandpark    1.294035e-04  1.854087e-04  1.168264e-04  2.134443e-05 #> jackdaniels    -7.053449e-05 -2.075346e-04 -1.639481e-04 -1.499068e-04 #> jb              5.418975e-05 -8.534276e-05 -2.456867e-05  4.274040e-05 #> johnniewalker   1.110272e-04  3.863564e-04  5.023688e-04  4.238384e-04 #> magallan       -1.464085e-04  8.875416e-05 -2.200694e-04  1.964866e-04 #> makersmark     -5.747589e-05 -2.186057e-04 -4.321386e-04 -2.155324e-04 #> oban            1.759539e-04  1.294537e-04 -1.156101e-04 -1.182355e-04 #> oldpotrero      1.780324e-04  2.109986e-04  4.178527e-04  1.858207e-04 #> redbreast      -1.305587e-04 -1.353161e-04 -5.952368e-05 -5.479947e-05 #> tamdhu          1.030517e-04 -1.192849e-04 -7.804091e-05 -1.508532e-04 #> wildturkey      1.934527e-04  3.215318e-04  1.288810e-06  7.522784e-05 #> yoichi         -1.419941e-04  7.818576e-05 -1.276250e-05  1.358157e-04 #>                          C29           C30           C31           C32 #> brahma          5.059658e-05 -9.818126e-06  5.123235e-06 -1.428490e-04 #> caney           1.965508e-05  1.361109e-04  1.243089e-04 -1.336020e-04 #> chimay         -9.070337e-05 -2.449328e-04 -6.708875e-05  4.022984e-05 #> corona          1.431245e-04 -2.173931e-04 -2.259074e-04 -2.787437e-04 #> deusventrue    -1.783859e-04 -4.874278e-06 -3.212311e-04 -1.202210e-04 #> duvel          -1.385701e-04  6.771122e-05  1.314672e-04  1.274480e-04 #> franziskaner   -3.544520e-05 -1.570021e-04  4.143696e-05 -3.250007e-05 #> grimbergen      1.283964e-04 -1.619576e-04 -5.782503e-05 -7.440839e-05 #> guiness         1.623033e-04  1.124547e-04  1.457427e-04  2.620457e-04 #> hoegardeen      1.488354e-04  1.008707e-04  1.592857e-04  6.914513e-05 #> jupiler        -1.025156e-04 -4.960354e-05 -5.397414e-05  1.393697e-05 #> kingfisher     -2.551041e-04 -7.819386e-05 -4.231436e-04  1.136672e-05 #> latrappe        4.093292e-04  5.106237e-04  4.749064e-04  4.502392e-04 #> lindemanskriek -3.724973e-05 -8.158519e-05 -2.793628e-05 -2.304596e-04 #> nicechouffe    -3.182117e-04  8.423888e-05  2.658457e-04 -1.540389e-04 #> pecheresse      1.880359e-04  1.197157e-04  2.589766e-04  3.113602e-04 #> sierranevada    1.574300e-05 -1.339857e-04 -3.371716e-05  2.780362e-05 #> tanglefoot     -1.327847e-04 -1.552258e-04 -1.073922e-04  1.602931e-05 #> tauro          -2.269286e-04  1.424808e-05 -1.177695e-05  4.677918e-05 #> westmalle       1.383318e-04  1.593729e-04  1.948654e-05 -1.302536e-04 #> amrut           1.270967e-04 -4.365482e-06  6.464597e-05 -1.148550e-04 #> ballantines     6.405210e-05  1.648409e-05  1.047806e-04  1.061185e-04 #> bushmills      -8.378647e-05  2.595240e-05 -5.337516e-05  7.165584e-05 #> chivas          1.016956e-04  6.725272e-06  5.441987e-05  1.470306e-04 #> dalmore         1.881831e-04  1.517540e-04  7.488225e-05  2.682798e-05 #> famousgrouse   -2.725213e-05  3.255800e-05 -5.556833e-05 -2.891368e-05 #> glendronach     3.820905e-05  2.432726e-05  6.797367e-05 -7.383064e-05 #> glenmorangie   -2.481661e-04 -5.482361e-05  8.139003e-05  5.261718e-05 #> highlandpark    2.797181e-05  6.660466e-05  1.954252e-04  1.378264e-05 #> jackdaniels    -1.941603e-04 -7.448475e-05 -1.546534e-04 -1.620665e-04 #> jb              1.500695e-04  1.005877e-04 -2.723725e-06  5.583773e-05 #> johnniewalker   5.239015e-05  4.615600e-05  1.840488e-04  4.954225e-04 #> magallan       -2.830981e-05 -3.374251e-04 -1.457816e-05  1.537940e-04 #> makersmark      2.276041e-04  2.168941e-04  1.270890e-04 -8.071940e-05 #> oban           -9.838630e-05  1.646660e-04  1.708445e-04  4.611304e-05 #> oldpotrero      2.634114e-04  1.184883e-05  1.039594e-04  1.387515e-04 #> redbreast      -1.449013e-04  1.984628e-05 -1.465977e-04 -8.637397e-05 #> tamdhu         -1.684881e-05 -1.183542e-04  2.023348e-04  2.682289e-04 #> wildturkey     -5.207759e-05 -1.906513e-04 -1.833178e-04 -2.062892e-04 #> yoichi         -1.389330e-05 -4.418834e-05  5.367797e-05 -6.039718e-05 #>                       D1          D2         D3           D4         D5 #> brahma         0.2937120 -0.04602927 0.05240292 -0.035768593 0.03999516 #> caney          0.3046235 -0.07069129 0.05062805 -0.011400633 0.04383297 #> chimay         0.4156841 -0.09356117 0.04692603 -0.019249436 0.03965332 #> corona         0.2745921 -0.05755121 0.05150878 -0.011252954 0.03689351 #> deusventrue    0.3149661 -0.11964363 0.05529900  0.007135060 0.03861865 #> duvel          0.4496172 -0.09170033 0.05080071 -0.024018306 0.03036868 #> franziskaner   0.3002734 -0.05637154 0.04411627 -0.030282997 0.03014850 #> grimbergen     0.3651919 -0.09065897 0.05082210 -0.010242594 0.04317369 #> guiness        0.3505997 -0.08196508 0.04422914 -0.022614638 0.04330972 #> hoegardeen     0.2945708 -0.06921001 0.05080275 -0.012677940 0.04146196 #> jupiler        0.2872499 -0.06835188 0.05058090 -0.011055591 0.04109503 #> kingfisher     0.3038732 -0.06930174 0.04366992 -0.021888850 0.03308585 #> latrappe       0.4672257 -0.08743553 0.04401705 -0.038810531 0.02809569 #> lindemanskriek 0.3008112 -0.08389446 0.04783652 -0.013888395 0.04157982 #> nicechouffe    0.3127453 -0.09102591 0.04393446 -0.019927059 0.03779695 #> pecheresse     0.2877918 -0.07053519 0.05180968 -0.009320568 0.04090001 #> sierranevada   0.3773035 -0.07825101 0.05234901 -0.021705236 0.03981425 #> tanglefoot     0.4079636 -0.09801072 0.04110270 -0.028374451 0.04305818 #> tauro          0.2869165 -0.06868727 0.05072815 -0.010829946 0.04098501 #> westmalle      0.2901614 -0.07168182 0.04932024 -0.012449351 0.03886788 #> amrut          0.2916508 -0.07148727 0.03950517 -0.025866432 0.04086520 #> ballantines    0.4617826 -0.07263052 0.04705459 -0.054513278 0.00386769 #> bushmills      0.3159155 -0.02993821 0.05271205 -0.040523047 0.01619821 #> chivas         0.4010304 -0.12319740 0.04665481 -0.003452339 0.05226216 #> dalmore        0.4148687 -0.14805699 0.04396881 -0.010373143 0.05369374 #> famousgrouse   0.3082730 -0.05984603 0.04245023 -0.038145717 0.02994654 #> glendronach    0.2880496 -0.06941189 0.04010808 -0.026119002 0.04146027 #> glenmorangie   0.2784428 -0.06974209 0.02918920 -0.025306813 0.04836028 #> highlandpark   0.4216191 -0.07914764 0.04537064 -0.044351756 0.02868104 #> jackdaniels    0.3474874 -0.08171102 0.04501412 -0.023326513 0.04362364 #> jb             0.2978504 -0.07724044 0.04167029 -0.021228975 0.04549082 #> johnniewalker  0.3097702 -0.04720860 0.04457306 -0.040162288 0.02378800 #> magallan       0.2790080 -0.04764937 0.01811567 -0.036589697 0.02988117 #> makersmark     0.3905990 -0.12195322 0.04665759  0.014950483 0.04867625 #> oban           0.2773362 -0.07277254 0.03313763 -0.023775433 0.04405146 #> oldpotrero     0.3550787 -0.13906787 0.05059907  0.008348999 0.04726562 #> redbreast      0.3884532 -0.13265717 0.04117925 -0.003816545 0.05332588 #> tamdhu         0.2956700 -0.06219547 0.04086923 -0.024902731 0.04397834 #> wildturkey     0.3186215 -0.08962249 0.03633236 -0.023651702 0.05160018 #> yoichi         0.3745590 -0.07064336 0.04209729 -0.040564238 0.03281077 #>                           D6            D7            D8            D9 #> brahma          1.156917e-02  1.544573e-02  0.0013278090  0.0017860170 #> caney           4.485691e-03  9.597789e-03  0.0016029758  0.0082459711 #> chimay          1.731744e-02  1.044446e-02  0.0104067305  0.0026404547 #> corona         -4.664986e-03  9.465002e-03  0.0001838085  0.0120730321 #> deusventrue    -8.770510e-04  1.356919e-02  0.0076757796  0.0034745699 #> duvel           1.486796e-02  7.642213e-03  0.0154756340  0.0060020330 #> franziskaner    1.266218e-03  1.748451e-02  0.0047455611  0.0067787344 #> grimbergen      7.100085e-03  6.253179e-03  0.0076965820  0.0090999349 #> guiness         9.543784e-03  9.549881e-03  0.0017249204  0.0017518501 #> hoegardeen      2.601196e-03  1.267815e-02  0.0028528664  0.0079320590 #> jupiler         2.215650e-03  1.160311e-02  0.0034969489  0.0080290760 #> kingfisher      2.046087e-03  1.149394e-02  0.0039224376  0.0069746627 #> latrappe        2.444196e-02  2.163781e-02  0.0204539980 -0.0001441159 #> lindemanskriek  2.496230e-03  1.222294e-02  0.0053531769  0.0062723553 #> nicechouffe     3.314725e-03  1.247704e-02  0.0066425182  0.0051531928 #> pecheresse      2.471297e-03  1.468476e-02  0.0056123765  0.0084044229 #> sierranevada    1.057630e-02  8.974816e-03  0.0026404084  0.0003673360 #> tanglefoot      1.902021e-02  1.046530e-02  0.0039430719 -0.0033493172 #> tauro           2.321158e-03  1.173141e-02  0.0034750116  0.0079425387 #> westmalle       1.786521e-03  1.515342e-02  0.0060316179  0.0079388255 #> amrut           6.369733e-03  1.572832e-02 -0.0038463793  0.0013700406 #> ballantines     4.344419e-03  1.645402e-02  0.0254142957  0.0095935791 #> bushmills      -1.167929e-02  2.000745e-02  0.0117755165  0.0158424792 #> chivas          7.036241e-03 -4.363041e-03  0.0063540528  0.0079672331 #> dalmore         1.718407e-02 -6.837798e-03  0.0070735547 -0.0019258037 #> famousgrouse    4.059251e-03  2.229183e-02  0.0037608752  0.0010406075 #> glendronach     6.223170e-03  1.521132e-02 -0.0043261577  0.0013210684 #> glenmorangie    5.822448e-03  1.976818e-02 -0.0044147538  0.0033213121 #> highlandpark    1.979571e-02  2.717259e-02  0.0200795294 -0.0021232596 #> jackdaniels     1.186579e-02  1.329499e-02 -0.0005343742 -0.0016003714 #> jb              6.441694e-03  1.187397e-02 -0.0057652170  0.0017868329 #> johnniewalker   8.789822e-05  2.661158e-02  0.0128165570  0.0105593342 #> magallan        6.181261e-03  2.628647e-02  0.0002557046  0.0036531313 #> makersmark     -5.885380e-03 -3.124763e-04  0.0123974490  0.0123986615 #> oban            7.290747e-03  1.526810e-02 -0.0064234752  0.0024990961 #> oldpotrero     -1.263673e-03  9.106123e-06  0.0131403235  0.0062358607 #> redbreast       7.554115e-03 -5.549155e-03  0.0028962725  0.0066649976 #> tamdhu          7.609569e-03  1.817766e-02 -0.0043937269  0.0004398248 #> wildturkey      1.072078e-02  1.329394e-02 -0.0045720419 -0.0006442784 #> yoichi          1.665764e-02  2.932085e-02  0.0147708913  0.0009353830 #>                         D10           D11          D12           D13 #> brahma          0.006789017  0.0048196384  0.007143143  1.926114e-03 #> caney           0.011464283  0.0039468981  0.003663644 -7.807175e-04 #> chimay          0.012590865  0.0018154608  0.002625857 -8.084753e-04 #> corona          0.008346831  0.0027556006  0.002567053  5.432929e-04 #> deusventrue     0.006022626  0.0007085549  0.005811255  2.407200e-04 #> duvel           0.014318246  0.0021405582 -0.001168779 -3.377569e-03 #> franziskaner    0.007215285  0.0030768626  0.006498196  8.028161e-04 #> grimbergen      0.013935311  0.0016133249  0.001782113 -1.816164e-03 #> guiness         0.013609736  0.0052742301  0.006464424 -5.287655e-04 #> hoegardeen      0.007661150  0.0026973921  0.005420800  9.995327e-04 #> jupiler         0.007523271  0.0027339312  0.004363034  1.338460e-03 #> kingfisher      0.006826146  0.0028630395  0.005290393  2.293278e-03 #> latrappe        0.007468498 -0.0011091276  0.003570302  2.011317e-03 #> lindemanskriek  0.007494807  0.0009831097  0.006687031  1.442627e-03 #> nicechouffe     0.007804735  0.0010554318  0.006544953  1.205823e-03 #> pecheresse      0.006507851  0.0023044001  0.005130825  6.852104e-04 #> sierranevada    0.013424754  0.0060565295  0.007716962 -7.405564e-04 #> tanglefoot      0.012760316  0.0055315212  0.008787267  1.064633e-03 #> tauro           0.007452360  0.0026002512  0.004223806  1.378572e-03 #> westmalle       0.005389195  0.0009150318  0.004619774  1.262124e-03 #> amrut           0.008090140  0.0077694214  0.009648834 -1.144556e-03 #> ballantines     0.009641210 -0.0013505569  0.001193993  7.396074e-04 #> bushmills       0.012190958  0.0027373737  0.003932980 -3.732204e-03 #> chivas          0.019338356  0.0019726115  0.002305432 -2.020219e-03 #> dalmore         0.016575636  0.0049437344  0.004000701  5.545799e-03 #> famousgrouse    0.003906640  0.0019458696  0.010187413  3.371833e-03 #> glendronach     0.008581179  0.0087430642  0.009902698 -6.391147e-04 #> glenmorangie    0.007165778  0.0033642678  0.009454943 -1.032963e-03 #> highlandpark    0.003043362 -0.0045393480  0.006887804  5.658900e-03 #> jackdaniels     0.009896143  0.0071305091  0.011652937  1.190034e-03 #> jb              0.011312129  0.0089093269  0.008895351 -2.914444e-03 #> johnniewalker   0.004724823 -0.0013880745  0.003178167 -3.556457e-04 #> magallan       -0.002901850  0.0030725685  0.006182579  4.129056e-03 #> makersmark      0.007706173 -0.0025568628  0.002741739  2.566683e-03 #> oban            0.007789470  0.0092615797  0.008856510 -4.461327e-04 #> oldpotrero      0.009884923  0.0004827760  0.006465018  2.203812e-03 #> redbreast       0.019010171  0.0030489037  0.003575003 -1.081990e-03 #> tamdhu          0.006990252  0.0067355151  0.011091059 -3.536949e-05 #> wildturkey      0.012225665  0.0056575767  0.009083087 -3.677090e-03 #> yoichi          0.001967838 -0.0043542059  0.006408266  2.324685e-03 #>                          D14           D15           D16           D17 #> brahma          0.0031275641  4.157794e-04  0.0019555535  9.890925e-04 #> caney           0.0037093445  1.744155e-03  0.0009874891 -4.753255e-04 #> chimay          0.0009166164  2.220375e-03 -0.0019270610  2.484912e-04 #> corona          0.0058977403  1.606741e-03  0.0024960621 -7.639544e-04 #> deusventrue     0.0033919410  1.559680e-04  0.0015420583  9.082901e-04 #> duvel          -0.0029313189  2.502233e-03  0.0006963735  1.208427e-03 #> franziskaner    0.0041872022  9.225601e-04  0.0024966790  6.722121e-04 #> grimbergen      0.0019309787  1.956568e-03  0.0005450639  2.675718e-04 #> guiness         0.0018638986  2.692559e-03  0.0019352055  1.628688e-03 #> hoegardeen      0.0041552095 -1.065713e-04  0.0016889222 -3.166547e-04 #> jupiler         0.0033244959  9.848065e-05  0.0010603264 -6.525507e-05 #> kingfisher      0.0044673616  1.485094e-03  0.0023979578  6.894989e-04 #> latrappe       -0.0008074752  1.664147e-03 -0.0021635248  7.689496e-04 #> lindemanskriek  0.0037615312  2.793989e-04  0.0016614073  1.352472e-03 #> nicechouffe     0.0038551513  1.311255e-03  0.0016680702  1.116012e-03 #> pecheresse      0.0025371633 -4.489783e-04  0.0008704132 -5.554931e-04 #> sierranevada    0.0005939006  1.474160e-03  0.0011437155  1.682900e-03 #> tanglefoot      0.0004785330  2.150301e-03 -0.0002248900  2.139070e-03 #> tauro           0.0033835451  1.001149e-04  0.0009107426  8.944532e-05 #> westmalle       0.0047945932  5.279402e-04  0.0014031914 -1.127039e-03 #> amrut           0.0006242293 -2.060446e-03  0.0027509103  2.295153e-03 #> ballantines     0.0026091729  2.944401e-03  0.0009597037  1.625268e-03 #> bushmills       0.0008108204 -1.658834e-03  0.0022376452  1.816720e-03 #> chivas         -0.0003126890  3.062126e-03  0.0003784012  3.895628e-03 #> dalmore        -0.0013721769  4.301123e-03 -0.0007346094  1.919821e-03 #> famousgrouse    0.0051280464 -2.095871e-03 -0.0014353739 -1.017602e-03 #> glendronach     0.0007605817 -2.608913e-03  0.0025423072  1.881103e-03 #> glenmorangie    0.0055043581 -3.529733e-04  0.0026449765  8.745923e-04 #> highlandpark    0.0046886634  2.790613e-03 -0.0028451046 -2.803900e-04 #> jackdaniels     0.0006010724 -1.874443e-03 -0.0001609028  1.721536e-03 #> jb              0.0006629365 -6.083868e-04  0.0040546060  2.647929e-03 #> johnniewalker   0.0052579368 -1.293010e-04  0.0022216234 -3.827680e-04 #> magallan        0.0055039424 -8.305055e-04  0.0012832388 -1.151480e-03 #> makersmark      0.0044651474  6.602691e-04  0.0009437839 -7.127560e-04 #> oban            0.0017261768 -1.145758e-03  0.0039396292  1.243568e-03 #> oldpotrero      0.0012186435  2.697974e-03  0.0002678611  1.879572e-03 #> redbreast       0.0008746647  3.392975e-03  0.0003544991  3.091612e-03 #> tamdhu          0.0033713850 -1.628121e-03  0.0024278166  1.560397e-03 #> wildturkey      0.0022983366  8.120105e-04  0.0033344198  2.666378e-03 #> yoichi          0.0060672149  1.801036e-03  0.0002647738 -5.632091e-05 #>                          D18           D19           D20           D21 #> brahma          6.293376e-04  3.896704e-04 -3.229345e-04  3.831138e-06 #> caney          -7.645439e-04 -6.085621e-04 -3.245536e-04 -4.503156e-04 #> chimay         -1.130345e-04  7.926418e-04 -1.780914e-04 -4.887150e-04 #> corona          1.024423e-03  8.842135e-05  4.313700e-04 -4.718718e-04 #> deusventrue    -3.583324e-04  1.286906e-03  6.233120e-05  1.544907e-03 #> duvel          -5.922990e-04 -1.333335e-04  4.815197e-04 -1.758102e-04 #> franziskaner    6.100396e-04  7.764117e-04  5.491195e-05  3.763780e-04 #> grimbergen     -5.904705e-04  4.253926e-04 -2.173942e-04  5.361111e-04 #> guiness        -6.191811e-04 -7.865923e-05 -7.407169e-04 -3.602892e-04 #> hoegardeen      5.654900e-04  3.283770e-05 -1.864209e-04  4.023209e-04 #> jupiler         3.689686e-04 -1.719041e-04  1.184231e-04  2.651784e-04 #> kingfisher      1.154506e-03  1.020985e-03  3.611220e-04  6.291875e-04 #> latrappe       -2.088876e-03 -1.536620e-03 -1.005470e-03 -1.438940e-03 #> lindemanskriek -6.671207e-05  5.595716e-04 -6.809755e-04  2.883840e-04 #> nicechouffe    -4.176123e-04  8.977287e-04 -5.825859e-04  2.514060e-04 #> pecheresse      2.960996e-04 -2.999634e-04 -5.143676e-04  5.298199e-04 #> sierranevada   -1.402891e-03 -7.105184e-04 -1.406023e-03 -3.241741e-04 #> tanglefoot     -4.466706e-04  1.003752e-03 -2.824955e-04 -4.366636e-04 #> tauro           5.077672e-04 -2.475905e-04  3.158794e-04  1.327427e-04 #> westmalle      -4.447622e-04  3.776294e-04  4.195911e-04  8.484127e-04 #> amrut           2.150217e-03  1.310537e-03  5.423311e-04  1.191027e-03 #> ballantines    -2.305305e-04  2.030836e-03  1.037686e-03  1.381778e-03 #> bushmills       1.883389e-03  1.671736e-03  1.085006e-03  1.129204e-03 #> chivas         -7.487816e-04 -1.848059e-04 -7.542402e-04 -6.898937e-05 #> dalmore         1.853381e-03 -1.461692e-03  1.339406e-03 -6.406724e-04 #> famousgrouse    5.138360e-04  2.530545e-03  2.024220e-03  2.987046e-03 #> glendronach     2.040387e-03  1.241204e-03  4.021827e-04  1.360769e-03 #> glenmorangie    3.519697e-04  2.012743e-03 -9.903207e-04  1.364138e-03 #> highlandpark   -2.634427e-03 -2.315674e-04 -8.854821e-04 -4.633894e-04 #> jackdaniels     6.015905e-04  9.398945e-04 -3.644850e-04  2.828080e-05 #> jb              9.951060e-04  8.239419e-04 -2.467022e-04  1.277872e-03 #> johnniewalker   1.083550e-03  1.030500e-03  1.236037e-03  2.082887e-03 #> magallan        2.235758e-03  1.613033e-03  2.732296e-03  1.761473e-03 #> makersmark     -4.496665e-04  9.336664e-04  5.524012e-04  9.525012e-04 #> oban            2.228455e-03 -3.486102e-05 -4.580932e-05  6.453033e-04 #> oldpotrero     -9.114012e-04  1.132774e-03  5.301941e-04  1.186192e-04 #> redbreast      -1.950436e-04  9.281282e-04 -5.109409e-04 -7.237943e-06 #> tamdhu          9.609204e-04  1.925977e-03 -8.205987e-04  3.847804e-04 #> wildturkey     -8.344240e-04  2.028382e-03 -1.207846e-03  1.686608e-03 #> yoichi         -2.196066e-03  1.676181e-04 -1.415373e-03  1.009761e-03 #>                          D22           D23           D24           D25 #> brahma         -6.023925e-04 -3.704707e-04 -8.677815e-04 -7.248682e-04 #> caney          -1.173466e-03 -3.863544e-04 -1.351268e-03 -1.773197e-04 #> chimay         -6.522348e-04 -7.978252e-04 -5.495898e-06 -1.800777e-03 #> corona         -8.788427e-04 -4.830025e-05 -5.870134e-04  7.484502e-04 #> deusventrue     1.415082e-05  7.733248e-04  3.116257e-05 -6.374096e-04 #> duvel          -2.941583e-04 -1.124154e-03 -1.118860e-03 -1.186668e-03 #> franziskaner   -3.051374e-04  2.712854e-04 -3.334307e-04  6.527762e-05 #> grimbergen     -3.660470e-04 -2.386308e-04 -7.363064e-04 -1.136209e-03 #> guiness        -9.874371e-04 -2.115403e-04 -6.115358e-04 -1.042320e-03 #> hoegardeen     -7.912932e-04 -6.136135e-05 -9.776025e-04  1.670660e-04 #> jupiler        -5.807125e-04 -2.182125e-04 -5.863223e-04 -8.468729e-05 #> kingfisher     -1.199056e-04  1.361850e-04 -3.033656e-04 -2.821181e-04 #> latrappe        4.653398e-04 -1.234463e-03  1.614692e-04 -4.335716e-04 #> lindemanskriek -7.295737e-04  4.368240e-06 -5.637679e-05 -1.888630e-04 #> nicechouffe    -3.296172e-04  1.792659e-04 -2.905989e-04 -3.368342e-04 #> pecheresse     -4.971391e-04 -1.135830e-05 -4.110029e-04 -2.045514e-04 #> sierranevada   -6.684311e-04 -3.811855e-04 -4.383820e-04 -5.675429e-04 #> tanglefoot     -9.195349e-05 -2.817236e-04  4.991349e-04 -3.507131e-04 #> tauro          -7.745611e-04  1.012546e-04 -3.658760e-04 -1.334307e-04 #> westmalle      -8.336006e-04 -5.476468e-05 -1.129115e-03  4.607603e-04 #> amrut           3.325703e-04  8.672648e-04  9.145089e-05  7.931481e-04 #> ballantines     6.627349e-04 -3.615268e-04  3.731327e-04 -2.763657e-04 #> bushmills       4.431144e-04  9.888128e-04  1.365332e-06 -1.032528e-04 #> chivas          1.495921e-03 -7.915520e-04  2.552716e-04 -1.400881e-03 #> dalmore         8.620998e-04  5.358565e-04 -2.205899e-04  8.854910e-04 #> famousgrouse    9.740031e-04  7.164023e-04 -5.641393e-04 -5.141442e-04 #> glendronach     6.069209e-04  1.250594e-03  3.418042e-04  8.590618e-04 #> glenmorangie   -7.256586e-04  5.892879e-04 -1.846707e-04 -2.215014e-04 #> highlandpark    7.715184e-04 -1.223845e-04  8.942889e-04 -9.207978e-04 #> jackdaniels    -7.403164e-05  5.163499e-04  2.071492e-05  2.953354e-04 #> jb              1.765633e-04  1.058650e-03  4.504999e-04  2.865430e-04 #> johnniewalker  -8.526645e-05  8.983395e-04 -1.003037e-03  3.799430e-05 #> magallan        7.106320e-04  5.758546e-04 -6.188574e-04  2.465923e-04 #> makersmark     -9.846482e-04 -2.252128e-04 -7.251905e-04  5.910814e-04 #> oban           -1.589051e-04  1.386830e-03  1.430748e-04  6.763321e-04 #> oldpotrero      5.368851e-04 -3.892557e-04  8.146966e-04 -5.819797e-04 #> redbreast       1.204642e-03 -3.265974e-04  4.350358e-04 -4.717577e-04 #> tamdhu         -1.558475e-03 -2.944087e-05 -3.153143e-04  9.049911e-05 #> wildturkey     -2.598572e-05  8.017668e-04  7.628013e-04 -5.490242e-04 #> yoichi         -5.700515e-05  5.679827e-04  1.700043e-04 -7.948749e-04 #>                          D26           D27           D28           D29 #> brahma         -6.395018e-04 -4.053179e-04 -2.320532e-04 -3.997015e-04 #> caney          -2.359438e-04 -2.059137e-04 -5.363116e-05 -5.687334e-04 #> chimay         -1.367853e-03 -1.301151e-03 -1.233134e-03 -5.067907e-04 #> corona         -5.900023e-04  4.867919e-04 -1.429390e-04  4.416367e-04 #> deusventrue    -5.512986e-04 -9.265221e-04 -4.809160e-04 -5.674634e-04 #> duvel          -6.434708e-04 -3.994538e-04 -2.003070e-04 -2.293221e-04 #> franziskaner   -1.310487e-04  2.683871e-04  8.363468e-06  1.249318e-04 #> grimbergen     -1.063777e-03 -1.567251e-03 -9.309061e-04 -1.203667e-03 #> guiness        -4.237703e-04 -5.863080e-04  2.091300e-04 -1.398699e-04 #> hoegardeen     -4.936265e-04 -3.031387e-04 -5.517384e-04 -6.863028e-04 #> jupiler        -4.169136e-04 -2.806707e-04 -4.552180e-04 -5.632157e-04 #> kingfisher     -5.282998e-04 -1.829135e-04 -5.253247e-04 -3.984768e-04 #> latrappe       -2.182854e-05  6.079916e-04 -3.061676e-04  5.585698e-04 #> lindemanskriek -1.286669e-04 -3.587153e-04 -9.683567e-05 -3.789208e-04 #> nicechouffe    -3.874500e-05 -6.006549e-04  1.047084e-04  4.153977e-05 #> pecheresse     -4.871025e-04 -5.084450e-04 -6.217106e-04 -9.046258e-04 #> sierranevada   -5.253493e-04 -9.103329e-04 -1.472245e-04 -6.919569e-04 #> tanglefoot     -2.793185e-04 -9.121267e-04 -5.073682e-04 -7.915067e-04 #> tauro          -3.810949e-04 -1.473809e-04 -5.954522e-04 -6.992086e-04 #> westmalle      -3.036718e-05  4.895830e-05 -5.574292e-04 -1.059941e-03 #> amrut          -6.925384e-05 -6.528198e-06 -7.195273e-04 -4.489611e-04 #> ballantines     5.806837e-04 -4.643040e-05 -1.345115e-04 -4.098110e-04 #> bushmills      -9.920516e-04 -6.515162e-04 -9.939962e-04 -7.524942e-04 #> chivas         -5.786515e-04 -5.643790e-04 -9.594352e-04  1.266319e-04 #> dalmore        -2.071692e-04  9.919664e-05 -6.494984e-04 -8.782649e-04 #> famousgrouse   -9.831707e-04 -2.574344e-04  3.023649e-04  1.759037e-04 #> glendronach    -3.720452e-04 -6.702764e-04 -1.204797e-03 -6.332506e-04 #> glenmorangie    1.026999e-04 -4.035989e-04  8.014678e-04 -2.994170e-07 #> highlandpark   -9.684691e-04 -1.380908e-03 -1.108075e-03 -2.124353e-04 #> jackdaniels    -9.776790e-04 -7.222094e-04 -5.648930e-04 -6.747195e-04 #> jb             -3.242447e-04 -6.974717e-04 -1.963078e-04 -2.453221e-05 #> johnniewalker  -6.179291e-04 -4.241837e-04 -5.206066e-04 -8.604953e-04 #> magallan       -1.348410e-04  3.236837e-04  3.675421e-04  4.734675e-04 #> makersmark     -1.584742e-04 -7.659618e-04 -1.350651e-03 -1.228912e-03 #> oban           -6.637215e-04  5.201189e-05 -4.165461e-04  8.882533e-05 #> oldpotrero     -2.942613e-04 -5.427166e-04 -9.393213e-04 -4.784414e-04 #> redbreast       3.593234e-04 -1.693602e-04 -3.678528e-05  6.092724e-05 #> tamdhu          1.211206e-05 -7.018532e-04  1.418592e-05 -7.508705e-04 #> wildturkey      8.160391e-04 -5.939476e-04  2.147085e-04 -2.764873e-04 #> yoichi         -4.611316e-04 -1.449003e-03 -3.131254e-04 -7.590933e-04 #>                          D30           D31           D32 #> brahma         -3.902515e-04 -4.657627e-04 -4.591314e-04 #> caney          -9.850469e-05  3.166971e-05  1.112523e-04 #> chimay         -8.560520e-04 -4.323199e-04  9.946603e-05 #> corona          2.091023e-04 -7.157752e-05 -1.300100e-04 #> deusventrue     1.040810e-04 -8.204937e-04 -5.065759e-04 #> duvel          -3.433012e-05  3.583444e-04  3.946036e-04 #> franziskaner   -9.090693e-05 -3.654028e-04 -3.017993e-04 #> grimbergen     -9.676903e-04 -7.092697e-04 -3.309973e-04 #> guiness        -3.334034e-04 -4.702548e-05  1.426591e-04 #> hoegardeen     -7.249966e-04 -8.858153e-04 -4.275584e-04 #> jupiler        -5.485198e-04 -6.030643e-04 -3.822469e-04 #> kingfisher     -4.201484e-04 -5.266630e-04 -1.660344e-04 #> latrappe       -1.877748e-04  3.063740e-04  1.703602e-04 #> lindemanskriek -3.260925e-04 -2.780105e-04 -1.944023e-04 #> nicechouffe     3.820829e-04 -4.094818e-05 -2.591452e-05 #> pecheresse     -5.103713e-04 -5.697029e-04 -3.993520e-04 #> sierranevada   -2.174311e-04 -6.020258e-04 -5.489893e-04 #> tanglefoot     -1.002316e-03 -1.046716e-03 -1.052470e-03 #> tauro          -6.452311e-04 -5.544896e-04 -3.477609e-04 #> westmalle      -4.824287e-04 -9.388615e-04  2.676913e-04 #> amrut          -4.766425e-04 -6.277056e-04 -5.517415e-04 #> ballantines    -4.625130e-04 -2.404349e-04 -7.489670e-04 #> bushmills      -4.214640e-04 -1.678949e-04  1.042195e-04 #> chivas         -9.372331e-04 -9.431970e-05 -5.353796e-04 #> dalmore        -7.460785e-04 -1.279118e-03 -9.370873e-04 #> famousgrouse    1.304132e-04 -4.899982e-05  5.462999e-04 #> glendronach    -3.515166e-04 -2.249163e-04 -1.682467e-04 #> glenmorangie    1.997467e-04  6.023239e-05 -2.466944e-04 #> highlandpark   -3.607922e-04  2.362905e-04 -2.757210e-04 #> jackdaniels    -2.447913e-04 -1.353065e-03 -5.253405e-04 #> jb             -1.147366e-04 -3.104326e-04 -2.916444e-04 #> johnniewalker  -6.281539e-04 -1.083614e-03 -2.760545e-04 #> magallan       -3.536734e-04 -1.159514e-04 -4.591237e-04 #> makersmark      7.536380e-04 -2.134843e-04  1.025659e-04 #> oban            2.608163e-04 -3.330292e-04 -4.077367e-04 #> oldpotrero     -5.492801e-04 -3.007036e-04 -1.206675e-03 #> redbreast      -1.042452e-03 -4.929570e-04 -1.024011e-03 #> tamdhu         -5.359179e-04 -4.648454e-04  1.256245e-04 #> wildturkey     -4.068468e-04 -2.847724e-04 -5.372963e-04 #> yoichi         -1.141095e-04 -2.989495e-04 -6.093731e-04 # if you want, say the first 8 harmonics but not the first one retain <- coeff_sel(retain=8, drop=1, nb.h=32, cph=4) head(coe[, retain]) #>                      A2         A3         A4          A5          A6 #> brahma      0.006766531 0.09348184 0.01374288 0.023818571 0.008592275 #> caney       0.007368844 0.09542847 0.01449765 0.022207326 0.006665955 #> chimay      0.016535135 0.07571705 0.02736989 0.009876978 0.014306122 #> corona      0.007486279 0.09616977 0.01220177 0.022887407 0.007281456 #> deusventrue 0.019627538 0.09281761 0.02230953 0.015264921 0.014857953 #> duvel       0.022177771 0.06895598 0.03354560 0.009316683 0.021131541 #>                       A7          A8            B2            B3            B4 #> brahma       0.003183571 0.005158502 -0.0001900652  3.306231e-04 -0.0005191749 #> caney        0.003552709 0.007010166  0.0005012013 -3.851293e-04  0.0003333918 #> chimay      -0.004741288 0.007814037  0.0001843629  4.196107e-04  0.0003227901 #> corona       0.005504589 0.007852411 -0.0003586724  1.711055e-05 -0.0005501057 #> deusventrue  0.002521451 0.011391904  0.0001774985 -8.326845e-05 -0.0014033732 #> duvel       -0.001687129 0.011025502 -0.0004198782  7.447638e-05 -0.0006627095 #>                        B5            B6            B7            B8 #> brahma       1.067446e-04 -9.218905e-05  5.604686e-07  6.268503e-06 #> caney       -2.899903e-04  7.350207e-05 -4.952054e-04  8.536695e-05 #> chimay      -2.906714e-05  5.573360e-04  1.059517e-04  6.209192e-04 #> corona      -1.907425e-04 -4.256287e-04 -2.147013e-04 -1.931107e-04 #> deusventrue -3.240180e-04 -9.330047e-04  6.515692e-04 -8.354423e-04 #> duvel        6.107940e-05 -4.746985e-04  2.450959e-04 -1.676532e-04 #>                        C2            C3            C4            C5 #> brahma      -0.0016375711 -3.936895e-03  0.0054080962 -1.259407e-03 #> caney        0.0012398277 -2.845651e-04  0.0003757825 -4.017802e-05 #> chimay      -0.0037576080 -1.797357e-03 -0.0021279238 -4.663387e-04 #> corona      -0.0016528639  1.573302e-03  0.0004897281  1.867708e-04 #> deusventrue  0.0015527752  7.706329e-04 -0.0014164476  1.463377e-03 #> duvel        0.0002872128 -5.422392e-06 -0.0007785717  3.178998e-04 #>                        C6            C7            C8          D2         D3 #> brahma      -3.994402e-03  3.268582e-03  0.0004792269 -0.04602927 0.05240292 #> caney        4.699805e-04  2.518166e-04  0.0006300072 -0.07069129 0.05062805 #> chimay      -7.424827e-05 -8.096453e-05  0.0009946667 -0.09356117 0.04692603 #> corona       6.888736e-04  3.145355e-04  0.0005189042 -0.05755121 0.05150878 #> deusventrue  9.055123e-04 -2.834923e-04 -0.0014439096 -0.11964363 0.05529900 #> duvel        2.219253e-04  5.438377e-04 -0.0000035189 -0.09170033 0.05080071 #>                      D4         D5           D6          D7           D8 #> brahma      -0.03576859 0.03999516  0.011569168 0.015445729 0.0013278090 #> caney       -0.01140063 0.04383297  0.004485691 0.009597789 0.0016029758 #> chimay      -0.01924944 0.03965332  0.017317438 0.010444458 0.0104067305 #> corona      -0.01125295 0.03689351 -0.004664986 0.009465002 0.0001838085 #> deusventrue  0.00713506 0.03861865 -0.000877051 0.013569192 0.0076757796 #> duvel       -0.02401831 0.03036868  0.014867959 0.007642213 0.0154756340"},{"path":"http://momx.github.io/Momocs/reference/coeff_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a numerical description of harmonic coefficients to a named list. — coeff_split","title":"Converts a numerical description of harmonic coefficients to a named list. — coeff_split","text":"coeff_split returns named list coordinates vector harmonic coefficients. instance, harmonic coefficients arranged $coe slot Coe-objects way: \\(A_1, \\dots, A_n, B_1, \\dots, B_n, C_1, \\dots, C_n, D_1, \\dots, D-n\\) elliptical Fourier analysis (see efourier efourier) \\(C_n D_n\\) harmonic absent radii variation tangent angle approaches (see rfourier tfourier respectively). function used internally might interest elwewhere.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a numerical description of harmonic coefficients to a named list. — coeff_split","text":"","code":"coeff_split(cs, nb.h = 8, cph = 4)"},{"path":"http://momx.github.io/Momocs/reference/coeff_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a numerical description of harmonic coefficients to a named list. — coeff_split","text":"cs vector harmonic coefficients. nb.h numeric. maximum harmonic rank. cph numeric. Must set 2 rfourier tfourier used.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a numerical description of harmonic coefficients to a named list. — coeff_split","text":"Returns named list coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coeff_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a numerical description of harmonic coefficients to a named list. — coeff_split","text":"","code":"coeff_split(1:128, nb.h=32, cph=4) # efourier #> $an #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 #>  #> $bn #>  [1] 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #> [26] 58 59 60 61 62 63 64 #>  #> $cn #>  [1] 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #> [26] 90 91 92 93 94 95 96 #>  #> $dn #>  [1]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 #> [20] 116 117 118 119 120 121 122 123 124 125 126 127 128 #>  coeff_split(1:64, nb.h=32, cph=2)  # t/r fourier #> $an #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 #>  #> $bn #>  [1] 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #> [26] 58 59 60 61 62 63 64 #>"},{"path":"http://momx.github.io/Momocs/reference/color_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Some color palettes — color_palettes","title":"Some color palettes — color_palettes","text":"Colors, colors, colors.","code":""},{"path":"http://momx.github.io/Momocs/reference/color_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some color palettes — color_palettes","text":"","code":"col_summer(n)  col_summer2(n)  col_spring(n)  col_autumn(n)  col_black(n)  col_solarized(n)  col_gallus(n)  col_qual(n)  col_heat(n)  col_hot(n)  col_cold(n)  col_sari(n)  col_india(n)  col_bw(n)  col_grey(n)"},{"path":"http://momx.github.io/Momocs/reference/color_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some color palettes — color_palettes","text":"n number colors generate color palette","code":""},{"path":"http://momx.github.io/Momocs/reference/color_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Some color palettes — color_palettes","text":"colors (hexadecimal format)","code":""},{"path":"http://momx.github.io/Momocs/reference/color_palettes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Some color palettes — color_palettes","text":"Among available color palettes, col_solarized based Solarized: https://ethanschoonover.com/solarized/; col_div, col_qual, col_heat, col_cold col_gallus based ColorBrewer2: https://colorbrewer2.org/.","code":""},{"path":"http://momx.github.io/Momocs/reference/color_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Some color palettes — color_palettes","text":"","code":"wheel <- function(palette, n=10){  op <- par(mar=rep(0, 4)) ; on.exit(par(op))  pie(rep(1, n), col=palette(n), labels=NA, clockwise=TRUE)}   # Qualitative  wheel(col_qual)   wheel(col_solarized)   wheel(col_summer)   wheel(col_summer2)   wheel(col_spring)   wheel(col_autumn)    # Divergent  wheel(col_gallus)   wheel(col_india)    # Sequential  wheel(col_heat)   wheel(col_hot)   wheel(col_cold)   wheel(col_sari)   wheel(col_bw)   wheel(col_grey)    # Black only for pubs  wheel(col_black)"},{"path":"http://momx.github.io/Momocs/reference/color_transparency.html","id":null,"dir":"Reference","previous_headings":"","what":"Transparency helpers and palettes — col_transp","title":"Transparency helpers and palettes — col_transp","text":"ease transparency handling.","code":""},{"path":"http://momx.github.io/Momocs/reference/color_transparency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transparency helpers and palettes — col_transp","text":"","code":"col_transp(n, col = \"#000000\", ceiling = 1)  col_alpha(cols, transp = 0)"},{"path":"http://momx.github.io/Momocs/reference/color_transparency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transparency helpers and palettes — col_transp","text":"n number colors generate col color hexadecimal format generate levels transparency ceiling maximal opacity (0 1) cols colors, provided hexadecimal values transp numeric 0 1, value transparency obtain","code":""},{"path":"http://momx.github.io/Momocs/reference/color_transparency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transparency helpers and palettes — col_transp","text":"colors","code":""},{"path":"http://momx.github.io/Momocs/reference/color_transparency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transparency helpers and palettes — col_transp","text":"","code":"x <- col_transp(10, col='#000000') x #>  [1] \"#000000f0\" \"#0000001c\" \"#00000038\" \"#00000055\" \"#00000071\" \"#0000008d\" #>  [7] \"#000000aa\" \"#000000c6\" \"#000000e2\" \"#000000ff\" barplot(1:10, col=x, main='a transparent black is grey')   summer10 <- col_summer(10) summer10 #>  [1] \"#4876FF\" \"#7094C6\" \"#99B28D\" \"#C2D155\" \"#EAEF1C\" \"#FFE805\" \"#FFBA0F\" #>  [8] \"#FF8C1A\" \"#FF5E25\" \"#FF3030\" summer10.transp8 <- col_alpha(summer10, 0.8) summer10.transp8 #>  [1] \"#4876FF32\" \"#7094C632\" \"#99B28D32\" \"#C2D15532\" \"#EAEF1C32\" \"#FFE80532\" #>  [7] \"#FFBA0F32\" \"#FF8C1A32\" \"#FF5E2532\" \"#FF303032\" summer10.transp2 <- col_alpha(summer10, 0.8) summer10.transp2 #>  [1] \"#4876FF32\" \"#7094C632\" \"#99B28D32\" \"#C2D15532\" \"#EAEF1C32\" \"#FFE80532\" #>  [7] \"#FFBA0F32\" \"#FF8C1A32\" \"#FF5E2532\" \"#FF303032\" x <- 1:10 barplot(x, col=summer10.transp8) barplot(x/2, col=summer10.transp2, add=TRUE)"},{"path":"http://momx.github.io/Momocs/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several objects — combine","title":"Combine several objects — combine","text":"Combine Coo objects slicing, either manual using slice chop. Note Coo object, combines row-wise (ie, merges shapes c ) ; Coe combines column-wise (merges coefficients). latter case, Coe must number shapes (necessarily number coefficients). Also $fac first Coe retrieved. separate version may come point.","code":""},{"path":"http://momx.github.io/Momocs/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several objects — combine","text":"","code":"combine(...)"},{"path":"http://momx.github.io/Momocs/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several objects — combine","text":"... list (Coe), Opn(Coe), Ldk objects (class)","code":""},{"path":"http://momx.github.io/Momocs/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several objects — combine","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/combine.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Combine several objects — combine","text":"Note order shapes coefficients checked, anything number rows merged.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several objects — combine","text":"","code":"w <- filter(bot, type==\"whisky\") b <- filter(bot, type==\"beer\") combine(w, b) #> Out (outlines) #>   - 40 outlines, 162 +/- 21 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows #>   - also: $ldk # or, if you have many levels bot_s <- chop(bot, ~type) bot_s$whisky #> Out (outlines) #>   - 20 outlines, 158 +/- 23 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 20 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 14 more rows #>   - also: $ldk # note that you can apply something (single function or a more # complex pipe) then combine everyone, since combine also works on lists # eg: # bot_s2 <- efourier(bot_s, 10) # equivalent to lapply(bot_s, efourier, 10) # bot_sf <- combine(bot_s2)  # pipe style efourier(bot_s, 10) %>% combine() #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> An OutCoe object [ combined: efourier + efourier analyses ] #> -------------------- #>  - $coe: 20 outlines described, and (total) 80 coefficients #> # A tibble: 20 × 2 #>   type  fake  #>   <fct> <fct> #> 1 beer  c     #> 2 beer  c     #> 3 beer  c     #> 4 beer  c     #> 5 beer  c     #> 6 beer  c     #> # ℹ 14 more rows"},{"path":"http://momx.github.io/Momocs/reference/complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert complex to/from cartesian coordinates — complex","title":"Convert complex to/from cartesian coordinates — complex","text":"Convert complex /cartesian coordinates","code":""},{"path":"http://momx.github.io/Momocs/reference/complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert complex to/from cartesian coordinates — complex","text":"","code":"cpx2coo(Z)  coo2cpx(coo)"},{"path":"http://momx.github.io/Momocs/reference/complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert complex to/from cartesian coordinates — complex","text":"Z coordinates expressed complex form coo coordinates expressed cartesian form","code":""},{"path":"http://momx.github.io/Momocs/reference/complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert complex to/from cartesian coordinates — complex","text":"coordinates expressed cartesian/complex form","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/complex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert complex to/from cartesian coordinates — complex","text":"","code":"shapes[4] %>%            # from cartesian     coo_sample(24) %>%     coo2cpx() %T>%       # to complex     cpx2coo()            # and back #>  [1] 200+ 62i 205+ 43i 176+ 43i 146+ 44i 156+ 23i 186+ 20i 202+ 15i 172+  9i #>  [9] 143+ 16i 130+ 45i 135+ 74i 133+104i 142+134i 165+160i 191+182i 203+210i #> [17] 225+226i 239+204i 238+178i 237+150i 227+120i 221+ 91i 224+ 62i 219+ 45i"},{"path":"http://momx.github.io/Momocs/reference/coo_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Aligns coordinates — coo_align","title":"Aligns coordinates — coo_align","text":"Aligns coordinates along longer axis using var-cov matrix eigen values.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aligns coordinates — coo_align","text":"","code":"coo_align(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aligns coordinates — coo_align","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aligns coordinates — coo_align","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aligns coordinates — coo_align","text":"","code":"coo_plot(bot[1])  coo_plot(coo_align(bot[1]))   # on a Coo b <- bot %>% slice(1:5) # for speed sake stack(coo_align(b))"},{"path":"http://momx.github.io/Momocs/reference/coo_aligncalliper.html","id":null,"dir":"Reference","previous_headings":"","what":"Aligns shapes along their 'calliper length' — coo_aligncalliper","title":"Aligns shapes along their 'calliper length' — coo_aligncalliper","text":"returns registered bookstein coordinates. See coo_bookstein.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_aligncalliper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aligns shapes along their 'calliper length' — coo_aligncalliper","text":"","code":"coo_aligncalliper(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_aligncalliper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aligns shapes along their 'calliper length' — coo_aligncalliper","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_aligncalliper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aligns shapes along their 'calliper length' — coo_aligncalliper","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_aligncalliper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aligns shapes along their 'calliper length' — coo_aligncalliper","text":"","code":"b <- bot[1] coo_plot(b)  coo_plot(coo_aligncalliper(b))   b <- bot %>% slice(1:5) # for speed sake bot.al <- coo_aligncalliper(b) stack(bot.al)"},{"path":"http://momx.github.io/Momocs/reference/coo_alignminradius.html","id":null,"dir":"Reference","previous_headings":"","what":"Aligns shapes using their shortest radius — coo_alignminradius","title":"Aligns shapes using their shortest radius — coo_alignminradius","text":"returns slided first coordinate east. May used aligning strategy shapes clear 'invaginate' part.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_alignminradius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aligns shapes using their shortest radius — coo_alignminradius","text":"","code":"coo_alignminradius(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_alignminradius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aligns shapes using their shortest radius — coo_alignminradius","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_alignminradius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aligns shapes using their shortest radius — coo_alignminradius","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_alignminradius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aligns shapes using their shortest radius — coo_alignminradius","text":"","code":"b <- bot %>% slice(1:5) # for speed sake stack(coo_alignminradius(b))"},{"path":"http://momx.github.io/Momocs/reference/coo_alignxax.html","id":null,"dir":"Reference","previous_headings":"","what":"Aligns shapes along the x-axis — coo_alignxax","title":"Aligns shapes along the x-axis — coo_alignxax","text":"Align longest axis shape along x-axis.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_alignxax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aligns shapes along the x-axis — coo_alignxax","text":"","code":"coo_alignxax(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_alignxax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aligns shapes along the x-axis — coo_alignxax","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_alignxax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aligns shapes along the x-axis — coo_alignxax","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_alignxax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aligns shapes along the x-axis — coo_alignxax","text":"shapes upside-(mirror others), try redefining new starting point (eg coo_slidedirection) alignment step. may solve problem coo_calliper orders $arr.ind used coo_aligncalliper.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_alignxax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aligns shapes along the x-axis — coo_alignxax","text":"","code":"b <- bot[1] coo_plot(b)  coo_plot(coo_alignxax(b))"},{"path":"http://momx.github.io/Momocs/reference/coo_angle_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the angle of every edge of a shape — coo_angle_edges","title":"Calculates the angle of every edge of a shape — coo_angle_edges","text":"Returns angle (radians) every edge shape,","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_angle_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the angle of every edge of a shape — coo_angle_edges","text":"","code":"coo_angle_edges(coo, method = c(\"atan2\", \"acos\")[1])  # S3 method for default coo_angle_edges(coo, method = c(\"atan2\", \"acos\")[1])  # S3 method for Coo coo_angle_edges(coo, method = c(\"atan2\", \"acos\")[1])"},{"path":"http://momx.github.io/Momocs/reference/coo_angle_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the angle of every edge of a shape — coo_angle_edges","text":"coo matrix list (x; y) coordinates Coo method 'atan2' ('acos') signed () angle.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_angle_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the angle of every edge of a shape — coo_angle_edges","text":"numeric angles radians every edge.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_angle_edges.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculates the angle of every edge of a shape — coo_angle_edges","text":"coo_thetapts deprecated removed future releases.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_angle_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the angle of every edge of a shape — coo_angle_edges","text":"","code":"b <- coo_sample(bot[1], 64) coo_angle_edges(b) #>  [1] -3.111523 -3.093172 -3.092305  3.081724  3.105229  3.077881  3.110353 #>  [8]  3.046641  3.051196  3.135756 -3.074763 -3.017238 -2.926235 -2.628633 #> [15] -2.611156 -2.953906 -3.017238 -3.085049 -2.915581 -2.709056 -2.530867 #> [22] -2.927854 -3.086548 -3.100971  3.114884 -3.060821  3.116579 -3.106746 #> [29]  3.131759  3.116579  3.080363  3.030147  3.035444  3.141593 -3.051196 #> [36] -3.014394 -2.988492 -2.873097 -3.131789  2.993915  2.944112 -3.135728 #> [43]  3.113711  3.137875 -3.106026  3.106746  2.980423 -1.981456 -2.694480 #> [50] -3.062770 -2.583631 -2.029263  3.018319  3.023726 -3.109950  3.085522 #> [57] -3.087530  3.112543  2.978918  3.011861  3.087633 -2.957901 -2.916681 #> [64] -3.046946"},{"path":"http://momx.github.io/Momocs/reference/coo_angle_tangent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the tangent angle along the perimeter of a\nshape — coo_angle_tangent","title":"Calculates the tangent angle along the perimeter of a\nshape — coo_angle_tangent","text":"Calculated using complex numbers returned radians minus first one (modulo 2*pi).","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_angle_tangent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the tangent angle along the perimeter of a\nshape — coo_angle_tangent","text":"","code":"coo_angle_tangent(coo)  # S3 method for default coo_angle_tangent(coo)  # S3 method for Coo coo_angle_tangent(coo)  coo_tangle(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_angle_tangent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the tangent angle along the perimeter of a\nshape — coo_angle_tangent","text":"coo matrix coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_angle_tangent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the tangent angle along the perimeter of a\nshape — coo_angle_tangent","text":"numeric, tangent angle along perimeter, list Coo","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_angle_tangent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the tangent angle along the perimeter of a\nshape — coo_angle_tangent","text":"","code":"b <- bot[1] phi  <- coo_angle_tangent(b) phi2 <- coo_angle_tangent(coo_smooth(b, 2)) plot(phi, type='l')  plot(phi2, type='l', col='red') # ta is very sensible to noise   # on Coo bot %>% coo_angle_tangent #> $brahma #>   [1] 0.00000000 0.03394792 6.12970584 6.22607257 6.18054224 6.19051042 #>   [7] 6.13580603 5.99700591 5.99842093 5.99084704 5.86041492 5.81488459 #>  [13] 5.76506244 5.62887223 5.58334190 5.53781157 5.39732954 5.35179921 #>  [19] 5.22136709 5.16746875 5.12193843 5.06723404 5.07720222 5.03804123 #>  [25] 5.03308691 5.08250829 5.03697796 5.17966914 5.21216935 5.41953309 #>  [31] 5.77457625 5.99961627 6.05629266 6.19411028 6.06367816 6.15041823 #>  [37] 6.20005411 6.10694068 6.10899345 6.11083173 6.24864935 6.21627616 #>  [43] 0.15041122 0.41687566 0.72706839 0.84208756 0.93719564 0.93924841 #>  [49] 0.94130119 0.84818776 0.80265743 0.85207881 0.75917987 0.75672633 #>  [55] 0.62053611 0.71690284 0.62442716 0.58361378 0.52907469 0.53478153 #>  [61] 0.44702280 0.39677552 0.39819054 0.39061666 0.21281593 0.16728561 #>  [67] 0.07417217 6.26424405 6.21871372 6.07886944 5.99538267 5.94148434 #>  [73] 5.89595401 5.85879168 5.85121780 5.90000142 6.00172285 5.85652387 #>  [79] 5.95289060 6.03171526 6.08391184 6.21482206 6.12821895 6.02776111 #>  [85] 5.90179053 5.77058090 5.73820771 5.54311764 5.45064197 5.40081982 #>  [91] 5.40652666 5.31405098 5.27323760 5.21869850 5.17746000 5.13664661 #>  [97] 5.13334469 5.04086901 4.99104686 4.62111347 5.01682255 4.60719411 #> [103] 5.30626827 6.00978848 6.15257805 6.15247100 6.15452378 6.10899345 #> [109] 6.19573352 0.50480943 1.60303743 0.87544326 1.21632143 1.02825629 #> [115] 1.03030907 0.88982703 0.79735136 0.79876638 0.84818776 0.70770572 #> [121] 0.61523005 0.51420121 0.66606644 0.52558441 0.48434590 0.34125395 #> [127] 0.16219458 0.14695801 6.24944229 6.18612024 6.12136151 6.11662487 #> [133] 6.17219791 6.26019663 0.02904262 0.07417217 0.07622495 0.08278017 #>  #> $caney #>   [1] 0.00000000 0.06226874 0.07482722 6.17098557 0.04973765 6.19585440 #>   [7] 6.15845448 6.12105457 6.08365466 5.94658609 6.00885483 6.02141332 #>  [13] 5.93405501 5.89665510 5.81167208 5.92152392 5.68478671 5.74705545 #>  [19] 5.75961393 5.67225562 5.43746015 5.54749740 5.56005588 5.61331586 #>  [25] 5.53521445 5.54752480 5.41045623 5.27338767 5.43532506 5.29825650 #>  [31] 5.16118793 5.22345667 5.36591026 5.24832550 5.43300749 5.27125258 #>  [37] 5.70474653 5.98185092 6.06880600 6.09653125 6.19140174 6.22285831 #>  [43] 0.00000000 6.24578539 0.02486883 6.27065422 0.05494594 0.01233774 #>  [49] 0.07266474 0.03526482 0.18097573 0.05452623 0.23276803 0.36301056 #>  [55] 0.63366343 0.80375974 1.24653486 0.91207073 0.88384487 1.03466647 #>  [61] 0.99726655 0.95986664 1.02213538 0.88506682 0.89762530 0.81026699 #>  [67] 0.57547152 0.73546717 0.69806725 0.76033599 0.52359878 0.87732431 #>  [73] 0.54846760 0.31367213 0.47366778 0.43626787 0.30820807 0.36146804 #>  [79] 0.22439948 0.48406378 0.19930991 0.21186839 0.17446848 0.13706857 #>  [85] 0.09966865 6.25479416 0.12453748 6.17098557 6.13358566 6.24581279 #>  [91] 6.15845448 0.03526482 0.04544802 0.22671705 0.07444053 0.15191722 #>  [97] 0.32561064 0.07711740 6.15071198 6.19274656 5.88412401 5.84672410 #> [103] 5.80460724 5.96371242 5.73452436 5.54749740 5.75745144 5.52265597 #> [109] 5.63414601 5.44785615 5.41045623 5.56127783 5.33565641 5.29825650 #> [115] 5.40974653 5.22345667 5.18605676 5.24832550 5.30865249 4.87646146 #> [121] 4.77913339 5.19645276 5.06132594 4.80714863 5.08425302 5.57609989 #> [127] 6.00234758 6.24578539 6.11065857 6.27065422 6.23325431 0.11006465 #> [133] 0.16672597 0.49891243 0.95304135 1.23419711 1.51513480 1.06167038 #> [139] 1.93029230 1.18426612 1.14686620 0.91207073 0.97239773 0.93499781 #> [145] 0.99726655 0.81097669 0.92246673 0.70521332 0.74799825 0.71059834 #> [151] 0.77286708 0.58657722 0.69806725 0.46327178 0.62326743 0.43697757 #> [157] 0.54846760 0.29239874 0.42370938 0.23887231 0.10741116 6.22179942 #> [163] 5.93251249 5.95912756 6.10959968 6.06842620 6.16619699 6.22285831 #>  #> $chimay #>   [1] 0.000000000 6.183372777 6.150128410 6.241239038 6.083639677 6.050395310 #>   [7] 6.141505938 5.859551582 5.950662210 5.917417843 5.884173476 5.709032055 #>  [13] 5.942039737 5.908795371 5.893093064 5.717951643 5.684707276 5.775817904 #>  [19] 5.760115597 5.584974176 5.427374815 5.376588388 5.485241076 5.730296368 #>  [25] 5.418752342 5.509862970 5.352263609 5.319019242 5.285774876 5.376885504 #>  [31] 5.219286142 5.186041776 5.152797409 5.261450097 5.331287339 5.177419303 #>  [37] 5.378590612 5.606825061 6.119235749 6.027235560 6.098868132 0.016854134 #>  [43] 6.249253014 6.233550707 0.041476028 0.008231661 6.116275547 6.224928235 #>  [49] 5.913384209 0.153553853 5.880216472 6.091950768 0.020499758 6.025462035 #>  [55] 6.116572663 6.100870356 6.050083929 6.016839563 6.001137256 6.070974498 #>  [61] 6.037730131 6.081257656 5.971241398 6.051789038 6.123421610 0.394994540 #>  [67] 0.695548337 0.847651921 0.814407554 0.781163187 0.747918820 0.714674454 #>  [73] 0.681430087 0.648185720 0.614941354 0.706051982 0.548452620 0.515208254 #>  [79] 0.357608892 0.448719520 0.415475153 0.506585781 0.348986420 0.315742053 #>  [85] 0.282497687 0.249253320 0.216008953 0.182764587 0.149520220 0.116275853 #>  [91] 0.083031486 0.294765783 0.016542753 6.266483693 6.233239327 0.049361185 #>  [97] 6.166750593 6.133506227 6.100261860 6.067017493 6.033773127 6.000528760 #> [103] 5.967284393 6.058395021 6.025150654 6.145850952 0.109720934 6.264710169 #> [109] 0.003779000 6.253719940 6.137956619 0.005149272 5.993611396 6.160195675 #> [115] 5.973243779 5.939999412 5.860633930 5.873510679 5.794145196 5.760900829 #> [121] 5.493240787 5.854787540 5.547375722 5.514131355 5.578932266 5.327018953 #> [127] 5.311316647 5.494945896 5.227285853 5.069686492 5.178339180 5.003197759 #> [133] 4.261327120 4.936709025 5.027819653 5.115198955 5.115275584 4.661834504 #> [139] 3.874431807 5.058993379 5.580056509 5.882779748 6.208306052 6.175061685 #> [145] 6.141817318 6.108572952 6.075328585 6.042084218 6.008839851 6.253895144 #> [151] 6.066706113 0.089569053 0.885173745 1.201536502 1.740485780 0.818761641 #> [157] 0.785517274 0.872896576 0.964007204 1.625501114 0.897518471 0.864274104 #> [163] 0.706674743 0.673430376 0.622643949 0.486317974 0.573697276 0.306037233 #> [169] 0.434167977 0.320019511 0.286775145 0.286851774 0.139815400 0.060449917 #> [175] 0.307742342 6.218390668 0.120629940 6.210657758 6.063159063 0.020896840 #> [181] 5.996670329 6.123801407 6.068821333 5.952435735 6.024068307 5.790995295 #> [187] 5.911458457 6.038127214 6.125506516 #>  #> $corona #>   [1] 0.000000000 0.093190192 6.280085533 0.095445119 6.230254910 6.181548048 #>   [7] 6.132841185 6.084134322 6.035427459 5.986720596 5.938013733 5.889306870 #>  [13] 5.840600008 5.791893145 5.743186282 5.694479419 5.645772556 5.597065693 #>  [19] 5.548358831 5.821402522 5.450945105 5.402238242 5.353531379 5.304824516 #>  [25] 5.256117653 5.404806350 5.158703928 5.200656952 5.524937811 6.100866371 #>  [31] 0.054091936 6.164215386 0.253742423 0.105366907 0.056660045 0.007953182 #>  [37] 0.139099819 0.015416395 0.041686093 0.255499953 0.626588922 1.286508331 #>  [43] 1.049579963 1.189094606 1.140387743 1.041722484 1.042974017 0.994267154 #>  [49] 0.945560292 0.896853429 0.848146566 0.799439703 0.750732840 0.702025977 #>  [55] 0.653319114 0.604612252 0.555905389 0.507198526 0.458491663 0.409784800 #>  [61] 0.361077937 0.312371075 0.263664212 0.214957349 0.166250486 0.026883736 #>  [67] 0.121419822 0.020129897 6.254608342 0.064613226 0.195759863 0.022698006 #>  [73] 0.317015084 0.191536329 6.196110346 5.913660302 5.864953439 5.816246576 #>  [79] 5.767539713 5.718832851 5.769794640 5.621419125 5.721602210 5.524005399 #>  [85] 5.672694096 5.568488728 5.575280370 5.238518061 5.429361033 5.498016271 #>  [91] 5.380452919 5.229302203 5.085643634 4.848715265 5.279686702 5.030182932 #>  [97] 5.431235682 0.129720339 0.081013476 0.032306613 6.266785058 0.271567707 #> [103] 1.748439146 1.210879929 1.162173066 1.729086092 1.262154900 1.163489642 #> [109] 0.701093565 1.116034312 0.801075400 1.018620586 0.870245071 0.599456306 #> [115] 0.772831345 0.728841428 0.556417326 0.626710756 0.677672546 0.628965683 #> [121] 0.580258820 0.531551957 0.285449535 0.434138232 0.004924992 6.239403436 #> [127] 6.064104446 6.173725084 6.120798837 #>  #> $deusventrue #>   [1] 0.00000000 6.22214668 6.18080993 6.23594696 6.17968595 6.11625336 #>   [7] 6.21501833 6.19495497 6.13234484 6.16078710 6.07094474 6.22700355 #>  [13] 6.18566681 6.14433006 6.10299332 6.06165657 6.02031983 6.08964030 #>  [19] 6.13504189 5.89630959 5.90755591 5.81363610 5.88295657 5.83063126 #>  [25] 5.78929451 5.70087218 5.70662102 5.66528428 5.52427888 5.68033769 #>  [31] 5.63900095 0.01313872 0.29355253 0.22469980 0.46420077 0.41187546 #>  [37] 0.48119594 0.38727613 0.28786522 0.25751705 0.31584895 0.27451221 #>  [43] 0.23317546 0.19183872 0.25017063 0.20883388 0.06782848 0.36316656 #>  [49] 0.64619816 1.05096696 1.21595411 1.33227243 1.28572740 1.24959894 #>  [55] 1.20826219 1.10999222 1.22525735 0.96525166 1.09000080 1.10124712 #>  [61] 0.95503343 1.01857363 0.87756823 0.93590014 0.67589445 0.85322665 #>  [67] 0.81188990 0.52557449 0.72921641 0.68787966 0.85403914 0.60520617 #>  [73] 0.66353808 0.67913456 0.67859150 0.71080604 0.68997924 0.73769208 #>  [79] 0.68674024 0.69273654 0.73601867 0.51358927 0.65760048 0.44584005 #>  [85] 0.53147609 0.37948212 0.27661179 0.26556880 0.15980522 0.15260155 #>  [91] 0.07713172 6.16132522 6.13097705 6.14413176 6.03731499 6.05291147 #>  [97] 6.07364179 5.81363610 5.66164213 5.73096261 5.68962586 5.64828912 #> [103] 5.60695237 5.56561563 5.62394753 5.37228491 5.29271544 5.40026864 #> [109] 5.41151496 5.31759515 5.49492735 5.07831979 5.48504171 5.97466645 #> [115] 0.10706565 6.25986463 0.31584895 0.47190777 0.61368184 0.91066872 #> [121] 1.52390274 1.77963021 1.27985414 1.33996435 1.93645770 1.22315778 #> [127] 1.64795003 1.62933664 1.49548128 1.34926759 1.30793085 1.26659410 #> [133] 1.22525735 0.96525166 1.52309024 0.90385156 0.95503343 0.79990468 #> [139] 0.87756823 0.78701019 0.64958473 0.65583109 0.61449434 0.30690555 #> [145] 0.52172018 0.39642287 0.32479236 0.31374938 0.27241263 0.15164139 #> [151] 0.15944538 0.16891234 #>  #> $duvel #>   [1] 0.00000000 0.05163389 0.01260790 1.54437823 6.21774121 5.98131966 #>   [7] 6.13968922 6.10066322 6.06163723 1.31022225 5.98358524 5.94455924 #>  [13] 5.90553325 5.86650725 5.82748125 1.07606628 5.74942926 5.71040327 #>  [19] 5.67137727 5.63235128 5.59332528 0.84191030 5.51527329 5.47624729 #>  [25] 5.43722130 5.39819530 0.64678033 5.22948342 5.28111731 5.24209132 #>  [31] 5.46931737 5.59066682 0.41262435 5.87138550 6.23725129 0.20488648 #>  [37] 0.16586048 0.12683449 0.17846838 0.04878249 6.20374819 0.06139039 #>  [43] 6.21488981 6.26652371 6.22749771 6.18847171 6.14944572 6.11041972 #>  [49] 6.16205361 6.03236773 5.99334174 6.13416924 6.00594963 6.07365931 #>  [55] 5.83723775 5.79821176 6.10795677 0.37897450 0.54211730 0.74986529 #>  [61] 0.80003291 5.56405578 0.81264081 0.77361481 0.73458882 0.69556282 #>  [67] 0.65653682 5.32989981 0.57848483 0.53945884 0.50043284 0.46140685 #>  [73] 5.13476983 0.38335485 0.34432886 0.30530286 0.26627687 0.22725087 #>  [79] 4.90061386 0.14919888 0.11017289 0.07114689 0.03212089 6.27628021 #>  [85] 4.66645788 6.19822821 6.15920222 6.21083611 6.08115023 6.13278412 #>  [91] 4.43230191 6.06374089 6.19129829 6.23479125 0.06315567 4.23717193 #>  [97] 0.11455324 6.15654376 6.03966127 5.83171777 5.71250693 4.00301596 #> [103] 5.62544617 5.76201234 5.88336179 5.84433579 6.00747859 3.76885998 #> [109] 5.91135628 5.76095104 5.60308470 5.36340583 5.14452633 3.53470401 #> [115] 4.71770333 4.93678846 5.25467440 4.85873646 3.33957403 4.69149086 #> [121] 5.12377516 5.46803331 5.75833348 6.01978465 3.10541805 6.11732483 #> [127] 6.16895872 6.22059261 0.23434891 0.35669803 2.87126208 0.79779215 #> [133] 0.95616171 1.44963982 0.96450827 0.92548228 2.63710611 1.20713728 #> [139] 1.33702879 0.84956314 0.64395375 2.44197613 0.56590176 0.18240185 #> [145] 0.01628675 0.21572910 0.32727882 2.20782015 0.21749145 0.26751504 #> [151] 0.42928595 0.30106634 0.35123396 1.97366418 0.01507085 6.04127195 #> [157] 5.95824921 6.10332168 6.11041680 1.73950821 6.23301769 #>  #> $franziskaner #>   [1] 0.00000000 6.23251446 6.18184361 6.13117276 6.08050191 6.02983106 #>   [7] 6.17655577 5.92848936 5.87781851 5.82714766 5.77647681 5.72580597 #>  [13] 5.67513512 5.62446427 5.57379342 5.52312257 5.47245172 5.42178087 #>  [19] 5.37111002 5.32043917 5.26976832 5.21909747 5.06354968 5.11775577 #>  [25] 5.11704332 5.11608273 5.28749378 5.75305360 6.07121890 6.09307021 #>  [31] 6.23890445 5.92441464 6.13756275 6.18184361 0.06665640 6.12808501 #>  [37] 6.22722662 6.21290339 0.02581043 0.43878719 0.84850663 0.96441918 #>  [43] 0.92275710 1.06241479 0.91207529 0.86140444 0.81073359 0.76006274 #>  [49] 0.70939189 0.65872104 0.60805019 0.55737934 0.50670849 0.45603764 #>  [55] 0.40536679 0.35469594 0.30402510 0.25335425 0.20268340 0.15201255 #>  [61] 0.10134170 0.05067085 0.00000000 6.23251446 6.18184361 6.13117276 #>  [67] 6.08050191 6.02983106 5.97916021 5.97844776 6.14407056 5.97603761 #>  [73] 6.04272886 5.98312968 5.94138717 5.88178798 5.84004547 5.81457936 #>  [79] 5.76390851 5.74353142 5.60485320 5.61189597 5.50351150 5.51055427 #>  [85] 5.31032368 5.21742443 5.20898198 5.01641408 4.91816012 4.59332182 #>  [91] 5.01329148 4.81373068 4.81301823 6.23322691 6.05266096 6.18184361 #>  [97] 6.22183265 6.18017056 1.21777343 1.41566118 0.86732938 1.47130840 #> [103] 1.11475868 1.06408783 0.66464598 0.81385619 0.91207529 0.60408072 #> [109] 0.72007370 0.42338792 0.43109223 0.46132548 0.24407123 0.23562879 #> [115] 0.21525170 0.13428709 0.12706714 0.15730038 0.07028191 6.24508276 #> [121] 0.15510029 6.23780230 6.24262995 0.05067085 #>  #> $grimbergen #>   [1] 0.000000000 6.130874904 6.278403913 6.228537363 6.178670813 6.128804263 #>   [7] 6.078937713 6.128739816 5.888544726 6.029006716 5.879471513 5.829604963 #>  [13] 5.779738413 5.729871863 5.680005313 5.630138763 5.580272213 5.530405663 #>  [19] 5.480539112 5.430672562 5.380806012 5.378522566 5.380741565 5.321866249 #>  [25] 5.459639471 5.806214204 5.966673528 6.265861669 0.089631132 0.031396576 #>  [31] 0.169751531 0.029225094 0.022435328 0.020151881 6.253470638 0.015370487 #>  [37] 0.050405731 6.245768043 0.062275925 0.069723584 0.314587140 0.843244804 #>  [43] 0.944753698 0.858539527 0.951756270 0.992549607 0.942683057 0.892816507 #>  [49] 0.842949957 0.702423520 0.643548205 0.693350307 0.643483757 0.593617207 #>  [55] 0.543750657 0.493884107 0.444017557 0.394151007 0.344284457 0.294417907 #>  [61] 0.344220009 0.194684806 0.144818256 0.094951706 0.045085156 0.042801710 #>  [67] 6.228537363 0.075339006 0.151497827 0.295099128 0.333888459 0.306745270 #>  [73] 0.145499478 0.001177992 5.929273615 5.977133973 5.777454966 5.770665200 #>  [79] 5.827534323 5.722169267 5.879176666 5.725517776 5.610526062 5.672262807 #>  [85] 5.472836517 5.460926412 5.330875015 5.039442758 4.624374758 5.347858761 #>  [91] 5.310039821 3.930223399 5.073904116 6.104165835 0.020216329 0.070018431 #>  [97] 0.020151881 6.253470638 6.203604088 6.253406191 0.842932605 1.560284404 #> [103] 1.911998394 1.008139177 0.994620248 1.860979257 1.092282707 1.042416157 #> [109] 0.795154048 0.754461552 0.712963007 0.609206776 0.595687847 0.563363357 #> [115] 0.495954747 0.552823870 0.593617207 0.496167554 0.493884107 0.063511180 #> [121] 0.030172050 5.952728822 5.966877249 6.028389942 6.097363737 6.149703905 #>  #> $guiness #>   [1] 0.000000000 6.248850961 6.214516615 6.180182269 6.145847923 6.111513577 #>   [7] 6.077179232 6.167199880 5.884155545 6.098531188 5.939841848 5.905507502 #>  [13] 5.871173156 5.836838810 5.802504464 5.768170118 5.733835772 5.699501426 #>  [19] 5.665167080 5.630832734 5.596498388 5.562164042 5.527829696 5.610604095 #>  [25] 5.459161005 5.424826659 5.390492313 5.356157967 5.321823621 5.009189616 #>  [31] 5.253154929 5.218820583 5.184486237 5.150151891 5.334486491 5.205838194 #>  [37] 5.479556629 5.798212671 5.961273885 5.894692656 6.235629133 6.124522896 #>  [43] 0.004398803 6.253249764 6.232613191 6.184581072 6.274601721 6.240267375 #>  [49] 6.205933029 6.171598683 6.199683147 6.102929991 6.179252866 6.034261299 #>  [55] 6.244905616 0.041177970 6.162348928 6.141902578 0.222905371 0.454823074 #>  [61] 0.522932582 0.688426881 1.012863205 0.978528859 0.944194513 0.909860167 #>  [67] 0.875525821 0.965546470 1.051835793 0.772522784 0.738188438 0.703854092 #>  [73] 0.669519746 0.635185400 0.600851054 0.566516708 0.532182362 0.497848016 #>  [79] 0.463513670 0.429179324 0.176176032 0.360510632 0.326176286 0.291841940 #>  [85] 0.257507595 0.223173249 0.188838903 0.154504557 0.120170211 0.085835865 #>  [91] 0.051501519 6.175997486 6.266018134 6.231683788 6.197349442 6.163015096 #>  [97] 6.128680750 5.816046745 6.060012059 6.270656376 6.115698361 6.201987684 #> [103] 6.261967289 0.163754337 0.129419991 0.197529499 0.287550147 0.088067124 #> [109] 6.107275643 5.927312916 5.772354902 5.891965220 5.689988437 5.669351864 #> [115] 5.635017518 5.593436922 5.686972495 5.549556540 5.497680134 5.449648015 #> [121] 5.429011442 5.455670052 5.454656702 5.201653410 5.291674059 5.274881773 #> [127] 5.209307593 5.342615685 5.256780528 4.995647334 4.175914825 4.648678984 #> [133] 5.016999291 5.076978897 4.752668140 5.377643862 5.705853754 6.046790231 #> [139] 6.257434548 6.223100202 6.188765856 6.271540254 6.120097164 6.210117813 #> [145] 0.326842480 0.945934475 1.394725794 1.236036454 1.142946285 2.043425813 #> [151] 1.133033416 0.390072798 1.206261779 1.030030378 0.878587288 0.961361686 #> [157] 0.802672346 0.647714331 0.747701427 0.824024303 0.544711294 0.631000616 #> [163] 0.476042602 0.562331924 0.527997578 0.373039564 0.583683881 0.364001585 #> [169] 0.404357968 0.235702180 0.201367834 0.053241481 6.153764608 6.006279281 #> [175] 5.917453478 5.969857471 6.004379615 6.025543774 6.049965251 6.201853745 #> [181] 6.125585953 0.193023686 0.144991567 #>  #> $hoegardeen #>   [1] 0.000000000 6.263129292 0.100037949 0.067482585 0.034927220 0.002371856 #>   [7] 6.253001799 6.220446435 6.187891070 6.155335706 6.122780342 6.090224977 #>  [13] 6.057669613 6.177763577 5.827410207 5.960003520 5.927448156 5.894892792 #>  [19] 5.862337427 5.829782063 5.797226699 5.764671335 5.732115970 5.782701838 #>  [25] 5.743777133 5.634449877 5.601894513 5.569339149 5.536783785 5.504228420 #>  [31] 5.471673056 5.439117692 5.406562327 0.661617983 5.494100927 5.308896235 #>  [37] 5.359482102 5.320557397 5.363879470 5.444926827 5.540910533 5.612910771 #>  [43] 6.188157402 0.091085677 0.150859647 6.232388364 0.011599399 0.205842883 #>  [49] 0.173287518 0.140732154 6.238712769 0.075621426 0.222919561 0.010510697 #>  [55] 0.130604661 0.028541200 0.065493933 6.240246438 0.092712539 0.314525233 #>  [61] 0.528042623 0.821517388 1.288308745 1.178981490 1.140056785 1.113870761 #>  [67] 1.158087288 1.125531924 1.092976560 1.060421195 1.027865831 0.995310467 #>  [73] 0.962755102 0.930199738 0.897644374 0.865089010 0.923193532 0.723206390 #>  [79] 0.932571594 0.734867552 0.702312188 0.669756824 0.637201460 0.604646095 #>  [85] 0.572090731 0.539535367 0.506980002 0.474424638 0.441869274 0.409313910 #>  [91] 0.376758545 0.344203181 0.311647817 0.279092452 0.246537088 0.213981724 #>  [97] 0.181426360 4.861259976 0.116315631 0.083760267 0.127976794 0.183798216 #> [103] 0.151242851 0.106188138 0.165962108 0.186927013 0.082671565 0.145067907 #> [109] 0.112512543 0.003185287 0.120442379 0.060269729 6.242224770 6.076319151 #> [115] 6.031264438 6.091038408 5.978653058 6.079447948 5.975192501 5.880986966 #> [121] 5.981781855 5.650727560 5.618172195 5.662388722 5.705710795 5.520506102 #> [127] 5.640600067 5.532167265 5.505981241 5.467056537 5.357729281 5.505027417 #> [133] 5.292618552 5.412712517 5.392656501 5.118180568 4.621977595 5.212982963 #> [139] 5.395785298 5.309709666 4.188021652 5.197015834 5.265563841 5.719907709 #> [145] 6.174251576 0.080237945 0.124454472 0.091899108 0.059343743 0.103560270 #> [151] 0.159381692 0.260176582 0.948263631 1.302214571 1.756558439 1.599648080 #> [157] 1.204548479 1.184492463 1.457235756 1.451884563 1.239475699 2.777716661 #> [163] 1.021715642 1.141809606 1.032482350 0.911550200 1.044143513 0.858938820 #> [169] 0.979032785 0.863336188 0.830780824 0.728717363 0.931952559 0.663606635 #> [175] 0.631051270 0.751145235 0.565940542 0.533385178 0.408500479 0.468274449 #> [181] 0.435719085 0.234062494 0.224758753 0.263903472 0.136396402 0.127092660 #> [187] 0.094537296 6.263159793 0.082946836 6.280056510 0.017836107 6.214945782 #> [193] 0.120932150 #>  #> $jupiler #>   [1] 0.000000000 0.035494062 0.066524698 0.026247869 6.269156347 6.228879518 #>   [7] 6.188602689 6.148325860 6.031277140 6.067772203 6.027495374 5.987218545 #>  [13] 5.875634251 5.906664887 5.866388058 5.826111229 5.714526936 5.745557571 #>  [19] 5.633973278 5.665003914 5.624727085 5.584450256 5.544173427 5.432589133 #>  [25] 5.386847878 5.423342940 5.346045995 5.414096747 5.444409508 5.339007516 #>  [31] 5.363855850 5.524705907 5.746949802 5.963298364 6.226756021 0.009686739 #>  [37] 0.056815509 0.085734959 0.110583293 0.005181301 0.106801526 0.143296589 #>  [43] 0.168144923 0.127868094 0.172493059 0.248441322 0.384286667 0.566810992 #>  [49] 0.784045742 1.104013060 1.048030716 1.092655681 1.122968442 1.153999078 #>  [55] 1.113722249 1.002137955 1.033168591 0.992891762 0.952614933 0.912338104 #>  [61] 0.872061275 0.831784447 0.791507618 0.674458898 0.710953960 0.670677131 #>  [67] 0.630400302 0.518816008 0.549846644 0.432797924 0.469292987 0.287119103 #>  [73] 0.541388657 0.277155035 0.308185671 0.267908842 0.227632013 0.116047719 #>  [79] 0.147078355 0.142500639 0.219174026 0.168144923 0.197064373 0.172493059 #>  [85] 0.183717041 0.143440212 0.123362656 0.127610836 0.022609725 0.002532169 #>  [91] 6.158035049 6.048561942 6.019037386 6.037204562 5.927731455 5.972356419 #>  [97] 5.705280743 5.806900968 5.701498976 5.584450256 5.615480892 5.575204063 #> [103] 5.540391660 5.494650405 5.454373576 5.419561174 5.373819918 5.262235625 #> [109] 5.298730687 4.838658026 5.141405138 5.253777638 5.060851480 4.793775803 #> [115] 5.207096671 5.545565657 6.006892882 6.203464815 0.035494062 0.066524698 #> [121] 0.103019760 0.264270699 0.611663448 1.043805933 1.364629415 1.895006773 #> [127] 1.056884291 1.173209339 1.596580119 1.234552735 1.087540234 1.077227186 #> [133] 1.042414784 1.002137955 0.956396700 0.850994708 0.881307468 0.770441050 #> [139] 0.872061275 0.760476982 0.649610563 0.524431941 0.639646495 0.392377472 #> [145] 0.477750974 0.379030140 0.271546985 0.282770967 0.126269046 0.085992217 #> [151] 0.090240397 0.005438559 6.248347038 0.041109994 6.232517661 6.259447158 #>  #> $kingfisher #>   [1] 0.00000000 0.07035394 0.03583095 0.00130795 6.24997026 6.21544726 #>   [7] 1.46853529 6.14640127 6.11187828 6.27475084 5.94316363 6.13266428 #>  [13] 5.97378629 5.93926330 5.90474030 5.87021730 5.83569431 1.08878233 #>  [19] 5.76664831 5.73212532 5.69760232 5.66307933 5.62855633 5.59403333 #>  [25] 5.55951034 5.52498734 5.49046434 0.74355237 5.42141835 5.38689536 #>  [31] 5.35237236 5.31784936 5.28332637 5.46747232 5.21428038 5.29041460 #>  [37] 5.34262994 5.43246194 0.36379941 5.42217177 5.79254056 6.00299623 #>  [43] 6.04524512 6.22939107 6.14838995 6.20792818 0.08761544 6.11760881 #>  [49] 0.01856945 6.26723176 0.16819240 6.19818577 0.09914641 0.06462341 #>  [55] 0.10288827 0.19513280 0.12289186 0.54584371 0.78048820 5.92200180 #>  [61] 0.95642087 0.92189788 0.90864827 1.07152083 0.92634061 1.00247484 #>  [67] 0.96795184 0.93342885 0.70151029 0.86438285 5.54224884 0.99273242 #>  [73] 0.76081387 0.72629087 0.69176787 0.65724488 0.62272188 0.58819889 #>  [79] 0.55367589 0.62981011 0.48462990 5.16249588 0.41558390 0.38106091 #>  [85] 0.34653791 0.31201492 0.27749192 0.24296892 0.20844593 0.17392293 #>  [91] 0.13939993 0.10487694 4.78274292 0.03583095 0.00130795 0.16418051 #>  [97] 6.21544726 0.09513452 0.06061153 0.02608853 0.15294064 0.05110377 #> [103] 4.43751296 6.17118185 6.23072009 6.12340925 6.25072368 6.03308987 #> [109] 6.01984026 6.08839887 6.02358211 5.80825954 6.12672693 4.05776000 #> [115] 5.79142889 5.85096713 5.72238290 5.73544301 5.55561000 5.61881391 #> [121] 5.60556430 5.45204101 5.53651831 5.48072193 3.67800704 5.43294932 #> [127] 5.37715294 5.14523438 5.11071139 5.29485734 5.23906095 5.00714240 #> [133] 4.55439507 5.22955320 3.33277708 4.57759362 5.12598421 5.72729964 #> [139] 6.23660910 0.01856945 6.26723176 6.23270876 0.01466911 0.46848007 #> [145] 1.30609357 2.95302412 1.56637375 1.21351315 1.37832746 1.35479303 #> [151] 1.10994416 1.07542117 1.14056682 0.88737488 1.07152083 0.81832889 #> [157] 2.57327117 0.77055628 0.93342885 0.79923720 0.66698730 0.61119091 #> [163] 0.59794130 0.66114521 0.52889531 0.27354354 2.22804120 0.52305323 #> [169] 0.36952994 0.13545156 0.40849567 0.28723434 0.06960052 0.41558390 #> [175] 6.24602189 0.14914235 0.11461936 1.84828825 6.20440368 0.01105037 #> [181] 6.16565144 0.13939993 #>  #> $latrappe #>   [1] 0.00000000 6.15384418 6.19078552 6.14458563 6.09838574 6.13532708 #>   [7] 6.00598596 5.95978606 5.91358617 5.86738628 5.82118639 5.69821460 #>  [13] 5.81192784 5.68258671 5.63638682 5.59018693 5.54398704 5.49778714 #>  [19] 5.53472848 5.40538736 5.35918747 5.31298758 5.26678768 5.30372902 #>  [25] 5.17438790 5.12818801 5.23463744 5.03578822 5.71623067 6.21568584 #>  [31] 0.01965089 0.06182778 0.09239978 0.04619989 0.00000000 6.23698542 #>  [37] 6.19078552 6.14458563 6.09838574 6.05218585 6.00598596 5.95978606 #>  [43] 5.91358617 5.86738628 5.89795828 5.85812773 5.80555849 5.76572794 #>  [49] 5.79504208 6.27591644 0.74845682 0.70862627 0.73919827 0.69299838 #>  [55] 0.64679849 0.60059860 0.55439870 0.50819881 0.46199892 0.41579903 #>  [61] 0.36959914 0.32339924 0.27719935 0.23099946 0.18479957 0.13859968 #>  [67] 0.09239978 0.04619989 0.00000000 6.23698542 6.19078552 6.14458563 #>  [73] 6.09838574 6.05218585 6.00598596 5.95978606 5.91358617 5.86738628 #>  [79] 5.82118639 5.77498650 5.80555849 5.76572794 5.86318567 5.83516559 #>  [85] 6.00763464 5.99172851 6.03958986 6.06108299 6.14458563 6.11965913 #>  [91] 5.87233235 5.74866224 5.47288683 5.37316667 5.23463744 5.11892946 #>  [97] 4.98958833 4.94338844 4.89718855 4.68583998 4.23805955 4.75858887 #> [103] 5.06115998 5.18064040 5.94580686 6.14458563 6.09838574 5.97541396 #> [109] 6.08912719 5.95978606 6.07873485 0.17220358 0.61485604 0.97193763 #> [115] 1.38357146 1.13534641 1.00382783 0.95456984 0.83159806 0.70862627 #> [121] 0.57404959 0.54034905 0.40181982 0.16819082 6.24958141 6.08912719 #> [127] 5.91633517 5.91358617 5.91083717 6.05492957 6.14587778 6.19243421 #> [133] 6.24118603 0.22174091 0.09239978 0.04619989 #>  #> $lindemanskriek #>   [1] 0.0000000000 0.2503515252 6.1760863615 0.0682944710 0.1432517756 #>   [6] 0.1075518591 0.0094331326 0.1468092473 0.0004521096 6.2479375002 #>  [11] 6.2122375837 6.1765376672 6.1408377507 6.1051378342 6.0694379176 #>  [16] 6.0337380011 5.9980380846 5.9623381681 5.9266382516 5.8909383351 #>  [21] 5.8552384185 5.8195385020 5.7838385855 5.7481386690 5.7124387525 #>  [26] 5.6767388359 5.6410389194 5.6053390029 5.5696390864 5.5339391699 #>  [31] 5.4982392534 5.4625393368 5.4268394203 5.3911395038 5.4660968085 #>  [36] 5.5647183339 5.6057903086 5.8810886727 6.2248369327 0.0009034153 #>  [41] 0.1071005534 0.1620605241 0.2330962802 0.1973963637 0.1689426972 #>  [46] 0.2503515252 0.2146516087 0.1789516922 0.1432517756 0.2319068537 #>  [51] 0.3168306057 0.1468092473 0.2315427768 0.2097308562 0.2508028309 #>  [56] 0.2521230303 0.7261918388 0.8736027395 1.0352983829 1.1969940262 #>  [61] 1.4830446641 1.0049705246 1.4329182171 1.1785493547 1.1428494382 #>  [66] 1.1071495216 1.0714496051 1.0357496886 1.0000497721 0.9643498556 #>  [71] 0.9286499390 0.8929500225 0.8572501060 0.8215501895 0.7858502730 #>  [76] 0.7501503565 0.7144504399 0.6787505234 0.6430506069 0.6073506904 #>  [81] 0.5716507739 0.5359508573 0.5002509408 0.5233068470 0.4288511078 #>  [86] 0.2824939701 0.3574512748 0.3805071810 0.1616964472 0.2503515252 #>  [91] 0.3317603532 0.3033066867 0.3882304388 0.3525305223 0.2571998926 #>  [96] 0.3949226964 0.2191210554 0.3235228633 0.2151037183 0.1383310231 #> [101] 0.1794029979 0.2268443133 6.2441101167 0.5359508573 6.1223930792 #> [106] 0.0840446472 6.2126896933 6.2126888895 5.9795934131 6.1412890564 #> [111] 5.9081935800 5.9668076149 5.8367937470 5.8514110350 5.8597078653 #> [116] 5.6053390029 5.6802963076 5.5963579799 5.4982392534 5.4625393368 #> [121] 5.4268394203 5.5658117028 5.3554395873 5.3197396708 5.2840397542 #> [126] 5.1895840150 5.2126399212 4.9319613416 5.0168850936 5.1642959944 #> [131] 4.9454852606 5.2528092845 6.0568472886 0.0053728621 0.1039943875 #> [136] 0.1789516922 0.2020075984 0.3525305223 0.1962069372 0.4997996351 #> [141] 1.3401577692 1.7805271830 1.2548699402 1.1053780165 1.7313336387 #> [146] 1.3927488538 1.3570489373 1.0763703576 1.2856491042 1.2499491877 #> [151] 1.2142492712 1.0678921335 1.1428494382 0.9827945271 1.0714496051 #> [156] 0.9769938659 0.8893925509 0.8224528010 0.8179927179 0.7685950280 #> [161] 0.7465928848 0.6971951949 0.4640997186 0.5190596893 0.3556797697 #> [166] 0.4337718603 0.4243816610 0.2485800201 0.3266721107 0.2142003029 #> [171] 0.2552722777 0.1616661559 0.1838724447 0.0714006369 0.1124726116 #> [176] 0.0356999165 #>  #> $nicechouffe #>   [1] 0.000000000 0.007281689 6.140695807 0.045565652 6.161360448 6.118324933 #>   [7] 6.199644411 6.156608896 6.113573380 5.959880643 6.086258171 5.984466832 #>  [13] 5.941431317 5.898395801 5.855360285 5.812324769 5.769289253 5.726253738 #>  [19] 5.683218222 5.640182706 5.597147190 5.554111674 5.511076159 5.468040643 #>  [25] 5.425005127 5.381969611 5.338934095 5.295898580 5.252863064 5.454806211 #>  [31] 5.488542587 5.642902631 6.049229981 6.249711141 0.037282325 0.239225473 #>  [37] 0.196189957 0.042497220 0.110118925 0.067083410 0.024047894 6.264197685 #>  [43] 6.221162169 6.178126653 0.070574776 0.213762101 0.105127413 0.281398598 #>  [49] 0.731413980 0.743876969 1.102070252 1.121453547 1.078418031 1.035382515 #>  [55] 0.992346999 0.949311483 1.016933189 0.800821642 0.820204936 0.777169420 #>  [61] 0.844791126 0.691098389 0.648062873 0.605027357 0.561991841 0.518956325 #>  [67] 0.475920810 0.432885294 0.514204773 0.346814262 0.303778746 0.015764567 #>  [73] 0.217707715 0.419650862 0.131636683 0.147356990 0.169920646 0.126885130 #>  [79] 0.204473283 0.101807054 0.118402252 0.152138627 0.032331220 0.047201909 #>  [85] 0.106173311 6.160100262 6.184447242 6.214130955 6.171095439 6.128059924 #>  [91] 6.012305179 5.807573216 5.998953376 5.955917860 5.785202342 5.729745104 #>  [97] 5.592395637 5.542113871 5.381969611 5.557603041 5.420253574 5.311618886 #> [103] 5.209827548 5.166792032 5.234413737 5.080721001 4.530586980 4.870294974 #> [109] 5.237665895 5.019236158 5.485792907 6.034533562 6.225913722 0.024047894 #> [115] 0.105367372 0.525979466 1.143987119 1.564599212 1.134687978 1.521979076 #> [121] 1.404252831 1.250560094 1.096867357 1.164489062 1.121453547 0.859749085 #> [127] 1.035382515 0.881689778 0.949311483 0.687607022 0.746131707 0.695849942 #> [133] 0.455418866 0.489155241 0.405046947 0.369763214 0.386358411 0.222699227 #> [139] 0.273977662 0.117150139 0.154585635 0.050557164 6.271228899 0.085109801 #> [145] 6.265628879 6.255914359 #>  #> $pecheresse #>   [1] 0.00000000 0.11558369 0.17175377 0.07308851 6.25264841 0.02563318 #>   [7] 6.26011162 6.21140476 6.16269790 6.11399103 6.06528417 5.91690866 #>  [13] 5.96787045 5.91916358 5.87045672 5.82174986 5.77304299 5.72433613 #>  [19] 5.67562927 5.62692241 5.46755832 5.52950868 5.48080182 5.43209495 #>  [25] 5.48305674 5.53207679 5.65686565 6.05491255 6.20075765 0.09078998 #>  [31] 0.22986799 0.11138213 0.28134421 0.23263735 0.18393048 0.23489227 #>  [37] 0.19139370 0.32926669 0.52952253 0.69354745 1.08197926 1.41377877 #>  [43] 1.25441469 1.26640665 1.26765818 1.07006137 1.17024446 1.12153759 #>  [49] 1.07283073 1.02412387 0.97541700 0.82704149 0.87800328 0.82929642 #>  [55] 0.66993233 0.84899143 0.63059277 0.43707340 0.58576210 0.53705524 #>  [61] 0.48834838 0.43964151 0.39093465 0.34222779 0.39318958 0.35547128 #>  [67] 0.34499715 0.24706899 0.35601719 0.25748284 0.21994869 0.20989660 #>  [73] 0.16118974 0.10013782 0.05143096 6.24842697 6.21089282 6.09240696 #>  [79] 6.10230638 5.95098023 5.99479199 5.85356650 5.69998270 5.84867140 #>  [85] 5.65806748 5.60644517 5.60482390 5.45644839 5.51261846 5.11405600 #>  [91] 4.89791736 5.51894465 4.89116352 5.06453856 5.40155179 6.03204515 #>  [97] 0.01424085 0.14633356 0.20828391 0.15957705 0.32953913 0.73690427 #> [103] 1.12060518 1.48296287 1.59749629 1.31377721 1.33946694 1.73132552 #> [109] 1.18713467 1.24330475 1.08394067 1.04622237 1.09718416 0.99589424 #> [115] 0.80237488 0.95106357 0.74575483 0.75398119 0.58627404 0.46477933 #> [121] 0.55092738 0.44015345 0.31865874 0.29046182 0.30520558 0.17253815 #> [127] 0.14434123 0.10925750 0.09920541 #>  #> $sierranevada #>   [1] 0.000000000 6.247485391 1.499396494 6.176085558 6.140385641 6.104685725 #>   [7] 1.356596828 6.033285892 5.997585975 1.249497078 5.926186142 5.890486225 #>  [13] 5.854786309 1.106697412 5.783386476 5.747686559 0.999597663 5.676286726 #>  [19] 5.640586810 0.892497913 5.569186977 5.533487060 5.497787144 0.749698247 #>  [25] 5.426387311 5.473828626 0.642598497 5.319287561 5.283587645 5.164746496 #>  [31] 0.499798831 5.176487895 5.293437307 0.392699082 5.234536823 5.561762677 #>  [37] 6.136376864 0.249899416 0.049050822 0.013350905 0.142799666 0.030327858 #>  [43] 0.071399833 0.035699917 0.000000000 6.247485391 6.211785474 6.176085558 #>  [49] 6.140385641 6.104685725 6.152127040 6.033285892 6.162734652 6.114535387 #>  [55] 5.926186142 5.890486225 6.176536863 5.819086392 0.285599332 0.713547025 #>  [61] 0.916456431 5.676286726 0.775548501 0.892497913 5.569186977 0.986246757 #>  [67] 0.785398163 0.749698247 5.426387311 0.678298414 0.642598497 5.319287561 #>  [73] 0.571198664 0.535498748 0.499798831 5.176487895 0.428398998 0.392699082 #>  [79] 5.069388146 0.321299249 0.285599332 0.249899416 4.926588479 0.178499583 #>  [85] 0.225940898 4.819488730 0.071399833 0.035699917 0.000000000 4.676689064 #>  [91] 6.211785474 6.176085558 4.569589314 6.104685725 6.068985808 4.462489565 #>  [97] 6.074357866 6.045027290 6.091334819 4.319689899 0.004008777 0.063975534 #> [103] 4.212590149 0.093297539 0.131058267 6.071077846 4.069790483 5.688028125 #> [109] 5.721836305 3.962690734 5.580928376 5.545228459 5.579036639 3.819891067 #> [115] 5.599966141 5.484436239 3.712791318 5.400537057 5.457166475 5.421466558 #> [121] 3.569991652 5.331886910 5.152529377 3.462891902 5.242966976 4.613517392 #> [127] 3.355792153 5.212639117 4.436964317 4.972138058 3.212992487 5.730882620 #> [133] 6.118036630 3.105892737 6.135013583 6.176085558 6.223526873 2.963093071 #> [139] 6.234134485 0.424841527 2.855993321 0.822869585 1.754216662 0.856346691 #> [145] 2.713193655 1.286550912 1.147769387 2.606093906 0.754618999 0.784044246 #> [151] 0.629698898 2.463294240 0.691649319 0.655949403 2.356194490 0.597048918 #> [157] 0.630857098 0.513149736 2.213394824 0.530126690 0.488057432 2.106295075 #> [163] 0.334650154 0.311449586 1.999195325 6.281093269 6.011388186 5.948788930 #> [169] 1.856395659 5.966355505 5.998038085 1.749295909 6.273335645 6.225136379 #> [175] 0.236548510 1.606496243 #>  #> $tanglefoot #>   [1] 0.000000000 6.184656237 6.148545976 6.112435716 6.200680450 6.040215195 #>   [7] 6.004104935 5.967994674 5.931884414 5.895774154 5.859663893 5.823553633 #>  [13] 5.787443373 5.751333112 5.715222852 5.679112591 5.643002331 5.606892071 #>  [19] 5.570781810 5.534671550 5.498561289 5.462451029 5.426340769 5.514585503 #>  [25] 5.354120248 5.318009988 5.281899727 5.245789467 5.209679206 5.049213951 #>  [31] 5.013103691 5.101348425 5.189593159 5.387898575 5.351788314 5.742305547 #>  [37] 0.208408143 0.172297883 0.136187622 0.100077362 0.063967101 0.027856841 #>  [43] 6.274931888 6.238821627 6.202711367 6.166601107 6.130490846 6.094380586 #>  [49] 6.058270325 6.022160065 5.986049805 5.949939544 5.913829284 5.877719024 #>  [55] 5.841608763 5.805498503 5.769388242 5.733277982 5.697167722 0.390069165 #>  [61] 0.553787550 0.631469297 0.840337700 0.804227439 0.892472173 0.732006918 #>  [67] 0.695896658 0.659786398 0.623676137 0.587565877 0.551455617 0.515345356 #>  [73] 0.479235096 0.443124835 0.407014575 0.370904315 0.334794054 0.298683794 #>  [79] 0.262573533 0.226463273 0.190353013 0.154242752 0.118132492 6.240852544 #>  [85] 0.045911971 0.009801711 6.256876758 6.220766497 6.184656237 6.148545976 #>  [91] 6.112435716 6.076325456 6.040215195 5.879749940 5.967994674 5.807529420 #>  [97] 6.020129148 5.984018888 6.068532296 6.032422036 6.163743554 0.140663817 #> [103] 0.039428393 0.145215187 0.146125043 0.006426503 6.154921036 5.962208898 #> [109] 5.740750688 5.657431436 5.635209171 5.354120248 5.562988651 5.406254722 #> [115] 5.370144461 5.334034201 5.297923941 5.279355740 5.346327088 5.189593159 #> [121] 5.153482899 5.117372639 5.081262378 5.165775786 4.504180486 4.972931597 #> [127] 5.057445005 5.135126752 4.461946162 4.459156898 5.618572141 6.202711367 #> [133] 6.166601107 6.130490846 6.094380586 6.058270325 6.022160065 5.986049805 #> [139] 5.949939544 0.842669633 1.165330043 2.180869995 0.734338852 0.871651312 #> [145] 1.020889002 1.572781345 0.824313486 0.788203226 0.752092965 0.715982705 #> [151] 0.445456769 0.643762184 0.607651924 0.578787914 0.414807735 0.499321143 #> [157] 0.342587214 0.551455617 0.329997406 0.354880101 0.198146172 0.048243905 #> [163] 6.141700162 5.832581198 5.729902774 5.760360677 5.790818581 5.914939005 #> [169] 5.973780450 6.042547129 6.006436868 6.204742284 6.230568208 6.256876758 #>  #> $tauro #>   [1] 0.00000000 6.21162891 0.05748202 0.02137176 6.26844680 6.23233654 #>   [7] 6.19622628 6.16011602 6.12400576 5.93524617 6.05178524 6.01567498 #>  [13] 5.97956472 5.94345446 5.90734420 5.87123394 5.83512368 5.63386474 #>  [19] 5.76290316 5.72679290 5.69068264 5.65457238 5.61846212 5.58235186 #>  [25] 5.54624160 5.35748201 5.47402107 5.43791081 5.40180055 5.36569029 #>  [31] 5.32958003 5.29346977 5.42250819 5.40110275 5.35028767 5.47077929 #>  [37] 5.71846313 5.86220637 6.16538873 0.04722005 0.07623495 0.14320630 #>  [43] 0.01871925 6.26579430 0.11164741 0.07553715 0.21928039 0.15596595 #>  [49] 0.05034760 0.09624478 0.39433257 0.28550308 0.41076793 0.65519446 #>  [55] 0.89471364 1.20208964 1.08397193 0.94675830 1.02425076 1.14078983 #>  [61] 1.10467957 1.06856931 1.03245905 0.99634879 0.96023853 0.92412827 #>  [67] 0.88801801 0.76876651 0.81579748 0.77968722 0.74357696 0.70746670 #>  [73] 0.67135644 0.63524618 0.59913592 0.38317216 0.52691540 0.49080514 #>  [79] 0.45469488 0.25343594 0.53512369 0.34636410 0.31025384 0.27414358 #>  [85] 0.15489209 0.11878183 0.16581280 0.12970254 0.17673351 0.05748202 #>  [91] 0.17402108 0.23024016 0.19412990 0.15801964 0.19868127 0.08579912 #>  [97] 0.17188403 0.01357860 0.08126068 6.24581677 6.18843312 5.99800409 #> [103] 6.09803279 6.08010234 5.96416210 5.92805183 5.81745278 5.76745453 #> [109] 5.81972105 5.70160335 5.58235186 5.54624160 5.62956026 5.47402107 #> [115] 5.60305949 5.40180055 5.36569029 5.49472871 5.29346977 5.25735951 #> [121] 5.31190914 4.79034787 5.14902873 5.26556780 5.32178687 4.18873162 #> [127] 5.27083974 5.14833093 5.52036977 6.03464546 6.08217197 0.02850618 #> [133] 0.07553715 0.12256812 0.16846530 0.21218503 0.57459721 1.13104533 #> [139] 1.81017829 1.39356165 1.05895246 1.23819990 1.74887848 1.24912061 #> [145] 1.04786167 1.17690009 0.97564115 0.93953089 1.06856931 1.03245905 #> [151] 0.83120011 0.96023853 0.75897959 0.72286933 0.93504898 0.65064881 #> [157] 0.59983372 0.74357696 0.44121465 0.50620777 0.39026752 0.43398724 #> [163] 0.32748068 0.28193674 0.31095164 0.13294433 6.23812232 0.15567551 #> [169] 0.02461355 6.24466814 0.02916492 6.12642751 0.03677438 0.01316347 #>  #> $westmalle #>   [1] 0.000000000 0.186529069 6.250480580 0.097405873 6.277273760 0.008282678 #>   [7] 6.246906387 6.202344789 6.157783191 6.113221593 6.068659995 6.024098397 #>  [13] 5.979536799 6.045632423 5.890413603 5.845852006 5.801290408 5.756728810 #>  [19] 5.712167212 5.667605614 5.623044016 5.702837413 5.533920820 5.489359222 #>  [25] 5.444797624 5.400236026 5.472783173 5.435467825 5.207795410 5.741135749 #>  [31] 6.241125859 6.163243265 6.240876838 0.086375599 0.068123719 0.067558868 #>  [37] 0.197669469 0.211863694 0.108546273 0.181093420 0.264401740 0.314154094 #>  [43] 0.289070551 0.505987769 0.626574849 1.300843250 1.077871153 1.153933224 #>  [49] 1.233726620 1.130409200 1.144603425 1.100041827 1.055480229 1.010918631 #>  [55] 0.966357033 0.921795435 0.877233837 0.832672239 0.788110641 0.743549043 #>  [61] 0.698987445 0.654425847 0.609864250 0.565302652 0.520741054 0.476179456 #>  [67] 0.431617858 0.387056260 0.283738839 0.542911727 0.312127289 0.208809868 #>  [73] 0.281357015 0.364665336 0.260473024 0.275542140 0.183397438 0.160109227 #>  [79] 0.218629237 0.174067639 0.052734150 0.041493548 6.232908265 5.712277337 #>  [85] 6.029803147 0.048595106 6.068549870 6.268966935 5.858803005 5.806995157 #>  [91] 5.923624474 5.717871962 5.556201619 5.574058831 5.467078423 5.546871820 #>  [97] 5.377955227 5.333393629 5.288832031 5.046874874 5.199708836 5.329819437 #> [103] 4.788835085 5.128442852 5.485110053 6.057739847 0.219950268 6.261178417 #> [109] 0.130827072 0.260937673 0.446595662 0.873200329 1.399022012 1.478815409 #> [115] 1.524913698 1.279034992 1.469485610 1.411226239 1.256007419 1.211445822 #> [121] 1.042529229 1.122322626 1.077761028 0.908844435 0.988637832 0.819721239 #> [127] 0.782405891 0.609974375 0.635719241 0.520851179 0.330661201 0.271814860 #> [133] 0.694563859 0.587583451 0.240136984 0.374105260 0.167847215 0.087586504 #> [139] 0.179427511 6.185174841 0.151297271 #>  #> $amrut #>   [1] 0.00000000 6.25028905 6.21739279 6.18449653 6.15160027 6.11870402 #>   [7] 6.08580776 6.05291150 6.02001524 5.98711898 5.95422273 5.92132647 #>  [13] 5.88843021 5.85553395 5.82263769 5.78974143 5.75684518 5.72394892 #>  [19] 5.69105266 5.65815640 5.62526014 5.59236389 5.55946763 5.52657137 #>  [25] 5.49367511 5.46077885 5.42788260 5.39498634 5.36209008 5.32919382 #>  [31] 5.29629756 5.26340130 5.23050505 5.19760879 4.96731697 5.03214762 #>  [37] 5.09892001 5.16569241 5.23052306 5.09989989 5.16473054 5.77859271 #>  [43] 6.00869118 6.14798574 6.20915072 6.27398136 6.24108511 6.20818885 #>  [49] 6.27496124 6.24206498 6.20916873 6.17627247 6.14337621 6.11047995 #>  [55] 6.07758369 6.14435609 6.11145983 6.07856357 6.23745546 0.13701560 #>  [61] 0.50677400 0.93752535 0.90462909 1.06912839 0.93656348 1.00333587 #>  [67] 1.07010827 1.03721201 0.90464710 0.87175084 0.83885458 0.80595832 #>  [73] 0.77306207 0.74016581 0.60760090 0.67437329 0.64147703 0.60858078 #>  [79] 0.57568452 0.54278826 0.50989200 0.47699574 0.44409949 0.41120323 #>  [85] 0.37830697 0.34541071 0.31251445 0.27961819 0.24672194 0.21382568 #>  [91] 0.18092942 0.14803316 0.11513690 0.08224065 0.04934439 0.01644813 #>  [97] 6.26673718 6.23384092 6.20094466 6.16804840 6.13515215 6.10225589 #> [103] 6.06935963 6.03646337 6.00356711 5.97067085 5.83810594 5.90487834 #> [109] 6.06937764 6.21959220 6.26983717 0.03052750 0.11825491 0.20971365 #> [115] 0.28747461 6.22971088 5.98931839 5.99414009 5.64268815 5.51012324 #> [121] 5.47722698 5.34466207 5.31176581 5.37853821 5.44531060 5.31274569 #> [127] 5.69807376 5.44434874 5.31372557 5.28082931 5.24793305 5.49587452 #> [133] 5.27986744 4.85218007 4.81928381 5.18117867 5.05055550 4.91799059 #> [139] 4.98476299 4.95186673 4.71963317 4.78640556 4.85317796 5.50601121 #> [145] 5.93676256 6.12594820 6.19272060 6.15982434 6.22659673 0.10230331 #> [151] 0.38867622 1.31585033 1.28295407 1.25005781 1.11749290 1.18426529 #> [157] 1.15136904 1.01880412 1.08557652 1.05268026 1.13044122 1.08655640 #> [163] 0.95399149 0.72369967 0.59674218 0.85530271 0.62501089 0.78951020 #> [169] 0.24951543 0.62404903 0.59115277 0.65792516 0.62502890 0.69180130 #> [175] 0.55923639 0.42667148 0.17169332 0.08004124 6.17041716 5.78188502 #> [181] 5.91840181 5.95110472 6.03883213 6.08270776 6.22200232 6.28316730 #> [187] 0.06481264 0.32898059 0.09868877 0.06579252 0.03289626 #>  #> $ballantines #>   [1] 0.00000000 6.24014979 6.19711428 6.15407876 6.11104324 6.06800773 #>   [7] 6.02497221 5.98193670 5.93890118 5.89586566 5.85283015 5.80979463 #>  [13] 5.76675912 5.72372360 5.68068809 5.63765257 5.59461705 5.55158154 #>  [19] 5.50854602 5.40309170 5.17749633 5.37943948 5.33640396 5.29336844 #>  [25] 5.37468792 5.33165241 5.34960985 5.36620504 5.45869724 5.67865646 #>  [31] 6.26003129 0.11234034 0.13124101 0.15062431 0.04516998 0.18890827 #>  [37] 6.24228426 6.26166755 0.00201489 6.17559652 6.13256100 6.08952549 #>  [43] 6.04648997 5.87909946 5.96041894 5.91738342 5.87434791 5.83131239 #>  [49] 5.85069569 6.26438747 0.43121755 0.70180268 0.65876717 0.66331476 #>  [55] 0.69331981 0.77463928 0.73160377 0.68856825 0.76988773 0.66906539 #>  [61] 0.55946171 0.51642619 0.47339067 0.49277397 0.38731964 0.34428413 #>  [67] 0.30124861 0.25821309 0.21517758 0.17214206 0.12910655 0.08607103 #>  [73] 0.04303552 0.00000000 6.24014979 6.19711428 6.21649757 6.11104324 #>  [79] 6.06800773 6.02497221 6.04435551 5.93890118 5.89586566 5.85283015 #>  [85] 5.80979463 5.89111411 5.72372360 5.68068809 5.51329758 5.59461705 #>  [91] 5.67593653 5.86731669 6.06779785 6.27444132 0.12663099 0.16036737 #>  [97] 0.02238015 0.07429634 6.05926374 5.60088906 5.24558138 5.43696153 #> [103] 5.03515535 4.71382017 5.35397610 4.84362999 4.86301329 4.94433276 #> [109] 5.18183404 4.52281341 5.27887383 6.03328408 6.17559652 6.13256100 #> [115] 6.08952549 6.17904150 0.18391676 1.24802996 1.34689150 1.02940739 #> [121] 1.11892341 1.07588790 0.97043357 1.34858753 0.68617896 0.90374583 #> [127] 0.55782545 0.35402719 6.27242643 5.90764036 5.94137673 5.91652103 #> [133] 5.87348552 5.99068069 6.21160889 0.11462000 0.30600016 0.38731964 #> [139] 0.46863912 0.30124861 0.25821309 0.21517758 0.17214206 0.12910655 #> [145] 0.08607103 0.04303552 #>  #> $bushmills #>   [1] 0.00000000 6.18067856 6.14259865 1.39212975 6.06643882 6.02835891 #>   [7] 6.05684717 6.01876725 1.20173020 5.87603927 5.83795936 5.79987945 #>  [13] 1.04941056 5.79028779 5.68563971 5.64755980 5.60947989 0.85901100 #>  [19] 5.59573888 5.42867200 5.58971178 5.41908034 0.66861145 5.34292052 #>  [25] 5.36725941 5.26676069 0.51629180 5.12403271 5.09010215 5.04787289 #>  [31] 4.95200614 0.32589225 4.93363315 5.09467294 5.10938945 5.37591891 #>  [37] 0.13549269 5.79259549 6.14512262 6.23787010 6.26635836 6.22827845 #>  [43] 6.19019853 6.15211862 6.17645752 6.07595880 6.03787889 6.06221779 #>  [49] 5.96171907 5.99020732 5.88555925 6.09245800 0.15896295 0.70015986 #>  [55] 0.95428246 5.69515969 1.01125896 1.03096588 1.00108251 5.54284005 #>  [61] 0.91672615 0.82085941 0.71621134 0.61571261 5.35244049 0.60197160 #>  [67] 0.56389169 0.52581178 0.48773187 5.16204094 0.41157205 0.37349214 #>  [73] 0.27299342 0.23076415 4.97164138 0.22117249 0.18309258 0.14501267 #>  [79] 4.81932174 0.06885285 0.03077294 6.27587833 6.17537961 4.62892219 #>  [85] 6.09507044 6.12355869 6.08547878 6.04739887 4.43852263 5.97123905 #>  [91] 5.93315914 5.89507922 4.28620299 5.75235124 5.71427133 5.74275958 #>  [97] 5.70467967 4.09580343 5.62851985 5.59043994 5.48579186 5.51428012 #> [103] 3.90540388 5.43812029 5.33762157 5.49451200 5.78752817 3.71500432 #> [109] 6.00087202 6.10569621 6.02826654 3.56268468 5.88079926 5.43782756 #> [115] 5.14359627 4.54875359 3.37228512 4.96742035 4.86692163 4.82884172 #> [121] 4.85318062 3.18188557 4.78117015 4.61410326 5.55354286 3.02956593 #> [127] 6.00052714 6.09499876 6.05691885 6.15139047 2.83916637 0.24749641 #> [133] 1.33410728 1.09171150 1.04948224 2.64876682 1.03989058 1.00181067 #> [139] 0.96373076 1.28442152 2.45836726 0.84949102 0.37478395 0.05924050 #> [145] 2.30604762 6.07552960 6.15687861 6.22945592 0.20242527 2.11564806 #> [151] 0.38241683 0.46869191 0.43061200 0.39253209 1.92524851 0.31637227 #> [157] 0.27829236 0.24021245 1.77292886 0.22647144 0.19254088 0.08789280 #> [163] 0.04981289 1.58252931 6.25683838 #>  #> $chivas #>   [1] 0.0000000000 0.1291196729 0.2186774860 0.2974741250 0.2591620195 #>   [6] 0.2208499139 0.2449566184 0.1442257029 0.1059135973 0.1263573145 #>  [11] 0.0292893863 6.2741625879 6.2358504824 0.0387080642 6.1592262713 #>  [16] 6.2315713870 6.0826020603 6.0442899547 6.0059778492 5.9676657437 #>  [21] 5.9293536381 5.9497973553 5.8527294271 5.8144173216 5.8867624372 #>  [26] 5.7377931105 5.6994810050 5.7855238940 5.6228567939 5.5845446884 #>  [31] 5.4874767601 5.3835654828 5.7145870349 0.0102810137 0.4619262344 #>  [36] 0.3973044117 0.4796159747 0.4485501192 0.5273467582 0.4890346527 #>  [41] 0.3336138026 0.4124104416 0.3740983361 0.2251290094 0.2974741250 #>  [46] 0.2591620195 0.2208499139 0.2412936311 0.1442257029 0.1646694201 #>  [51] 0.1919564864 0.0292893863 0.0533960907 0.1713341211 0.0997010197 #>  [56] 0.0003959587 0.2775714414 0.8116137645 1.0869223112 1.4106976134 #>  [61] 1.2552767633 1.1545458478 1.1786525522 1.1403404467 1.1020283412 #>  [66] 1.0637162356 0.9666483074 0.9870920246 0.9487799190 0.7861128190 #>  [71] 0.8721557080 0.8338436024 0.7955314969 0.6948005814 0.7189072859 #>  [76] 0.6805951803 0.6422830748 0.6039709693 0.5069030410 0.5273467582 #>  [81] 0.4890346527 0.4507225471 0.4124104416 0.3740983361 0.3357862305 #>  [86] 0.2387183023 0.3835170140 0.2208499139 0.4275164715 0.5029963731 #>  [91] 0.5183240389 0.5746999962 0.6620382213 0.7763754441 0.7703102211 #>  [96] 0.7663193969 0.8033361822 0.5886579210 0.3580160684 0.0060833107 #> [101] 5.8953206280 5.7226870806 5.8049986436 5.7666865381 5.7939736044 #> [106] 5.9387723161 6.0071958832 5.9827717736 5.8238359995 5.8465168494 #> [111] 5.8415257398 5.7698926384 5.6705875774 5.6250292219 5.1108377015 #> [116] 5.5556512608 5.3929841607 5.2303170606 5.3163599496 5.2780478441 #> [121] 5.3640907331 5.2014236330 5.1631115275 5.5884470310 0.1291196729 #> [126] 0.2770304078 0.1731191305 0.2591620195 0.2832687239 0.1825378084 #> [131] 0.2685806974 0.7261630833 1.4073071514 1.6000857131 1.5617736075 #> [136] 1.5234615020 1.3607944019 1.4468372910 1.5191824066 1.3702130799 #> [141] 1.3943197844 1.2935888688 1.1381680187 0.9719859946 0.9475618850 #> [146] 1.1403404467 0.7432576709 0.8187375725 0.9147469089 0.8017440746 #> [151] 0.9487799190 0.9692236362 0.9965107025 0.9581985970 0.9126402415 #> [156] 0.7572193914 0.3601366156 6.2371381468 6.1400702186 6.0351899493 #> [161] 5.9968778437 6.0554276619 6.1287188510 6.1596030241 #>  #> $dalmore #>   [1] 0.000000000 0.105091701 0.232547293 0.253660785 0.378272783 1.908532430 #>   [7] 0.297199424 0.256662744 0.216126065 0.175589386 0.135052706 0.094516027 #>  [13] 0.053979347 1.584238995 6.256091296 0.015510541 6.175017937 6.134481258 #>  [19] 6.093944578 6.053407899 6.012871219 1.259945560 5.931797861 5.891261181 #>  [25] 5.850724502 5.733415931 5.604502466 5.407363909 5.390078853 0.935652124 #>  [31] 5.690645657 6.133696964 0.306943582 0.773505407 0.732968727 0.692432048 #>  [37] 0.651895369 0.611358689 0.570822010 0.530285330 0.489748651 0.449211972 #>  [43] 0.408675292 0.368138613 0.327601933 0.287065254 0.246528575 0.205991895 #>  [49] 0.165455216 0.124918536 0.167523089 0.043845178 0.003308498 0.045913051 #>  [55] 6.205420447 6.248024999 6.047575197 0.122375656 0.598069647 1.137698741 #>  [61] 1.332952622 1.507773642 5.881127011 1.373180015 1.252813350 1.047127993 #>  [67] 1.006591313 0.966054634 0.925517955 0.968122507 5.556833576 0.803907916 #>  [73] 0.763371237 0.805975789 0.682297878 0.641761199 0.601224519 0.643829072 #>  [79] 5.232540141 0.479614481 0.439077802 0.398541122 0.434776334 0.317467764 #>  [85] 0.276931084 0.313166296 4.908246706 0.477071600 0.509575486 0.506655463 #>  [91] 0.677212117 0.735121596 0.738035812 0.788159020 4.583953271 0.659876670 #>  [97] 0.446186558 0.144745372 6.145252208 6.197044863 5.911529521 5.718343513 #> [103] 4.259659835 5.873060715 5.749382803 5.785618015 5.668309445 5.710913997 #> [109] 5.664007977 5.711848084 5.900953847 3.894829721 5.126590437 5.384552689 #> [115] 5.344016009 5.380251221 5.262942651 5.222405971 5.334518620 3.570536286 #> [121] 0.143428289 0.264729041 0.307333594 0.266796914 0.226260235 0.552897389 #> [127] 1.632841971 3.246242850 1.634909844 1.671145056 1.470695253 1.513299806 #> [133] 1.472763126 1.753977001 0.996898648 2.921949415 1.157967080 1.186938498 #> [139] 1.229543050 1.189006371 1.148469691 1.031161121 1.067396332 2.597655980 #> [145] 1.069464206 0.869014403 0.822108383 0.619734272 0.457002422 0.195636973 #> [151] 0.001155629 2.273362545 6.076675450 6.075829107 6.169403211 #>  #> $famousgrouse #>   [1] 0.000000000 6.141129757 6.103951146 6.066772535 1.317204943 5.992415312 #>   [7] 5.955236701 5.918058089 5.880879478 5.843700867 5.806522256 5.769343644 #>  [13] 1.019776053 5.694986422 5.657807810 5.620629199 5.583450588 5.546271977 #>  [19] 5.509093365 5.471914754 0.722347162 5.397557531 5.360378920 5.323200309 #>  [25] 5.286021698 5.248843086 5.211664475 0.462096883 5.137307252 5.100128641 #>  [31] 4.844281084 5.025771419 4.988592807 4.951414196 5.273006255 0.164667993 #>  [37] 5.427880966 6.014725407 6.044860672 0.015953548 6.064564684 6.224781633 #>  [43] 6.187603021 6.150424410 6.113245799 6.076067187 6.038888576 6.001709965 #>  [49] 5.964531354 6.038009963 5.890174131 6.050391080 6.034485854 0.002551494 #>  [55] 0.470471390 0.794496534 0.954713483 0.917534872 5.592745241 1.040573209 #>  [61] 0.805999038 0.966215986 0.731641815 0.694463204 0.657284593 0.620105981 #>  [67] 5.295316350 0.545748759 0.508570147 0.471391536 0.434212925 0.397034314 #>  [73] 0.359855702 5.035066071 0.285498480 0.248319868 0.211141257 0.173962646 #>  [79] 0.136784035 0.099605423 0.062426812 4.737637181 0.206738535 6.234076285 #>  [85] 6.196897674 5.941050117 6.122540452 6.085361840 6.048183229 4.440208291 #>  [91] 5.973826006 5.936647395 5.899468784 5.862290173 5.825111561 5.787932950 #>  [97] 5.750754339 4.142779401 5.676397116 5.857887451 5.799435453 6.123460598 #> [103] 6.034781175 6.217146400 3.882529122 6.260300823 5.886066730 5.586768278 #> [109] 5.304611003 5.267432392 5.032858221 5.514825724 3.585100231 5.582365556 #> [115] 5.621958836 5.155017945 4.907513460 4.970003502 4.932824890 5.020001274 #> [121] 3.287671341 4.710631835 4.784110445 4.965600780 4.709753223 4.672574611 #> [127] 5.344022272 3.027421062 6.131835104 5.897260933 6.276146828 6.020299270 #> [133] 0.408561624 1.344210289 0.837603786 2.729992172 1.122017234 1.084838622 #> [139] 1.047660011 1.010481400 0.973302789 0.936124177 1.096341126 2.432563281 #> [145] 0.627192784 0.676752511 0.089187952 0.308160723 0.478478338 0.857364233 #> [151] 2.172313002 0.564338064 0.527159453 0.109474465 6.092486429 5.913410763 #> [157] 5.876232152 6.160804095 1.874884112 6.131870152 6.154145200 6.278341699 #> [163] 0.155373340 0.118194729 0.191673339 0.043837506 1.577455222 6.252665591 #> [169] 6.215486980 #>  #> $glendronach #>   [1] 0.00000000 6.25129097 0.01935255 1.47511330 6.15560794 6.12371360 #>   [7] 6.09181926 1.34753594 6.02803057 5.99613623 5.96424189 5.93234755 #>  [13] 1.18806423 5.86855887 5.83666452 5.80477018 1.06048686 5.74098150 #>  [19] 5.70908716 5.67719282 5.72843971 0.90101515 5.58150979 5.54961545 #>  [25] 5.51772111 0.77343779 5.45393242 5.42203808 5.39014374 5.27510817 #>  [31] 0.61396608 5.29446072 5.26256637 5.23067203 0.48638871 5.16688335 #>  [37] 5.05184778 5.01995343 5.15434156 0.32691700 5.09055287 5.14066598 #>  [43] 5.26537351 0.19933964 5.86262800 6.12023733 6.22169324 6.18979890 #>  [49] 0.03986793 6.20801766 6.17612332 6.22737021 6.19547587 6.16358153 #>  [55] 6.13168718 6.18293407 6.06789850 6.11914539 6.16925850 6.05535671 #>  [61] 6.18529980 5.90842679 0.01997464 0.29426790 0.87355594 5.78084943 #>  [67] 0.95342487 1.00467176 0.88963619 1.18586174 5.62137772 0.87709440 #>  [73] 0.84520005 0.81330571 5.49380035 0.74951703 0.71762269 0.68572835 #>  [79] 0.65383400 5.33432864 0.59004532 0.63492287 0.52625664 5.20675128 #>  [85] 0.46246795 0.43057361 0.39867927 0.36678493 5.04727957 0.30299625 #>  [91] 0.27110190 0.23920756 4.91970220 0.17541888 0.14352454 0.11163020 #>  [97] 0.07973585 4.76023049 0.01594717 6.26723814 6.23534379 4.63265313 #> [103] 6.08841388 6.13966077 6.10776643 6.07587209 4.47318142 6.01208340 #> [109] 5.98018906 5.94829472 4.34560405 5.71935736 5.93575293 6.06569602 #> [115] 6.18361413 4.18613234 6.25310878 0.11221161 0.25411839 4.05855498 #> [121] 6.24095807 5.96035374 5.69881696 5.41863270 3.89908327 5.35484402 #> [127] 5.32294968 5.45733780 3.77150590 5.39354912 5.36165478 5.32976044 #> [133] 5.45970352 3.61203419 5.39591484 5.36402050 5.31394634 3.48445683 #> [139] 4.70160826 4.99146447 4.95957013 5.01081702 3.32498512 4.86388710 #> [145] 4.91513399 4.80009842 3.19740775 4.73630974 4.86956407 5.84852626 #> [151] 3.06983038 6.17952870 6.14763436 6.19251190 6.16698690 2.91035868 #> [157] 0.30360090 1.27577367 1.24387932 2.78278131 1.18009064 1.14819630 #> [163] 1.03316073 1.08440762 2.62330960 0.93747770 1.31047515 1.03997148 #> [169] 2.49573223 0.64806290 0.53939667 0.58427422 0.57055969 2.33626053 #> [175] 0.65042863 0.61853428 0.66978117 2.20868316 0.60599249 0.57409815 #> [181] 0.70735249 0.59345070 2.04921145 0.20154212 6.23416414 5.97117913 #> [187] 1.92163409 5.77327966 5.92673327 6.10593226 6.11165458 1.76216238 #> [193] 6.27750834 0.12757737 0.17882426 1.63458501 0.03189434 #>  #> $glenmorangie #>   [1] 0.00000000 0.02365423 1.50059314 6.17788053 6.20153475 6.22478608 #>   [7] 1.36018676 6.03747415 6.00237256 6.02602678 1.21978039 6.02142277 #>  [13] 5.86196618 5.88562041 1.07937401 5.75666140 5.72155980 5.74521403 #>  [19] 0.93896764 5.73336377 5.64357224 5.54605184 0.79856126 5.47584865 #>  [25] 5.50316586 5.52275420 0.65815489 5.33544227 5.30034068 5.32399491 #>  [31] 0.51774851 5.19503590 5.09751549 4.74432633 0.37734213 4.61800236 #>  [37] 4.95710912 5.15909853 0.23693576 5.73960000 6.03750744 6.12876484 #>  [43] 0.09652938 6.22750435 6.12416355 6.21565409 6.23930831 6.26296254 #>  [49] 6.11034930 6.20057170 6.09890194 6.18090909 6.08745457 6.17894511 #>  [55] 5.95849556 0.02071504 6.22758499 0.42671110 5.81808919 1.01184279 #>  [61] 1.09425284 1.49035275 5.67768281 1.23307711 0.95384647 0.79757024 #>  [67] 5.53727644 0.78978586 0.75468427 0.59522768 5.39687006 0.59062366 #>  [73] 0.61427789 0.45482130 5.25646369 0.45021729 0.41511569 0.43876992 #>  [79] 5.11605731 0.36856674 0.33346514 0.18125480 4.97565093 0.16574155 #>  [85] 0.19305877 0.04084843 4.83524456 0.08775398 6.27708188 0.01755080 #>  [91] 4.69483818 6.16811411 6.19543132 6.16032973 4.55443181 5.96577155 #>  [97] 6.05502495 6.01992335 4.41402543 6.07407516 6.14570924 6.16556842 #> [103] 4.27361906 6.24594095 6.21405478 0.05821264 4.13321268 6.27119476 #> [109] 6.17422532 6.13042829 3.99280631 5.72589660 5.73837811 5.63297005 #> [115] 3.85239993 5.44685049 5.35299307 5.31789148 3.71199355 5.37204328 #> [121] 5.21258669 5.17748510 3.57158718 5.10728191 5.07218032 5.09583455 #> [127] 3.43118080 4.96687554 4.86935513 4.61062091 3.29077443 4.94357791 #> [133] 4.85378638 4.75626597 3.15036805 5.65131445 6.16300170 6.18665592 #> [139] 3.00996168 6.11645274 6.14010696 0.69035946 2.86955530 1.26365738 #> [145] 1.11144704 1.19345419 2.72914893 1.35434167 1.08814941 1.05304782 #> [151] 2.58874255 0.86573588 0.94774304 0.91264144 2.44833617 0.84243825 #> [157] 0.74858084 0.77223507 2.30792980 0.70203188 0.66693028 0.63182869 #> [163] 2.16752342 0.31664684 0.18723129 0.20537087 2.02711705 6.19201497 #> [169] 6.15691338 5.98135462 1.88671067 6.00539874 6.08905388 6.15450226 #> [175] 1.74630430 6.16298929 6.15739942 0.01144737 1.60589792 #>  #> $highlandpark #>   [1] 0.000000000 6.246006696 1.496439104 6.171649473 6.134470862 6.097292251 #>   [7] 1.347724659 6.022935028 5.914448952 6.019885270 1.199010214 5.802913118 #>  [13] 5.913813863 5.799863360 1.050295769 5.725506138 5.688327527 0.938759935 #>  [19] 5.613970304 5.576791693 5.539613081 0.790045490 5.465255859 5.428077248 #>  [25] 5.390898636 0.641331045 5.316541414 5.208055338 5.242184191 0.492616600 #>  [31] 5.096519504 5.130648357 0.381080766 5.461182921 6.095967481 6.209706299 #>  [37] 0.232366321 6.251574168 0.086701633 0.049523022 0.083651875 6.118565238 #>  [43] 0.009294653 6.255301349 6.218122737 6.180944126 6.215072980 6.106586904 #>  [49] 6.140715757 6.103537146 6.066358535 5.957872458 6.062590902 6.025412290 #>  [55] 5.988233679 5.809158013 5.983072735 0.280464542 0.843336144 5.660443568 #>  [61] 0.982183441 0.873697365 5.548907734 0.941237197 0.762161531 0.724982920 #>  [67] 5.400193289 0.721933162 0.613447086 0.576268475 5.251478844 0.501911252 #>  [73] 0.464732641 0.427554030 5.102764399 0.353196807 0.316018196 4.991228565 #>  [79] 0.241660973 0.204482362 0.167303751 4.842514120 0.092946528 0.055767917 #>  [85] 0.018589306 4.693799675 6.227417390 6.190238779 6.153060168 4.545085230 #>  [91] 6.078702945 6.041524334 6.004345723 4.396370784 5.929988500 5.892809889 #>  [97] 4.284834951 5.818452666 5.709966590 5.672787979 4.136120505 5.811635276 #> [103] 6.096207219 0.137572542 3.987406060 0.237297316 0.366564398 0.329385787 #> [109] 3.838691615 6.114256599 5.487780048 3.727155781 5.118876442 5.294902350 #> [115] 5.397509607 3.578441336 5.253956106 5.146187905 5.037701829 3.429726891 #> [121] 4.685044948 4.926165995 4.888987384 3.281012446 4.814630161 5.075950482 #> [127] 3.169476612 5.779949285 6.094814988 6.128225967 3.020762167 6.196483674 #> [133] 6.159305063 0.045933338 2.872047722 0.478674620 1.226894172 1.331612616 #> [139] 2.723333277 1.186665803 1.149487192 2.611797443 1.145719559 0.966643893 #> [145] 0.787568228 2.463082998 0.644014726 0.746621983 0.709443372 2.314368552 #> [151] 0.706393614 0.205567394 5.838366741 2.165654107 5.613092090 5.752035653 #> [157] 2.054118274 5.710187298 6.036454405 0.004612279 1.905403828 0.226121425 #> [163] 0.331557744 0.294379132 1.756689383 0.220021910 0.111535834 0.074357223 #> [169] 1.607974938 #>  #> $jackdaniels #>   [1] 0.000000000 0.034883989 6.276181394 6.234293492 6.192405590 6.150517688 #>   [7] 6.108629786 6.066741884 6.024853982 5.982966080 5.941078178 5.899190276 #>  [13] 5.857302374 5.815414472 5.773526570 5.731638668 0.977361785 5.647862864 #>  [19] 5.605974962 5.564087060 5.522199157 5.480311255 5.438423353 5.396535451 #>  [25] 5.263987662 5.389531539 5.044072897 5.228983843 5.413894789 5.310356716 #>  [31] 5.314413470 5.589506683 6.062266211 0.188495559 0.468358212 6.237878106 #>  [37] 0.139603744 0.097715842 0.055827940 0.013940038 6.255237443 6.213349541 #>  [43] 6.171461639 6.129573737 6.087685835 6.045797933 6.003910031 5.962022129 #>  [49] 6.146933075 0.327876120 0.756795609 0.855282692 0.813394790 0.998305736 #>  [55] 1.183216682 0.914529932 0.872642030 0.830754128 0.543887563 0.746978324 #>  [61] 0.705090422 0.663202520 0.711974505 0.502654825 0.537538814 0.495650912 #>  [67] 0.453763010 0.411875108 0.369987206 0.328099304 0.286211402 0.244323499 #>  [73] 0.202435597 0.160547695 0.118659793 0.076771891 4.747272970 6.276181394 #>  [79] 6.234293492 6.192405590 6.150517688 0.052243327 5.914092556 5.948082091 #>  [85] 6.209764928 6.093727506 0.010796088 6.102281037 0.098958382 0.366399313 #>  [91] 0.233851524 0.191963622 0.008178665 5.682746853 5.729235737 5.522199157 #>  [97] 5.327661927 5.438423353 5.396535451 5.431419441 5.389531539 5.497670593 #> [103] 5.394132521 5.432074604 5.297857367 3.532523810 5.061432235 4.866895005 #> [109] 4.977656431 4.935768529 4.893880627 4.851992725 4.975253500 5.875365638 #> [115] 0.013940038 6.028438595 6.213349541 6.171461639 6.129573737 0.356155510 #> [121] 1.333408953 1.291521051 1.249633149 1.207745247 0.939058496 1.422468374 #> [127] 1.158853432 0.875044961 0.771506888 0.589244000 0.761880604 0.645843182 #> [133] 0.678104800 0.788866226 0.888875379 0.781862313 2.233998847 0.538173386 #> [139] 0.414278038 0.537538814 6.150039933 5.794948277 5.909662251 5.757117128 #> [145] 6.083210162 0.059412553 0.102426445 6.258822057 0.083775804 0.195431685 #>  #> $jb #>   [1] 0.0000000000 6.2470750468 6.1112961339 6.1748545260 6.2294041528 #>   [6] 6.1026340052 6.0665237449 6.0304134845 5.9943032241 5.9581929637 #>  [11] 5.9220827033 5.8859724429 5.8498621825 5.8137519222 5.7776416618 #>  [16] 5.7891145047 5.7054211410 5.6693108806 5.6332006202 5.5970903598 #>  [21] 5.5609800995 5.5248698391 5.4887595787 5.4526493183 5.4165390579 #>  [26] 5.4710886847 5.2536586499 5.3082082768 5.3627579036 5.2359877560 #>  [31] 5.1998774956 5.1637672352 5.0369970876 5.0915467144 5.0554364541 #>  [36] 5.1099860809 5.4098434264 5.8568588308 6.0551642462 6.0969104753 #>  [41] 0.0314342050 0.2146306455 0.1448252778 0.0180551302 6.2651301770 #>  [46] 6.2290199166 6.1929096562 6.0571307433 6.1661124149 6.0845788751 #>  [51] 6.0484686147 5.8149627944 6.0669079811 0.0374589034 0.1201889876 #>  [56] 0.2594729478 0.7554391155 0.9034543118 1.0471975512 1.0110872908 #>  [61] 1.1548305302 1.0295266572 0.9027565097 0.8666462493 0.8305359889 #>  [66] 0.7944257285 0.7583154681 0.7222052077 0.6860949473 0.6499846869 #>  [71] 0.6138744266 0.5777641662 0.5416539058 0.5055436454 0.4694333850 #>  [76] 0.4333231246 0.3972128642 0.3611026039 0.4246609960 0.1982221959 #>  [81] 0.3434317099 0.1690784590 0.2712111891 0.0537811543 0.1083307812 #>  [86] 0.1198036240 0.0361102604 0.0000000000 6.2470750468 6.2109647864 #>  [91] 6.1748545260 6.2384129181 6.1026340052 5.9758638577 5.9828303812 #>  [96] 5.9943032241 5.8675330765 6.1019362031 6.2077229973 6.2764896757 #> [101] 0.2053075572 0.2798545180 0.3712538158 0.1600508939 6.1329584896 #> [106] 6.0137069973 5.5970903598 5.3635845396 5.4342099519 5.3980996915 #> [111] 5.4526493183 5.4165390579 5.4710886847 5.4349784243 5.4031599831 #> [116] 5.3627579036 5.3266476432 5.3972730554 5.3436207350 5.1752400781 #> [121] 5.0915467144 5.0554364541 5.0193261937 5.0781676396 4.7672521731 #> [126] 4.9109954125 4.9745538046 4.9806719463 4.8026646313 4.4077837007 #> [131] 5.1486684402 6.2197068976 6.2290199166 6.1929096562 6.1567993958 #> [136] 6.1682722387 6.0845788751 0.4087844163 1.4798228737 1.2139007178 #> [141] 1.1370889659 1.1916385927 1.1555283324 1.1194180720 1.0833078116 #> [146] 1.0471975512 1.0110872908 0.9749770304 0.8912836668 0.6365044605 #> [151] 0.6867927495 0.5642839397 0.6525286739 0.6676555809 0.5423517079 #> [156] 0.7857635998 0.5593247997 0.7937279264 0.6774328187 0.5416539058 #> [161] 0.5962035326 0.3697647325 0.0845521210 6.1136689539 5.8332543391 #> [166] 5.7751963840 5.8342523301 5.9071608435 6.1468564817 0.0006978021 #> [171] 6.2477728489 0.3057263410 0.1176438002 0.0361102604 #>  #> $johnniewalker #>   [1] 0.00000000 6.24578539 6.20838548 6.17098557 6.25794065 6.09618574 #>   [7] 6.05878583 6.02138592 5.98398601 5.94658609 5.90918618 5.87178627 #>  [13] 5.83438636 5.79698644 5.75958653 5.96716528 5.68478671 5.64738679 #>  [19] 5.60998688 5.57258697 5.53518706 5.49778714 5.46038723 5.42298732 #>  [25] 5.38558741 5.34818749 5.31078758 5.02840901 5.23598776 5.19858784 #>  [31] 5.16118793 5.12378802 5.08638811 5.04898819 5.01158828 4.97418837 #>  [37] 5.45593457 6.00653726 6.18780629 0.35717840 0.07479983 0.03739991 #>  [43] 0.00000000 6.24578539 6.20838548 6.17098557 0.09537901 6.09618574 #>  [49] 6.05878583 6.02138592 5.98398601 5.94658609 6.15416484 5.87178627 #>  [55] 0.47849627 0.96024247 1.04719755 1.25477630 0.97239773 0.93499781 #>  [61] 0.89759790 0.86019799 0.82279808 0.78539816 0.74799825 0.71059834 #>  [67] 0.67319843 0.63579851 0.59839860 0.56099869 0.52359878 0.48619886 #>  [73] 0.44879895 0.41139904 0.37399913 0.33659921 0.29919930 0.26179939 #>  [79] 0.22439948 0.18699956 0.14959965 0.11219974 0.07479983 0.03739991 #>  [85] 0.00000000 6.24578539 6.20838548 6.17098557 6.13358566 6.09618574 #>  [91] 6.05878583 6.02138592 5.98398601 5.94658609 5.90918618 5.87178627 #>  [97] 5.83438636 5.79698644 6.00456519 5.47720796 5.68478671 5.64738679 #> [103] 5.85496554 5.81756563 5.99883467 6.14128825 6.24578539 6.06648843 #> [109] 6.02908851 5.81183510 5.77443519 5.73703528 5.48096642 5.44356651 #> [115] 5.28554293 5.58743563 5.08638811 4.26359003 5.01158828 4.97418837 #> [121] 4.93678846 4.89938854 4.86198863 5.06956738 4.78718881 4.74978889 #> [127] 5.30039158 6.24578539 5.96340682 6.17098557 6.13358566 6.09618574 #> [133] 0.02057919 0.63425600 1.27159703 1.23419711 1.19679720 1.62304490 #> [139] 0.65834977 1.08459746 1.04719755 1.47344525 1.21737639 0.93499781 #> [145] 0.89759790 0.61521933 0.57781941 0.19739556 0.28435064 0.12259573 #> [151] 0.20955082 0.17215090 6.23808280 6.20068289 0.05995117 0.24122020 #> [157] 0.44879895 0.41139904 0.37399913 0.33659921 0.29919930 0.26179939 #> [163] 0.46937814 0.18699956 0.14959965 0.11219974 0.07479983 0.03739991 #>  #> $magallan #>   [1] 0.000000000 6.193200430 0.143753184 6.104077234 6.126083800 6.014954038 #>   [7] 5.970392440 6.204130501 5.881269244 5.903275810 5.792146049 5.880135983 #>  [13] 5.703022853 5.782816249 5.685207122 5.569338059 5.524776461 5.622111918 #>  [19] 5.435653265 5.462399132 5.346530069 5.301968471 5.399303928 5.212845276 #>  [25] 5.310180732 5.123722080 5.007853017 5.034598884 4.990037286 5.078027220 #>  [31] 5.420060204 5.839146215 5.918939612 6.111226775 6.032861633 5.970602768 #>  [37] 6.204340829 0.018490979 6.239572628 0.014269576 0.123415508 0.103239319 #>  [43] 0.558613024 0.821249993 1.135459066 1.157465631 1.211484547 1.001774272 #>  [49] 0.880440783 1.077799753 0.726192423 0.752220415 0.778966282 0.734404684 #>  [55] 0.444864423 0.573974024 0.600719890 0.556158293 0.511596695 0.400466933 #>  [61] 0.144173840 0.377911901 0.262042838 0.288788705 0.102330052 0.199665509 #>  [67] 0.088535747 0.110542313 6.224811028 6.227832533 6.260042827 6.073584174 #>  [73] 6.170919631 5.984460978 6.081796435 6.037234837 5.921365774 5.948111641 #>  [79] 5.903550043 5.858988445 5.814426847 5.967260809 5.867200706 6.085633840 #>  [85] 0.008690775 0.093831714 0.191167171 0.004708518 6.078183550 5.413372466 #>  [91] 5.510707923 5.456800803 5.490781006 5.235126074 5.417363325 5.212571042 #>  [97] 4.959544226 5.056879683 5.012318085 5.109653542 4.923194889 4.878633291 #> [103] 4.834071693 4.789510095 4.744948497 5.343888008 6.015528295 6.182060030 #> [109] 6.208805897 0.685809578 1.335986256 1.291424658 1.246863060 1.202301462 #> [115] 1.091171701 0.971281212 1.068616669 1.024055071 1.224472136 0.793034820 #> [121] 0.692974717 1.167559233 0.458223141 0.690117319 0.390373331 0.809459342 #> [127] 0.301250135 0.007101612 5.709914083 5.987103039 6.013848906 6.131723024 #> [133] 0.110652439 0.169172449 0.133956374 0.221946308 0.177384710 0.132823112 #> [139] 0.088261514 0.176251449 6.282323626 #>  #> $makersmark #>   [1] 0.000000000 0.161897338 0.186327271 2.249699824 0.432311942 0.381108205 #>   [7] 0.430511776 0.536910609 0.698807947 2.036710492 0.353644051 0.461485884 #>  [13] 0.359419499 0.465818331 1.859219381 0.252924832 0.444225458 0.253235853 #>  [19] 0.217737631 0.308327504 1.646230049 0.111242965 0.087578510 6.252124363 #>  [25] 0.075337888 1.468738938 6.145629697 6.110131475 0.002541279 6.191784359 #>  [31] 6.003636808 1.255749606 6.143733697 6.264315976 6.228817754 6.193319532 #>  [37] 1.078258496 6.076899808 0.387012565 0.839212297 0.936265607 0.900767385 #>  [43] 0.865269163 0.829770941 0.794272719 0.758774497 0.723276275 0.687778053 #>  [49] 0.652279831 0.616781609 0.581283386 0.545785164 0.652183997 0.474788720 #>  [55] 0.439290498 0.403792276 0.579387387 0.851941946 1.589794278 0.261799388 #>  [61] 1.475346938 1.329191495 1.465498657 1.463803978 0.084308277 1.487054850 #>  [67] 1.584108160 1.337516605 1.360462388 1.477613494 6.154504252 1.406617050 #>  [73] 1.218469499 1.124527272 1.300122383 5.977013142 1.096574407 1.193627717 #>  [79] 0.947036162 1.122631273 0.945235996 5.764023809 1.016136607 0.753839537 #>  [85] 0.945140163 0.756992612 5.586532699 0.838645497 0.955796603 0.767649052 #>  [91] 1.075174771 1.063826442 5.373543367 1.119597533 1.245853568 1.469760420 #>  [97] 1.434262198 5.196052256 1.398711895 0.761437835 1.162566773 1.127068551 #> [103] 0.377479630 4.983062924 0.163868256 0.199677499 0.230747441 0.270578110 #> [109] 4.805571813 0.190236143 0.022186389 0.139337495 0.272940499 6.198877030 #> [115] 4.592582481 6.127880586 6.245031692 6.123452305 6.021385919 4.415091371 #> [121] 6.082941008 6.047442785 5.879393031 5.772587344 5.879704052 4.202102038 #> [127] 5.737400143 5.701901921 5.666403699 5.828301036 4.024610928 5.701806087 #> [133] 6.135136775 0.498223949 0.741025386 0.705527164 3.811621595 0.634530720 #> [139] 0.599032498 0.885284830 1.470036094 1.836535310 3.598632263 1.992337714 #> [145] 1.804190163 1.921341270 1.674749714 3.421141152 1.814846604 1.976743941 #> [151] 1.532756826 1.708351937 1.406601666 3.208151820 1.601857271 1.489587158 #> [157] 1.530860827 1.353465550 3.030660710 1.357797997 1.256316406 1.353369717 #> [163] 1.120475935 1.140476218 2.817671377 1.211376828 0.964785273 1.140380384 #> [169] 1.365484554 2.640180267 0.807086870 0.038317133 5.973777186 0.584367111 #> [175] 0.230849661 2.427190934 6.153534852 #>  #> $oban #>   [1] 0.000000000 6.189327891 6.154226297 6.119124703 6.084023109 6.048921515 #>   [7] 6.072575744 5.978718327 5.943616733 5.908515139 5.873413546 5.838311952 #>  [13] 5.913867579 5.768108764 5.733007170 5.697905576 5.662803982 5.627702388 #>  [19] 5.592600794 5.557499200 5.522397607 5.546051835 5.452194419 5.417092825 #>  [25] 5.381991231 5.346889637 5.311788043 5.276686449 5.241584855 5.206483262 #>  [31] 5.171381668 5.136280074 5.101178480 5.066076886 5.030975292 4.995873698 #>  [37] 4.960772104 5.264963125 5.800322074 6.067492979 6.160071388 6.137391516 #>  [43] 6.196603873 0.002671967 6.133646935 6.215654086 6.180552492 6.145450898 #>  [49] 6.165847810 6.199602705 6.150803338 6.129399517 6.144615128 6.256591889 #>  [55] 6.258510411 0.300282839 0.831096131 1.206400973 1.046944385 1.011842791 #>  [61] 0.976741197 0.941639603 0.795880788 0.871436415 0.836334822 0.801233228 #>  [67] 0.766131634 0.731030040 0.695928446 0.660826852 0.625725258 0.590623664 #>  [73] 0.444864849 0.520420477 0.485318883 0.450217289 0.415115695 0.380014101 #>  [79] 0.344912507 0.309810913 0.164052098 0.239607725 0.204506131 0.169404538 #>  [85] 0.134302944 0.099201350 0.064099756 6.201526248 6.277081875 6.241980281 #>  [91] 6.206878688 6.171777094 6.026018279 6.101573906 6.066472312 6.031370718 #>  [97] 5.871914130 5.961167530 5.926065936 6.001621564 6.100841412 6.211368198 #> [103] 0.009572758 0.025971975 0.158913406 0.315119168 0.147466041 6.117250096 #> [109] 5.820028661 5.595446909 5.504846810 5.469745216 5.434643622 5.458297851 #> [115] 5.364440434 5.204983846 5.404894467 5.376244397 5.224034058 5.407601410 #> [121] 5.270939615 5.118729277 5.207982677 5.159183310 5.072180318 4.733344238 #> [127] 4.943221307 4.908119713 4.814262297 4.837916526 4.678459937 4.767713338 #> [133] 4.791367567 5.549476477 5.988226220 6.087446068 6.104245872 6.252255096 #> [139] 6.203455729 0.133282277 0.820249013 1.275104745 1.240003151 1.263657380 #> [145] 1.169799964 1.134698370 1.099596776 1.239167381 0.918736367 0.994291994 #> [151] 0.848533179 0.806980062 0.764632218 0.743228397 0.694429030 0.724926608 #> [157] 0.637923616 0.602822022 0.802732644 0.584520232 0.608174461 0.573072867 #> [163] 0.537971273 0.392212458 0.467768086 0.110915937 6.066087253 5.783478557 #> [169] 5.683251799 5.848803083 5.925680878 6.146471565 6.148390087 0.027498746 #> [175] 6.282828709 0.192307774 0.046548959 0.011447365 6.259531078 #>  #> $oldpotrero #>   [1] 0.00000000 6.20638390 6.15842066 0.03093063 0.10105941 0.15617777 #>   [7] 0.20252848 0.33767605 0.23095698 0.18299373 0.13503049 0.20417598 #>  [13] 0.03910399 6.27432605 6.22636281 6.23715538 6.13043631 6.08247307 #>  [19] 6.03450982 6.04530240 5.93858333 5.89062008 5.84265683 5.79469359 #>  [25] 5.74673034 5.80942431 6.00957452 0.18819469 0.42426404 0.57585618 #>  [31] 0.38779121 0.58148989 0.53997817 0.49201492 0.43035390 0.44798982 #>  [37] 0.45878240 0.41081915 0.36285591 0.37731147 0.58867997 0.34332116 #>  [43] 0.49275348 0.46233229 0.58217493 0.73573945 1.22819571 1.61264024 #>  [49] 1.33691102 1.40605652 1.35809327 1.19947281 1.26216678 1.21420353 #>  [55] 1.16624029 1.11827704 1.01155797 1.02235055 0.97438730 0.92642405 #>  [61] 0.87846081 0.70614257 0.78253432 0.73457107 0.68660782 0.63864458 #>  [67] 0.59068133 0.76138703 0.83404745 0.96593770 0.90592685 1.01190826 #>  [73] 0.90518920 0.89843971 0.79497796 0.82005528 0.59794809 0.18744061 #>  [79] 0.33687292 0.18582807 0.09386807 6.15441794 6.21711191 6.05849144 #>  [85] 6.06928402 5.96256495 6.02525892 5.86663846 5.81867521 5.88782071 #>  [91] 5.72274872 5.67478547 5.75117722 5.46175023 5.40654074 5.48293248 #>  [97] 5.79373991 5.20165804 5.33904274 6.15324955 0.42007005 0.48276402 #> [103] 0.43480078 0.51119253 0.44953151 1.25616270 1.81374412 2.12455154 #> [109] 1.39606707 1.79420937 1.73254835 1.69828288 1.41530742 1.47800139 #> [115] 1.21136920 1.38207490 1.33411165 1.28614840 1.23818516 1.19022191 #> [121] 1.03160144 1.03553960 1.04633217 0.87401393 0.83974846 0.65746377 #> [127] 0.43625486 0.56153728 0.25145419 0.10830210 0.07462359 #>  #> $redbreast #>   [1] 0.00000000 0.31063774 0.19199829 0.32869088 0.58464945 0.35175567 #>   [7] 0.51365301 0.47815479 0.44265656 0.40715834 0.37166012 0.33616190 #>  [13] 0.30066368 0.46256101 0.22966723 0.19416901 0.15867079 0.12317257 #>  [19] 0.08767434 0.05217612 0.01667790 6.26436498 6.22886676 0.10757879 #>  [25] 6.15787032 6.12237210 6.08687387 6.05137565 6.21327299 5.98037921 #>  [31] 5.94488099 5.90938276 5.87388454 5.94904354 5.80288810 5.76738988 #>  [37] 5.73189165 6.01814399 0.40808673 0.53250163 0.63253112 0.64461600 #>  [43] 0.69585612 0.57361956 0.73551690 0.45504001 0.66452045 0.38404357 #>  [49] 0.59352401 0.55802579 0.52252756 0.48702934 0.45153112 0.66101156 #>  [55] 0.38053468 0.34503645 0.50693379 0.27404001 0.48352045 0.30271222 #>  [61] 0.41252401 0.32944268 0.47705528 0.77988068 1.39895322 1.56085056 #>  [67] 1.52535234 1.48985412 1.45435589 1.41885767 1.38335945 1.34786123 #>  [73] 1.31236300 1.03188612 1.24136656 1.20586834 1.17037012 1.13487189 #>  [79] 1.09937367 1.06387545 1.02837723 0.99287901 0.95738078 0.92188256 #>  [85] 0.88638434 0.85088612 0.81538790 0.77988967 0.74439145 0.60922458 #>  [91] 0.87079057 0.63789679 0.60239856 0.56690034 0.53140212 0.49590390 #>  [97] 0.46040568 0.42490745 0.71115979 0.55130657 0.85883229 0.92641567 #> [103] 1.03281451 1.13921334 1.20679673 1.03697706 1.01517661 0.74466617 #> [109] 0.49807462 0.37943517 6.24661587 6.21111765 6.17561943 5.94272565 #> [115] 6.10462298 6.06912476 6.03362654 5.99812832 6.16002566 6.14580082 #> [121] 6.08902921 5.85613543 6.01803277 5.78513899 5.86029799 5.71414254 #> [127] 5.92362298 5.64314610 5.49699065 5.57214965 5.53665143 5.50115321 #> [133] 5.46565499 5.62755233 5.39465854 5.35916032 0.05267380 0.57577490 #> [139] 0.34288111 0.50477845 0.46928023 0.54443923 0.59567935 1.00628667 #> [145] 1.65310501 1.86258545 1.82708722 1.59419344 1.75609078 1.72059256 #> [151] 1.88248990 1.84699167 1.36911923 1.57859967 1.43244423 1.31020767 #> [157] 1.47210500 1.19162812 1.30143991 1.12063167 1.13271656 1.09721833 #> [163] 1.25911567 1.22361745 1.18811923 1.15262101 1.31451834 1.08162456 #> [169] 1.24352190 0.81323256 0.73015123 0.47598406 6.26002354 6.25576515 #> [175] 6.22026693 6.17107093 6.14927049 #>  #> $tamdhu #>   [1] 0.00000000 6.16765540 6.13195549 6.09625557 6.06055566 6.10162763 #>   [7] 5.98915582 5.95345591 5.91775599 5.88205607 6.01150483 5.81065624 #>  [13] 5.77495632 5.73925641 5.70355649 5.66785657 5.63215666 5.74910607 #>  [19] 5.56075682 5.52505691 5.48935699 5.45365707 5.50109839 5.38225724 #>  [25] 5.34655733 5.31085741 5.27515749 5.32259881 5.20375766 5.16805774 #>  [31] 5.13235783 4.93150923 5.06095799 4.79845923 4.74457950 4.95385824 #>  [37] 5.16313699 5.47046101 5.86589984 6.03308390 6.02440443 5.98870452 #>  [43] 6.19161392 6.23905524 6.11661698 6.16765540 6.13195549 6.09625557 #>  [49] 6.06055566 6.10799697 6.07229705 6.11860458 6.00089722 6.27684719 #>  [55] 6.21352999 0.09420015 0.36782907 0.76061538 0.82601883 1.18226644 #>  [61] 1.08491635 1.12904642 0.92819783 0.81266793 0.62431868 0.74126809 #>  [67] 0.87071686 0.51721893 0.63416834 0.59846843 0.56276851 0.52706860 #>  [73] 0.49136868 0.45566876 0.41996885 0.38426893 0.34856901 0.22972786 #>  [79] 0.27716918 0.24146926 0.20576935 0.17006943 0.13436951 6.21670623 #>  [85] 0.22811836 0.02726976 6.27475515 6.07390656 6.20335532 6.16765540 #>  [91] 6.13195549 6.09625557 6.06055566 6.02485574 5.82400714 5.95345591 #>  [97] 5.84098410 5.88205607 5.92312805 6.05563490 6.07345525 6.06100696 #> [103] 6.27028571 0.02817238 0.04370963 0.05108649 0.01038662 6.02440363 #> [109] 5.88414811 5.61880575 5.41795716 5.22960791 5.34655733 5.22771618 #> [115] 5.27515749 5.32259881 5.35640699 5.33320642 5.21549906 5.24930724 #> [121] 5.22610667 5.10202997 4.98955816 5.11900692 4.99493022 5.06231191 #> [127] 4.68160982 4.65840925 4.85849989 4.73965874 4.70395883 4.91323757 #> [133] 5.70400860 6.08451417 6.13195549 6.09625557 6.24040916 6.10162763 #> [139] 0.02772107 0.77741932 1.20536701 1.25280832 1.05719528 1.18140849 #> [145] 1.30754601 0.95009554 0.81131401 0.95546759 0.84299579 0.71891908 #> [151] 0.76853786 0.72952670 0.77696801 0.82440933 0.62242695 0.66986826 #> [157] 0.38918968 0.59846843 0.63954040 0.69221727 0.49136868 0.30301943 #> [163] 6.23950654 6.20380663 6.09133482 5.85823934 5.90465886 5.89585828 #> [169] 6.04143468 6.20827607 6.25240614 0.02189771 6.18100631 0.11041100 #> [175] 0.07471108 0.03901116 #>  #> $wildturkey #>   [1] 0.00000000 6.14248647 6.10852331 6.07456014 6.04059698 6.00663382 #>   [7] 5.97267065 5.93870749 5.90474432 5.87078116 6.06361684 5.80285483 #>  [13] 5.76889167 5.73492850 5.70096534 5.66700218 5.63303901 5.59907585 #>  [19] 5.56511269 5.53114952 5.49718636 5.46322319 5.64035336 5.39529687 #>  [25] 5.36133370 5.32737054 5.29340738 5.25944421 5.22548105 5.19151788 #>  [31] 5.15755472 5.33468489 5.08962839 4.84457190 4.55805446 4.79034334 #>  [37] 4.95377574 5.13090591 5.58058769 5.99027480 6.11041975 6.20210692 #>  [43] 6.16814375 0.00364461 6.25286675 5.99210474 6.18494043 6.15097726 #>  [49] 6.11701410 6.08305093 6.04908777 6.01512461 5.98116144 6.15829161 #>  [55] 5.91323511 5.87927195 5.99795812 6.03814447 6.00418131 6.00402169 #>  [61] 0.21166899 0.55821220 0.92914082 0.96648512 1.22838833 1.05405018 #>  [67] 0.79328817 0.75932500 0.72536184 0.69139868 0.65743551 0.62347235 #>  [73] 0.58950919 0.55554602 0.52158286 0.48761969 0.45365653 0.41969337 #>  [79] 0.38573020 0.35176704 0.31780388 0.21253325 0.11732602 0.21591438 #>  [85] 0.18195122 0.14798806 0.11402489 0.08006173 0.04609856 0.01213540 #>  [91] 6.26135754 6.22739438 6.19343122 6.15946805 6.12550489 6.09154172 #>  [97] 6.05757856 6.02361540 5.98965223 5.72889022 5.92172591 5.88776274 #> [103] 6.06489291 5.89114388 6.08437218 0.05672738 0.10073085 0.30562554 #> [109] 0.47398401 0.07068718 0.28170268 6.01177871 6.00810931 5.77870371 #> [115] 5.44624161 5.63907730 5.37831528 5.34435212 5.53718781 5.27642579 #> [121] 5.24246263 5.35039652 5.17453630 5.14057314 5.10660997 5.07264681 #> [127] 5.26548249 5.00472048 4.97075732 4.93679416 4.90283099 4.86886783 #> [133] 4.44011354 5.14396544 4.76697834 4.73301517 4.69905201 4.66508884 #> [139] 4.70243315 5.22595880 5.90719683 6.10003252 6.06606935 6.03210619 #> [145] 5.99814302 6.11682919 6.27324064 1.04196750 1.14990139 1.11593822 #> [151] 0.85517621 1.04801190 0.88149720 1.19117890 1.09877173 0.91215924 #> [157] 0.66710274 0.84423291 0.81026975 0.77630659 0.74234342 0.70838026 #> [163] 0.44761825 0.64045393 0.60649077 0.57252760 0.39666739 0.42782938 #> [169] 0.47063811 0.43667495 0.19161845 0.36874862 6.25079693 6.24098366 #> [175] 6.03089832 5.62002589 5.57729102 5.58598489 5.58534272 5.80889114 #> [181] 6.06796579 6.15965296 6.05154028 6.24437596 6.21041280 #>  #> $yoichi #>   [1] 0.00000000 6.23210250 6.18101969 6.12993689 6.07885408 6.16966832 #>   [7] 5.97668846 5.92560566 5.87452285 5.82344004 5.77235723 5.72127443 #>  [13] 5.67019162 5.61910881 5.56802600 5.51694320 5.46586039 5.41477758 #>  [19] 5.36369477 5.24130450 5.32809732 5.21044635 5.15936354 5.10828074 #>  [25] 5.05719793 5.34913906 6.03587132 6.26365250 0.07390956 0.02282675 #>  [31] 0.03831211 6.14605961 6.21933180 6.16824899 6.11716618 6.13739084 #>  [37] 6.01500057 6.03048592 5.98414242 6.05914771 6.21556113 0.39150192 #>  [43] 0.99611474 0.94503194 0.89394913 0.84286632 0.79178351 0.74070071 #>  [49] 0.62304974 0.63853509 0.58745228 0.53636948 0.48528667 0.43420386 #>  [55] 0.38312106 0.33203825 0.28095544 0.16330447 0.17878983 0.12770702 #>  [61] 0.07662421 0.02554140 6.25764390 6.20656110 6.08891012 6.10439548 #>  [67] 6.05331267 6.00222987 5.95114706 5.83349609 5.84898144 5.79789864 #>  [73] 5.81338399 5.82828455 6.04954200 6.05721502 6.20845384 0.19101021 #>  [79] 0.29130285 6.21165446 5.54924670 5.28707056 5.23598776 5.18490495 #>  [85] 5.13382214 5.15404680 4.96508836 4.78317816 4.92949091 4.81183994 #>  [91] 4.82732530 4.91813954 5.85932885 6.10297615 6.19379039 6.14270759 #>  [97] 6.09162478 6.23793753 0.75792407 1.15467991 1.24147273 1.05725360 #> [103] 1.07273895 1.28225854 0.97057334 0.85292237 0.86840773 0.81732492 #> [109] 0.76624211 0.64859114 0.25918471 6.03400894 5.71092702 5.87891268 #> [115] 6.06818963 6.20189044 0.14648632 0.23992868 0.25541404 0.20433123 #> [121] 0.15324842 0.10216561 0.11765097 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the area of a shape — coo_area","title":"Calculates the area of a shape — coo_area","text":"Calculates area (non-crossing) shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the area of a shape — coo_area","text":"","code":"coo_area(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the area of a shape — coo_area","text":"coo matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the area of a shape — coo_area","text":"numeric, area.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_area.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculates the area of a shape — coo_area","text":"Using area.poly gpc package good idea, licence impedes Momocs rely . function , gpc loaded:  area.poly((coo, 'gpc.poly'))","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the area of a shape — coo_area","text":"","code":"coo_area(bot[1]) #> [1] 234515 # for the distribution of the area of the bottles dataset hist(sapply(bot$coo, coo_area), breaks=10)"},{"path":"http://momx.github.io/Momocs/reference/coo_arrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots (lollipop) differences between two configurations — coo_arrows","title":"Plots (lollipop) differences between two configurations — coo_arrows","text":"Draws 'arrows' two configurations.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_arrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots (lollipop) differences between two configurations — coo_arrows","text":"","code":"coo_arrows(coo1, coo2, length = coo_centsize(coo1)/15, angle = 20, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_arrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots (lollipop) differences between two configurations — coo_arrows","text":"coo1 list matrix coordinates. coo2 list matrix coordinates. length length arrows. angle angle arrows ... optional parameters fed arrows.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_arrows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots (lollipop) differences between two configurations — coo_arrows","text":"plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_arrows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots (lollipop) differences between two configurations — coo_arrows","text":"","code":"coo_arrows(coo_sample(olea[3], 50), coo_sample(olea[6], 50)) #> Warning: zero-length arrow is of indeterminate angle and so skipped title(\"Hi there !\")"},{"path":"http://momx.github.io/Momocs/reference/coo_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Register new baselines — coo_baseline","title":"Register new baselines — coo_baseline","text":"non-exact baseline registration t1 t2 coordinates, ldk1-th ldk2-th points. default returns Bookstein's coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register new baselines — coo_baseline","text":"","code":"coo_baseline(coo, ldk1, ldk2, t1, t2)"},{"path":"http://momx.github.io/Momocs/reference/coo_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register new baselines — coo_baseline","text":"coo matrix (x; y) coordinates Coo object. ldk1 numeric id first point new baseline ldk2 numeric id second point new baseline t1 numeric (x; y) coordinates 1st point new baseline t2 numeric (x; y) coordinates 2nd point new baseline","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register new baselines — coo_baseline","text":"matrix (x; y) coordinates Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_baseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register new baselines — coo_baseline","text":"","code":"h <- hearts %>% slice(1:5) # for speed sake stack(h)  stack(coo_baseline(h, 2, 4, c(-1, 0), c(1, 1)))"},{"path":"http://momx.github.io/Momocs/reference/coo_bookstein.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Bookstein's coordinates — coo_bookstein","title":"Register Bookstein's coordinates — coo_bookstein","text":"Registers new baseline shape, ldk1-th ldk2-th points set \\((x= -0.5; y=0)\\) \\((x= 0.5; y=0)\\), respectively.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_bookstein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Bookstein's coordinates — coo_bookstein","text":"","code":"coo_bookstein(coo, ldk1, ldk2)"},{"path":"http://momx.github.io/Momocs/reference/coo_bookstein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Bookstein's coordinates — coo_bookstein","text":"coo matrix (x; y) coordinates Coo object. ldk1 numeric id first point new baseline (first, default) ldk2 numeric id second point new baseline (last, default)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_bookstein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register Bookstein's coordinates — coo_bookstein","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_bookstein.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Bookstein's coordinates — coo_bookstein","text":", tries using $ldk slot. Also case Opn, landmark defined, first last point shape. Opn defines first landmark first point new shapes coo_slide.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_bookstein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Bookstein's coordinates — coo_bookstein","text":"","code":"h <- hearts %>% slice(1:5) # for the sake of speed stack(h)  stack(coo_bookstein(h, 2, 4))  h <- hearts[1] coo_plot(h)  coo_plot(coo_bookstein(h, 20, 57), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_boundingbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates coordinates of the bounding box — coo_boundingbox","title":"Calculates coordinates of the bounding box — coo_boundingbox","text":"Calculates coordinates bounding box","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_boundingbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates coordinates of the bounding box — coo_boundingbox","text":"","code":"coo_boundingbox(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_boundingbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates coordinates of the bounding box — coo_boundingbox","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_boundingbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates coordinates of the bounding box — coo_boundingbox","text":"data.frame coordinates bounding box","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_boundingbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates coordinates of the bounding box — coo_boundingbox","text":"","code":"bot[1] %>% coo_boundingbox() #> # A tibble: 1 × 4 #>      x0    x1    y0    y1 #>   <dbl> <dbl> <dbl> <dbl> #> 1    33   316    14  1102 bot %>% coo_boundingbox() #> # A tibble: 40 × 4 #>       x0    x1    y0    y1 #>  * <dbl> <dbl> <dbl> <dbl> #>  1    33   316    14  1102 #>  2    51   312    26  1020 #>  3    48   291    11   654 #>  4    90   277    16   822 #>  5    36   323    53   939 #>  6    58   298    11   617 #>  7    54   268     5   870 #>  8    40   292    25   790 #>  9    67   297    17   759 #> 10    40   307    21  1069 #> # ℹ 30 more rows"},{"path":"http://momx.github.io/Momocs/reference/coo_calliper.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the calliper length — coo_calliper","title":"Calculates the calliper length — coo_calliper","text":"Also called Feret's diameter, longest distance two points shape provided.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_calliper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the calliper length — coo_calliper","text":"","code":"coo_calliper(coo, arr.ind = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_calliper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the calliper length — coo_calliper","text":"coo matrix (x; y) coordinates Coo arr.ind logical, see .","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_calliper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the calliper length — coo_calliper","text":"numeric, centroid size. arr.ind=TRUE, data_frame.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_calliper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the calliper length — coo_calliper","text":"","code":"b <- bot[1] coo_calliper(b) #> [1] 1088.166 p <- coo_calliper(b, arr.ind=TRUE) p #> # A tibble: 1 × 2 #>   length arr_ind   #>    <dbl> <list>    #> 1  1088. <dbl [2]> p$length #> [1] 1088.166 ids <- p$arr_ind[[1]] coo_plot(b) segments(b[ids[1], 1], b[ids[1], 2], b[ids[2], 1], b[ids[2], 2], lty=2)   # on a Coo bot %>% coo_sample(32) %>% # for speed sake coo_calliper() #> $brahma #> [1] 1087.768 #>  #> $caney #> [1] 992.2107 #>  #> $chimay #> [1] 644.5991 #>  #> $corona #> [1] 806.6778 #>  #> $deusventrue #> [1] 880.8053 #>  #> $duvel #> [1] 606.7462 #>  #> $franziskaner #> [1] 863.4501 #>  #> $grimbergen #> [1] 766.5801 #>  #> $guiness #> [1] 743.6162 #>  #> $hoegardeen #> [1] 1046.608 #>  #> $jupiler #> [1] 981.2747 #>  #> $kingfisher #> [1] 717.4761 #>  #> $latrappe #> [1] 746.2345 #>  #> $lindemanskriek #> [1] 819.0562 #>  #> $nicechouffe #> [1] 686.7001 #>  #> $pecheresse #> [1] 927.4034 #>  #> $sierranevada #> [1] 655.6706 #>  #> $tanglefoot #> [1] 690.334 #>  #> $tauro #> [1] 983.9842 #>  #> $westmalle #> [1] 765.7114 #>  #> $amrut #> [1] 864.1209 #>  #> $ballantines #> [1] 711.5118 #>  #> $bushmills #> [1] 882.1485 #>  #> $chivas #> [1] 794.3198 #>  #> $dalmore #> [1] 683.668 #>  #> $famousgrouse #> [1] 607.8199 #>  #> $glendronach #> [1] 821.1796 #>  #> $glenmorangie #> [1] 986.0183 #>  #> $highlandpark #> [1] 705.139 #>  #> $jackdaniels #> [1] 798.2042 #>  #> $jb #> [1] 1011.163 #>  #> $johnniewalker #> [1] 337.8772 #>  #> $magallan #> [1] 756.595 #>  #> $makersmark #> [1] 858.3298 #>  #> $oban #> [1] 858.7974 #>  #> $oldpotrero #> [1] 596.5668 #>  #> $redbreast #> [1] 425.3011 #>  #> $tamdhu #> [1] 1007.425 #>  #> $wildturkey #> [1] 1099.426 #>  #> $yoichi #> [1] 714.077 #>   bot %>% coo_sample(32) %>% # for speed sake coo_calliper(arr.ind=TRUE) #> # A tibble: 40 × 2 #>    length arr_ind   #>  *  <dbl> <list>    #>  1  1088. <dbl [2]> #>  2   992. <dbl [2]> #>  3   645. <dbl [2]> #>  4   807. <dbl [2]> #>  5   881. <dbl [2]> #>  6   607. <dbl [2]> #>  7   863. <dbl [2]> #>  8   767. <dbl [2]> #>  9   744. <dbl [2]> #> 10  1047. <dbl [2]> #> # ℹ 30 more rows"},{"path":"http://momx.github.io/Momocs/reference/coo_centdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the distance between everypoints and the centroid — coo_centdist","title":"Returns the distance between everypoints and the centroid — coo_centdist","text":"every point shape, returns (centroid-points) distance.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the distance between everypoints and the centroid — coo_centdist","text":"","code":"coo_centdist(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_centdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the distance between everypoints and the centroid — coo_centdist","text":"coo matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the distance between everypoints and the centroid — coo_centdist","text":"matrix (x; y) coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_centdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the distance between everypoints and the centroid — coo_centdist","text":"","code":"b <- coo_sample(bot[1], 64) d <- coo_centdist(b) barplot(d, xlab=\"Points along the outline\", ylab=\"Distance to the centroid (pixels)\")"},{"path":"http://momx.github.io/Momocs/reference/coo_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Centers coordinates — coo_center","title":"Centers coordinates — coo_center","text":"Returns shape centered origin. two functions strictly equivalent.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centers coordinates — coo_center","text":"","code":"coo_center(coo)  coo_centre(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centers coordinates — coo_center","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centers coordinates — coo_center","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centers coordinates — coo_center","text":"","code":"coo_plot(bot[1])  # same as coo_plot(coo_centre(bot[1])) # this coo_plot(coo_center(bot[1]))   # on Coo objects b <- slice(bot, 1:5) # speed sake stack(slice(b, 1:5))  stack(coo_center(b))"},{"path":"http://momx.github.io/Momocs/reference/coo_centpos.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroid coordinates — coo_centpos","title":"Calculate centroid coordinates — coo_centpos","text":"Returns (x; y) centroid coordinates shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centpos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroid coordinates — coo_centpos","text":"","code":"coo_centpos(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_centpos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroid coordinates — coo_centpos","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centpos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroid coordinates — coo_centpos","text":"(x; y) coordinates centroid vector matrix.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_centpos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate centroid coordinates — coo_centpos","text":"","code":"b <- bot[1] coo_plot(b) xy <- coo_centpos(b) points(xy[1], xy[2], cex=2, col='blue')  # on a Coo coo_centpos(bot) #>                       x        y #> brahma         175.0580 543.8696 #> caney          182.7083 507.7560 #> chimay         169.0106 314.8095 #> corona         185.0155 407.2326 #> deusventrue    179.5592 467.2632 #> duvel          179.2484 287.1180 #> franziskaner   161.3548 423.2016 #> grimbergen     166.7460 394.8651 #> guiness        182.2022 372.0546 #> hoegardeen     173.2539 526.9275 #> jupiler        175.6026 510.9744 #> kingfisher     161.8407 365.2253 #> latrappe       176.0368 344.0147 #> lindemanskriek 163.9261 405.4034 #> nicechouffe    170.5548 338.1233 #> pecheresse     175.3023 489.5271 #> sierranevada   166.5795 333.5682 #> tanglefoot     174.5862 346.1724 #> tauro          175.5230 511.7644 #> westmalle      161.7943 383.0000 #> amrut          162.7225 420.5654 #> ballantines    174.2260 329.5000 #> bushmills      180.8303 432.3697 #> chivas         182.0244 405.7500 #> dalmore        176.4258 328.0452 #> famousgrouse   174.1065 299.2071 #> glendronach    173.2792 409.4365 #> glenmorangie   177.2514 493.9385 #> highlandpark   167.4852 346.6272 #> jackdaniels    182.8867 387.7600 #> jb             172.6149 509.0057 #> johnniewalker  174.4940 165.5655 #> magallan       167.2482 388.9149 #> makersmark     176.4802 402.7571 #> oban           176.5307 447.6536 #> oldpotrero     165.9160 284.7634 #> redbreast      176.8305 202.1977 #> tamdhu         173.7955 530.5625 #> wildturkey     173.7243 537.4973 #> yoichi         181.2764 361.1545"},{"path":"http://momx.github.io/Momocs/reference/coo_centsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates centroid size — coo_centsize","title":"Calculates centroid size — coo_centsize","text":"Calculates centroid size","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates centroid size — coo_centsize","text":"","code":"coo_centsize(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_centsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates centroid size — coo_centsize","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates centroid size — coo_centsize","text":"numeric, centroid size.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_centsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates centroid size — coo_centsize","text":"function can used integrate size - meaningful - Coo objects. See also coo_length rescale.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_centsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates centroid size — coo_centsize","text":"","code":"coo_centsize(bot[1]) #> [1] 364.1006 # on a Coo coo_centsize(bot) #>         brahma          caney         chimay         corona    deusventrue  #>       364.1006       332.6606       232.2377       267.1846       300.2182  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>       220.3785       289.6220       268.2272       256.6651       353.2312  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>       325.0180       238.2959       275.5208       275.0680       230.9909  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>       310.0406       230.7661       248.5782       325.6573       255.6335  #>          amrut    ballantines      bushmills         chivas        dalmore  #>       287.7783       259.1542       297.9153       283.8156       247.1982  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>       204.7011       274.2665       328.5136       252.6141       274.6856  #>             jb  johnniewalker       magallan     makersmark           oban  #>       340.9851       114.5988       244.4261       297.1638       283.9853  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>       208.3185       150.1516       337.8220       374.5002       249.7048  # add it to $fac mutate(bot, size=coo_centsize(bot)) #> Out (outlines) #>   - 40 outlines, 162 +/- 21 coords (in $coo) #>   - 3 classifiers (in $fac):  #> # A tibble: 40 × 3 #>   type   fake   size #>   <fct>  <fct> <dbl> #> 1 whisky a      364. #> 2 whisky a      333. #> 3 whisky a      232. #> 4 whisky a      267. #> 5 whisky a      300. #> 6 whisky a      220. #> # ℹ 34 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/coo_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks shapes — coo_check","title":"Checks shapes — coo_check","text":"simple utility, used internally, mostly coo functions methods. Returns matrix coordinates, passed either list matrix coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks shapes — coo_check","text":"","code":"coo_check(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks shapes — coo_check","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks shapes — coo_check","text":"matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks shapes — coo_check","text":"","code":"#coo_check('Not a shape') #coo_check(iris) #coo_check(matrix(1:10, ncol=2)) #coo_check(list(x=1:5, y=6:10))"},{"path":"http://momx.github.io/Momocs/reference/coo_chull.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the (recursive) convex hull of a shape — coo_chull","title":"Calculates the (recursive) convex hull of a shape — coo_chull","text":"coo_chull returns ids points define convex hull shape. simple wrapper around chull, mainly used graphical functions.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_chull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the (recursive) convex hull of a shape — coo_chull","text":"","code":"coo_chull(coo)  # S3 method for default coo_chull(coo)  # S3 method for Coo coo_chull(coo)  coo_chull_onion(coo, close = TRUE)  # S3 method for default coo_chull_onion(coo, close = TRUE)  # S3 method for Coo coo_chull_onion(coo, close = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/coo_chull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the (recursive) convex hull of a shape — coo_chull","text":"coo matrix (x; y) coordinates Coo. close logical whether close onion rings (TRUE default)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_chull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the (recursive) convex hull of a shape — coo_chull","text":"coo_chull returns matrix points defining convex hull shape; list Coo. coo_chull_onion returns list successive onions rings, list lists Coo.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_chull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the (recursive) convex hull of a shape — coo_chull","text":"coo_chull_onion recursively find convex hull, remove , less 3 points left.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_chull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the (recursive) convex hull of a shape — coo_chull","text":"","code":"# coo_chull h <- coo_sample(hearts[4], 32) coo_plot(h) ch <- coo_chull(h) lines(ch, col='red', lty=2)   bot %>% coo_chull #> $brahma #>       [,1] [,2] #>  [1,]  316  124 #>  [2,]  316  113 #>  [3,]  315   92 #>  [4,]  311   71 #>  [5,]  307   60 #>  [6,]  290   40 #>  [7,]  269   27 #>  [8,]  259   24 #>  [9,]  238   18 #> [10,]  217   16 #> [11,]  196   15 #> [12,]  164   14 #> [13,]  143   15 #> [14,]  111   19 #> [15,]   90   25 #> [16,]   80   29 #> [17,]   59   45 #> [18,]   47   66 #> [19,]   44   77 #> [20,]   40   98 #> [21,]   33  624 #> [22,]   33  645 #> [23,]   34  656 #> [24,]  105 1082 #> [25,]  120 1098 #> [26,]  131 1100 #> [27,]  173 1102 #> [28,]  183 1102 #> [29,]  205 1101 #> [30,]  226 1096 #> [31,]  232 1087 #> [32,]  307  681 #> [33,]  310  660 #> [34,]  311  629 #>  #> $caney #>       [,1] [,2] #>  [1,]  312  392 #>  [2,]  310  130 #>  [3,]  305   89 #>  [4,]  297   69 #>  [5,]  291   60 #>  [6,]  281   52 #>  [7,]  263   42 #>  [8,]  243   35 #>  [9,]  213   29 #> [10,]  184   26 #> [11,]  164   26 #> [12,]  134   29 #> [13,]  124   31 #> [14,]  113   34 #> [15,]   94   42 #> [16,]   84   47 #> [17,]   75   53 #> [18,]   60   72 #> [19,]   55   91 #> [20,]   51  122 #> [21,]   51  253 #> [22,]   53  535 #> [23,]   55  555 #> [24,]  122  992 #> [25,]  126 1001 #> [26,]  144 1015 #> [27,]  154 1018 #> [28,]  164 1020 #> [29,]  195 1020 #> [30,]  215 1017 #> [31,]  235 1009 #> [32,]  243 1000 #> [33,]  245  990 #> [34,]  311  553 #> [35,]  312  523 #>  #> $chimay #>       [,1] [,2] #>  [1,]  291  171 #>  [2,]  291   56 #>  [3,]  288   40 #>  [4,]  284   33 #>  [5,]  276   29 #>  [6,]  268   26 #>  [7,]  254   22 #>  [8,]  238   18 #>  [9,]  231   17 #> [10,]  208   14 #> [11,]  184   11 #> [12,]  155   11 #> [13,]  117   14 #> [14,]  109   15 #> [15,]   94   17 #> [16,]   86   20 #> [17,]   73   26 #> [18,]   63   40 #> [19,]   60   48 #> [20,]   57   64 #> [21,]   56   71 #> [22,]   52  148 #> [23,]   49  241 #> [24,]   48  348 #> [25,]   49  356 #> [26,]  115  640 #> [27,]  117  647 #> [28,]  125  651 #> [29,]  140  654 #> [30,]  194  654 #> [31,]  202  651 #> [32,]  208  646 #> [33,]  213  631 #> [34,]  284  364 #> [35,]  286  348 #> [36,]  290  248 #>  #> $corona #>       [,1] [,2] #>  [1,]  276  111 #>  [2,]  275   70 #>  [3,]  271   39 #>  [4,]  265   32 #>  [5,]  246   23 #>  [6,]  235   21 #>  [7,]  205   17 #>  [8,]  154   16 #>  [9,]  123   25 #> [10,]  102   36 #> [11,]   97   46 #> [12,]   96   57 #> [13,]   94   87 #> [14,]   91  167 #> [15,]   90  395 #> [16,]   91  426 #> [17,]  144  815 #> [18,]  164  822 #> [19,]  216  822 #> [20,]  225  807 #> [21,]  229  786 #> [22,]  276  431 #> [23,]  277  391 #>  #> $deusventrue #>       [,1] [,2] #>  [1,]  323  349 #>  [2,]  323  319 #>  [3,]  321  281 #>  [4,]  318  232 #>  [5,]  315  184 #>  [6,]  313  165 #>  [7,]  305   97 #>  [8,]  300   78 #>  [9,]  296   70 #> [10,]  287   63 #> [11,]  267   56 #> [12,]  228   53 #> [13,]  170   53 #> [14,]  122   56 #> [15,]   94   59 #> [16,]   65   70 #> [17,]   55   78 #> [18,]   49  108 #> [19,]   41  204 #> [20,]   36  271 #> [21,]   36  349 #> [22,]   41  379 #> [23,]  132  912 #> [24,]  134  922 #> [25,]  142  929 #> [26,]  162  937 #> [27,]  172  939 #> [28,]  191  939 #> [29,]  211  932 #> [30,]  225  919 #> [31,]  228  909 #> [32,]  315  406 #> [33,]  318  387 #>  #> $duvel #>       [,1] [,2] #>  [1,]  298   65 #>  [2,]  297   54 #>  [3,]  295   43 #>  [4,]  290   32 #>  [5,]  282   21 #>  [6,]  271   17 #>  [7,]  228   12 #>  [8,]  206   11 #>  [9,]  163   11 #> [10,]  141   12 #> [11,]   86   18 #> [12,]   76   22 #> [13,]   66   32 #> [14,]   61   43 #> [15,]   58   54 #> [16,]   58   76 #> [17,]   59  272 #> [18,]   61  315 #> [19,]   63  337 #> [20,]   65  348 #> [21,]  135  595 #> [22,]  140  605 #> [23,]  149  611 #> [24,]  160  616 #> [25,]  171  617 #> [26,]  182  617 #> [27,]  193  616 #> [28,]  204  613 #> [29,]  215  606 #> [30,]  223  596 #> [31,]  226  586 #> [32,]  292  347 #> [33,]  295  336 #> [34,]  296  326 #> [35,]  297  315 #> [36,]  298  293 #>  #> $franziskaner #>       [,1] [,2] #>  [1,]  268   79 #>  [2,]  267   68 #>  [3,]  265   48 #>  [4,]  262   37 #>  [5,]  246   19 #>  [6,]  236   15 #>  [7,]  215   10 #>  [8,]  205    8 #>  [9,]  175    5 #> [10,]  154    5 #> [11,]  133    7 #> [12,]  104   12 #> [13,]   94   15 #> [14,]   73   23 #> [15,]   63   32 #> [16,]   56   53 #> [17,]   55   63 #> [18,]   54   83 #> [19,]   54  480 #> [20,]   60  532 #> [21,]  120  867 #> [22,]  140  869 #> [23,]  151  870 #> [24,]  171  870 #> [25,]  202  867 #> [26,]  265  512 #> [27,]  266  492 #>  #> $grimbergen #>       [,1] [,2] #>  [1,]  292  190 #>  [2,]  290  107 #>  [3,]  289   96 #>  [4,]  282   65 #>  [5,]  278   54 #>  [6,]  258   39 #>  [7,]  247   35 #>  [8,]  237   32 #>  [9,]  205   27 #> [10,]  184   25 #> [11,]  164   25 #> [12,]  122   27 #> [13,]   90   33 #> [14,]   70   40 #> [15,]   59   49 #> [16,]   51   59 #> [17,]   45   80 #> [18,]   43  101 #> [19,]   42  122 #> [20,]   40  320 #> [21,]   40  394 #> [22,]   44  425 #> [23,]  110  771 #> [24,]  121  789 #> [25,]  131  790 #> [26,]  194  790 #> [27,]  204  789 #> [28,]  215  785 #> [29,]  288  431 #> [30,]  290  420 #> [31,]  291  389 #> [32,]  292  326 #>  #> $guiness #>       [,1] [,2] #>  [1,]  295   61 #>  [2,]  292   53 #>  [3,]  287   45 #>  [4,]  280   36 #>  [5,]  272   30 #>  [6,]  239   21 #>  [7,]  231   19 #>  [8,]  214   18 #>  [9,]  190   17 #> [10,]  157   17 #> [11,]  140   19 #> [12,]  116   22 #> [13,]   99   27 #> [14,]   86   36 #> [15,]   79   43 #> [16,]   73   56 #> [17,]   70   73 #> [18,]   67  418 #> [19,]  138  743 #> [20,]  141  751 #> [21,]  149  756 #> [22,]  157  757 #> [23,]  182  759 #> [24,]  206  759 #> [25,]  214  757 #> [26,]  221  752 #> [27,]  225  746 #> [28,]  294  431 #> [29,]  297  415 #> [30,]  297  406 #>  #> $hoegardeen #>       [,1] [,2] #>  [1,]  307  262 #>  [2,]  307  111 #>  [3,]  304   61 #>  [4,]  298   50 #>  [5,]  285   38 #>  [6,]  274   32 #>  [7,]  262   29 #>  [8,]  211   23 #>  [9,]  187   21 #> [10,]  174   21 #> [11,]  124   23 #> [12,]  111   26 #> [13,]   86   32 #> [14,]   74   35 #> [15,]   62   41 #> [16,]   56   52 #> [17,]   51   64 #> [18,]   48   75 #> [19,]   46   88 #> [20,]   44  113 #> [21,]   42  139 #> [22,]   40  265 #> [23,]   40  531 #> [24,]  108 1037 #> [25,]  110 1049 #> [26,]  118 1062 #> [27,]  131 1066 #> [28,]  143 1068 #> [29,]  156 1069 #> [30,]  194 1069 #> [31,]  207 1068 #> [32,]  220 1064 #> [33,]  229 1055 #> [34,]  233 1042 #> [35,]  235 1032 #> [36,]  304  540 #> [37,]  305  527 #>  #> $jupiler #>       [,1] [,2] #>  [1,]  290  176 #>  [2,]  289  135 #>  [3,]  288  121 #>  [4,]  286  107 #>  [5,]  280   80 #>  [6,]  271   66 #>  [7,]  259   55 #>  [8,]  245   47 #>  [9,]  231   42 #> [10,]  218   39 #> [11,]  190   35 #> [12,]  177   34 #> [13,]  163   34 #> [14,]  136   37 #> [15,]  122   39 #> [16,]  108   42 #> [17,]   95   46 #> [18,]   81   52 #> [19,]   67   64 #> [20,]   58   77 #> [21,]   53   91 #> [22,]   51  105 #> [23,]   48  132 #> [24,]   47  146 #> [25,]   54  501 #> [26,]   55  515 #> [27,]  125  989 #> [28,]  131 1002 #> [29,]  145 1013 #> [30,]  159 1017 #> [31,]  172 1018 #> [32,]  186 1018 #> [33,]  200 1017 #> [34,]  213 1014 #> [35,]  227 1007 #> [36,]  236  994 #> [37,]  239  981 #> [38,]  294  518 #> [39,]  295  490 #> [40,]  295  395 #>  #> $kingfisher #>       [,1] [,2] #>  [1,]  258  151 #>  [2,]  258  141 #>  [3,]  256  102 #>  [4,]  255   83 #>  [5,]  253   73 #>  [6,]  249   55 #>  [7,]  244   45 #>  [8,]  235   35 #>  [9,]  216   27 #> [10,]  206   24 #> [11,]  188   20 #> [12,]  169   18 #> [13,]  159   18 #> [14,]  140   20 #> [15,]  130   22 #> [16,]  112   27 #> [17,]  104   31 #> [18,]   94   37 #> [19,]   85   46 #> [20,]   81   56 #> [21,]   78   65 #> [22,]   76   75 #> [23,]   75   84 #> [24,]   73  103 #> [25,]   71  316 #> [26,]   71  384 #> [27,]   73  413 #> [28,]  123  729 #> [29,]  132  735 #> [30,]  142  736 #> [31,]  171  736 #> [32,]  181  735 #> [33,]  189  729 #> [34,]  192  719 #> [35,]  253  384 #> [36,]  255  365 #>  #> $latrappe #>       [,1] [,2] #>  [1,]  326   53 #>  [2,]  325   40 #>  [3,]  324   28 #>  [4,]  313   19 #>  [5,]  288   15 #>  [6,]  276   14 #>  [7,]  251   12 #>  [8,]  238   11 #>  [9,]   76   11 #> [10,]   63   12 #> [11,]   51   14 #> [12,]   38   18 #> [13,]   30   27 #> [14,]   28   52 #> [15,]   27   89 #> [16,]   25  239 #> [17,]   25  451 #> [18,]   28  464 #> [19,]  111  724 #> [20,]  118  737 #> [21,]  130  745 #> [22,]  142  747 #> [23,]  167  748 #> [24,]  205  747 #> [25,]  217  744 #> [26,]  230  721 #> [27,]  234  710 #> [28,]  318  477 #> [29,]  321  465 #> [30,]  324  452 #> [31,]  325  440 #> [32,]  326  427 #>  #> $lindemanskriek #>       [,1] [,2] #>  [1,]  275   67 #>  [2,]  274   59 #>  [3,]  271   50 #>  [4,]  267   43 #>  [5,]  256   30 #>  [6,]  248   27 #>  [7,]  239   24 #>  [8,]  231   22 #>  [9,]  214   18 #> [10,]  197   15 #> [11,]  189   14 #> [12,]  146   14 #> [13,]  129   16 #> [14,]  113   18 #> [15,]   96   22 #> [16,]   87   25 #> [17,]   79   29 #> [18,]   71   34 #> [19,]   60   49 #> [20,]   57   58 #> [21,]   55   66 #> [22,]   54   75 #> [23,]   53  362 #> [24,]   54  395 #> [25,]   55  404 #> [26,]  119  810 #> [27,]  123  827 #> [28,]  131  831 #> [29,]  147  834 #> [30,]  164  835 #> [31,]  172  835 #> [32,]  181  834 #> [33,]  189  832 #> [34,]  205  823 #> [35,]  207  814 #> [36,]  269  411 #> [37,]  270  403 #> [38,]  272  386 #>  #> $nicechouffe #>       [,1] [,2] #>  [1,]  267  157 #>  [2,]  267   64 #>  [3,]  266   48 #>  [4,]  262   40 #>  [5,]  258   33 #>  [6,]  250   28 #>  [7,]  226   19 #>  [8,]  217   17 #>  [9,]  150   17 #> [10,]  116   18 #> [11,]  108   20 #> [12,]  100   23 #> [13,]   84   34 #> [14,]   80   41 #> [15,]   77   50 #> [16,]   75   58 #> [17,]   74  269 #> [18,]   75  311 #> [19,]   77  336 #> [20,]  135  683 #> [21,]  138  692 #> [22,]  153  702 #> [23,]  161  703 #> [24,]  170  703 #> [25,]  186  701 #> [26,]  194  698 #> [27,]  199  691 #> [28,]  205  665 #> [29,]  261  350 #> [30,]  263  334 #> [31,]  266  300 #>  #> $pecheresse #>       [,1] [,2] #>  [1,]  290  355 #>  [2,]  286  164 #>  [3,]  280   87 #>  [4,]  272   67 #>  [5,]  256   52 #>  [6,]  246   46 #>  [7,]  226   40 #>  [8,]  207   38 #>  [9,]  187   36 #> [10,]  138   36 #> [11,]  109   41 #> [12,]   89   48 #> [13,]   81   53 #> [14,]   65   68 #> [15,]   58   86 #> [16,]   56   96 #> [17,]   54  116 #> [18,]   54  165 #> [19,]   56  310 #> [20,]   58  428 #> [21,]   61  476 #> [22,]   63  495 #> [23,]  124  940 #> [24,]  128  948 #> [25,]  143  960 #> [26,]  161  964 #> [27,]  191  964 #> [28,]  209  962 #> [29,]  219  959 #> [30,]  232  950 #> [31,]  237  933 #> [32,]  288  471 #> [33,]  290  451 #>  #> $sierranevada #>       [,1] [,2] #>  [1,]  275   95 #>  [2,]  275   83 #>  [3,]  272   58 #>  [4,]  268   46 #>  [5,]  257   35 #>  [6,]  245   31 #>  [7,]  208   27 #>  [8,]  196   26 #>  [9,]  122   26 #> [10,]  109   27 #> [11,]   85   31 #> [12,]   72   37 #> [13,]   65   49 #> [14,]   63   61 #> [15,]   61   74 #> [16,]   59  382 #> [17,]   63  407 #> [18,]  118  658 #> [19,]  123  669 #> [20,]  133  677 #> [21,]  145  679 #> [22,]  157  680 #> [23,]  169  680 #> [24,]  182  679 #> [25,]  194  677 #> [26,]  206  669 #> [27,]  268  403 #> [28,]  270  391 #> [29,]  271  379 #> [30,]  272  366 #>  #> $tanglefoot #>       [,1] [,2] #>  [1,]  298   64 #>  [2,]  294   48 #>  [3,]  291   40 #>  [4,]  286   32 #>  [5,]   62   32 #>  [6,]   56   38 #>  [7,]   50   54 #>  [8,]   48   70 #>  [9,]   47  383 #> [10,]   47  391 #> [11,]   48  407 #> [12,]   49  415 #> [13,]  130  704 #> [14,]  133  712 #> [15,]  213  712 #> [16,]  220  707 #> [17,]  295  425 #> [18,]  299  409 #> [19,]  301  393 #>  #> $tauro #>       [,1] [,2] #>  [1,]  295  398 #>  [2,]  290  132 #>  [3,]  288  119 #>  [4,]  282   84 #>  [5,]  277   73 #>  [6,]  266   60 #>  [7,]  254   52 #>  [8,]  232   41 #>  [9,]  220   39 #> [10,]  184   34 #> [11,]  160   34 #> [12,]  123   39 #> [13,]  112   41 #> [14,]  100   44 #> [15,]   77   55 #> [16,]   67   65 #> [17,]   58   78 #> [18,]   54   90 #> [19,]   50  113 #> [20,]   48  125 #> [21,]   48  198 #> [22,]   52  405 #> [23,]   54  503 #> [24,]   59  538 #> [25,]  124  980 #> [26,]  132 1003 #> [27,]  144 1012 #> [28,]  156 1015 #> [29,]  168 1017 #> [30,]  180 1018 #> [31,]  192 1018 #> [32,]  204 1017 #> [33,]  215 1013 #> [34,]  228 1007 #> [35,]  236  995 #> [36,]  241  973 #> [37,]  293  532 #> [38,]  295  496 #>  #> $westmalle #>       [,1] [,2] #>  [1,]  258  105 #>  [2,]  257   80 #>  [3,]  255   64 #>  [4,]  252   41 #>  [5,]  246   35 #>  [6,]  232   25 #>  [7,]  224   22 #>  [8,]  207   16 #>  [9,]  199   14 #> [10,]  182   12 #> [11,]  157   11 #> [12,]  149   11 #> [13,]  132   14 #> [14,]  123   16 #> [15,]  107   20 #> [16,]   98   24 #> [17,]   74   38 #> [18,]   70   45 #> [19,]   68   87 #> [20,]   67  145 #> [21,]   66  244 #> [22,]   66  344 #> [23,]   67  369 #> [24,]   70  394 #> [25,]  117  761 #> [26,]  127  773 #> [27,]  134  776 #> [28,]  151  779 #> [29,]  159  779 #> [30,]  182  776 #> [31,]  197  768 #> [32,]  201  760 #> [33,]  254  389 #> [34,]  256  372 #> [35,]  259  339 #>  #> $amrut #>       [,1] [,2] #>  [1,]  269   74 #>  [2,]  268   54 #>  [3,]  264   34 #>  [4,]  257   25 #>  [5,]  248   20 #>  [6,]  228   14 #>  [7,]  198   11 #>  [8,]  129   11 #>  [9,]   99   14 #> [10,]   89   16 #> [11,]   79   19 #> [12,]   69   24 #> [13,]   60   32 #> [14,]   58   42 #> [15,]   55   62 #> [16,]   54   72 #> [17,]   54   82 #> [18,]   55  501 #> [19,]   56  511 #> [20,]  124  864 #> [21,]  134  871 #> [22,]  144  874 #> [23,]  154  875 #> [24,]  174  875 #> [25,]  184  874 #> [26,]  193  871 #> [27,]  200  864 #> [28,]  269  513 #>  #> $ballantines #>       [,1] [,2] #>  [1,]  313  107 #>  [2,]  313   67 #>  [3,]  312   59 #>  [4,]  309   44 #>  [5,]  303   20 #>  [6,]  298   12 #>  [7,]  284    4 #>  [8,]  268    3 #>  [9,]  118    3 #> [10,]   95    4 #> [11,]   79    5 #> [12,]   71    6 #> [13,]   55   11 #> [14,]   49   19 #> [15,]   43   34 #> [16,]   41   42 #> [17,]   38   58 #> [18,]   35   82 #> [19,]   35  121 #> [20,]   36  483 #> [21,]   38  499 #> [22,]   41  507 #> [23,]  133  704 #> [24,]  141  708 #> [25,]  156  710 #> [26,]  188  710 #> [27,]  204  707 #> [28,]  208  701 #> [29,]  304  508 #> [30,]  307  500 #> [31,]  309  484 #>  #> $bushmills #>       [,1] [,2] #>  [1,]  291   60 #>  [2,]  290   45 #>  [3,]  284   29 #>  [4,]  269   18 #>  [5,]  253   14 #>  [6,]  238   13 #>  [7,]  176   11 #>  [8,]  130   11 #>  [9,]  115   12 #> [10,]  100   15 #> [11,]   85   25 #> [12,]   77   40 #> [13,]   74   56 #> [14,]   72   71 #> [15,]   68  564 #> [16,]   68  656 #> [17,]   70  672 #> [18,]  132  881 #> [19,]  147  891 #> [20,]  162  893 #> [21,]  193  893 #> [22,]  208  891 #> [23,]  221  881 #> [24,]  290  676 #> [25,]  292  661 #>  #> $chivas #>       [,1] [,2] #>  [1,]  332  316 #>  [2,]  329   77 #>  [3,]  327   69 #>  [4,]  322   61 #>  [5,]  305   53 #>  [6,]  272   47 #>  [7,]  240   45 #>  [8,]  223   44 #>  [9,]  198   43 #> [10,]  166   43 #> [11,]  133   44 #> [12,]  100   46 #> [13,]   83   48 #> [14,]   75   49 #> [15,]   50   55 #> [16,]   36   67 #> [17,]   34   75 #> [18,]   29  379 #> [19,]   29  412 #> [20,]   31  429 #> [21,]   33  437 #> [22,]  135  828 #> [23,]  142  833 #> [24,]  158  835 #> [25,]  183  836 #> [26,]  191  836 #> [27,]  216  834 #> [28,]  224  832 #> [29,]  232  816 #> [30,]  330  431 #> [31,]  332  423 #> [32,]  333  398 #>  #> $dalmore #>       [,1] [,2] #>  [1,]  325   63 #>  [2,]  323   50 #>  [3,]  314   40 #>  [4,]  302   36 #>  [5,]  228   34 #>  [6,]   49   34 #>  [7,]   40   39 #>  [8,]   33   50 #>  [9,]   32   62 #> [10,]   42  334 #> [11,]   44  346 #> [12,]   47  359 #> [13,]  136  701 #> [14,]  149  706 #> [15,]  186  706 #> [16,]  198  705 #> [17,]  210  702 #> [18,]  310  347 #> [19,]  311  334 #>  #> $famousgrouse #>       [,1] [,2] #>  [1,]  254   58 #>  [2,]  254   39 #>  [3,]  252   29 #>  [4,]  247   21 #>  [5,]  238   16 #>  [6,]  229   14 #>  [7,]  219   12 #>  [8,]  210   11 #>  [9,]  143   11 #> [10,]  124   13 #> [11,]  114   16 #> [12,]  106   19 #> [13,]  100   28 #> [14,]   97   36 #> [15,]   96  370 #> [16,]   96  389 #> [17,]   98  399 #> [18,]  146  611 #> [19,]  153  617 #> [20,]  172  619 #> [21,]  192  617 #> [22,]  198  610 #> [23,]  246  410 #> [24,]  250  391 #>  #> $glendronach #>       [,1] [,2] #>  [1,]  275   90 #>  [2,]  274   66 #>  [3,]  273   54 #>  [4,]  270   41 #>  [5,]  260   32 #>  [6,]  249   27 #>  [7,]  237   24 #>  [8,]  213   21 #>  [9,]  189   19 #> [10,]  153   19 #> [11,]  129   21 #> [12,]  105   25 #> [13,]   92   29 #> [14,]   80   37 #> [15,]   76   49 #> [16,]   74   61 #> [17,]   72   85 #> [18,]   72  495 #> [19,]   74  507 #> [20,]  134  832 #> [21,]  145  839 #> [22,]  157  840 #> [23,]  170  841 #> [24,]  194  841 #> [25,]  206  836 #> [26,]  273  500 #> [27,]  274  488 #>  #> $glenmorangie #>       [,1] [,2] #>  [1,]  298   76 #>  [2,]  297   59 #>  [3,]  284   44 #>  [4,]  252   32 #>  [5,]  236   29 #>  [6,]  202   26 #>  [7,]  187   25 #>  [8,]  153   25 #>  [9,]  136   26 #> [10,]  103   31 #> [11,]   86   36 #> [12,]   70   43 #> [13,]   57   55 #> [14,]   54   72 #> [15,]   53  518 #> [16,]   53  550 #> [17,]   54  567 #> [18,]  133  998 #> [19,]  142 1010 #> [20,]  159 1011 #> [21,]  176 1011 #> [22,]  192 1011 #> [23,]  209 1010 #> [24,]  222 1001 #> [25,]  298  574 #> [26,]  300  558 #> [27,]  300  524 #>  #> $highlandpark #>       [,1] [,2] #>  [1,]  295   55 #>  [2,]  293   41 #>  [3,]  282   29 #>  [4,]  268   26 #>  [5,]  226   20 #>  [6,]  170   16 #>  [7,]  128   16 #>  [8,]   86   21 #>  [9,]   73   24 #> [10,]   59   29 #> [11,]   46   36 #> [12,]   40   50 #> [13,]   39  469 #> [14,]   40  483 #> [15,]  117  705 #> [16,]  128  716 #> [17,]  142  720 #> [18,]  170  722 #> [19,]  184  721 #> [20,]  198  719 #> [21,]  211  712 #> [22,]  291  487 #> [23,]  293  473 #>  #> $jackdaniels #>       [,1] [,2] #>  [1,]  301   68 #>  [2,]  295   42 #>  [3,]  290   29 #>  [4,]  280   20 #>  [5,]  267   17 #>  [6,]  100   17 #>  [7,]   87   18 #>  [8,]   75   25 #>  [9,]   68   37 #> [10,]   65   51 #> [11,]   60   76 #> [12,]   60   89 #> [13,]   63  414 #> [14,]   64  453 #> [15,]   65  466 #> [16,]   70  493 #> [17,]  137  802 #> [18,]  150  810 #> [19,]  189  810 #> [20,]  215  807 #> [21,]  227  801 #> [22,]  296  480 #> [23,]  301  454 #>  #> $jb #>       [,1] [,2] #>  [1,]  305  102 #>  [2,]  305   81 #>  [3,]  303   70 #>  [4,]  295   49 #>  [5,]  285   41 #>  [6,]  274   35 #>  [7,]  264   31 #>  [8,]  242   29 #>  [9,]  106   29 #> [10,]   85   31 #> [11,]   74   35 #> [12,]   63   40 #> [13,]   54   47 #> [14,]   44   69 #> [15,]   43   80 #> [16,]   40  595 #> [17,]   44  617 #> [18,]  123 1030 #> [19,]  131 1036 #> [20,]  163 1037 #> [21,]  195 1037 #> [22,]  217 1036 #> [23,]  221 1027 #> [24,]  300  608 #> [25,]  302  597 #>  #> $johnniewalker #>       [,1] [,2] #>  [1,]  218   24 #>  [2,]  218   20 #>  [3,]  217   12 #>  [4,]  214    8 #>  [5,]  206    7 #>  [6,]  178    6 #>  [7,]  146    5 #>  [8,]  142    6 #>  [9,]  138    8 #> [10,]  134   15 #> [11,]  132  211 #> [12,]  132  239 #> [13,]  154  337 #> [14,]  158  342 #> [15,]  162  343 #> [16,]  174  343 #> [17,]  186  342 #> [18,]  188  339 #> [19,]  215  240 #> [20,]  217  232 #>  #> $magallan #>       [,1] [,2] #>  [1,]  241   57 #>  [2,]  238   49 #>  [3,]  227   35 #>  [4,]  220   32 #>  [5,]  205   26 #>  [6,]  192   23 #>  [7,]  170   20 #>  [8,]  155   20 #>  [9,]  120   29 #> [10,]  114   32 #> [11,]   99   42 #> [12,]   95   49 #> [13,]   93   64 #> [14,]   75  441 #> [15,]   75  484 #> [16,]   77  499 #> [17,]   79  513 #> [18,]  140  766 #> [19,]  150  778 #> [20,]  164  779 #> [21,]  171  779 #> [22,]  185  776 #> [23,]  194  764 #> [24,]  254  516 #> [25,]  258  494 #> [26,]  258  450 #> [27,]  257  414 #>  #> $makersmark #>       [,1] [,2] #>  [1,]  328  144 #>  [2,]  323  103 #>  [3,]  321   88 #>  [4,]  318   75 #>  [5,]  314   60 #>  [6,]  299   18 #>  [7,]  285   10 #>  [8,]  271    7 #>  [9,]  228    5 #> [10,]   82    5 #> [11,]   67    7 #> [12,]   53   17 #> [13,]   33   71 #> [14,]   30   85 #> [15,]   25  127 #> [16,]   13  267 #> [17,]   11  296 #> [18,]    8  353 #> [19,]    8  367 #> [20,]   10  381 #> [21,]   16  408 #> [22,]  126  840 #> [23,]  134  851 #> [24,]  149  856 #> [25,]  207  856 #> [26,]  221  852 #> [27,]  228  842 #> [28,]  343  386 #> [29,]  345  358 #> [30,]  345  343 #> [31,]  343  315 #>  #> $oban #>       [,1] [,2] #>  [1,]  275   74 #>  [2,]  270   57 #>  [3,]  262   50 #>  [4,]  254   47 #>  [5,]  245   44 #>  [6,]  228   41 #>  [7,]  220   40 #>  [8,]  203   38 #>  [9,]  185   37 #> [10,]  160   37 #> [11,]  134   39 #> [12,]  126   40 #> [13,]  117   42 #> [14,]  100   46 #> [15,]   92   49 #> [16,]   83   56 #> [17,]   77   73 #> [18,]   72  517 #> [19,]   74  534 #> [20,]   75  542 #> [21,]  138  879 #> [22,]  146  894 #> [23,]  154  897 #> [24,]  171  899 #> [25,]  188  898 #> [26,]  197  897 #> [27,]  205  895 #> [28,]  213  888 #> [29,]  279  535 #> [30,]  280  526 #> [31,]  280  500 #>  #> $oldpotrero #>       [,1] [,2] #>  [1,]  271   93 #>  [2,]  269   41 #>  [3,]  266   32 #>  [4,]  259   26 #>  [5,]  250   21 #>  [6,]  233   15 #>  [7,]  224   12 #>  [8,]  207    8 #>  [9,]  191    7 #> [10,]  165    7 #> [11,]  148    8 #> [12,]  122   11 #> [13,]  105   13 #> [14,]   88   18 #> [15,]   79   22 #> [16,]   66   33 #> [17,]   63   41 #> [18,]   62   50 #> [19,]   58  205 #> [20,]   57  248 #> [21,]   58  256 #> [22,]  130  588 #> [23,]  139  601 #> [24,]  156  603 #> [25,]  182  603 #> [26,]  191  602 #> [27,]  198  596 #> [28,]  273  256 #> [29,]  273  204 #>  #> $redbreast #>       [,1] [,2] #>  [1,]  255   78 #>  [2,]  254   27 #>  [3,]  253   22 #>  [4,]  245   15 #>  [5,]  240   13 #>  [6,]  231   11 #>  [7,]  217    9 #>  [8,]  207    8 #>  [9,]  189    7 #> [10,]  160    7 #> [11,]  146    8 #> [12,]  137    9 #> [13,]  123   11 #> [14,]  118   12 #> [15,]  114   13 #> [16,]  109   15 #> [17,]  104   18 #> [18,]  101   27 #> [19,]  100   50 #> [20,]   98  107 #> [21,]   97  163 #> [22,]   97  205 #> [23,]   98  214 #> [24,]  154  428 #> [25,]  158  431 #> [26,]  163  432 #> [27,]  172  433 #> [28,]  181  433 #> [29,]  191  432 #> [30,]  199  427 #> [31,]  255  214 #> [32,]  256  172 #>  #> $tamdhu #>       [,1] [,2] #>  [1,]  304  106 #>  [2,]  302   94 #>  [3,]  299   83 #>  [4,]  289   71 #>  [5,]  278   64 #>  [6,]  253   54 #>  [7,]  229   51 #>  [8,]  205   49 #>  [9,]  155   49 #> [10,]  120   51 #> [11,]  108   52 #> [12,]   84   60 #> [13,]   73   64 #> [14,]   60   72 #> [15,]   52   84 #> [16,]   49   96 #> [17,]   44  613 #> [18,]   47  638 #> [19,]   49  650 #> [20,]  116 1038 #> [21,]  122 1050 #> [22,]  134 1054 #> [23,]  158 1057 #> [24,]  183 1057 #> [25,]  207 1055 #> [26,]  218 1049 #> [27,]  221 1037 #> [28,]  301  638 #> [29,]  302  625 #>  #> $wildturkey #>       [,1] [,2] #>  [1,]  333   76 #>  [2,]  333   63 #>  [3,]  327   49 #>  [4,]  316   38 #>  [5,]  301   34 #>  [6,]  275   28 #>  [7,]  262   26 #>  [8,]  220   23 #>  [9,]  122   23 #> [10,]   81   26 #> [11,]   55   30 #> [12,]   41   34 #> [13,]   28   40 #> [14,]   18   52 #> [15,]   15   66 #> [16,]   15  625 #> [17,]   20  651 #> [18,]  120 1113 #> [19,]  134 1118 #> [20,]  147 1120 #> [21,]  203 1120 #> [22,]  216 1117 #> [23,]  224 1106 #> [24,]  326  648 #> [25,]  330  620 #>  #> $yoichi #>       [,1] [,2] #>  [1,]  290   48 #>  [2,]  280   35 #>  [3,]  273   32 #>  [4,]  258   29 #>  [5,]  244   28 #>  [6,]  229   27 #>  [7,]  200   26 #>  [8,]  156   26 #>  [9,]  134   27 #> [10,]  104   29 #> [11,]   90   32 #> [12,]   75   40 #> [13,]   70   54 #> [14,]   69  120 #> [15,]   68  421 #> [16,]   68  472 #> [17,]   69  487 #> [18,]   72  501 #> [19,]  136  721 #> [20,]  144  735 #> [21,]  159  738 #> [22,]  203  738 #> [23,]  210  737 #> [24,]  225  730 #> [25,]  291  496 #> [26,]  293  481 #> [27,]  294  466 #> [28,]  294  437 #>   coo_chull_onion #> function (coo, close = TRUE)  #> { #>     UseMethod(\"coo_chull_onion\") #> } #> <bytecode: 0x55f563818780> #> <environment: namespace:Momocs> x <- bot %>% efourier(6) %>% PCA #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details all_whisky_points <- x %>% as_df() %>% filter(type==\"whisky\") %>% select(PC1, PC2) #> `retain` is too ambitious. All axes returned plot(x, ~type, eig=FALSE) #> will be deprecated soon, see ?plot_PCA peeling_the_whisky_onion <- all_whisky_points %>% as.matrix %>% coo_chull_onion() # you may need to par(xpd=NA) to ensure all segments # even those outside the graphical window are drawn peeling_the_whisky_onion$coo %>% lapply(coo_draw)  #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL #>  # simulated data xy <- replicate(2, rnorm(50)) coo_plot(xy, poly=FALSE) xy %>% coo_chull_onion() %$% coo %>% lapply(polygon, col=\"#00000022\")  #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>"},{"path":"http://momx.github.io/Momocs/reference/coo_circularity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Haralick's circularity of a shape — coo_circularity","title":"Calculates the Haralick's circularity of a shape — coo_circularity","text":"coo_circularity calculates 'circularity measure'. Also called 'compactness' 'shape factor' sometimes. coo_circularityharalick calculates Haralick's circularity less sensible digitalization noise coo_circularity. coo_circularitynorm calculates 'circularity', also called compactness shape factor, normalized unit circle.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_circularity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Haralick's circularity of a shape — coo_circularity","text":"","code":"coo_circularity(coo)  # S3 method for default coo_circularity(coo)  # S3 method for Coo coo_circularity(coo)  coo_circularityharalick(coo)  # S3 method for default coo_circularityharalick(coo)  # S3 method for Coo coo_circularityharalick(coo)  coo_circularitynorm(coo)  # S3 method for default coo_circularitynorm(coo)  # S3 method for Coo coo_circularitynorm(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_circularity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the Haralick's circularity of a shape — coo_circularity","text":"Rosin PL. 2005. Computing global shape measures. Handbook Pattern Recognition Computer Vision. 177-196.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_circularity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Haralick's circularity of a shape — coo_circularity","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_circularity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Haralick's circularity of a shape — coo_circularity","text":"numeric single shapes, list Coo corresponding circularity measurement.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_circularity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Haralick's circularity of a shape — coo_circularity","text":"","code":"# coo_circularity bot[1] %>% coo_circularity() #> [1] 26.26463 bot %>%     slice(1:5) %>% # for speed sake only     coo_circularity #> $brahma #> [1] 26.26463 #>  #> $caney #> [1] 25.60553 #>  #> $chimay #> [1] 20.83278 #>  #> $corona #> [1] 27.61134 #>  #> $deusventrue #> [1] 25.75573 #>   # coo_circularityharalick bot[1] %>% coo_circularityharalick() #> [1] 2.320493 bot %>%     slice(1:5) %>% # for speed sake only     coo_circularityharalick #> $brahma #> [1] 2.320493 #>  #> $caney #> [1] 2.374045 #>  #> $chimay #> [1] 2.935174 #>  #> $corona #> [1] 2.261573 #>  #> $deusventrue #> [1] 2.397828 #>   # coo_circularitynorm bot[1] %>% coo_circularitynorm() #> [1] 2.090073 bot %>%     slice(1:5) %>% # for speed sake only     coo_circularitynorm #> $brahma #> [1] 2.090073 #>  #> $caney #> [1] 2.037623 #>  #> $chimay #> [1] 1.65782 #>  #> $corona #> [1] 2.197241 #>  #> $deusventrue #> [1] 2.049576 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Closes/uncloses shapes — coo_close","title":"Closes/uncloses shapes — coo_close","text":"Returns closed shape (un)closed shapes. See also coo_unclose. Returns unclosed shape (un)closed shapes. See also coo_close.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closes/uncloses shapes — coo_close","text":"","code":"coo_close(coo)  coo_unclose(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closes/uncloses shapes — coo_close","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closes/uncloses shapes — coo_close","text":"matrix (x; y) coordinates, Coo object. matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closes/uncloses shapes — coo_close","text":"","code":"x <- (matrix(1:10, ncol=2)) x2 <- coo_close(x) x3 <- coo_unclose(x2) x #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 coo_is_closed(x) #> [1] FALSE x2 #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 #> [6,]    1    6 coo_is_closed(x2) #> [1] TRUE x3 #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 coo_is_closed(x3) #> [1] FALSE x <- (matrix(1:10, ncol=2)) x2 <- coo_close(x) x3 <- coo_unclose(x2) x #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 coo_is_closed(x) #> [1] FALSE x2 #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 #> [6,]    1    6 coo_is_closed(x2) #> [1] TRUE x3 #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 coo_is_closed(x3) #> [1] FALSE"},{"path":"http://momx.github.io/Momocs/reference/coo_convexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the convexity of a shape — coo_convexity","title":"Calculates the convexity of a shape — coo_convexity","text":"Calculated using ratio eigen values (inertia axis)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_convexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the convexity of a shape — coo_convexity","text":"","code":"coo_convexity(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_convexity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the convexity of a shape — coo_convexity","text":"Rosin PL. 2005. Computing global shape measures. Handbook Pattern Recognition Computer Vision. 177-196.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_convexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the convexity of a shape — coo_convexity","text":"coo matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_convexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the convexity of a shape — coo_convexity","text":"numeric single shape, list Coo","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_convexity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the convexity of a shape — coo_convexity","text":"","code":"coo_convexity(bot[1]) #> [1] 0.8003675 bot %>%     slice(1:3) %>% # for speed sake only     coo_convexity() #> $brahma #> [1] 0.8003675 #>  #> $caney #> [1] 0.9409434 #>  #> $chimay #> [1] 0.9454935 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_down.html","id":null,"dir":"Reference","previous_headings":"","what":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","title":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","text":"Useful shapes aligned along x-axis (e.g. bilateral symmetry) one wants retain just lower side.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_down.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","text":"","code":"coo_down(coo, slidegap = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_down.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","text":"coo matrix (x; y) coordinates Coo object. slidegap logical whether apply coo_slidegap coo_down","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_down.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","text":"matrix (x; y) coordinates Coo object (returned Opn)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_down.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","text":"shapes \"sliced\" along x-axis, usually results open curves thus huge/artefactual gaps points neighboring axis. usually solved coo_slidegap. See examples . Also, apply coo_left/right//object, obtain Opn object, done automatically.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_down.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"coo_down\nRetains coordinates with negative y-coordinates — coo_down","text":"","code":"b <- coo_alignxax(bot[1]) coo_plot(b) coo_draw(coo_down(b), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a shape to the current plot — coo_draw","title":"Adds a shape to the current plot — coo_draw","text":"coo_draw simply coo_plot plot.new=FALSE, ie adds shape active plot.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a shape to the current plot — coo_draw","text":"","code":"coo_draw(coo, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a shape to the current plot — coo_draw","text":"coo list matrix coordinates. ... optional parameters coo_plot","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a shape to the current plot — coo_draw","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a shape to the current plot — coo_draw","text":"","code":"b1 <- bot[4] b2 <- bot[5] coo_plot(b1) coo_draw(b2, border='red') # all coo_plot arguments will work for coo_draw"},{"path":"http://momx.github.io/Momocs/reference/coo_draw_rads.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw radii to the current plot — coo_draw_rads","title":"Draw radii to the current plot — coo_draw_rads","text":"Given shape, centroid-points radii drawn using segments can passed options","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_draw_rads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw radii to the current plot — coo_draw_rads","text":"","code":"coo_draw_rads(coo, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_draw_rads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw radii to the current plot — coo_draw_rads","text":"coo shape ... arguments feed segments","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_draw_rads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw radii to the current plot — coo_draw_rads","text":"drawing last plot","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_draw_rads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw radii to the current plot — coo_draw_rads","text":"","code":"shp <- shapes[4] %>% coo_sample(24) %T>% coo_plot coo_draw_rads(shp, col=col_summer(24))"},{"path":"http://momx.github.io/Momocs/reference/coo_dxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate abscissa and ordinate on a shape — coo_dxy","title":"Calculate abscissa and ordinate on a shape — coo_dxy","text":"simple wrapper calculate dxi - dx1 dyi - dx1.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_dxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate abscissa and ordinate on a shape — coo_dxy","text":"","code":"coo_dxy(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_dxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate abscissa and ordinate on a shape — coo_dxy","text":"coo matrix (list) (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_dxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate abscissa and ordinate on a shape — coo_dxy","text":"data.frame two components dx dy single shapes list data.frames Coo","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_dxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate abscissa and ordinate on a shape — coo_dxy","text":"","code":"coo_dxy(coo_sample(bot[1], 12)) #> # A tibble: 12 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2    26  -200 #>  3     5  -411 #>  4   106  -546 #>  5   279  -448 #>  6   268  -259 #>  7   258   -38 #>  8   259   152 #>  9   203   351 #> 10   168   540 #> 11    73   441 #> 12    45   220  bot %>%     slice(1:5) %>% coo_sample(12) %>%  # for readability and speed only     coo_dxy() #> $brahma #> # A tibble: 12 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2    26  -200 #>  3     5  -411 #>  4   106  -546 #>  5   279  -448 #>  6   268  -259 #>  7   258   -38 #>  8   259   152 #>  9   203   351 #> 10   168   540 #> 11    73   441 #> 12    45   220 #>  #> $caney #> # A tibble: 12 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2     0  -192 #>  3     0  -373 #>  4    91  -507 #>  5   251  -436 #>  6   258  -244 #>  7   258   -73 #>  8   219   109 #>  9   193   299 #> 10   182   474 #> 11    76   392 #> 12    58   211 #>  #> $chimay #> # A tibble: 12 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2     3  -131 #>  3     7  -254 #>  4    99  -320 #>  5   227  -304 #>  6   242  -185 #>  7   239   -54 #>  8   209    83 #>  9   163   204 #> 10   145   321 #> 11    65   265 #> 12    49   145 #>  #> $corona #> # A tibble: 12 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2     0  -155 #>  3     3  -298 #>  4    73  -409 #>  5   184  -346 #>  6   185  -201 #>  7   185   -46 #>  8   155   106 #>  9   145   246 #> 10   125   396 #> 11    53   309 #> 12    33   171 #>  #> $deusventrue #> # A tibble: 12 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2   -38  -171 #>  3   -28  -334 #>  4    86  -427 #>  5   231  -384 #>  6   245  -209 #>  7   234   -47 #>  8   168   123 #>  9   151   294 #> 10   137   451 #> 11    56   347 #> 12    57   197 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_eccentricity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the eccentricity of a shape — coo_eccentricity","title":"Calculates the eccentricity of a shape — coo_eccentricity","text":"coo_eccentricityeigen uses ratio eigen values (inertia axes coordinates). coo_eccentricityboundingbox uses width/length ratio (see coo_lw).","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_eccentricity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the eccentricity of a shape — coo_eccentricity","text":"","code":"coo_eccentricityeigen(coo)  # S3 method for default coo_eccentricityeigen(coo)  # S3 method for Coo coo_eccentricityeigen(coo)  coo_eccentricityboundingbox(coo)  # S3 method for default coo_eccentricityboundingbox(coo)  # S3 method for Coo coo_eccentricityboundingbox(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_eccentricity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the eccentricity of a shape — coo_eccentricity","text":"Rosin PL. 2005. Computing global shape measures. Handbook Pattern Recognition Computer Vision. 177-196.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_eccentricity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the eccentricity of a shape — coo_eccentricity","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_eccentricity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the eccentricity of a shape — coo_eccentricity","text":"numeric single shapes, list Coo.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_eccentricity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the eccentricity of a shape — coo_eccentricity","text":"","code":"# coo_eccentricityeigen bot[1] %>% coo_eccentricityeigen() #> [1] 0.09292547 bot %>%     slice(1:3) %>% # for speed sake only     coo_eccentricityeigen() #> $brahma #> [1] 0.09292547 #>  #> $caney #> [1] 0.100634 #>  #> $chimay #> [1] 0.1813198 #>   # coo_eccentricityboundingbox bot[1] %>% coo_eccentricityboundingbox() #> [1] 0.2555899 bot %>%     slice(1:3) %>% # for speed sake only     coo_eccentricityboundingbox() #> $brahma #> [1] 0.2555899 #>  #> $caney #> [1] 0.2617262 #>  #> $chimay #> [1] 0.3744498 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_elongation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the elongation of a shape — coo_elongation","title":"Calculates the elongation of a shape — coo_elongation","text":"Calculates elongation shape","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_elongation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the elongation of a shape — coo_elongation","text":"","code":"coo_elongation(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_elongation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the elongation of a shape — coo_elongation","text":"Rosin PL. 2005. Computing global shape measures. Handbook Pattern Recognition Computer Vision. 177-196.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_elongation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the elongation of a shape — coo_elongation","text":"coo matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_elongation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the elongation of a shape — coo_elongation","text":"numeric, eccentricity bounding box","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_elongation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the elongation of a shape — coo_elongation","text":"","code":"coo_elongation(bot[1]) #> [1] 0.7444101 # on Coo # for speed sake bot %>% slice(1:3) %>% coo_elongation #> $brahma #> [1] 0.7444101 #>  #> $caney #> [1] 0.7382738 #>  #> $chimay #> [1] 0.6255502 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coordinates from a shape — coo_extract","title":"Extract coordinates from a shape — coo_extract","text":"Extract ids coordinates single shape Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coordinates from a shape — coo_extract","text":"","code":"coo_extract(coo, ids)"},{"path":"http://momx.github.io/Momocs/reference/coo_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coordinates from a shape — coo_extract","text":"coo either matrix (x; y) coordinates Coo object. ids integer, ids points sample.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract coordinates from a shape — coo_extract","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract coordinates from a shape — coo_extract","text":"probably make sense Coo objects number coordinates homologous, typically Ldk.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coordinates from a shape — coo_extract","text":"","code":"coo_extract(bot[1], c(3, 9, 12)) # or : #>      [,1] [,2] #> [1,]   40  529 #> [2,]   57  414 #> [3,]   63  361 bot[1] %>% coo_extract(c(3, 9, 12)) #>      [,1] [,2] #> [1,]   40  529 #> [2,]   57  414 #> [3,]   63  361"},{"path":"http://momx.github.io/Momocs/reference/coo_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Flips shapes — coo_flipx","title":"Flips shapes — coo_flipx","text":"coo_flipx flips shapes x-axis; coo_flipy y-axis.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flips shapes — coo_flipx","text":"","code":"coo_flipx(coo)  coo_flipy(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flips shapes — coo_flipx","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flips shapes — coo_flipx","text":"matrix (x; y) coordinates","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flips shapes — coo_flipx","text":"","code":"cat <- shapes[4] cat <- coo_center(cat) coo_plot(cat) coo_draw(coo_flipx(cat), border=\"red\") coo_draw(coo_flipy(cat), border=\"blue\")   #' # to flip an entire Coo: shapes2 <- shapes shapes$coo <- lapply(shapes2$coo, coo_flipx)"},{"path":"http://momx.github.io/Momocs/reference/coo_force2close.html","id":null,"dir":"Reference","previous_headings":"","what":"Forces shapes to close — coo_force2close","title":"Forces shapes to close — coo_force2close","text":"exotic function distribute distance first last points unclosed shapes, become closed. May useful (?) e.g. t/rfourier methods reconstructed shapes may closed.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_force2close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forces shapes to close — coo_force2close","text":"","code":"coo_force2close(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_force2close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forces shapes to close — coo_force2close","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_force2close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forces shapes to close — coo_force2close","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_force2close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forces shapes to close — coo_force2close","text":"","code":"b <- coo_sample(bot[1], 64) b <- b[1:40,] coo_plot(b) coo_draw(coo_force2close(b), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolates coordinates — coo_interpolate","title":"Interpolates coordinates — coo_interpolate","text":"Interpolates n coordinates 'among existing points'' existing points, along perimeter coordinates provided keeping first point","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolates coordinates — coo_interpolate","text":"","code":"coo_interpolate(coo, n)"},{"path":"http://momx.github.io/Momocs/reference/coo_interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolates coordinates — coo_interpolate","text":"coo matrix (x; y) coordinates Coo object. n integer, number fo points interpolate.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolates coordinates — coo_interpolate","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolates coordinates — coo_interpolate","text":"","code":"b5 <- bot %>% slice(1:5) # for speed sake stack(b5)  stack(coo_scale(b5))  stack(b5)  stack(coo_interpolate(coo_sample(b5, 12), 120))  coo_plot(bot[1])  coo_plot(coo_interpolate(coo_sample(bot[1], 12), 120))"},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","title":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","text":"Take shape, segment starting centroid particular angle, point nearest segment intersects shape?","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","text":"","code":"coo_intersect_angle(coo, angle = 0)  coo_intersect_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])  # S3 method for default coo_intersect_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])  # S3 method for Coo coo_intersect_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])"},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","text":"coo matrix (x; y) coordinates Coo object. angle numeric angle radians (0 default). direction character one \"\", \"left\", \"\", \"right\" (\"right\" default)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","text":"numeric id nearest point list Coo See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_angle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","text":"shapes always centered operation. need simple direction (, left, , right)ward, use coo_intersect_direction need find intersection relies coordinates 1000.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nearest intersection between a shape and a segment specified with an angle — coo_intersect_angle","text":"","code":"coo <- bot[1] %>% coo_center %>% coo_scale coo_plot(coo) coo %>% coo_intersect_angle(pi/7) %>%    coo[., , drop=FALSE] %>% points(col=\"red\")    # many angles  coo_plot(coo)  sapply(seq(0, pi, pi/12),        function(x) coo %>% coo_intersect_angle(x)) -> ids  coo[ids, ] %>% points(col=\"blue\")   coo %>%  coo_intersect_direction(\"down\") %>%  coo[.,, drop=FALSE] %>% points(col=\"orange\")"},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearest intersection between a shape and a segment — coo_intersect_segment","title":"Nearest intersection between a shape and a segment — coo_intersect_segment","text":"Take shape, intersecting segment, point nearest segment intersects shape? time, centering makes sense.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nearest intersection between a shape and a segment — coo_intersect_segment","text":"","code":"coo_intersect_segment(coo, seg, center = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nearest intersection between a shape and a segment — coo_intersect_segment","text":"coo matrix (x; y) coordinates Coo object. seg 2x2 matrix defining starting ending points; list numeric length 4. center logical whether center shape (TRUE default)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nearest intersection between a shape and a segment — coo_intersect_segment","text":"numeric id nearest point, list Coo. See examples.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_intersect_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nearest intersection between a shape and a segment — coo_intersect_segment","text":"","code":"coo <- bot[1] %>% coo_center %>% coo_scale seg <- c(0, 0, 2, 2) # passed as a numeric of length(4) coo_plot(coo) segments(seg[1], seg[2], seg[3], seg[4]) coo %>% coo_intersect_segment(seg) %T>% print %>% # prints on the console and draw it    coo[., , drop=FALSE] %>% points(col=\"red\")  #> [1] 79  # on Coo bot %>%     slice(1:3) %>% # for the sake of speed     coo_center %>%     coo_intersect_segment(matrix(c(0, 0, 1000, 1000), ncol=2, byrow=TRUE)) #> $brahma #> [1] 79 #>  #> $caney #> [1] 96 #>  #> $chimay #> [1] 110 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_is_closed.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if shapes are closed — coo_is_closed","title":"Test if shapes are closed — coo_is_closed","text":"Returns TRUE/FALSE whether last coordinate shapes first one.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_is_closed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if shapes are closed — coo_is_closed","text":"","code":"coo_is_closed(coo)  is_open(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_is_closed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if shapes are closed — coo_is_closed","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_is_closed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if shapes are closed — coo_is_closed","text":"single vector logical.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_is_closed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if shapes are closed — coo_is_closed","text":"","code":"coo_is_closed(matrix(1:10, ncol=2)) #> [1] FALSE coo_is_closed(coo_close(matrix(1:10, ncol=2))) #> [1] TRUE coo_is_closed(bot) #>         brahma          caney         chimay         corona    deusventrue  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>          amrut    ballantines      bushmills         chivas        dalmore  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>             jb  johnniewalker       magallan     makersmark           oban  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>          FALSE          FALSE          FALSE          FALSE          FALSE  coo_is_closed(coo_close(bot)) #>         brahma          caney         chimay         corona    deusventrue  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>          amrut    ballantines      bushmills         chivas        dalmore  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>             jb  johnniewalker       magallan     makersmark           oban  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>           TRUE           TRUE           TRUE           TRUE           TRUE"},{"path":"http://momx.github.io/Momocs/reference/coo_jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitters shapes — coo_jitter","title":"Jitters shapes — coo_jitter","text":"simple wrapper around jitter.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_jitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitters shapes — coo_jitter","text":"","code":"coo_jitter(coo, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_jitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitters shapes — coo_jitter","text":"coo matrix (x; y) coordinates Coo object. ... additional parameter jitter","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_jitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitters shapes — coo_jitter","text":"matrix (x; y) coordinates Coo object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_jitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitters shapes — coo_jitter","text":"","code":"b <-bot[1] coo_plot(b, zoom=0.2) coo_draw(coo_jitter(b, amount=3), border=\"red\")   # for a Coo example, see \\link{get_pairs}"},{"path":"http://momx.github.io/Momocs/reference/coo_ldk.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines landmarks interactively — coo_ldk","title":"Defines landmarks interactively — coo_ldk","text":"Allows interactively define nb.ldk number landarks shape. Used facilities acquire/manipulate data.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_ldk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines landmarks interactively — coo_ldk","text":"","code":"coo_ldk(coo, nb.ldk, close = FALSE, points = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/coo_ldk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines landmarks interactively — coo_ldk","text":"coo matrix list (x; y) coordinates. nb.ldk integer, number landmarks define close logical whether close (typically outlines) points logical whether display points","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_ldk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines landmarks interactively — coo_ldk","text":"numeric corresponds closest ids, shape, cliked points.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_ldk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines landmarks interactively — coo_ldk","text":"","code":"if (FALSE) { b <- bot[1] coo_ldk(b, 3) # run this, and click 3 times coo_ldk(bot, 2) # this also works on Out }"},{"path":"http://momx.github.io/Momocs/reference/coo_left.html","id":null,"dir":"Reference","previous_headings":"","what":"Retains coordinates with negative x-coordinates — coo_left","title":"Retains coordinates with negative x-coordinates — coo_left","text":"Useful shapes aligned along y-axis (e.g. bilateral symmetry) one wants retain just lower side.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retains coordinates with negative x-coordinates — coo_left","text":"","code":"coo_left(coo, slidegap = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retains coordinates with negative x-coordinates — coo_left","text":"coo matrix (x; y) coordinates Coo object. slidegap logical whether apply coo_slidegap coo_left","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retains coordinates with negative x-coordinates — coo_left","text":"matrix (x; y) coordinates Coo object (returned Opn)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_left.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retains coordinates with negative x-coordinates — coo_left","text":"shapes \"sliced\" along y-axis, usually results open curves thus huge/artefactual gaps points neighboring axis. usually solved coo_slidegap. See examples . Also, apply coo_left/right//object, obtain Opn object, done automatically.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_left.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retains coordinates with negative x-coordinates — coo_left","text":"","code":"b <- coo_center(bot[1]) coo_plot(b) coo_draw(coo_left(b), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the length of a shape — coo_length","title":"Calculates the length of a shape — coo_length","text":"Nothing coo_lw(coo)[1].","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the length of a shape — coo_length","text":"","code":"coo_length(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the length of a shape — coo_length","text":"coo matrix (x; y) coordinates Coo object","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the length of a shape — coo_length","text":"length (pixels) shape","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the length of a shape — coo_length","text":"function can used integrate size - meaningful - Coo objects. See also coo_centsize rescale.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the length of a shape — coo_length","text":"","code":"coo_length(bot[1]) #> [1] 1087.831 coo_length(bot) #>         brahma          caney         chimay         corona    deusventrue  #>      1087.8309       994.1615       643.8746       805.9889       886.0715  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>       606.0107       865.0272       765.0962       742.1752      1048.1058  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>       984.2303       718.3227       737.3475       821.1190       686.2766  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>       928.6771       654.2412       680.6856       984.3941       768.0226  #>          amrut    ballantines      bushmills         chivas        dalmore  #>       864.0899       707.8465       882.0460       793.0187       672.0897  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>       608.2238       822.0508       986.0991       705.9991       793.1392  #>             jb  johnniewalker       magallan     makersmark           oban  #>      1008.1334       337.7117       759.0041       851.3161       862.0016  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>       596.0958       426.0429      1008.3194      1097.1657       712.1001  mutate(bot, size=coo_length(bot)) #> Out (outlines) #>   - 40 outlines, 162 +/- 21 coords (in $coo) #>   - 3 classifiers (in $fac):  #> # A tibble: 40 × 3 #>   type   fake   size #>   <fct>  <fct> <dbl> #> 1 whisky a     1088. #> 2 whisky a      994. #> 3 whisky a      644. #> 4 whisky a      806. #> 5 whisky a      886. #> 6 whisky a      606. #> # ℹ 34 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/coo_likely_clockwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests if shapes are (likely) developping clockwise or anticlockwise — coo_likely_clockwise","title":"Tests if shapes are (likely) developping clockwise or anticlockwise — coo_likely_clockwise","text":"Tests shapes (likely) developping clockwise anticlockwise","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_likely_clockwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests if shapes are (likely) developping clockwise or anticlockwise — coo_likely_clockwise","text":"","code":"coo_likely_clockwise(coo)  # S3 method for default coo_likely_clockwise(coo)  # S3 method for Coo coo_likely_clockwise(coo)  coo_likely_anticlockwise(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_likely_clockwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests if shapes are (likely) developping clockwise or anticlockwise — coo_likely_clockwise","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_likely_clockwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests if shapes are (likely) developping clockwise or anticlockwise — coo_likely_clockwise","text":"single vector logical.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_likely_clockwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests if shapes are (likely) developping clockwise or anticlockwise — coo_likely_clockwise","text":"","code":"shapes[4] %>% coo_sample(64) %>% coo_plot()  #clockwise cat  shapes[4] %>% coo_likely_clockwise() #> [1] TRUE shapes[4] %>% coo_rev() %>% coo_likely_clockwise() #> [1] FALSE  # on Coo shapes %>% coo_likely_clockwise %>% `[`(4) #>  cat  #> TRUE"},{"path":"http://momx.github.io/Momocs/reference/coo_listpanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots sets of shapes. — coo_listpanel","title":"Plots sets of shapes. — coo_listpanel","text":"coo_listpanel plots list shapes passed list coordinates. Mainly used panel.Coo functions. used outside latter, shapes must \"templated\", see coo_template. want reorder shapes according factor, use arrange.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_listpanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots sets of shapes. — coo_listpanel","text":"","code":"coo_listpanel(   coo.list,   dim,   byrow = TRUE,   fromtop = TRUE,   cols,   borders,   poly = TRUE,   points = FALSE,   points.pch = 3,   points.cex = 0.2,   points.col = \"#333333\",   ... )"},{"path":"http://momx.github.io/Momocs/reference/coo_listpanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots sets of shapes. — coo_listpanel","text":"coo.list list coordinates dim vector form (nb.row, nb.cols) specify panel display. missing, shapes arranged square. byrow logical. Whether draw successive shape row col. fromtop logical. Whether display shapes top plotting region. cols vector colors fill shapes. borders vector colors draw shape borders. poly logical whether use polygon lines draw shapes. mainly use outlines open outlines. points logical poly set FALSE whether add points points.pch points TRUE, pch points points.cex points TRUE, cex points points.col points TRUE, col  points ... additional arguments feed generic plot","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_listpanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots sets of shapes. — coo_listpanel","text":"Returns (invisibly) data.frame position shapes can used sophisticated plotting design.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_listpanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots sets of shapes. — coo_listpanel","text":"","code":"coo_listpanel(bot$coo) # equivalent to panel(bot)"},{"path":"http://momx.github.io/Momocs/reference/coo_lolli.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots (lollipop) differences between two configurations — coo_lolli","title":"Plots (lollipop) differences between two configurations — coo_lolli","text":"Draws 'lollipops' two configurations.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_lolli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots (lollipop) differences between two configurations — coo_lolli","text":"","code":"coo_lolli(coo1, coo2, pch = NA, cex = 0.5, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_lolli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots (lollipop) differences between two configurations — coo_lolli","text":"coo1 list matrix coordinates. coo2 list matrix coordinates. pch pch points (default NA) cex cex points ... optional parameters fed points segments.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_lolli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots (lollipop) differences between two configurations — coo_lolli","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_lolli.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots (lollipop) differences between two configurations — coo_lolli","text":"","code":"coo_lolli(coo_sample(olea[3], 50), coo_sample(olea[6], 50)) title(\"A nice title !\")"},{"path":"http://momx.github.io/Momocs/reference/coo_lw.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates length and width of a shape — coo_lw","title":"Calculates length and width of a shape — coo_lw","text":"Returns length width shape based iniertia axis .e. alignment x-axis. length defined range along x-axis; width range y-axis.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_lw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates length and width of a shape — coo_lw","text":"","code":"coo_lw(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_lw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates length and width of a shape — coo_lw","text":"coo matrix (x; y) coordinates Coo object","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_lw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates length and width of a shape — coo_lw","text":"vector two numeric: length width.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_lw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates length and width of a shape — coo_lw","text":"","code":"coo_lw(bot[1]) #> [1] 1087.8309  278.0386"},{"path":"http://momx.github.io/Momocs/reference/coo_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts coordinates — coo_nb","title":"Counts coordinates — coo_nb","text":"Returns number coordinates, single shape Coo object","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts coordinates — coo_nb","text":"","code":"coo_nb(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts coordinates — coo_nb","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts coordinates — coo_nb","text":"either single numeric vector numeric","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts coordinates — coo_nb","text":"","code":"# single shape coo_nb(bot[1]) #> [1] 138 # Coo object coo_nb(bot) #>         brahma          caney         chimay         corona    deusventrue  #>            138            168            189            129            152  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>            161            124            126            183            193  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>            156            182            136            176            146  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>            129            176            174            174            141  #>          amrut    ballantines      bushmills         chivas        dalmore  #>            191            146            165            164            155  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>            169            197            179            169            150  #>             jb  johnniewalker       magallan     makersmark           oban  #>            174            168            141            177            179  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>            131            177            176            185            123"},{"path":"http://momx.github.io/Momocs/reference/coo_oscillo.html","id":null,"dir":"Reference","previous_headings":"","what":"Momocs' 'oscilloscope' for Fourier-based approaches — coo_oscillo","title":"Momocs' 'oscilloscope' for Fourier-based approaches — coo_oscillo","text":"Shape analysis deals curve fitting, whether \\(x(t)\\) \\(y(t)\\) positions along curvilinear abscissa /radius/tangent angle variation. functions mainly intended (self-)teaching Fourier-based methods.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_oscillo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Momocs' 'oscilloscope' for Fourier-based approaches — coo_oscillo","text":"","code":"coo_oscillo(   coo,   method = c(\"efourier\", \"rfourier\", \"tfourier\", \"all\")[4],   shape = TRUE,   nb.pts = 12 )"},{"path":"http://momx.github.io/Momocs/reference/coo_oscillo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momocs' 'oscilloscope' for Fourier-based approaches — coo_oscillo","text":"coo list matrix coordinates. method character among c('efourier', 'rfourier', 'tfourier', ''). '' default shape logical whether plot original shape nb.pts integer. number reference points, sampled equidistantly along curvilinear abscissa added oscillo curves.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_oscillo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Momocs' 'oscilloscope' for Fourier-based approaches — coo_oscillo","text":"plotted values","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_oscillo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Momocs' 'oscilloscope' for Fourier-based approaches — coo_oscillo","text":"","code":"coo_oscillo(shapes[4])  #>   [1] 0.00000000 4.70353942 3.90929170 3.90044215 3.89159259 4.66814120 #>   [7] 3.87389348 3.07964576 6.21238885 6.20353930 6.19468974 6.18584018 #>  [13] 6.17699063 5.38274291 6.15929151 6.15044196 6.14159240 5.34734468 #>  [19] 6.12389329 5.32964557 5.32079601 4.52654829 5.30309689 4.50884917 #>  [25] 4.49999962 4.49115006 3.69690234 4.47345095 3.67920323 2.88495551 #>  [31] 3.66150411 2.86725639 2.85840684 2.84955728 2.84070772 2.83185817 #>  [37] 2.82300861 2.81415905 2.80530950 3.58185810 2.78761038 2.77876083 #>  [43] 2.76991127 2.76106171 2.75221216 2.74336260 2.73451304 2.72566349 #>  [49] 2.71681393 2.70796437 2.69911482 2.69026526 2.68141570 2.67256614 #>  [55] 2.66371659 2.65486703 2.64601747 1.85176975 3.41371652 1.83407064 #>  [61] 2.61061925 2.60176969 2.59292013 2.58407058 2.57522102 2.56637146 #>  [67] 2.55752191 2.54867235 2.53982279 2.53097324 2.52212368 2.51327412 #>  [73] 2.50442457 2.49557501 2.48672545 2.47787590 2.46902634 2.46017678 #>  [79] 2.45132723 2.44247767 2.43362811 2.42477856 2.41592900 2.40707944 #>  [85] 2.39822988 2.38938033 2.38053077 2.37168121 2.36283166 1.56858394 #>  [91] 2.34513254 2.33628299 2.32743343 3.88938020 3.88053064 3.87168109 #>  [97] 3.07743337 3.85398197 3.84513242 3.83628286 3.82743330 3.81858375 #> [103] 4.59513235 3.80088463 3.79203508 4.56858368 4.55973413 3.76548641 #> [109] 4.54203501 4.53318546 5.30973406 4.51548634 4.50663679 5.28318539 #> [115] 4.48893767 5.26548628 4.47123856 5.24778717 5.23893761 4.44468989 #> [121] 5.22123849 5.21238894 4.41814122 5.19468982 5.18584027 5.17699071 #> [127] 5.16814115 4.37389343 5.15044204 5.14159248 5.13274293 5.12389337 #> [133] 5.11504381 5.10619426 5.09734470 5.08849514 4.29424742 5.07079603 #> [139] 5.06194647 5.05309692 5.04424736 5.03539780 5.02654825 5.80309685 #> [145] 5.00884913 4.99999958 4.99115002 4.98230046 4.97345091 4.96460135 #> [151] 4.95575179 5.73230040 4.93805268 4.92920312 4.92035356 4.91150401 #> [157] 4.90265445 5.67920306 4.88495534 4.87610578 4.86725622 4.85840667 #> [163] 4.84955711 4.84070755 4.83185800 4.82300844 4.81415888 4.80530933 #> [169] 4.79645977 4.00221205 3.99336249 3.19911477 2.40486705 2.39601750 #> [175] 1.60176978 2.37831838 1.58407066 2.36061927 1.56637155 2.34292016 #> [181] 1.54867243 1.53982288 2.31637148 1.52212376 1.51327421 2.28982281 #> [187] 1.49557509 1.48672554 2.26327414 1.46902642 1.46017687 1.45132731 #> [193] 2.22787592 1.43362820 1.42477864 1.41592908 2.19247769 1.39822997 #> [199] 0.60398225 2.16592902 1.37168130 1.36283174 1.35398219 1.34513263 #> [205] 1.33628307 1.32743352 1.31858396 1.30973440 1.30088485 1.29203529 #> [211] 1.28318573 1.27433617 1.26548662 1.25663706 1.24778750 1.23893795 #> [217] 1.23008839 1.22123883 1.21238928 0.41814156 1.19469016 1.18584061 #> [223] 1.17699105 1.16814149 0.37389377 1.15044238 1.14159282 0.34734510 #> [229] 1.12389371 1.11504415 0.32079643 1.09734504 0.30309732 1.07964593 #> [235] 0.28539821 1.06194681 0.26769909 0.25884954 1.03539814 0.24115042 #> [241] 0.23230087 0.22345131 0.21460175 0.20575219 0.19690264 0.18805308 #> [247] 5.67699067 0.17035397 5.65929155 0.15265485 5.64159244 0.13495574 #> [253] 5.62389333 5.61504377 0.10840707 5.59734466 5.58849510 5.57964554 #> [259] 5.57079599 5.56194643 5.55309687 5.54424732 5.53539776 5.52654820 #> [265] 5.51769865 5.50884909 5.49999953 4.70575181 5.48230042 5.47345086 #> [271] 4.67920314 5.45575175 5.44690219 4.65265447 5.42920308 5.42035352 #> [277] 4.62610580 4.61725625 5.39380485 5.38495529 5.37610574 4.58185802 #> [283] 5.35840662 6.13495523 4.55530935 5.33185795 5.32300840 5.31415884 #> [289] 5.30530928 6.08185789 4.50221201 6.06415878 5.26991106 5.26106150 #> [295] 5.25221194 5.24336239 6.01991099 4.44026511 6.00221188 5.20796416 #> [301] 5.19911460 5.19026505 5.18141549 5.17256593 5.16371638 5.94026498 #> [307] 5.14601726 4.35176954 5.12831815 5.11946859 5.89601720 5.10176948 #> [313] 5.09291992 5.08407036 5.07522081 5.06637125 5.05752169 5.04867214 #> [319] 5.03982258 5.03097302 5.02212347 5.01327391 5.00442435 4.99557480 #> [325] 4.98672524 4.97787568 4.96902613 4.96017657 4.95132701 4.94247746 #> [331] 4.93362790 4.13938018 4.91592879 5.69247739 4.11283151 4.88938012 #> [337] 4.88053056 4.87168100 4.86283145 4.06858373 4.84513233 4.83628278 #> [343] 4.04203506 4.81858366 4.80973410 4.01548638 4.79203499 3.99778727 #> [349] 4.77433588 3.98008816 4.75663676 3.96238904 4.73893765 3.94468993 #> [355] 4.72123854 3.92699082 4.70353942 3.90929170 4.68584031 3.89159259 #> [361] 4.66814120 3.87389348 4.65044208 3.85619436 3.84734481 3.83849525 #> [367] 4.61504386 3.82079614 3.81194658 4.58849519 3.79424747 3.78539791 #> [373] 3.77654835 3.76769880 3.75884924 3.74999968 3.74115012 3.73230057 #> [379] 3.72345101 3.71460145 2.92035373 3.69690234 2.90265462 3.67920323 #> [385] 2.88495551 2.87610595 3.65265456 2.85840684 2.84955728 3.62610589 #> [391] 2.83185817 2.82300861 3.59955722 3.59070766 2.79645994 3.57300855 #> [397] 2.77876083 3.55530943 3.54645988 2.75221216 3.52876076 3.51991121 #> [403] 3.51106165 3.50221209 3.49336254 3.48451298 3.47566342 4.25221203 #> [409] 3.45796431 3.44911475 4.22566336 3.43141564 4.20796424 3.41371652 #> [415] 4.19026513 4.18141557 4.17256602 4.16371646 4.15486690 4.14601735 #> [421] 4.92256595 3.34292007 4.11946868 4.11061912 4.10176956 3.30752184 #> [427] 4.08407045 4.07522089 3.28097317 4.05752178 3.26327406 4.03982267 #> [433] 4.03097311 3.23672539 3.22787583 4.00442444 3.21017672 3.98672533 #> [439] 3.19247761 3.18362805 3.17477849 3.16592893 3.15707938 2.36283166 #> [445] 3.13938026 3.13053071 2.33628299 3.11283159 2.31858387 3.09513248 #> [451] 3.08628292 3.07743337 3.85398197 3.84513242 3.05088470 3.82743330 #> [457] 3.03318558 3.80973419 3.01548647 3.00663691 3.78318552 2.98893780 #> [463] 2.98008824 3.75663685 2.96238913 2.95353957 2.15929185 2.93584046 #> [469] 2.14159274 1.34734502 1.33849546 1.32964590 0.53539818 0.52654863 #> [475] 0.51769907 1.29424768 5.99778710 0.49115040 0.48230084 1.25884945 #> [481] 0.46460173 0.45575217 0.44690262 0.43805306 0.42920350 0.42035395 #> [487] 0.41150439 0.40265483 0.39380528 1.95575205 1.94690249 1.15265477 #> [493] 1.92920338 1.92035382 1.12610610 1.90265471 1.10840699 1.88495559 #> [499] 1.09070787 1.86725648 1.07300876 0.27876104 1.05530964 1.04646009 #> [505] 0.25221237 1.02876097 1.01991142 1.01106186 1.78761047 1.77876091 #> [511] 0.98451319 1.76106180 0.96681408 0.95796452 0.16371680 0.94026541 #> [517] 0.14601769 5.63495527 0.12831857 0.11946902 5.60840660 0.10176990 #> [523] 0.09292035 5.58185793 5.57300838 5.56415882 5.55530926 5.54645971 #> [529] 5.53761015 5.52876059 4.73451287 5.51106148 5.50221192 4.70796420 #> [535] 5.48451281 5.47566325 6.25221186 6.24336230 6.23451274 6.22566319 #> [541] 6.21681363 6.20796407 6.19911452 0.69247782 5.39601724 0.67477870 #> [547] 6.16371629 6.15486673 6.14601718 6.13716762 0.63053092 5.33407034 #> [553] 0.61283181 6.10176939 6.09291984 6.08407028 6.07522072 6.06637117 #> [559] 6.05752161 0.55088491 5.25442433 6.03097294 6.02212338 6.01327383 #> [565] 6.00442427 0.49778757 5.20132699 5.97787560 5.96902604 5.96017649 #> [571] 5.95132693 5.94247737 5.93362781 5.92477826 5.13053054 5.90707914 #> [577] 5.89822959 5.10398187 5.88053047 5.87168092 5.07743320 5.85398180 #> [583] 5.05973408 5.05088453 5.82743313 5.03318541 5.02433586 5.80088446 #> [589] 5.00663674 4.99778719 5.77433579 4.98008807 4.97123852 5.74778712 #> [595] 5.73893757 4.94468985 4.93584029 5.71238890 5.70353934 4.90929162 #> [601] 5.68584023 5.67699067 5.66814111 4.87389339 5.65044200 5.64159244 #> [607] 5.63274288 5.62389333 4.82964561 5.60619421 5.59734466 5.58849510 #> [613] 5.57964554 5.57079599 5.56194643 5.55309687 5.54424732 5.53539776 #> [619] 5.52654820 5.51769865 5.50884909 5.49999953 5.49114998 5.48230042 #> [625] 5.47345086 5.46460131 5.45575175 5.44690219 5.43805264 5.42920308 #> [631] 5.42035352 5.41150397 5.40265441 5.39380485 5.38495529 5.37610574 #> [637] 5.36725618 5.35840662 5.34955707 5.34070751 5.33185795 5.32300840 #> [643] 6.09955700 5.30530928 5.29645973 5.28761017 5.27876061 5.26991106 #> [649] 5.26106150 6.03761011 0.53097341 6.01991099 0.51327429 0.50442474 #> [655] 0.49557518 5.98451277 0.47787607 0.46902651 5.95796410 5.16371638 #> [661] 5.94026498 4.36061910 5.13716771 4.34291999 4.33407043 4.32522087 #> [667] 5.88716764 4.30752176 5.86946853 4.28982264 4.28097309 4.27212353 #> [673] 3.47787581 4.25442442 3.46017670 3.45132714 3.44247758 3.43362803 #> [679] 3.42477847 3.41592891 3.40707936 3.39822980 3.38938024 2.59513252 #> [685] 3.37168113 2.57743341 2.56858385 2.55973430 2.55088474 2.54203518 #> [691] 2.53318563 1.73893791 2.51548651 2.50663696 1.71238924 2.48893784 #> [697] 1.69469012 2.47123873 1.67699101 2.45353961 1.65929189 1.65044234 #> [703] 2.42699094 1.63274322 1.62389367 3.18584044 4.74778721 4.73893765 #> [709] 4.73008809 3.93584037 coo_oscillo(shapes[4], 'efourier')  #> # A tibble: 710 × 2 #>       dx    dy #>    <dbl> <dbl> #>  1     0     0 #>  2     0    -1 #>  3    -1    -2 #>  4    -2    -3 #>  5    -3    -4 #>  6    -3    -5 #>  7    -4    -6 #>  8    -5    -6 #>  9    -4    -6 #> 10    -3    -6 #> # ℹ 700 more rows coo_oscillo(shapes[4], 'rfourier')  #>   [1]  34.28884  35.22856  35.85539  36.52625  37.23875  38.21062  38.96933 #>   [8]  38.77938  38.96933  39.18390  39.42267  39.68521  39.97105  41.22840 #>  [15]  41.55177  41.89653  42.26213  43.56815  43.96536  45.28850  46.61700 #>  [22]  47.52337  48.85250  49.75835  50.66774  51.58049  52.10667  53.03236 #>  [29]  53.60027  53.25618  53.87744  53.57247  53.28452  53.01388  52.76080 #>  [36]  52.52555  52.30835  52.10945  51.92905  52.75589  52.61573  52.49424 #>  [43]  52.39157  52.30782  52.24307  52.19741  52.17088  52.16351  52.17531 #>  [50]  52.20626  52.25633  52.32548  52.41361  52.52064  52.64645  52.79090 #>  [57]  52.95385  52.15376  53.33453  52.57829  52.81768  53.07484  53.34950 #>  [64]  53.64141  53.95027  54.27580  54.61770  54.97567  55.34939  55.73855 #>  [71]  56.14283  56.56190  56.99543  57.44311  57.90459  58.37955  58.86768 #>  [78]  59.36863  59.88210  60.40775  60.94528  61.49438  62.05473  62.62604 #>  [85]  63.20800  63.80033  64.40274  65.01495  65.63669  65.49870  66.14613 #>  [92]  66.80226  67.46682  68.21363  68.96685  69.72627  71.13586  71.90019 #>  [99]  72.67024  73.44584  74.22680  75.01296  75.20000  76.00241  76.80946 #> [106]  77.04407  77.30385  78.13586  78.43027  78.74899  78.23153  78.58924 #> [113]  78.97065  78.49288  78.91279  78.46017  78.91827  78.49116  78.07453 #> [120]  78.58580  78.19525  77.81559  78.37960  78.02647  77.68461  77.35417 #> [127]  77.03530  77.68226  77.39058  77.11077  76.84296  76.58726  76.34381 #> [134]  76.11273  75.89411  75.68808  76.47732  76.29908  76.13356  75.98084 #> [141]  75.84100  75.71411  75.60023  74.50394  74.41509  74.33959  74.27748 #> [148]  74.22879  74.19355  74.17177  74.16347  73.16873  73.18765  73.22022 #> [155]  73.26643  73.32625  73.39964  72.49103  72.59283  72.70824  72.83719 #> [162]  72.97963  73.13546  73.30460  73.48696  73.68244  73.89094  74.11235 #> [169]  74.34655  75.56127  76.78281  77.74913  78.46964  79.20886  78.98907 #> [176]  79.76109  79.56797  80.37176  80.20506  81.03955  80.89895  80.77048 #> [183]  81.64820  81.54545  81.45484  82.37383  82.30844  82.25515  83.21339 #> [190]  83.18473  83.16808  83.16346  84.17077  84.18996  84.22102  84.26394 #> [197]  85.31688  85.38267  84.46363  85.54918  85.64983  85.76202  85.88571 #> [204]  86.02085  86.16738  86.32525  86.49439  86.67474  86.86623  87.06878 #> [211]  87.28232  87.50677  87.74204  87.98805  88.24470  88.51191  88.78958 #> [218]  89.07761  89.37590  88.73531  89.05721  89.38914  89.73098  90.08263 #> [225]  89.51415  89.88890  90.27317  89.75049  90.15753  90.57379  90.09726 #> [232]  90.53589  90.09246  90.55320  90.14314  90.62570  90.24922  89.89341 #> [239]  90.41049  90.08863  89.78789  89.50849  89.25062  89.01448  88.80024 #> [246]  88.60805  87.81833  87.65822  86.88289  86.75564  85.99543  85.90180 #> [253]  85.15746  84.41839  84.37043  83.64833  82.93200  82.22159  81.51725 #> [260]  80.81915  80.12746  79.44232  78.76392  78.09244  77.42804  76.77093 #> [267]  76.12127  74.71205  74.07134  73.43866  72.03249  71.40975  70.79566 #> [274]  69.39357  68.79056  68.19688  66.80013  65.40412  64.82571  64.25765 #> [281]  63.70023  62.31502  61.77244  62.09459  60.72216  60.21507  59.72041 #> [288]  59.23851  58.76967  59.20961  57.87245  58.35344  57.94651  57.55407 #> [295]  57.17643  56.81388  57.40838  56.13523  56.77207  56.47780  56.19977 #> [302]  55.93825  55.69346  55.46561  55.25493  56.04473  55.87204  54.72776 #> [309]  54.58755  54.46535  55.35682  55.27252  55.20620  55.15793  55.12777 #> [316]  55.11574  55.12184  55.14609  55.18844  55.24887  55.32730  55.42367 #> [323]  55.53789  55.66983  55.81938  55.98640  56.17072  56.37218  56.59060 #> [330]  56.82578  57.07752  56.38515  56.67414  57.92981  57.30013  57.63660 #> [337]  57.98837  58.35516  58.73668  58.21890  58.63543  59.06595  58.61935 #> [344]  59.08386  59.56152  59.18629  59.69666  59.37283  59.91499  59.64267 #> [351]  60.21563  59.99470  60.59734  60.42747  61.05860  60.93927  61.59763 #> [358]  61.52813  62.21241  62.19185  62.90071  62.92807  63.66015  63.73427 #> [365]  63.83964  63.97610  64.75812  64.93887  65.14982  65.96342  66.21642 #> [372]  66.49855  66.80942  67.14865  67.51580  67.91043  68.33204  68.78016 #> [379]  69.25426  69.75382  69.35679  69.89854  69.53111  70.11432  69.77669 #> [386]  69.45182  70.09278  69.79804  69.51644  70.21380  69.96247  69.72457 #> [393]  70.47665  71.24886  71.05751  71.86523  71.70342  72.54532  73.40480 #> [400]  73.28734  74.17868  75.08608  76.00895  76.94676  77.89895  78.86500 #> [407]  79.84441  80.84432  81.83670  82.84134  83.84129  84.85755  85.85730 #> [414]  86.88451  87.88397  88.88344  89.88292  90.88241  91.88191  92.88142 #> [421]  93.85554  94.88048  95.88002  96.87957  97.87913  98.91293  99.91216 #> [428] 100.91141 101.95369 102.95256 104.00323 105.00164 106.00008 107.05821 #> [435] 108.12447 109.12184 110.19536 111.19213 112.27258 113.36038 114.45531 #> [442] 115.55717 116.66577 116.78900 117.91146 119.04014 119.18609 120.32775 #> [449] 120.48874 121.64283 122.80236 123.96718 124.95013 125.93335 127.10095 #> [456] 128.08327 129.25466 130.23609 131.41112 132.59082 133.57020 134.75326 #> [463] 135.94073 136.91806 138.10864 139.30341 139.52852 140.73255 140.96957 #> [470] 140.24449 139.52997 138.82618 137.86237 136.89909 135.93634 135.25082 #> [477] 134.01247 133.05137 132.09086 131.41572 130.45849 129.50191 128.54599 #> [484] 127.59074 126.63619 125.68234 124.72922 123.77683 122.82521 123.13732 #> [491] 123.45675 122.84000 123.17644 123.52005 122.93616 123.29667 122.73616 #> [498] 123.11350 122.57662 122.97072 122.45772 121.54514 121.05088 120.57119 #> [505] 119.66929 119.20920 118.76418 118.33438 118.80149 119.27516 118.88086 #> [512] 119.37097 119.00220 118.64915 117.79197 117.46081 116.61205 115.23423 #> [519] 114.38642 113.54110 112.16122 111.31696 110.47530 109.09331 107.71215 #> [526] 106.33186 104.95248 103.57404 102.19657 100.82012 100.29919  98.92667 #> [533]  97.55533  97.04779  95.68088  94.31537  93.44900  92.58533  91.72442 #> [540]  90.86637  90.01124  89.15913  88.31012  88.00439  86.62177  86.33323 #> [547]  85.50294  84.67632  83.85348  83.03453  82.80597  81.40876  81.20026 #> [554]  80.40404  79.61241  78.82552  78.04351  77.26653  76.49472  76.37761 #> [561]  74.96730  74.21201  73.46257  72.71916  71.98197  71.94094  70.52699 #> [568]  69.80962  69.09928  68.39618  67.70055  67.01262  66.33263  65.66083 #> [575]  64.24875  63.58639  62.93294  61.52327  60.88054  60.24755  58.84152 #> [582]  58.22071  56.81733  55.41450  54.80961  53.41022  52.01162  51.42505 #> [589]  50.03093  48.63796  48.07263  46.68550  45.30004  44.75958  44.23513 #> [596]  42.86379  41.49533  41.00231  40.52797  39.18002  38.73500  38.31093 #> [603]  37.90850  36.60071  36.23449  35.89241  35.57516  35.28341  34.05109 #> [610]  33.80538  33.58765  33.39846  33.23829  33.10756  33.00662  32.93576 #> [617]  32.89515  32.88491  32.90508  32.95559  33.03631  33.14701  33.28740 #> [624]  33.45711  33.65568  33.88261  34.13735  34.41925  34.72768  35.06193 #> [631]  35.42126  35.80492  36.21214  36.64213  37.09410  37.56726  38.06082 #> [638]  38.57399  39.10600  39.65610  40.22354  40.80759  42.20611  42.80984 #> [645]  43.42821  44.06059  44.70640  45.36507  46.03603  47.44904  48.18901 #> [652]  49.60118  50.34924  51.10592  51.87084  53.27926  54.05043  54.82898 #> [659]  56.23445  56.86510  58.27294  58.15749  58.81854  58.75524  58.72594 #> [666]  58.73069  60.14474  60.18261  61.59580  61.66523  61.76697  61.90086 #> [673]  61.27762  61.46141  60.86654  60.28239  59.70928  59.14752  58.59744 #> [680]  58.05937  57.53366  57.02063  56.52065  55.15875  54.67832  53.32563 #> [687]  51.97622  50.63034  49.28829  47.95039  46.61700  45.71452  44.38155 #> [694]  43.05376  42.14616  40.81915  39.91086  38.58472  37.67564  36.35049 #> [701]  35.44054  34.53556  33.20556  32.29988  31.39993  30.97074  31.88281 #> [708]  32.80000  33.72190  34.28884 coo_oscillo(shapes[4], 'tfourier')  #>   [1] 0.00000000 4.70353942 3.90929170 3.90044215 3.89159259 4.66814120 #>   [7] 3.87389348 3.07964576 6.21238885 6.20353930 6.19468974 6.18584018 #>  [13] 6.17699063 5.38274291 6.15929151 6.15044196 6.14159240 5.34734468 #>  [19] 6.12389329 5.32964557 5.32079601 4.52654829 5.30309689 4.50884917 #>  [25] 4.49999962 4.49115006 3.69690234 4.47345095 3.67920323 2.88495551 #>  [31] 3.66150411 2.86725639 2.85840684 2.84955728 2.84070772 2.83185817 #>  [37] 2.82300861 2.81415905 2.80530950 3.58185810 2.78761038 2.77876083 #>  [43] 2.76991127 2.76106171 2.75221216 2.74336260 2.73451304 2.72566349 #>  [49] 2.71681393 2.70796437 2.69911482 2.69026526 2.68141570 2.67256614 #>  [55] 2.66371659 2.65486703 2.64601747 1.85176975 3.41371652 1.83407064 #>  [61] 2.61061925 2.60176969 2.59292013 2.58407058 2.57522102 2.56637146 #>  [67] 2.55752191 2.54867235 2.53982279 2.53097324 2.52212368 2.51327412 #>  [73] 2.50442457 2.49557501 2.48672545 2.47787590 2.46902634 2.46017678 #>  [79] 2.45132723 2.44247767 2.43362811 2.42477856 2.41592900 2.40707944 #>  [85] 2.39822988 2.38938033 2.38053077 2.37168121 2.36283166 1.56858394 #>  [91] 2.34513254 2.33628299 2.32743343 3.88938020 3.88053064 3.87168109 #>  [97] 3.07743337 3.85398197 3.84513242 3.83628286 3.82743330 3.81858375 #> [103] 4.59513235 3.80088463 3.79203508 4.56858368 4.55973413 3.76548641 #> [109] 4.54203501 4.53318546 5.30973406 4.51548634 4.50663679 5.28318539 #> [115] 4.48893767 5.26548628 4.47123856 5.24778717 5.23893761 4.44468989 #> [121] 5.22123849 5.21238894 4.41814122 5.19468982 5.18584027 5.17699071 #> [127] 5.16814115 4.37389343 5.15044204 5.14159248 5.13274293 5.12389337 #> [133] 5.11504381 5.10619426 5.09734470 5.08849514 4.29424742 5.07079603 #> [139] 5.06194647 5.05309692 5.04424736 5.03539780 5.02654825 5.80309685 #> [145] 5.00884913 4.99999958 4.99115002 4.98230046 4.97345091 4.96460135 #> [151] 4.95575179 5.73230040 4.93805268 4.92920312 4.92035356 4.91150401 #> [157] 4.90265445 5.67920306 4.88495534 4.87610578 4.86725622 4.85840667 #> [163] 4.84955711 4.84070755 4.83185800 4.82300844 4.81415888 4.80530933 #> [169] 4.79645977 4.00221205 3.99336249 3.19911477 2.40486705 2.39601750 #> [175] 1.60176978 2.37831838 1.58407066 2.36061927 1.56637155 2.34292016 #> [181] 1.54867243 1.53982288 2.31637148 1.52212376 1.51327421 2.28982281 #> [187] 1.49557509 1.48672554 2.26327414 1.46902642 1.46017687 1.45132731 #> [193] 2.22787592 1.43362820 1.42477864 1.41592908 2.19247769 1.39822997 #> [199] 0.60398225 2.16592902 1.37168130 1.36283174 1.35398219 1.34513263 #> [205] 1.33628307 1.32743352 1.31858396 1.30973440 1.30088485 1.29203529 #> [211] 1.28318573 1.27433617 1.26548662 1.25663706 1.24778750 1.23893795 #> [217] 1.23008839 1.22123883 1.21238928 0.41814156 1.19469016 1.18584061 #> [223] 1.17699105 1.16814149 0.37389377 1.15044238 1.14159282 0.34734510 #> [229] 1.12389371 1.11504415 0.32079643 1.09734504 0.30309732 1.07964593 #> [235] 0.28539821 1.06194681 0.26769909 0.25884954 1.03539814 0.24115042 #> [241] 0.23230087 0.22345131 0.21460175 0.20575219 0.19690264 0.18805308 #> [247] 5.67699067 0.17035397 5.65929155 0.15265485 5.64159244 0.13495574 #> [253] 5.62389333 5.61504377 0.10840707 5.59734466 5.58849510 5.57964554 #> [259] 5.57079599 5.56194643 5.55309687 5.54424732 5.53539776 5.52654820 #> [265] 5.51769865 5.50884909 5.49999953 4.70575181 5.48230042 5.47345086 #> [271] 4.67920314 5.45575175 5.44690219 4.65265447 5.42920308 5.42035352 #> [277] 4.62610580 4.61725625 5.39380485 5.38495529 5.37610574 4.58185802 #> [283] 5.35840662 6.13495523 4.55530935 5.33185795 5.32300840 5.31415884 #> [289] 5.30530928 6.08185789 4.50221201 6.06415878 5.26991106 5.26106150 #> [295] 5.25221194 5.24336239 6.01991099 4.44026511 6.00221188 5.20796416 #> [301] 5.19911460 5.19026505 5.18141549 5.17256593 5.16371638 5.94026498 #> [307] 5.14601726 4.35176954 5.12831815 5.11946859 5.89601720 5.10176948 #> [313] 5.09291992 5.08407036 5.07522081 5.06637125 5.05752169 5.04867214 #> [319] 5.03982258 5.03097302 5.02212347 5.01327391 5.00442435 4.99557480 #> [325] 4.98672524 4.97787568 4.96902613 4.96017657 4.95132701 4.94247746 #> [331] 4.93362790 4.13938018 4.91592879 5.69247739 4.11283151 4.88938012 #> [337] 4.88053056 4.87168100 4.86283145 4.06858373 4.84513233 4.83628278 #> [343] 4.04203506 4.81858366 4.80973410 4.01548638 4.79203499 3.99778727 #> [349] 4.77433588 3.98008816 4.75663676 3.96238904 4.73893765 3.94468993 #> [355] 4.72123854 3.92699082 4.70353942 3.90929170 4.68584031 3.89159259 #> [361] 4.66814120 3.87389348 4.65044208 3.85619436 3.84734481 3.83849525 #> [367] 4.61504386 3.82079614 3.81194658 4.58849519 3.79424747 3.78539791 #> [373] 3.77654835 3.76769880 3.75884924 3.74999968 3.74115012 3.73230057 #> [379] 3.72345101 3.71460145 2.92035373 3.69690234 2.90265462 3.67920323 #> [385] 2.88495551 2.87610595 3.65265456 2.85840684 2.84955728 3.62610589 #> [391] 2.83185817 2.82300861 3.59955722 3.59070766 2.79645994 3.57300855 #> [397] 2.77876083 3.55530943 3.54645988 2.75221216 3.52876076 3.51991121 #> [403] 3.51106165 3.50221209 3.49336254 3.48451298 3.47566342 4.25221203 #> [409] 3.45796431 3.44911475 4.22566336 3.43141564 4.20796424 3.41371652 #> [415] 4.19026513 4.18141557 4.17256602 4.16371646 4.15486690 4.14601735 #> [421] 4.92256595 3.34292007 4.11946868 4.11061912 4.10176956 3.30752184 #> [427] 4.08407045 4.07522089 3.28097317 4.05752178 3.26327406 4.03982267 #> [433] 4.03097311 3.23672539 3.22787583 4.00442444 3.21017672 3.98672533 #> [439] 3.19247761 3.18362805 3.17477849 3.16592893 3.15707938 2.36283166 #> [445] 3.13938026 3.13053071 2.33628299 3.11283159 2.31858387 3.09513248 #> [451] 3.08628292 3.07743337 3.85398197 3.84513242 3.05088470 3.82743330 #> [457] 3.03318558 3.80973419 3.01548647 3.00663691 3.78318552 2.98893780 #> [463] 2.98008824 3.75663685 2.96238913 2.95353957 2.15929185 2.93584046 #> [469] 2.14159274 1.34734502 1.33849546 1.32964590 0.53539818 0.52654863 #> [475] 0.51769907 1.29424768 5.99778710 0.49115040 0.48230084 1.25884945 #> [481] 0.46460173 0.45575217 0.44690262 0.43805306 0.42920350 0.42035395 #> [487] 0.41150439 0.40265483 0.39380528 1.95575205 1.94690249 1.15265477 #> [493] 1.92920338 1.92035382 1.12610610 1.90265471 1.10840699 1.88495559 #> [499] 1.09070787 1.86725648 1.07300876 0.27876104 1.05530964 1.04646009 #> [505] 0.25221237 1.02876097 1.01991142 1.01106186 1.78761047 1.77876091 #> [511] 0.98451319 1.76106180 0.96681408 0.95796452 0.16371680 0.94026541 #> [517] 0.14601769 5.63495527 0.12831857 0.11946902 5.60840660 0.10176990 #> [523] 0.09292035 5.58185793 5.57300838 5.56415882 5.55530926 5.54645971 #> [529] 5.53761015 5.52876059 4.73451287 5.51106148 5.50221192 4.70796420 #> [535] 5.48451281 5.47566325 6.25221186 6.24336230 6.23451274 6.22566319 #> [541] 6.21681363 6.20796407 6.19911452 0.69247782 5.39601724 0.67477870 #> [547] 6.16371629 6.15486673 6.14601718 6.13716762 0.63053092 5.33407034 #> [553] 0.61283181 6.10176939 6.09291984 6.08407028 6.07522072 6.06637117 #> [559] 6.05752161 0.55088491 5.25442433 6.03097294 6.02212338 6.01327383 #> [565] 6.00442427 0.49778757 5.20132699 5.97787560 5.96902604 5.96017649 #> [571] 5.95132693 5.94247737 5.93362781 5.92477826 5.13053054 5.90707914 #> [577] 5.89822959 5.10398187 5.88053047 5.87168092 5.07743320 5.85398180 #> [583] 5.05973408 5.05088453 5.82743313 5.03318541 5.02433586 5.80088446 #> [589] 5.00663674 4.99778719 5.77433579 4.98008807 4.97123852 5.74778712 #> [595] 5.73893757 4.94468985 4.93584029 5.71238890 5.70353934 4.90929162 #> [601] 5.68584023 5.67699067 5.66814111 4.87389339 5.65044200 5.64159244 #> [607] 5.63274288 5.62389333 4.82964561 5.60619421 5.59734466 5.58849510 #> [613] 5.57964554 5.57079599 5.56194643 5.55309687 5.54424732 5.53539776 #> [619] 5.52654820 5.51769865 5.50884909 5.49999953 5.49114998 5.48230042 #> [625] 5.47345086 5.46460131 5.45575175 5.44690219 5.43805264 5.42920308 #> [631] 5.42035352 5.41150397 5.40265441 5.39380485 5.38495529 5.37610574 #> [637] 5.36725618 5.35840662 5.34955707 5.34070751 5.33185795 5.32300840 #> [643] 6.09955700 5.30530928 5.29645973 5.28761017 5.27876061 5.26991106 #> [649] 5.26106150 6.03761011 0.53097341 6.01991099 0.51327429 0.50442474 #> [655] 0.49557518 5.98451277 0.47787607 0.46902651 5.95796410 5.16371638 #> [661] 5.94026498 4.36061910 5.13716771 4.34291999 4.33407043 4.32522087 #> [667] 5.88716764 4.30752176 5.86946853 4.28982264 4.28097309 4.27212353 #> [673] 3.47787581 4.25442442 3.46017670 3.45132714 3.44247758 3.43362803 #> [679] 3.42477847 3.41592891 3.40707936 3.39822980 3.38938024 2.59513252 #> [685] 3.37168113 2.57743341 2.56858385 2.55973430 2.55088474 2.54203518 #> [691] 2.53318563 1.73893791 2.51548651 2.50663696 1.71238924 2.48893784 #> [697] 1.69469012 2.47123873 1.67699101 2.45353961 1.65929189 1.65044234 #> [703] 2.42699094 1.63274322 1.62389367 3.18584044 4.74778721 4.73893765 #> [709] 4.73008809 3.93584037 #tfourier is prone to high-frequency noise but smoothing can help coo_oscillo(coo_smooth(shapes[4], 10), 'tfourier')  #>   [1] 0.000000000 6.210281146 6.150339598 6.110870956 6.093957661 6.111051488 #>   [7] 6.210841936 0.294826636 1.163080415 1.662325460 1.784906858 1.788459018 #>  [13] 1.754364939 1.713694996 1.673686879 1.624391221 1.550688278 1.445544249 #>  [19] 1.313650160 1.165054644 1.007403085 0.842241873 0.665533492 0.472501809 #>  [25] 0.264958204 0.052746323 6.128257112 5.926985109 5.730762152 5.541624953 #>  [31] 5.365867883 5.211467073 5.086389730 4.997097511 4.946510695 4.933000642 #>  [37] 4.949742414 4.982955751 5.012460904 5.019029243 4.994585130 4.946466089 #>  [43] 4.891849750 4.846153200 4.815140738 4.796127011 4.783744124 4.773987623 #>  [49] 4.764958775 4.755946140 4.746333644 4.734694607 4.718307666 4.693917249 #>  [55] 4.660156421 4.620031964 4.580677444 4.549991613 4.533287434 4.532292499 #>  [61] 4.545279217 4.566934623 4.589359967 4.605421681 4.612112985 4.610800812 #>  [67] 4.604740736 4.596653165 4.587948567 4.579116176 4.570267573 4.561418016 #>  [73] 4.552568459 4.543718902 4.534869346 4.526019789 4.517170232 4.508320675 #>  [79] 4.499471119 4.490620608 4.481752932 4.472741250 4.462985703 4.450603765 #>  [85] 4.431608816 4.400770190 4.356068458 4.305424656 4.269520989 4.277135048 #>  [91] 4.360538895 4.555194318 4.871254402 5.215038283 5.459664874 5.595213464 #>  [97] 5.672103286 5.734294873 5.805171782 5.888871809 5.977816468 6.062603219 #> [103] 6.138686968 6.207147740 6.271367481 0.051070155 0.115529390 0.185002608 #> [109] 0.260266970 0.335648438 0.401580810 0.452499558 0.490752929 0.523002507 #> [115] 0.554570991 0.586753235 0.617247615 0.642073315 0.658350204 0.667047287 #> [121] 0.673606828 0.685132162 0.705052388 0.728633438 0.744734811 0.745801344 #> [127] 0.737404131 0.735346616 0.751874045 0.784845872 0.819132998 0.837128874 #> [133] 0.828297388 0.792765360 0.741689130 0.694623805 0.671233403 0.681431950 #> [139] 0.721943628 0.781107907 0.846153540 0.905318763 0.945847189 0.956185340 #> [145] 0.933520844 0.889053044 0.844590615 0.821054584 0.826911372 0.853852015 #> [151] 0.881659563 0.890921047 0.876241385 0.849987814 0.832106250 0.832287770 #> [157] 0.840824651 0.837648250 0.809803659 0.760803413 0.706008449 0.660112883 #> [163] 0.628012512 0.604377441 0.577183265 0.530156087 0.444950680 0.304766283 #> [169] 0.096072698 6.087754031 5.700461201 5.247258666 4.831451596 4.527523880 #> [175] 4.329498082 4.206491595 4.131062373 4.081089105 4.040449748 4.001478231 #> [181] 3.964579062 3.933656583 3.910945742 3.895211705 3.883184677 3.871266154 #> [187] 3.856146033 3.835553787 3.810038382 3.783889856 3.762402266 3.746921155 #> [193] 3.733416217 3.716285917 3.692075007 3.659767668 3.620829826 3.580502872 #> [199] 3.545836696 3.519458457 3.496862828 3.471910466 3.443688053 3.416538164 #> [205] 3.394773009 3.379129831 3.367634796 3.358040420 3.349046858 3.340179182 #> [211] 3.331310551 3.322298870 3.312543323 3.300160435 3.281145755 3.250115199 #> [217] 3.204257486 3.148748834 3.097182990 3.062798448 3.047139365 3.037836547 #> [223] 3.019070901 2.985270415 2.943990251 2.906371786 2.877162870 2.853033116 #> [229] 2.827294741 2.795605917 2.758775379 2.721017676 2.685491706 2.651638374 #> [235] 2.616756113 2.579249488 2.539266926 2.496642604 2.450285176 2.400599692 #> [241] 2.350909726 2.304563353 2.260820580 2.214420252 2.159471987 2.094718182 #> [247] 2.026085459 1.963248210 1.911995985 1.870137442 1.831022284 1.789478413 #> [253] 1.743510198 1.691608789 1.631150303 1.561569503 1.488650289 1.423172645 #> [259] 1.373787829 1.341690659 1.321606928 1.305654435 1.285571657 1.253491627 #> [265] 1.204250793 1.139519444 1.069263427 1.006648871 0.960120128 0.930025733 #> [271] 0.911026560 0.895946158 0.877978420 0.852313020 0.819389902 0.787791876 #> [277] 0.771357046 0.780349343 0.814054366 0.861526357 0.910083692 0.952417749 #> [283] 0.985608592 1.008800661 1.025873144 1.046448905 1.078707071 1.120695586 #> [289] 1.160889837 1.187477232 1.195902397 1.189182194 1.174564489 1.160112567 #> [295] 1.151279870 1.148175732 1.145840851 1.137610074 1.119048880 1.090947700 #> [301] 1.060659306 1.039140171 1.032285551 1.032745212 1.022979818 0.991476068 #> [307] 0.948086298 0.920008639 0.927148777 0.961284686 0.992101349 0.993873732 #> [313] 0.963915071 0.918406903 0.876060289 0.845934321 0.827081727 0.814716958 #> [319] 0.804962365 0.795950684 0.787083007 0.778231543 0.769363866 0.760353139 #> [325] 0.750614758 0.738375872 0.720105828 0.691716549 0.652608187 0.609790908 #> [331] 0.575970900 0.560292070 0.560253479 0.563707517 0.558656949 0.539780722 #> [337] 0.506825021 0.461757288 0.409794503 0.359637805 0.318856196 0.288830724 #> [343] 0.264555711 0.238816280 0.207252588 0.171067996 0.135611940 0.106165474 #> [349] 0.084689231 0.069773360 0.058688066 0.049228656 0.040263124 0.031399834 #> [355] 0.022548751 0.013684699 0.004705453 6.278316778 6.266646228 6.249714189 #> [361] 6.223378486 6.185711060 6.140814149 6.098429160 6.068030924 6.052616099 #> [367] 6.047041546 6.041070135 6.024843229 5.993927011 5.951419573 5.905757611 #> [373] 5.865459482 5.834682028 5.812125954 5.792458593 5.768502704 5.733457862 #> [379] 5.683206435 5.618467189 5.545329001 5.472432994 5.406413214 5.350205499 #> [385] 5.304888721 5.271062496 5.248378331 5.235801685 5.233541784 5.243796693 #> [391] 5.267701445 5.300728508 5.332712334 5.354453431 5.364377855 5.368534497 #> [397] 5.374741784 5.387390003 5.407383871 5.434201642 5.465689493 5.497519401 #> [403] 5.525769644 5.550355985 5.574942842 5.603203498 5.635133193 5.667217292 #> [409] 5.696503292 5.724011803 5.754170455 5.792492400 5.844118816 5.911952780 #> [415] 5.993258931 6.078066848 6.152989261 6.206858374 6.232226877 6.224754148 #> [421] 6.185255417 6.122244570 6.049372258 5.978525675 5.915552103 5.861307526 #> [427] 5.814628320 5.774712015 5.742004258 5.716275508 5.693379276 5.666055366 #> [433] 5.630481863 5.590829982 5.554144579 5.520973706 5.483347333 5.432738889 #> [439] 5.368764431 5.298373235 5.228480361 5.162317644 5.101305142 5.047172969 #> [445] 5.001770639 4.967325726 4.949028929 4.955822231 4.995559376 5.068649008 #> [451] 5.166128839 5.271169312 5.361943901 5.418816242 5.434261089 5.415787999 #> [457] 5.378749340 5.337253926 5.300066779 5.270326801 5.245798899 5.219095373 #> [463] 5.178948961 5.113005498 5.010509821 4.861906973 4.655872417 4.383607566 #> [469] 4.061035875 3.739006861 3.460013884 3.228975398 3.035724811 2.875726521 #> [475] 2.751418620 2.667347672 2.626605417 2.625083548 2.645200476 2.660136888 #> [481] 2.649921973 2.613646664 2.566698627 2.528381069 2.513356521 2.534150830 #> [487] 2.608723363 2.760815486 2.995303110 3.253844542 3.450019278 3.556829435 #> [493] 3.594254480 3.588553531 3.560325237 3.523018039 3.480988947 3.429095667 #> [499] 3.357730619 3.262973502 3.155419447 3.057566270 2.990178713 2.963327724 #> [505] 2.978269071 3.031263380 3.113254441 3.206490718 3.283579186 3.315652213 #> [511] 3.286439739 3.198490398 3.065780988 2.901072469 2.710327869 2.499825577 #> [517] 2.288736611 2.106853050 1.972716007 1.880608795 1.808217671 1.732016385 #> [523] 1.641441083 1.543848642 1.454766713 1.383471012 1.328109195 1.280445960 #> [529] 1.233298003 1.186051865 1.145835795 1.124395250 1.133998381 1.185203040 #> [535] 1.284655334 1.429095439 1.597639355 1.755997591 1.877909670 1.959627909 #> [541] 2.012852441 2.050062384 2.076448107 2.091254469 2.093166224 2.083874267 #> [547] 2.068528701 2.053935597 2.045086040 2.041980966 2.039645151 2.031397576 #> [553] 2.012695022 1.983859410 1.950961917 1.922825350 1.903874767 1.888886160 #> [559] 1.867115865 1.834104119 1.799091522 1.778085405 1.777842081 1.787473253 #> [565] 1.787246136 1.766366858 1.731953827 1.700820006 1.683021524 1.673232227 #> [571] 1.656126033 1.618934077 1.560828846 1.493152222 1.431106120 1.383899161 #> [577] 1.350760265 1.323321861 1.290847550 1.246070449 1.189727078 1.130361772 #> [583] 1.078468381 1.040047045 1.014823673 0.998771530 0.987568410 0.978706955 #> [589] 0.972097548 0.969825211 0.974911598 0.988572657 1.007325669 1.023813218 #> [595] 1.033242798 1.039315778 1.051423155 1.075752154 1.109940476 1.145106149 #> [601] 1.172013529 1.186848625 1.193363408 1.198926850 1.206369621 1.210402157 #> [607] 1.204972412 1.194030025 1.191273604 1.207820260 1.241670290 1.279478888 #> [613] 1.307637488 1.320968930 1.322284497 1.316968271 1.309024705 1.300337273 #> [619] 1.291505836 1.282657232 1.273807676 1.264958119 1.256108562 1.247259005 #> [625] 1.238409449 1.229559892 1.220710335 1.211860778 1.203011222 1.194161665 #> [631] 1.185312108 1.176462551 1.167613948 1.158782511 1.150095079 1.142151512 #> [637] 1.136835287 1.138149900 1.151463248 1.179461633 1.216397766 1.246996075 #> [643] 1.254805029 1.235032721 1.201996315 1.185517450 1.218031010 1.321091442 #> [649] 1.494393247 1.707858148 1.913968285 2.077528885 2.185390609 2.236504708 #> [655] 2.234154703 2.181616267 2.077397918 1.913965611 1.684446939 1.396172930 #> [661] 1.083379564 0.801165397 0.594838371 0.479858466 0.448502322 0.476558403 #> [667] 0.519940898 0.523261974 0.451098963 0.310029503 0.136270603 6.245725890 #> [673] 6.083883304 5.933308298 5.794794776 5.675631097 5.583900424 5.519806626 #> [679] 5.472922363 5.426039551 5.361978088 5.270595236 5.153649901 5.024269044 #> [685] 4.899718114 4.792550346 4.706581487 4.638154755 4.579941168 4.525357287 #> [691] 4.471842191 4.420780288 4.374056983 4.331365078 4.291374762 4.253868124 #> [697] 4.218994007 4.185218958 4.150165899 4.114424239 4.084166694 4.070249157 #> [703] 4.087829504 4.167359978 4.411768752 5.183594717 6.047475358 0.033827928 #> [709] 0.090954159 0.064865507"},{"path":"http://momx.github.io/Momocs/reference/coo_perim.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates perimeter and variations — coo_perim","title":"Calculates perimeter and variations — coo_perim","text":"coo_perim calculates perimeter; coo_perimpts calculates euclidean distance every points shape; coo_perimcum calculates cumulative sum.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_perim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates perimeter and variations — coo_perim","text":"","code":"coo_perimpts(coo)  # S3 method for default coo_perimpts(coo)  # S3 method for Coo coo_perimpts(coo)  coo_perimcum(coo)  # S3 method for default coo_perimcum(coo)  # S3 method for Coo coo_perimcum(coo)  coo_perim(coo)  # S3 method for default coo_perim(coo)  # S3 method for Coo coo_perim(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_perim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates perimeter and variations — coo_perim","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_perim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates perimeter and variations — coo_perim","text":"numeric distance every point list .","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_perim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates perimeter and variations — coo_perim","text":"","code":"# for speed sake b1 <- coo_sample(bot[1], 12) b5 <- bot %>% slice(1:5) %>% coo_sample(12)  # coo_perim coo_perim(b1) #> [1] 2140.62 coo_perim(b5) #>      brahma       caney      chimay      corona deusventrue  #>    2140.620    1942.307    1354.083    1555.883    1768.427   # coo_perimpts coo_perimpts(b1) #>  [1] 201.6829 212.0424 168.6001 198.8291 189.3198 221.2261 190.0026 206.7293 #>  [9] 192.2134 137.2079 222.7667 b5 %>% coo_perimpts() #> $brahma #>  [1] 201.6829 212.0424 168.6001 198.8291 189.3198 221.2261 190.0026 206.7293 #>  [9] 192.2134 137.2079 222.7667 #>  #> $caney #>  [1] 192.0000 181.0000 161.9784 175.0457 192.1276 171.0000 186.1317 191.7707 #>  [9] 175.3454 134.0149 181.8928 #>  #> $chimay #>  [1] 131.03435 123.06502 113.22544 128.99612 119.94165 131.03435 140.24621 #>  [8] 129.44883 118.37652  97.65244 121.06197 #>  #> $corona #>  [1] 155.0000 143.0315 131.2288 127.6323 145.0034 155.0000 154.9322 140.3567 #>  [9] 151.3275 112.9292 139.4417 #>  #> $deusventrue #>  [1] 175.1713 163.3065 147.1224 151.2415 175.5591 162.3730 182.3623 171.8430 #>  [9] 157.6230 131.8218 150.0033 #>   # coo_perimcum b1 %>% coo_perimcum() #>  [1]    0.0000  201.6829  413.7254  582.3255  781.1546  970.4744 1191.7005 #>  [8] 1381.7032 1588.4324 1780.6459 1917.8537 2140.6204 b5 %>% coo_perimcum() #> $brahma #>  [1]    0.0000  201.6829  413.7254  582.3255  781.1546  970.4744 1191.7005 #>  [8] 1381.7032 1588.4324 1780.6459 1917.8537 2140.6204 #>  #> $caney #>  [1]    0.0000  192.0000  373.0000  534.9784  710.0241  902.1517 1073.1517 #>  [8] 1259.2833 1451.0540 1626.3994 1760.4143 1942.3072 #>  #> $chimay #>  [1]    0.0000  131.0343  254.0994  367.3248  496.3209  616.2626  747.2969 #>  [8]  887.5431 1016.9920 1135.3685 1233.0209 1354.0829 #>  #> $corona #>  [1]    0.0000  155.0000  298.0315  429.2603  556.8926  701.8960  856.8960 #>  [8] 1011.8282 1152.1849 1303.5124 1416.4416 1555.8833 #>  #> $deusventrue #>  [1]    0.0000  175.1713  338.4778  485.6002  636.8417  812.4008  974.7739 #>  [8] 1157.1361 1328.9791 1486.6021 1618.4239 1768.4272 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a single shape — coo_plot","title":"Plots a single shape — coo_plot","text":"simple wrapper around plot plotting shapes. Widely used Momocs graphical functions, methods, etc.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a single shape — coo_plot","text":"","code":"coo_plot(   coo,   xlim,   ylim,   border = \"#333333\",   col = NA,   lwd = 1,   lty = 1,   points = FALSE,   first.point = TRUE,   cex.first.point = 0.5,   centroid = TRUE,   xy.axis = TRUE,   pch = 1,   cex = 0.5,   main = NA,   poly = TRUE,   plot.new = TRUE,   plot = TRUE,   zoom = 1,   ... )  ldk_plot(coo, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a single shape — coo_plot","text":"coo list matrix coordinates. xlim coo_plot called coo missing, vector length 2 specifying ylim ploting area. ylim coo_plot called coo missing, vector length 2 specifying ylim ploting area. border color shape border. col color fill shape polygon. lwd lwd drawing shapes. lty lty drawing shapes. points logical. Whether display points. missing number points < 100, points plotted. first.point logical whether plot first point. cex.first.point numeric size first point centroid logical. Whether display centroid. xy.axis logical. Whether draw xy axis. pch pch points. cex cex points. main character. title plot. poly logical whether use polygon lines draw shape, just points. words, whether shape considered configuration landmarks (eg closed outline). plot.new logical whether plot new frame. plot logical whether plot something just create empty plot. zoom numeric take distances. ... arguments use coo_plot methods. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a single shape — coo_plot","text":"plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a single shape — coo_plot","text":"","code":"b <- bot[1] coo_plot(b) coo_plot(bot[2], plot.new=FALSE) # equivalent to coo_draw(bot[2])  coo_plot(b, zoom=2)  coo_plot(b, border='blue')  coo_plot(b, first.point=FALSE, centroid=FALSE)  coo_plot(b, points=TRUE, pch=20)  coo_plot(b, xy.axis=FALSE, lwd=2, col='#F2F2F2')"},{"path":"http://momx.github.io/Momocs/reference/coo_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate coordinates range — coo_range","title":"Calculate coordinates range — coo_range","text":"coo_range simply returns range, coo_range_enlarge enlarges k proportion. coo_diffrange return amplitude (ie diff coo_range)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate coordinates range — coo_range","text":"","code":"coo_range(coo)  # S3 method for default coo_range(coo)  # S3 method for Coo coo_range(coo)  coo_range_enlarge(coo, k)  # S3 method for default coo_range_enlarge(coo, k = 0)  # S3 method for Coo coo_range_enlarge(coo, k = 0)  # S3 method for list coo_range_enlarge(coo, k = 0)  coo_diffrange(coo)  # S3 method for default coo_diffrange(coo)  # S3 method for Coo coo_diffrange(coo)  # S3 method for list coo_diffrange(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate coordinates range — coo_range","text":"coo matrix (x; y) coordinates Coo object. k numeric proportion enlarge ","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate coordinates range — coo_range","text":"matrix range (min, max) x (x, y)","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate coordinates range — coo_range","text":"","code":"bot[1] %>% coo_range # single shape #>       x    y #> min  33   14 #> max 316 1102 bot    %>% coo_range # Coo object #>       x    y #> min   8    3 #> max 345 1120  bot[1] %>% coo_range_enlarge(1/50) # single shape #>          x       y #> min  27.34   -7.76 #> max 321.66 1123.76 bot    %>% coo_range_enlarge(1/50) # Coo object #>          x       y #> min   1.26  -19.34 #> max 351.74 1142.34"},{"path":"http://momx.github.io/Momocs/reference/coo_rectangularity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the rectangularity of a shape — coo_rectangularity","title":"Calculates the rectangularity of a shape — coo_rectangularity","text":"Calculates rectangularity shape","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectangularity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the rectangularity of a shape — coo_rectangularity","text":"","code":"coo_rectangularity(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_rectangularity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the rectangularity of a shape — coo_rectangularity","text":"Rosin PL. 2005. Computing global shape measures. Handbook Pattern Recognition Computer Vision. 177-196.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectangularity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the rectangularity of a shape — coo_rectangularity","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectangularity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the rectangularity of a shape — coo_rectangularity","text":"numeric single shape, list Coo","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_rectangularity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the rectangularity of a shape — coo_rectangularity","text":"","code":"coo_rectangularity(bot[1]) #> [1] 0.7753614  bot %>%     slice(1:3) %>% # for speed sake only     coo_rectangularity #> $brahma #> [1] 0.7753614 #>  #> $caney #> [1] 0.7772434 #>  #> $chimay #> [1] 0.7695281 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the rectilinearity of a shape — coo_rectilinearity","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"proposed Zunic Rosin (see ). May need testing/review.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"","code":"coo_rectilinearity(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"Zunic J, Rosin PL. 2003. Rectilinearity measurements polygons. IEEE Transactions Pattern Analysis Machine Intelligence 25: 1193-1200.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"numeric single shape, list Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"due laborious nature algorithm (nb.pts^2), implementation, may long compute.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_rectilinearity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the rectilinearity of a shape — coo_rectilinearity","text":"","code":"bot[1] %>%     coo_sample(32) %>% # for speed sake only     coo_rectilinearity #> [1] 0.3539899  bot %>%     slice(1:3) %>% coo_sample(32) %>% # for speed sake only     coo_rectilinearity #> $brahma #> [1] 0.3539899 #>  #> $caney #> [1] 0.3751378 #>  #> $chimay #> [1] 0.3597856 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses coordinates — coo_rev","title":"Reverses coordinates — coo_rev","text":"Returns reverse suite coordinates, .e. change shape's orientation","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses coordinates — coo_rev","text":"","code":"coo_rev(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses coordinates — coo_rev","text":"coo matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses coordinates — coo_rev","text":"matrix (x; y) coordinates Coo object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses coordinates — coo_rev","text":"","code":"b <- coo_sample(bot[1], 4) b #>      [,1] [,2] #> [1,]   37  561 #> [2,]  143   15 #> [3,]  295  523 #> [4,]  205 1101 coo_rev(b) #>      [,1] [,2] #> [1,]  205 1101 #> [2,]  295  523 #> [3,]  143   15 #> [4,]   37  561"},{"path":"http://momx.github.io/Momocs/reference/coo_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Retains coordinates with positive x-coordinates — coo_right","title":"Retains coordinates with positive x-coordinates — coo_right","text":"Useful shapes aligned along y-axis (e.g. bilateral symmetry) one wants retain just upper side.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retains coordinates with positive x-coordinates — coo_right","text":"","code":"coo_right(coo, slidegap = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retains coordinates with positive x-coordinates — coo_right","text":"coo matrix (x; y) coordinates Coo object. slidegap logical whether apply coo_slidegap coo_right","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retains coordinates with positive x-coordinates — coo_right","text":"matrix (x; y) coordinates Coo object (returned Opn)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_right.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retains coordinates with positive x-coordinates — coo_right","text":"shapes \"sliced\" along y-axis, usually results open curves thus huge/artefactual gaps points neighboring axis. usually solved coo_slidegap. See examples . Also, apply coo_left/right//object, obtain Opn object, done automatically.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retains coordinates with positive x-coordinates — coo_right","text":"","code":"b <- coo_center(bot[1]) coo_plot(b) coo_draw(coo_right(b), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotates coordinates — coo_rotate","title":"Rotates coordinates — coo_rotate","text":"Rotates coordinates 'theta' angle (radians) trigonometric direction (anti-clockwise). provided, assumed centroid size. involves three steps: centering current position, dividing coordinates 'scale', translating original position.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotates coordinates — coo_rotate","text":"","code":"coo_rotate(coo, theta = 0)"},{"path":"http://momx.github.io/Momocs/reference/coo_rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotates coordinates — coo_rotate","text":"coo either matrix (x; y) coordinates, Coo object. theta numericthe angle (radians) rotate shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotates coordinates — coo_rotate","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_rotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotates coordinates — coo_rotate","text":"","code":"coo_plot(bot[1])  coo_plot(coo_rotate(bot[1], pi/2))   # on Coo b <- bot %>% slice(1:5) # for speed sake stack(b)  stack(coo_rotate(b, pi/2))"},{"path":"http://momx.github.io/Momocs/reference/coo_rotatecenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotates shapes with a custom center — coo_rotatecenter","title":"Rotates shapes with a custom center — coo_rotatecenter","text":"rotates shape 'theta' angles (radians) (x; y) 'center'.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rotatecenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotates shapes with a custom center — coo_rotatecenter","text":"","code":"coo_rotatecenter(coo, theta, center = c(0, 0))"},{"path":"http://momx.github.io/Momocs/reference/coo_rotatecenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotates shapes with a custom center — coo_rotatecenter","text":"coo matrix (x; y) coordinates Coo object. theta numeric angle (radians) rotate shapes. center numeric (x; y) position center","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_rotatecenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotates shapes with a custom center — coo_rotatecenter","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_rotatecenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotates shapes with a custom center — coo_rotatecenter","text":"","code":"b <- bot[1] coo_plot(b) coo_draw(coo_rotatecenter(b, -pi/2, c(200, 200)), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_ruban.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots differences as (colored) segments aka a ruban — coo_ruban","title":"Plots differences as (colored) segments aka a ruban — coo_ruban","text":"Useful display differences shapes","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_ruban.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots differences as (colored) segments aka a ruban — coo_ruban","text":"","code":"coo_ruban(coo, dev, palette = col_heat, normalize = TRUE, ...)"},{"path":"http://momx.github.io/Momocs/reference/coo_ruban.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots differences as (colored) segments aka a ruban — coo_ruban","text":"coo shape, typically mean shape dev numeric vector distances anythinh relevant palette color palette use palette normalize logical whether normalize (TRUE default) distances ... parameters fed segments, eg lwd (see examples)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_ruban.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots differences as (colored) segments aka a ruban — coo_ruban","text":"plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_ruban.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots differences as (colored) segments aka a ruban — coo_ruban","text":"","code":"ms <- MSHAPES(efourier(bot , 10), \"type\") #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details b <- ms$shp$beer w <- ms$shp$whisky # we obtain the mean shape, then euclidean distances between points m <- MSHAPES(list(b, w)) d <- edm(b, w) # First plot coo_plot(m, plot=FALSE) coo_draw(b) coo_draw(w) coo_ruban(m, d, lwd=5)   #Another example coo_plot(m, plot=FALSE) coo_ruban(m, d, palette=col_summer2, lwd=5)   #If you want linewidth rather than color coo_plot(m, plot=FALSE) coo_ruban(m, d, palette=col_black)"},{"path":"http://momx.github.io/Momocs/reference/coo_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample coordinates (among points) — coo_sample","title":"Sample coordinates (among points) — coo_sample","text":"Sample n coordinates among existing points.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample coordinates (among points) — coo_sample","text":"","code":"coo_sample(coo, n)"},{"path":"http://momx.github.io/Momocs/reference/coo_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample coordinates (among points) — coo_sample","text":"coo either matrix (x; y) coordinates Opn object. n integer, number fo points sample.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample coordinates (among points) — coo_sample","text":"matrix (x; y) coordinates, Opn object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample coordinates (among points) — coo_sample","text":"Opn methods (pointless Ldk), $ldk component defined, changed accordingly multiplying ids n number coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample coordinates (among points) — coo_sample","text":"","code":"b <- bot[1] stack(bot)  stack(coo_sample(bot, 24))  coo_plot(b)  coo_plot(coo_sample(b, 24))"},{"path":"http://momx.github.io/Momocs/reference/coo_sample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a proportion of coordinates (among points) — coo_sample_prop","title":"Sample a proportion of coordinates (among points) — coo_sample_prop","text":"simple wrapper around coo_sample","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_sample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a proportion of coordinates (among points) — coo_sample_prop","text":"","code":"coo_sample_prop(coo, prop = 1)"},{"path":"http://momx.github.io/Momocs/reference/coo_sample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a proportion of coordinates (among points) — coo_sample_prop","text":"coo either matrix (x; y) coordinates Opn object. prop numeric, proportion points sample","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_sample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a proportion of coordinates (among points) — coo_sample_prop","text":"matrix (x; y) coordinates, Opn object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_sample_prop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a proportion of coordinates (among points) — coo_sample_prop","text":"coo_sample $ldk component defined, changed accordingly multiplying ids n number coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_sample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a proportion of coordinates (among points) — coo_sample_prop","text":"","code":"# single shape bot[1] %>% coo_nb() #> [1] 138 bot[1] %>% coo_sample_prop(0.5) %>% coo_nb() #> [1] 69"},{"path":"http://momx.github.io/Momocs/reference/coo_samplerr.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples coordinates (regular radius) — coo_samplerr","title":"Samples coordinates (regular radius) — coo_samplerr","text":"Samples n coordinates regular angle.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_samplerr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples coordinates (regular radius) — coo_samplerr","text":"","code":"coo_samplerr(coo, n)"},{"path":"http://momx.github.io/Momocs/reference/coo_samplerr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples coordinates (regular radius) — coo_samplerr","text":"coo matrix (x; y) coordinates Coo object. n integer, number points sample.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_samplerr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Samples coordinates (regular radius) — coo_samplerr","text":"matrix (x; y) coordinates Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_samplerr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Samples coordinates (regular radius) — coo_samplerr","text":"design, function samples among existing points, using coo_interpolate prior may useful homogeneous angles. See examples.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_samplerr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Samples coordinates (regular radius) — coo_samplerr","text":"","code":"stack(bot)  bot <- coo_center(bot) stack(coo_samplerr(bot, 12))  coo_plot(bot[1])  coo_plot(rr <- coo_samplerr(bot[1], 12)) cpos <- coo_centpos(bot[1]) segments(cpos[1], cpos[2], rr[, 1], rr[, 2])   # Sometimes, interpolating may be useful: shp <- hearts[1] %>% coo_center  # given a shp, draw segments from each points on it, to its centroid draw_rads <- function(shp, ...){  segments(shp[, 1], shp[, 2], coo_centpos(shp)[1], coo_centpos(shp)[2], ...) }  # calculate the sd of argument difference in successive points, # in other words a proxy for the homogeneity of angles sd_theta_diff <- function(shp)    shp %>% complex(real=.[, 1], imaginary=.[, 2]) %>%    Arg %>% `[`(-1) %>% diff %>% sd  # no interpolation: all points are sampled from existing points but the # angles are not equal shp %>% coo_plot(points=TRUE, main=\"no interpolation\") shp %>% coo_samplerr(64) %T>% draw_rads(col=\"red\") %>% sd_theta_diff  #> [1] 0.03301767 # with interpolation: much more homogeneous angles shp %>% coo_plot(points=TRUE) shp %>% coo_interpolate(360) %>% coo_samplerr(64) %T>% draw_rads(col=\"blue\") %>% sd_theta_diff  #> [1] 0.00696334"},{"path":"http://momx.github.io/Momocs/reference/coo_scalars.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates all scalar descriptors of shape — coo_scalars","title":"Calculates all scalar descriptors of shape — coo_scalars","text":"See examples full list.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_scalars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates all scalar descriptors of shape — coo_scalars","text":"","code":"coo_scalars(coo, rectilinearity = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_scalars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates all scalar descriptors of shape — coo_scalars","text":"coo matrix (x; y) coordinates Coo rectilinearity logical whether include rectilinearity using coo_rectilinearity","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_scalars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates all scalar descriptors of shape — coo_scalars","text":"data_frame","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_scalars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates all scalar descriptors of shape — coo_scalars","text":"coo_rectilinearity particularly optimized, takes around 30 times time include calculate others thus includedby default. default.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_scalars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates all scalar descriptors of shape — coo_scalars","text":"","code":"df <- bot %>% coo_scalars() # pass bot %>% coo_scalars(TRUE) if you want rectilinearity colnames(df) %>% cat(sep=\"\\n\") # all scalars used #> area #> calliper #> centsize #> circularity #> circularityharalick #> circularitynorm #> convexity #> eccentricityboundingbox #> eccentricityeigen #> elongation #> length #> perim #> rectangularity #> solidity #> width  # a PCA on all these descriptors TraCoe(coo_scalars(bot), fac=bot$fac) %>% PCA %>% plot_PCA(~type)"},{"path":"http://momx.github.io/Momocs/reference/coo_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales coordinates — coo_scale","title":"Scales coordinates — coo_scale","text":"coo_scale scales coordinates 'scale' factor. provided, assumed centroid size. involves three steps: centering current position, dividing coordinates 'scale', pushing back original position. coo_scalex applies scaling (shrinking) parallel x-axis, coo_scaley y axis.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales coordinates — coo_scale","text":"","code":"coo_scale(coo, scale)  # S3 method for default coo_scale(coo, scale = coo_centsize(coo))  # S3 method for Coo coo_scale(coo, scale)  coo_scalex(coo, scale = 1)  # S3 method for default coo_scalex(coo, scale = 1)  # S3 method for Coo coo_scalex(coo, scale = 1)  coo_scaley(coo, scale = 1)  # S3 method for default coo_scaley(coo, scale = 1)  # S3 method for Coo coo_scaley(coo, scale = 1)"},{"path":"http://momx.github.io/Momocs/reference/coo_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales coordinates — coo_scale","text":"coo matrix (x; y) coordinates Coo object. scale scaling factor, default, centroid size coo_scale; 1 scalex scaley.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales coordinates — coo_scale","text":"single shape Coo object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales coordinates — coo_scale","text":"","code":"# on a single shape b <- bot[1] %>% coo_center %>% coo_scale coo_plot(b, lwd=2) coo_draw(coo_scalex(b, 1.5), bor=\"blue\") coo_draw(coo_scaley(b, 0.5), bor=\"red\")   # this also works on Coo objects: b <- slice(bot, 5) # for speed sake stack(b)  b %>% coo_center %>% coo_scale %>% stack  b %>% coo_center %>% coo_scaley(0.5) %>% stack  #equivalent to: #b %>% coo_center %>% coo_scalex(2) %>% stack"},{"path":"http://momx.github.io/Momocs/reference/coo_shear.html","id":null,"dir":"Reference","previous_headings":"","what":"Shears shapes — coo_shearx","title":"Shears shapes — coo_shearx","text":"coo_shearx applies shear mapping matrix (x; y) coordinates (list), parallel x-axis (.e. x' = x + ky; y' = y + kx). coo_sheary parallel y-axis.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_shear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shears shapes — coo_shearx","text":"","code":"coo_shearx(coo, k)  coo_sheary(coo, k)"},{"path":"http://momx.github.io/Momocs/reference/coo_shear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shears shapes — coo_shearx","text":"coo matrix (x; y) coordinates Coo object. k numeric shear factor","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_shear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shears shapes — coo_shearx","text":"matrix (x; y) coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_shear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shears shapes — coo_shearx","text":"","code":"coo <- coo_template(shapes[11]) coo_plot(coo) coo_draw(coo_shearx(coo, 0.5), border=\"blue\") coo_draw(coo_sheary(coo, 0.5), border=\"red\")"},{"path":"http://momx.github.io/Momocs/reference/coo_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Slices shapes between successive coordinates — coo_slice","title":"Slices shapes between successive coordinates — coo_slice","text":"Takes shape n coordinates. pass function least two ids (<= n), shape open corresponding coordinates slices returned list","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slices shapes between successive coordinates — coo_slice","text":"","code":"coo_slice(coo, ids, ldk)"},{"path":"http://momx.github.io/Momocs/reference/coo_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slices shapes between successive coordinates — coo_slice","text":"coo matrix (x; y) coordinates Coo object. ids numeric length >= 2, slice shape(s) ldk numeric id ldk use ids, Opn. provided, ids ignored.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slices shapes between successive coordinates — coo_slice","text":"list shapes list Opn","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slices shapes between successive coordinates — coo_slice","text":"","code":"h <- slice(hearts, 1:5)  # speed purpose only # single shape, a list of matrices is returned sh <- coo_slice(h[1], c(12, 24, 36, 48)) coo_plot(sh[[1]])  panel(Opn(sh))  # on a Coo, a list of Opn is returned # makes no sense if shapes are not normalized first sh2 <- coo_slice(h, c(12, 24, 36, 48)) panel(sh2[[1]])   # Use coo_slice with `ldk` instead: # hearts as an example x <- h %>% fgProcrustes(tol=1) #> iteration:  1 \tgain: 8.1326  #> iteration:  2 \tgain: 0.00031224  # 4 landmarks stack(x)  x$ldk[1:5] #> [[1]] #> [1] 65 56 50 19 #>  #> [[2]] #> [1] 69 60 52 21 #>  #> [[3]] #> [1] 68 60 51 21 #>  #> [[4]] #> [1] 69 59 53 23 #>  #> [[5]] #> [1] 71 61 54 21 #>   # here we slice y <- coo_slice(x, ldk=1:4)  # plotting stack(y[[1]])  stack(y[[2]])   # new ldks from tipping points, new ldks from angle olea %>% slice(1:5) %>% # for the sake of speed def_ldk_tips %>% def_ldk_angle(0.75*pi) %>% def_ldk_angle(0.25*pi) %>% coo_slice(ldk =1:4) -> oleas oleas[[1]] %>% stack  oleas[[2]] %>% stack # etc.   # domestic operations y[[3]] %>% coo_area() #>        shp1        shp2        shp3        shp4        shp5  #> 0.001684956 0.007028829 0.010968094 0.009962128 0.016920135  # shape analysis of a slice y[[1]] %>% coo_bookstein() %>% npoly %>% PCA %>% plot(~aut) #> 'nb.pts' missing and set to: 31 #> 'degree' missing and set to: 5 #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/coo_slide.html","id":null,"dir":"Reference","previous_headings":"","what":"Slides coordinates — coo_slide","title":"Slides coordinates — coo_slide","text":"Slides coordinates id-th point become first one.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slides coordinates — coo_slide","text":"","code":"coo_slide(coo, id, ldk)"},{"path":"http://momx.github.io/Momocs/reference/coo_slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slides coordinates — coo_slide","text":"coo matrix (x; y) coordinates Coo object. id numeric id point become new first point. See details method Coo objects. ldk numeric id ldk use id, ","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slides coordinates — coo_slide","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Slides coordinates — coo_slide","text":"Coo objects, particular Opn three different ways coo_sliding available: ldk passed single id passed: id-th points within shapes become first points. $ldk slided accordingly. ldk passed vector ids matching length Coo: every shape, id-th point used id-th point. $ldk slided accordingly. single ldk passed: ldk-th ldk used slide every shape. id (also) passed, ignored message. See examples.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_slide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slides coordinates — coo_slide","text":"","code":"h <- hearts %>% slice(1:5) # for speed sake stack(h)  # set the first landmark as the starting point stack(coo_slide(h, ldk=1))  # set the 50th point as the starting point (everywhere) stack(coo_slide(h, id=50))  # set the id-random-th point as the starting point (everywhere) set.seed(123) # just for the reproducibility id_random <- sample(x=min(sapply(h$coo, nrow)), size=length(h), replace=TRUE) stack(coo_slide(h, id=id_random))"},{"path":"http://momx.github.io/Momocs/reference/coo_slidedirection.html","id":null,"dir":"Reference","previous_headings":"","what":"Slides coordinates in a particular direction — coo_slidedirection","title":"Slides coordinates in a particular direction — coo_slidedirection","text":"Shapes centered , according direction, point northwards, southwards, eastwards westwards centroid, becomes first point coo_slide. 'right' possibly sensible option (default), since 0 radians points eastwards, relatively origin. followed coo_untiltx cases remove rotationnal dephasing/bias.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slidedirection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slides coordinates in a particular direction — coo_slidedirection","text":"","code":"coo_slidedirection(   coo,   direction = c(\"down\", \"left\", \"up\", \"right\")[4],   center,   id )"},{"path":"http://momx.github.io/Momocs/reference/coo_slidedirection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slides coordinates in a particular direction — coo_slidedirection","text":"coo matrix (x; y) coordinates Coo object. direction character one \"\", \"left\", \"\", \"right\" (\"right\" default) center logical whether center sliding id numeric whether return id point slided shapes","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slidedirection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slides coordinates in a particular direction — coo_slidedirection","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_slidedirection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slides coordinates in a particular direction — coo_slidedirection","text":"","code":"b <- coo_rotate(bot[1], pi/6) # dummy example just to make it obvious coo_plot(b) # not the first point  coo_plot(coo_slidedirection(b, \"up\"))  coo_plot(coo_slidedirection(b, \"right\"))  coo_plot(coo_slidedirection(b, \"left\"))  coo_plot(coo_slidedirection(b, \"down\"))   # on Coo objects b <- bot %>% slice(1:5) # for speed sake stack(b)  stack(coo_slidedirection(b, \"right\"))   # This should be followed by a [coo_untiltx] in most (if not all) cases stack(coo_slidedirection(b, \"right\") %>% coo_untiltx)"},{"path":"http://momx.github.io/Momocs/reference/coo_slidegap.html","id":null,"dir":"Reference","previous_headings":"","what":"Slides coordinates using the widest gap — coo_slidegap","title":"Slides coordinates using the widest gap — coo_slidegap","text":"slicing shape using two landmarks, functions coo_up, open curve obtained rank points make wrong/artefactual results. widest gap > 5 * median gaps, couple coordinates forming widest gap used starting ending points. switch helps deal open curves. Examples self-speaking. Use force=TRUE bypass check","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slidegap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slides coordinates using the widest gap — coo_slidegap","text":"","code":"coo_slidegap(coo, force)"},{"path":"http://momx.github.io/Momocs/reference/coo_slidegap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slides coordinates using the widest gap — coo_slidegap","text":"coo matrix (x; y) coordinates Coo object. force logical whether use widest gap, check, real gap","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_slidegap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slides coordinates using the widest gap — coo_slidegap","text":"matrix (x; y) coordinates Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_slidegap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slides coordinates using the widest gap — coo_slidegap","text":"","code":"cat <- coo_center(shapes[4]) coo_plot(cat)   # we only retain the bottom of the cat cat_down <- coo_down(cat, slidegap=FALSE)  # see? the segment on the x-axis coorespond to the widest gap. coo_plot(cat_down)   # that's what we meant coo_plot(coo_slidegap(cat_down))"},{"path":"http://momx.github.io/Momocs/reference/coo_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothes coordinates — coo_smooth","title":"Smoothes coordinates — coo_smooth","text":"Smoothes coordinates using simple moving average. May useful remove digitization noise, mainly outlines open outlines.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothes coordinates — coo_smooth","text":"","code":"coo_smooth(coo, n)"},{"path":"http://momx.github.io/Momocs/reference/coo_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothes coordinates — coo_smooth","text":"coo matrix (x; y) coordinates Coo object. n integer number smoothing iterations","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothes coordinates — coo_smooth","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothes coordinates — coo_smooth","text":"","code":"b5 <- slice(bot, 1:5) # for speed sake stack(b5)  stack(coo_smooth(b5, 10))  coo_plot(b5[1])  coo_plot(coo_smooth(b5[1], 30))"},{"path":"http://momx.github.io/Momocs/reference/coo_smoothcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothes coordinates on curves — coo_smoothcurve","title":"Smoothes coordinates on curves — coo_smoothcurve","text":"Smoothes coordinates using simple moving average let first last points unchanged. May useful remove digitization noise curves.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_smoothcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothes coordinates on curves — coo_smoothcurve","text":"","code":"coo_smoothcurve(coo, n)"},{"path":"http://momx.github.io/Momocs/reference/coo_smoothcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothes coordinates on curves — coo_smoothcurve","text":"coo matrix (x; y) coordinates Coo object. n integer specify number smoothing iterations","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_smoothcurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothes coordinates on curves — coo_smoothcurve","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_smoothcurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothes coordinates on curves — coo_smoothcurve","text":"","code":"o <- olea[1] coo_plot(o, border='grey50', points=FALSE) coo_draw(coo_smooth(o, 24), border='blue', points=FALSE) coo_draw(coo_smoothcurve(o, 24), border='red', points=FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_solidity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the solidity of a shape — coo_solidity","title":"Calculates the solidity of a shape — coo_solidity","text":"Calculated using ratio shape area convex hull area.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_solidity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the solidity of a shape — coo_solidity","text":"","code":"coo_solidity(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_solidity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the solidity of a shape — coo_solidity","text":"Rosin PL. 2005. Computing global shape measures. Handbook Pattern Recognition Computer Vision. 177-196.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_solidity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the solidity of a shape — coo_solidity","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_solidity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the solidity of a shape — coo_solidity","text":"numeric single shape, list Coo","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_solidity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the solidity of a shape — coo_solidity","text":"","code":"coo_solidity(bot[1]) #> [1] 0.8932612  bot %>%     slice(1:3) %>%  # for speed sake only     coo_solidity #> $brahma #> [1] 0.8932612 #>  #> $caney #> [1] 0.9201334 #>  #> $chimay #> [1] 0.9279237 #>"},{"path":"http://momx.github.io/Momocs/reference/coo_tac.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the total absolute curvature of a shape — coo_tac","title":"Calculates the total absolute curvature of a shape — coo_tac","text":"Calculated using sum absolute value second derivative smooth.spline prediction defined point.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_tac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the total absolute curvature of a shape — coo_tac","text":"","code":"coo_tac(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_tac.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculates the total absolute curvature of a shape — coo_tac","text":"Siobhan Braybrook.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_tac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the total absolute curvature of a shape — coo_tac","text":"coo matrix (x; y) coordinates Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_tac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the total absolute curvature of a shape — coo_tac","text":"numeric single shape Coo","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_tac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the total absolute curvature of a shape — coo_tac","text":"","code":"coo_tac(bot[1]) #> [1] 67.85005  bot %>%     slice(1:3) %>%  # for speed sake only     coo_tac #>   brahma    caney   chimay  #> 67.85005 34.81994 46.61054"},{"path":"http://momx.github.io/Momocs/reference/coo_template.html","id":null,"dir":"Reference","previous_headings":"","what":"'Templates' shapes — coo_template","title":"'Templates' shapes — coo_template","text":"coo_template returns shape centered origin inscribed size-side square. coo_template_relatively biggest shape (prod(coo_diffrange)) size=size consequently defined single shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Templates' shapes — coo_template","text":"","code":"coo_template(coo, size)  # S3 method for default coo_template(coo, size = 1)  # S3 method for list coo_template(coo, size = 1)  # S3 method for Coo coo_template(coo, size = 1)  coo_template_relatively(coo, size = 1)  # S3 method for list coo_template_relatively(coo, size = 1)  # S3 method for Coo coo_template_relatively(coo, size = 1)"},{"path":"http://momx.github.io/Momocs/reference/coo_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Templates' shapes — coo_template","text":"coo list matrix coordinates. size numeric. Indicates length side 'inscribing' shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Templates' shapes — coo_template","text":"Returns matrix (x; y)coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'Templates' shapes — coo_template","text":"See coo_listpanel illustration function. morphospaces functions also take profit function. May useful develop graphical functions.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Templates' shapes — coo_template","text":"","code":"coo <- bot[1] coo_plot(coo_template(coo), xlim=c(-1, 1), ylim=c(-1, 1)) rect(-0.5, -0.5, 0.5, 0.5)   s <- 0.01 coo_plot(coo_template(coo, s)) rect(-s/2, -s/2, s/2, s/2)"},{"path":"http://momx.github.io/Momocs/reference/coo_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Translates coordinates — coo_trans","title":"Translates coordinates — coo_trans","text":"Translates coordinates 'x' 'y' value","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translates coordinates — coo_trans","text":"","code":"coo_trans(coo, x = 0, y = 0)"},{"path":"http://momx.github.io/Momocs/reference/coo_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translates coordinates — coo_trans","text":"coo matrix (x; y) coordinates Coo object. x numeric translation along x-axis. y numeric translation along y-axis.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translates coordinates — coo_trans","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_trans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translates coordinates — coo_trans","text":"","code":"coo_plot(bot[1])  coo_plot(coo_trans(bot[1], 50, 100))   # on Coo b <- bot %>% slice(1:5) # for speed sake stack(b)  stack(coo_trans(b, 50, 100))"},{"path":"http://momx.github.io/Momocs/reference/coo_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims both ends coordinates from shape — coo_trim","title":"Trims both ends coordinates from shape — coo_trim","text":"Removes trim coordinates ends shape, ie top bottom shape matrix.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims both ends coordinates from shape — coo_trim","text":"","code":"coo_trim(coo, trim = 1)"},{"path":"http://momx.github.io/Momocs/reference/coo_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims both ends coordinates from shape — coo_trim","text":"coo matrix (x; y) coordinates Coo object. trim numeric, number coordinates trim","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims both ends coordinates from shape — coo_trim","text":"trimmed shape","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trims both ends coordinates from shape — coo_trim","text":"","code":"olea[1] %>% coo_sample(12) %T>%    print() %T>% ldk_plot() %>%    coo_trim(1) %T>% print() %>% points(col=\"red\") #>            [,1]    [,2] #>  [1,] -0.500000 0.00000 #>  [2,] -0.453100 0.08999 #>  [3,] -0.371800 0.17700 #>  [4,] -0.269700 0.24720 #>  [5,] -0.177400 0.28280 #>  [6,] -0.084940 0.30470 #>  [7,]  0.007775 0.30940 #>  [8,]  0.100600 0.30720 #>  [9,]  0.193600 0.28790 #> [10,]  0.287000 0.24450 #> [11,]  0.373900 0.17700 #> [12,]  0.443800 0.09201  #>            [,1]    [,2] #>  [1,] -0.453100 0.08999 #>  [2,] -0.371800 0.17700 #>  [3,] -0.269700 0.24720 #>  [4,] -0.177400 0.28280 #>  [5,] -0.084940 0.30470 #>  [6,]  0.007775 0.30940 #>  [7,]  0.100600 0.30720 #>  [8,]  0.193600 0.28790 #>  [9,]  0.287000 0.24450 #> [10,]  0.373900 0.17700"},{"path":"http://momx.github.io/Momocs/reference/coo_trimbottom.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims bottom coordinates from shape — coo_trimbottom","title":"Trims bottom coordinates from shape — coo_trimbottom","text":"Removes trim coordinates bottom shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trimbottom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims bottom coordinates from shape — coo_trimbottom","text":"","code":"coo_trimbottom(coo, trim = 1)"},{"path":"http://momx.github.io/Momocs/reference/coo_trimbottom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims bottom coordinates from shape — coo_trimbottom","text":"coo matrix (x; y) coordinates Coo object. trim numeric, number coordinates trim","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trimbottom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims bottom coordinates from shape — coo_trimbottom","text":"trimmed shape","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_trimbottom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trims bottom coordinates from shape — coo_trimbottom","text":"","code":"olea[1] %>% coo_sample(12) %T>%    print() %T>% ldk_plot() %>%    coo_trimbottom(4) %T>% print() %>% points(col=\"red\") #>            [,1]    [,2] #>  [1,] -0.500000 0.00000 #>  [2,] -0.453100 0.08999 #>  [3,] -0.371800 0.17700 #>  [4,] -0.269700 0.24720 #>  [5,] -0.177400 0.28280 #>  [6,] -0.084940 0.30470 #>  [7,]  0.007775 0.30940 #>  [8,]  0.100600 0.30720 #>  [9,]  0.193600 0.28790 #> [10,]  0.287000 0.24450 #> [11,]  0.373900 0.17700 #> [12,]  0.443800 0.09201  #>           [,1]    [,2] #> [1,] -0.500000 0.00000 #> [2,] -0.453100 0.08999 #> [3,] -0.371800 0.17700 #> [4,] -0.269700 0.24720 #> [5,] -0.177400 0.28280 #> [6,] -0.084940 0.30470 #> [7,]  0.007775 0.30940 #> [8,]  0.100600 0.30720"},{"path":"http://momx.github.io/Momocs/reference/coo_trimtop.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims top coordinates from shape — coo_trimtop","title":"Trims top coordinates from shape — coo_trimtop","text":"Removes trim coordinates top shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trimtop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims top coordinates from shape — coo_trimtop","text":"","code":"coo_trimtop(coo, trim = 1)"},{"path":"http://momx.github.io/Momocs/reference/coo_trimtop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims top coordinates from shape — coo_trimtop","text":"coo matrix (x; y) coordinates Coo object. trim numeric, number coordinates trim","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_trimtop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims top coordinates from shape — coo_trimtop","text":"trimmed shape","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_trimtop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trims top coordinates from shape — coo_trimtop","text":"","code":"olea[1] %>% coo_sample(12) %T>%    print() %T>% ldk_plot() %>%    coo_trimtop(4) %T>% print() %>% points(col=\"red\") #>            [,1]    [,2] #>  [1,] -0.500000 0.00000 #>  [2,] -0.453100 0.08999 #>  [3,] -0.371800 0.17700 #>  [4,] -0.269700 0.24720 #>  [5,] -0.177400 0.28280 #>  [6,] -0.084940 0.30470 #>  [7,]  0.007775 0.30940 #>  [8,]  0.100600 0.30720 #>  [9,]  0.193600 0.28790 #> [10,]  0.287000 0.24450 #> [11,]  0.373900 0.17700 #> [12,]  0.443800 0.09201  #>           [,1]    [,2] #> [1,] -0.177400 0.28280 #> [2,] -0.084940 0.30470 #> [3,]  0.007775 0.30940 #> [4,]  0.100600 0.30720 #> [5,]  0.193600 0.28790 #> [6,]  0.287000 0.24450 #> [7,]  0.373900 0.17700 #> [8,]  0.443800 0.09201"},{"path":"http://momx.github.io/Momocs/reference/coo_truss.html","id":null,"dir":"Reference","previous_headings":"","what":"Truss measurement — coo_truss","title":"Truss measurement — coo_truss","text":"method calculate shapes Coo truss measurements, pairwise combinations euclidean distances","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_truss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truss measurement — coo_truss","text":"","code":"coo_truss(x)"},{"path":"http://momx.github.io/Momocs/reference/coo_truss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truss measurement — coo_truss","text":"x shape Ldk object","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_truss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truss measurement — coo_truss","text":"named numeric matrix","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_truss.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Truss measurement — coo_truss","text":"Mainly implemented historical/didactical reasons.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_truss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truss measurement — coo_truss","text":"","code":"# example on a single shape cat <- coo_sample(shapes[4], 6) coo_truss(cat) #>       1-2       1-3       1-4       1-5       1-6       2-3       2-4       2-5  #>  58.79626  73.24616  92.45539 165.89454  63.97656  14.76482 111.87940 214.40616  #>       2-6       3-4       3-5       3-6       4-5       4-6       5-6  #> 120.20815 118.00424 225.44179 133.68620 123.90722  86.14523 106.01887   # example on wings dataset tx <- coo_truss(wings)  txp <- PCA(tx, scale. = TRUE, center=TRUE, fac=wings$fac) plot(txp, 1) #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/coo_untiltx.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","title":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","text":"Rotationnal biases appear coo_slidedirection (friends). Typically useful outline analysis phasing matters. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_untiltx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","text":"","code":"coo_untiltx(coo, id, ldk)"},{"path":"http://momx.github.io/Momocs/reference/coo_untiltx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","text":"coo matrix (x; y) coordinates Coo object. id numeric id point become new first point. See details method Coo objects. ldk numeric id ldk use id, ","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_untiltx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","text":"matrix (x; y) coordinates, Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_untiltx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","text":"Coo objects, particular Opn two different ways coo_sliding available: ldk passed id passed: id-th points within shapes become first points. single ldk passed: ldk-th ldk used slide every shape. id (also) passed, id ignored message.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_untiltx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes rotation so that the centroid and a given point are parallel to the x-axis — coo_untiltx","text":"","code":"# on a single shape bot[1] %>% coo_center %>% coo_align %>%    coo_sample(12) %>% coo_slidedirection(\"right\") %T>%    coo_plot() %>% # the first point is not on the x-axis    coo_untiltx() %>%    coo_draw(border=\"red\") # this (red) one is   # on an Out # prepare bot prebot <- bot %>% coo_center %>% coo_scale %>%    coo_align %>% coo_slidedirection(\"right\") prebot %>% stack # some dephasing remains  prebot %>% coo_slidedirection(\"right\") %>% coo_untiltx() %>% stack # much better  # _here_ there is no change but the second, untilted, is correct prebot %>% efourier(8, norm=FALSE) %>% PCA %>% plot_PCA(~type)  prebot %>% coo_untiltx %>% efourier(8, norm=FALSE) %>% PCA %>% plot_PCA(~type)   # an example using ldks: # the landmark #2 is on the x-axis hearts %>%   slice(1:5) %>% fgProcrustes(tol=1e-3) %>% # for speed sake   coo_center %>% coo_untiltx(ldk=2) %>% stack #> iteration:  1 \tgain: 8.1326  #> iteration:  2 \tgain: 0.00031224"},{"path":"http://momx.github.io/Momocs/reference/coo_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Retains coordinates with positive y-coordinates — coo_up","title":"Retains coordinates with positive y-coordinates — coo_up","text":"Useful shapes aligned along x-axis (e.g. bilateral symmetry) one wants retain just upper side.","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retains coordinates with positive y-coordinates — coo_up","text":"","code":"coo_up(coo, slidegap = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/coo_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retains coordinates with positive y-coordinates — coo_up","text":"coo matrix (x; y) coordinates Coo object. slidegap logical whether apply coo_slidegap coo_down","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retains coordinates with positive y-coordinates — coo_up","text":"matrix (x; y) coordinates Coo object (returned Opn)","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_up.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retains coordinates with positive y-coordinates — coo_up","text":"shapes \"sliced\" along x-axis, usually results open curves thus huge/artefactual gaps points neighboring axis. usually solved coo_slidegap. See examples . Also, apply coo_left/right//object, obtain Opn object, done automatically.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_up.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retains coordinates with positive y-coordinates — coo_up","text":"","code":"b <- coo_alignxax(bot[1]) coo_plot(b) coo_draw(coo_up(b), border='red')"},{"path":"http://momx.github.io/Momocs/reference/coo_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the width of a shape — coo_width","title":"Calculates the width of a shape — coo_width","text":"Nothing coo_lw(coo)[2].","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the width of a shape — coo_width","text":"","code":"coo_width(coo)"},{"path":"http://momx.github.io/Momocs/reference/coo_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the width of a shape — coo_width","text":"coo matrix (x; y) coordinates Coo object","code":""},{"path":"http://momx.github.io/Momocs/reference/coo_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the width of a shape — coo_width","text":"width (pixels) shape","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/coo_width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the width of a shape — coo_width","text":"","code":"coo_width(bot[1]) #> [1] 278.0386"},{"path":"http://momx.github.io/Momocs/reference/d.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper to calculates euclidean distances between two points — d","title":"A wrapper to calculates euclidean distances between two points — d","text":"main advantage ed method can passed different objects used combination measure. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper to calculates euclidean distances between two points — d","text":"","code":"d(x, id1, id2)"},{"path":"http://momx.github.io/Momocs/reference/d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper to calculates euclidean distances between two points — d","text":"x Ldk (typically), matrix id1 id 1st row id2 id 2nd row","code":""},{"path":"http://momx.github.io/Momocs/reference/d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper to calculates euclidean distances between two points — d","text":"numeric","code":""},{"path":"http://momx.github.io/Momocs/reference/d.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A wrapper to calculates euclidean distances between two points — d","text":"objects, first get_ldk.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper to calculates euclidean distances between two points — d","text":"","code":"# single shape d(wings[1], 1, 4) #> [1] 0.7581273 # Ldk object d(wings, 1, 4) #>       AN1       AN2       AN3       AN4       AN5       AN6       AN7       AN8  #> 0.7581273 0.7281573 0.7127928 0.7185018 0.7367129 0.7124015 0.7285464 0.7301814  #>       AN9      AN10      AN11      TO12      WY13      WY14      WY15      WY16  #> 0.7091337 0.7087522 0.7100063 0.6994695 0.7257983 0.7250806 0.7227536 0.7176631  #>      UR17      UR18      UR19      UR20      CA21      CA22      CA23      CA24  #> 0.7207639 0.7269677 0.7153795 0.7397394 0.7373042 0.7172436 0.7223663 0.7182525  #>      CA25      CA26      CA27      OR28      MA29      MA30      MA31      PS32  #> 0.7317102 0.7172721 0.7127463 0.7244861 0.7335012 0.7238598 0.7424106 0.7366003  #>      PS33      PS34      PS35      PS36      PS37      PS38      PS39      PS40  #> 0.7262568 0.7315960 0.7233414 0.7278607 0.7262419 0.7331013 0.7087411 0.7163488  #>      PS41      PS42      PS43      AE44      AE45      AE46      AE47      AE48  #> 0.7085592 0.7134963 0.7062850 0.7233241 0.7080950 0.7261707 0.7100848 0.7421942  #>      AE49      AE50      AE51      AE52      AE53      AE54      AE55      AE56  #> 0.7115717 0.7248944 0.7230917 0.7144437 0.7182977 0.7168990 0.7175543 0.7165161  #>      AE57      AE58      AE59      AE60      AE61      AE62      AE63      AE64  #> 0.7404125 0.7154040 0.7448661 0.7261959 0.7224206 0.7360905 0.7335780 0.7318912  #>      AE65      AE66      AE67      AE68      AE69      AE70      AE71      AE72  #> 0.7151047 0.7147967 0.7145111 0.7210058 0.7222862 0.7212556 0.7302622 0.7216666  #>      AE73      AE74      AE75      AE76      AE77      AE78      AE79      AE80  #> 0.7437503 0.7436207 0.7327989 0.7092307 0.7315643 0.7322983 0.7398728 0.7173188  #>      AE81      AE82      AE83      AE84      AE85      AE86      AE87      AE88  #> 0.6992811 0.7286847 0.7241596 0.7290020 0.7136496 0.7222001 0.7283568 0.7341570  #>      AE89      AE90      AE91      AE92      AE93      AE94      AE95      AE96  #> 0.7213378 0.7293730 0.7198584 0.7149219 0.7354247 0.7296066 0.7157059 0.6982300  #>      AE97      AE98      AE99     AE100     CX101     CX102     CX103     CX104  #> 0.7382611 0.7261058 0.7145814 0.7133695 0.7205058 0.7340288 0.7172196 0.7235002  #>     CX105     CX106     CX107     CX108     CX109     CX110     CX111     CX112  #> 0.7186017 0.7191322 0.7077697 0.7256004 0.7205312 0.7205628 0.7171014 0.7182613  #>     CX113     CX114     CX115     CX116     CX117     CX118     CX119     CX120  #> 0.7299714 0.7094558 0.6976466 0.7216434 0.7297104 0.7277296 0.7383755 0.7150724  #>     CX121     CX122     CX123     CX124     CX125     DE126     DE127  #> 0.7217969 0.7252883 0.7075976 0.7231878 0.7190234 0.7001547 0.7128613  # Out object d(hearts, 2, 4) #>      shp1      shp2      shp3      shp4      shp5      shp6      shp7      shp8  #> 0.7631146 0.7182864 0.8451851 0.8524332 0.6289745 0.7469257 0.7650846 0.5290089  #>      shp9     shp10     shp11     shp12     shp13     shp14     shp15     shp16  #> 0.6103333 0.6236372 0.7429723 0.6348490 0.7671199 0.6810554 0.6338818 0.6853828  #>     shp17     shp18     shp19     shp20     shp21     shp22     shp23     shp24  #> 0.6238002 0.8866637 0.6208528 0.5822941 0.5880879 0.8852956 0.7346886 0.7203612  #>     shp25     shp26     shp27     shp28     shp29     shp30     shp31     shp32  #> 0.6834542 0.6683383 0.6815803 0.6992615 0.8837326 0.6694748 0.9143077 0.7462901  #>     shp33     shp34     shp35     shp36     shp37     shp38     shp39     shp40  #> 0.8324069 0.8263567 0.7156152 0.7400215 0.8636179 0.7327721 0.7302947 0.8022611  #>     shp41     shp42     shp43     shp44     shp45     shp46     shp47     shp48  #> 0.7876690 0.6702961 0.7657328 0.7114349 0.8160898 0.8514524 0.7864097 0.8544094  #>     shp49     shp50     shp51     shp52     shp53     shp54     shp55     shp56  #> 0.8540897 0.7362736 0.7839997 0.7141854 0.7881206 0.7844670 0.7976090 0.7780533  #>     shp57     shp58     shp59     shp60     shp61     shp62     shp63     shp64  #> 0.7790919 0.7977559 0.8113749 0.7159091 0.7119202 0.6425247 0.8280741 0.7699237  #>     shp65     shp66     shp67     shp68     shp69     shp70     shp71     shp72  #> 0.9112877 0.7542011 0.8073623 0.8916280 0.7638459 0.7394304 0.7120199 0.8475767  #>     shp73     shp74     shp75     shp76     shp77     shp78     shp79     shp80  #> 0.8467397 0.7998835 0.9270539 0.7642246 0.8594367 0.7209088 0.7989868 0.7535296  #>     shp81     shp82     shp83     shp84     shp85     shp86     shp87     shp88  #> 0.8750936 0.9212785 0.8739192 0.7410993 0.7711573 0.9040280 0.8445564 0.8595617  #>     shp89     shp90     shp91     shp92     shp93     shp94     shp95     shp96  #> 0.7544551 0.8765394 0.7649132 0.8566908 0.8672661 0.8905499 0.8167811 0.6780182  #>     shp97     shp98     shp99    shp100    shp101    shp102    shp103    shp104  #> 0.7720006 0.9065548 0.8954063 0.8858552 0.8706311 0.8762412 0.9093137 0.9002444  #>    shp105    shp106    shp107    shp108    shp109    shp110    shp111    shp112  #> 0.9036831 0.8292070 0.8859845 0.8851778 0.8619118 0.9206441 0.8397867 0.8692543  #>    shp113    shp114    shp115    shp116    shp117    shp118    shp119    shp120  #> 0.8671550 0.7668184 0.8522446 0.7407808 0.7615372 0.7884933 0.9120387 0.8496588  #>    shp121    shp122    shp123    shp124    shp125    shp126    shp127    shp128  #> 0.7128952 0.8452803 0.7808519 0.8506531 0.8119996 0.7727404 0.7854347 0.8393396  #>    shp129    shp130    shp131    shp132    shp133    shp134    shp135    shp136  #> 0.8445801 0.7802361 0.7640858 0.8662670 0.7090051 0.8541041 0.7161086 0.7619554  #>    shp137    shp138    shp139    shp140    shp141    shp142    shp143    shp144  #> 0.7454238 0.8066868 0.8413141 0.7679260 0.8279943 0.7932280 0.8050323 0.8471870  #>    shp145    shp146    shp147    shp148    shp149    shp150    shp151    shp152  #> 0.7967146 0.8006016 0.8237974 0.8582077 0.9160836 0.8401398 0.7995380 0.6738980  #>    shp153    shp154    shp155    shp156    shp157    shp158    shp159    shp160  #> 0.7307879 0.7278767 0.8359675 0.8280149 0.8104836 0.7733338 0.8047466 0.6754903  #>    shp161    shp162    shp163    shp164    shp165    shp166    shp167    shp168  #> 0.7218993 0.6596433 0.8148563 0.6368536 0.7098642 0.7902415 0.7481063 0.7169491  #>    shp169    shp170    shp171    shp172    shp173    shp174    shp175    shp176  #> 0.7126700 0.7845322 0.7388734 0.7834291 0.6949870 0.6693791 0.6995516 0.6978463  #>    shp177    shp178    shp179    shp180    shp181    shp182    shp183    shp184  #> 0.7198900 0.7878513 0.8469718 0.7758912 0.7731482 0.6759113 0.7120142 0.6643103  #>    shp185    shp186    shp187    shp188    shp189    shp190    shp191    shp192  #> 0.7535931 0.7760557 0.7520940 0.7106488 0.6974563 0.7151895 0.8647945 0.7771309  #>    shp193    shp194    shp195    shp196    shp197    shp198    shp199    shp200  #> 0.7450503 0.6718839 0.7454927 0.5912441 0.7118493 0.7229153 0.8140886 0.8216331  #>    shp201    shp202    shp203    shp204    shp205    shp206    shp207    shp208  #> 0.7815022 0.6470323 0.6373149 0.5962023 0.6925027 0.7957830 0.6756185 0.7093084  #>    shp209    shp210    shp211    shp212    shp213    shp214    shp215    shp216  #> 0.6560775 0.7320395 0.7869578 0.7326762 0.7769385 0.8253959 0.6940959 0.7130844  #>    shp217    shp218    shp219    shp220    shp221    shp222    shp223    shp224  #> 0.6848838 0.8305747 0.7472713 0.7586330 0.8380628 0.7593495 0.6286220 0.7498917  #>    shp225    shp226    shp227    shp228    shp229    shp230    shp231    shp232  #> 0.7584135 0.7930154 0.7907987 0.7237335 0.8102214 0.8092945 0.7134718 0.8471743  #>    shp233    shp234    shp235    shp236    shp237    shp238    shp239    shp240  #> 0.7870556 0.8002813 0.7853021 0.8028798 0.7940435 0.8044962 0.6784667 0.7779515"},{"path":"http://momx.github.io/Momocs/reference/data_apodemus.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of Apodemus (wood mouse) mandibles — apodemus","title":"Data: Outline coordinates of Apodemus (wood mouse) mandibles — apodemus","text":"Data: Outline coordinates Apodemus (wood mouse) mandibles","code":""},{"path":"http://momx.github.io/Momocs/reference/data_apodemus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of Apodemus (wood mouse) mandibles — apodemus","text":"object 64 coordinates 30 wood molar outlines.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_apodemus.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of Apodemus (wood mouse) mandibles — apodemus","text":"Renaud S, Pale JRM, Michaux JR (2003): Adaptive latitudinal trends mandible shape Apodemus wood mice. Journal Biogeography 30:1617-1628. see https://onlinelibrary.wiley.com/doi/full/10.1046/j.1365-2699.2003.00932.x","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_bot.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of beer and whisky bottles. — bot","title":"Data: Outline coordinates of beer and whisky bottles. — bot","text":"Data: Outline coordinates beer whisky bottles.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_bot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of beer and whisky bottles. — bot","text":"object containing outlines coordinates grouping factor 20 beer 20 whisky bottles","code":""},{"path":"http://momx.github.io/Momocs/reference/data_bot.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of beer and whisky bottles. — bot","text":"Images grabbed internet prepared package's authors. particular choice made dimension original images brands cited .","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_chaff.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Landmark and semilandmark coordinates on cereal glumes — chaff","title":"Data: Landmark and semilandmark coordinates on cereal glumes — chaff","text":"Data: Landmark semilandmark coordinates cereal glumes","code":""},{"path":"http://momx.github.io/Momocs/reference/data_chaff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Landmark and semilandmark coordinates on cereal glumes — chaff","text":"Ldk object 21 configurations landmarks semi-landmarks (4 partitions) sampled cereal glumes","code":""},{"path":"http://momx.github.io/Momocs/reference/data_chaff.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Landmark and semilandmark coordinates on cereal glumes — chaff","text":"Research support provided European Research Council (Evolutionary Origins Agriculture (grant . 269830-EOA) PI: Glynis Jones, Dept Archaeology, Sheffield, UK. Data collected Emily Forster.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_charring.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates from an experimental charring on cereal grains — charring","title":"Data: Outline coordinates from an experimental charring on cereal grains — charring","text":"Data: Outline coordinates experimental charring cereal grains","code":""},{"path":"http://momx.github.io/Momocs/reference/data_charring.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates from an experimental charring on cereal grains — charring","text":"object 18 grains, 3 views , 2 cereal species, charred different temperatures 6 hours (0C (charring), 230C 260C).","code":""},{"path":"http://momx.github.io/Momocs/reference/data_charring.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates from an experimental charring on cereal grains — charring","text":"Research support provided European Research Council (Evolutionary Origins Agriculture (grant . 269830-EOA) PI: Glynis Jones, Dept Archaeology, Sheffield, UK. Data collected Emily Forster.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_flower.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Measurement of iris flowers — flower","title":"Data: Measurement of iris flowers — flower","text":"Data: Measurement iris flowers","code":""},{"path":"http://momx.github.io/Momocs/reference/data_flower.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Measurement of iris flowers — flower","text":"TraCoe object 150 measurements 4 variables (petal + sepal) x (length x width) 3 species iris. dataset classical iris formatted Momocs.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_flower.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Measurement of iris flowers — flower","text":"see iris","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_hearts.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of hand-drawn hearts — hearts","title":"Data: Outline coordinates of hand-drawn hearts — hearts","text":"Data: Outline coordinates hand-drawn hearts","code":""},{"path":"http://momx.github.io/Momocs/reference/data_hearts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of hand-drawn hearts — hearts","text":"object outline coordinates 240 hand-drawn hearts 8 different persons, 4 landmarks.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_hearts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of hand-drawn hearts — hearts","text":"thank fellows Ecology Department French Institute Pondicherry drawn hearts, smoothed, scaled, centered, downsampled 80 coordinates per outline.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_molars.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of 360 molars — molars","title":"Data: Outline coordinates of 360 molars — molars","text":"Courtesy Julien Corny Florent Detroit.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_molars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of 360 molars — molars","text":"object containing 79 equilinearly spaced (x; y) coordinates 360 crown outlines, modern human molars, along type ($type) - 90 first upper molars (UM1), 90 second upper molars (UM2), 90 first lower molars (LM1), 90 second lower molars (LM2) - individual (ind) come (data 360 molars taken 180 individuals).","code":""},{"path":"http://momx.github.io/Momocs/reference/data_molars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of 360 molars — molars","text":"Corny, J., & Detroit, F. (2014). Technical Note: Anatomic identification isolated modern human molars: testing Procrustes aligned outlines standardization procedure elliptic fourier analysis. American Journal Physical Anthropology, 153(2), 314-22. doi:10.1002/ajpa.22428 see https://onlinelibrary.wiley.com/doi/abs/10.1002/ajpa.22428","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_mosquito.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of mosquito wings. — mosquito","title":"Data: Outline coordinates of mosquito wings. — mosquito","text":"Data: Outline coordinates mosquito wings.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_mosquito.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of mosquito wings. — mosquito","text":"object 126 mosquito wing outlines outlines used Rohlf Archie (1984). Note links defined quite approximate.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_mosquito.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of mosquito wings. — mosquito","text":"Rohlf F, Archie J. 1984. comparison Fourier methods description wing shape mosquitoes (Diptera: Culicidae). Systematic Biology: 302-317.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of mouse molars — mouse","title":"Data: Outline coordinates of mouse molars — mouse","text":"Data: Outline coordinates mouse molars","code":""},{"path":"http://momx.github.io/Momocs/reference/data_mouse.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of mouse molars — mouse","text":"object 64 coordinates 30 wood molar outlines.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_mouse.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of mouse molars — mouse","text":"Renaud S, Dufour AB, Hardouin EA, Ledevin R, Auffray JC (2015): upon multivariate analyses: tell several stories biological evolution. PLoS One 10:1-18  https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0132801","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_nsfishes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of North Sea fishes — nsfishes","title":"Data: Outline coordinates of North Sea fishes — nsfishes","text":"Data: Outline coordinates North Sea fishes","code":""},{"path":"http://momx.github.io/Momocs/reference/data_nsfishes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of North Sea fishes — nsfishes","text":"object containing outlines coordinates 218 fishes North Sea along taxonomical cofactors.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_nsfishes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of North Sea fishes — nsfishes","text":"Caillon F, Frelat R, Mollmann C, Bonhomme V (submitted)","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_oak.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Configuration of landmarks of oak leaves — oak","title":"Data: Configuration of landmarks of oak leaves — oak","text":"Viscosi Cardini (2001).","code":""},{"path":"http://momx.github.io/Momocs/reference/data_oak.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Configuration of landmarks of oak leaves — oak","text":"Ldk object containing 11 (x; y) landmarks  176 oak leaves wings, ","code":""},{"path":"http://momx.github.io/Momocs/reference/data_oak.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Configuration of landmarks of oak leaves — oak","text":"Viscosi, V., & Cardini, . (2011). Leaf morphology, taxonomy geometric morphometrics: simplified protocol beginners. PloS One, 6(10), e25630. doi:10.1371/journal.pone.0025630","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_olea.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of olive seeds open outlines. — olea","title":"Data: Outline coordinates of olive seeds open outlines. — olea","text":"Data: Outline coordinates olive seeds open outlines.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_olea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of olive seeds open outlines. — olea","text":"Opn object outline coordinates olive seeds.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_olea.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of olive seeds open outlines. — olea","text":"thank Jean-Frederic Terral Sarah Ivorra (UMR CBAE, Montpellier, France) allowing us share data. can look original paper: Terral J-F, Alonso N, Capdevila RB , Chatti N, Fabre L, Fiorentino G, Marinval P, Jorda GP, Pradat B, Rovira N, et al. 2004. Historical biogeography olive domestication (Olea europaea L.) revealed geometrical morphometry applied biological archaeological material. Journal Biogeography 31: 63-77.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of various shapes — shapes","title":"Data: Outline coordinates of various shapes — shapes","text":"Data: Outline coordinates various shapes","code":""},{"path":"http://momx.github.io/Momocs/reference/data_shapes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of various shapes — shapes","text":"object outline coordinates various shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_shapes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of various shapes — shapes","text":"Borrowed default shapes (c) Adobe Photoshop. send jail.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_trilo.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Outline coordinates of cephalic outlines of trilobite — trilo","title":"Data: Outline coordinates of cephalic outlines of trilobite — trilo","text":"Data: Outline coordinates cephalic outlines trilobite","code":""},{"path":"http://momx.github.io/Momocs/reference/data_trilo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Outline coordinates of cephalic outlines of trilobite — trilo","text":"object 64 coordinates 50 cephalic outlines different ontogenetic stages trilobite.","code":""},{"path":"http://momx.github.io/Momocs/reference/data_trilo.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Outline coordinates of cephalic outlines of trilobite — trilo","text":"Arranged :  https://folk.universitetetioslo./ (used ohammer website seems deprecated now). original data included 51 outlines 5 ontogenetic stages, one just single outline thas removed.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/data_wings.html","id":null,"dir":"Reference","previous_headings":"","what":"Data: Landmarks coordinates of mosquito wings — wings","title":"Data: Landmarks coordinates of mosquito wings — wings","text":"Data: Landmarks coordinates mosquito wings","code":""},{"path":"http://momx.github.io/Momocs/reference/data_wings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data: Landmarks coordinates of mosquito wings — wings","text":"Ldk object containing 18 (x; y) landmarks  127 mosquito wings, ","code":""},{"path":"http://momx.github.io/Momocs/reference/data_wings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data: Landmarks coordinates of mosquito wings — wings","text":"Rohlf Slice 1990.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/def_ldk.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines new landmarks on Out and Opn objects — def_ldk","title":"Defines new landmarks on Out and Opn objects — def_ldk","text":"Helps define landmarks Coo object. number landmarks must specified rows indices correspond nearest points clicked every outlines stored $ldk slot Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines new landmarks on Out and Opn objects — def_ldk","text":"","code":"def_ldk(Coo, nb.ldk, close, points)"},{"path":"http://momx.github.io/Momocs/reference/def_ldk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines new landmarks on Out and Opn objects — def_ldk","text":"Coo Opn object nb.ldk number landmarks define every shape close logical whether close (typically outlines) points logical whether display points","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines new landmarks on Out and Opn objects — def_ldk","text":"Opn object landmarks defined","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/def_ldk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines new landmarks on Out and Opn objects — def_ldk","text":"","code":"if (FALSE) { bot <- bot[1:5] # to make it shorter to try # click on 3 points, 5 times. # Don't forget to save the object returned by def_ldk... bot2 <- def_ldk(bot, 3) stack(bot2) bot2$ldk }"},{"path":"http://momx.github.io/Momocs/reference/def_ldk_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new landmarks based on angular positions — def_ldk_angle","title":"Add new landmarks based on angular positions — def_ldk_angle","text":"wrapper coo_intersect_angle coo_intersect_direction Opn objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new landmarks based on angular positions — def_ldk_angle","text":"","code":"def_ldk_angle(coo, angle)  def_ldk_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])  # S3 method for default def_ldk_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])  # S3 method for Out def_ldk_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])  # S3 method for Opn def_ldk_direction(coo, direction = c(\"down\", \"left\", \"up\", \"right\")[4])"},{"path":"http://momx.github.io/Momocs/reference/def_ldk_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new landmarks based on angular positions — def_ldk_angle","text":"coo Opn object angle numeric angle radians (0 default). direction character one \"\", \"left\", \"\", \"right\" (\"right\" default)","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new landmarks based on angular positions — def_ldk_angle","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_angle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add new landmarks based on angular positions — def_ldk_angle","text":"existing ldk preserved.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/def_ldk_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add new landmarks based on angular positions — def_ldk_angle","text":"","code":"# adds a new landmark towards south east hearts %>%    slice(1:5) %>% # for speed purpose only    def_ldk_angle(-pi/6) %>% stack()   # on Out and towards NW and NE here olea %>%    slice(1:5) %>% #for speed purpose only    def_ldk_angle(3*pi/4) %>%    def_ldk_angle(pi/4) %>%    stack"},{"path":"http://momx.github.io/Momocs/reference/def_ldk_tips.html","id":null,"dir":"Reference","previous_headings":"","what":"Define tips as new landmarks — def_ldk_tips","title":"Define tips as new landmarks — def_ldk_tips","text":"Opn objects, can used coo_slice. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_tips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define tips as new landmarks — def_ldk_tips","text":"","code":"def_ldk_tips(coo)"},{"path":"http://momx.github.io/Momocs/reference/def_ldk_tips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define tips as new landmarks — def_ldk_tips","text":"coo Opn object","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_tips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define tips as new landmarks — def_ldk_tips","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_tips.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Define tips as new landmarks — def_ldk_tips","text":"existing ldk preserved.","code":""},{"path":"http://momx.github.io/Momocs/reference/def_ldk_tips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define tips as new landmarks — def_ldk_tips","text":"","code":"is_ldk(olea) # no ldk for olea #> [1] FALSE olea %>% slice(1:3) %>% #for the sake of speed def_ldk_tips %>% def_ldk_angle(3*pi/4) %>% def_ldk_angle(pi/4) %T>% stack %>% coo_slice(ldk=1:4) -> oleas  stack(oleas[[1]])  stack(oleas[[2]]) # etc."},{"path":"http://momx.github.io/Momocs/reference/def_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines links between landmarks — def_links","title":"Defines links between landmarks — def_links","text":"Works Ldk objects, 2-cols matrices, 3-dim arrays (MSHAPES turns matrix).","code":""},{"path":"http://momx.github.io/Momocs/reference/def_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines links between landmarks — def_links","text":"","code":"def_links(x, nb.ldk)"},{"path":"http://momx.github.io/Momocs/reference/def_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines links between landmarks — def_links","text":"x Ldk, matric array nb.ldk numeric iterative procedure stopped user click top graphical window.","code":""},{"path":"http://momx.github.io/Momocs/reference/def_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines links between landmarks — def_links","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/def_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines links between landmarks — def_links","text":"","code":"if (FALSE) { wm <- MSHAPES(wings) links <- def_links(wm, 3) # click to define pairs of landmarks ldk_links(wm, links) }"},{"path":"http://momx.github.io/Momocs/reference/def_slidings.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines sliding landmarks matrix — def_slidings","title":"Defines sliding landmarks matrix — def_slidings","text":"Defines sliding landmarks matrix","code":""},{"path":"http://momx.github.io/Momocs/reference/def_slidings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines sliding landmarks matrix — def_slidings","text":"","code":"def_slidings(Coo, slidings)"},{"path":"http://momx.github.io/Momocs/reference/def_slidings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines sliding landmarks matrix — def_slidings","text":"Coo Ldk object slidings matrix, numeric list numeric. See Details","code":""},{"path":"http://momx.github.io/Momocs/reference/def_slidings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines sliding landmarks matrix — def_slidings","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/def_slidings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defines sliding landmarks matrix — def_slidings","text":"$slidings Ldk must 'valid' matrix: containing ids coordinates, none lower 1 higher number coordinates $coo. slidings matrix contains 3 columns (, slide, ). inspired geomorph compatible . matrix can passed directly slidings argument matrix. course, strictly equivalent Ldk$slidings <- slidings. slidings can also passed \"partition(s)\", sliding landmarks identified ids (row number) consecutive $coo. single partition can passed either numeric (eg 4:12), points 5 11 must considered sliding landmarks (4 12 fixed); list numeric. See examples .","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/def_slidings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines sliding landmarks matrix — def_slidings","text":"","code":"#waiting for a sliding dataset..."},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete cosinus transform — dfourier","title":"Discrete cosinus transform — dfourier","text":"Calculates discrete cosine transforms, introduced Dommergues colleagues, shape (mainly open outlines).","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete cosinus transform — dfourier","text":"","code":"dfourier(coo, nb.h)  # S3 method for default dfourier(coo, nb.h)  # S3 method for Opn dfourier(coo, nb.h)  # S3 method for list dfourier(coo, nb.h)  # S3 method for Coo dfourier(coo, nb.h)"},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete cosinus transform — dfourier","text":"coo matrix (list) (x; y) coordinates nb.h numeric number harmonics calculate","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete cosinus transform — dfourier","text":"list following components: harmonic coefficients bn B harmonic coefficients mod modules points arg arguments points","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Discrete cosinus transform — dfourier","text":"method poorly tested Momocs considered experimental. Yet improved factor 10, method still long execute. improved releases painful right now. also explains progress bar. Shapes aligned performing dct transform. Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Discrete cosinus transform — dfourier","text":"Dommergues, C. H., Dommergues, J.-L., & Verrecchia, E. P. (2007). Discrete Cosine Transform, Fourier-related Method Morphometric Analysis Open Contours. Mathematical Geology, 39(8), 749-763. doi:10.1007/s11004-007-9124-6 Many thanks Remi Laffont translation R).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/dfourier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete cosinus transform — dfourier","text":"","code":"o <- olea %>% slice(1:5) # for the sake of speed od <- dfourier(o) #> 'nb.h' not provided and set to 12 #>  od #> An OpnCoe object [ discrete cosine tansform analysis ] #> -------------------- #>  - $coe: 5 open outlines described #> # A tibble: 5 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   op <- PCA(od) plot(op, 1) #> will be deprecated soon, see ?plot_PCA   # dfourier and inverse dfourier o <- olea[1] o <- coo_bookstein(o) coo_plot(o) o.dfourier <- dfourier(o, nb.h=12) o.dfourier #> $an #>  [1] -3.11820730 -0.13206715 -0.24781390 -0.09660325 -0.06788311 -0.06691169 #>  [7] -0.03519719 -0.06016120 -0.02071002 -0.06544994 -0.01169704 -0.06810722 #>  #> $bn #>  [1]  0.032926049 -0.914830858  0.005334948 -0.268975696 -0.006644877 #>  [6] -0.101625518  0.003834764 -0.049467452  0.003042230 -0.028964333 #> [11] -0.002260202 -0.022833346 #>  #> $mod #>  [1] 3.11838113 0.92431446 0.24787132 0.28579733 0.06820756 0.12167547 #>  [7] 0.03540548 0.07788709 0.02093227 0.07157253 0.01191341 0.07183283 #>  #> $phi #>  [1]  3.131034 -1.714168  3.120068 -1.915601 -3.044016 -2.153064  3.033070 #>  [8] -2.453432  2.995739 -2.724958 -2.950716 -2.818113 #>  o.i <- dfourier_i(o.dfourier) o.i <- coo_bookstein(o.i) coo_draw(o.i, border='red')   #future calibrate_reconstructions o <- olea[1] h.range <- 2:13 coo <- list() for (i in seq(along=h.range)){ coo[[i]] <- dfourier_i(dfourier(o, nb.h=h.range[i]))} names(coo) <- paste0('h', h.range) panel(Opn(coo), borders=col_india(12), names=TRUE) title('Discrete Cosine Transforms')"},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Investe discrete cosinus transform — dfourier_i","title":"Investe discrete cosinus transform — dfourier_i","text":"Calculates inverse discrete cosine transforms (see dfourier), given list B harmonic coefficients, typically produced dfourier.","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Investe discrete cosinus transform — dfourier_i","text":"","code":"dfourier_i(df, nb.h, nb.pts = 60)"},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Investe discrete cosinus transform — dfourier_i","text":"df list $$B components, containing harmonic coefficients. nb.h custom number harmonics use nb.pts numeric number pts shape reconstruction","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Investe discrete cosinus transform — dfourier_i","text":"matrix (x; y) coordinates","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Investe discrete cosinus transform — dfourier_i","text":"core functions far. implemented Opn method soon.","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Investe discrete cosinus transform — dfourier_i","text":"Dommergues, C. H., Dommergues, J.-L., & Verrecchia, E. P. (2007). Discrete Cosine Transform, Fourier-related Method Morphometric Analysis Open Contours. Mathematical Geology, 39(8), 749-763. doi:10.1007/s11004-007-9124-6 Many thanks Remi Laffont translation R).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/dfourier_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Investe discrete cosinus transform — dfourier_i","text":"","code":"# dfourier and inverse dfourier o <- olea[1] o <- coo_bookstein(o) coo_plot(o) o.dfourier <- dfourier(o, nb.h=12) o.dfourier #> $an #>  [1] -3.11820730 -0.13206715 -0.24781390 -0.09660325 -0.06788311 -0.06691169 #>  [7] -0.03519719 -0.06016120 -0.02071002 -0.06544994 -0.01169704 -0.06810722 #>  #> $bn #>  [1]  0.032926049 -0.914830858  0.005334948 -0.268975696 -0.006644877 #>  [6] -0.101625518  0.003834764 -0.049467452  0.003042230 -0.028964333 #> [11] -0.002260202 -0.022833346 #>  #> $mod #>  [1] 3.11838113 0.92431446 0.24787132 0.28579733 0.06820756 0.12167547 #>  [7] 0.03540548 0.07788709 0.02093227 0.07157253 0.01191341 0.07183283 #>  #> $phi #>  [1]  3.131034 -1.714168  3.120068 -1.915601 -3.044016 -2.153064  3.033070 #>  [8] -2.453432  2.995739 -2.724958 -2.950716 -2.818113 #>  o.i <- dfourier_i(o.dfourier) o.i <- coo_bookstein(o.i) coo_draw(o.i, border='red')   o <- olea[1] h.range <- 2:13 coo <- list() for (i in seq(along=h.range)){ coo[[i]] <- dfourier_i(dfourier(o, nb.h=h.range[i]))} names(coo) <- paste0('h', h.range) panel(Opn(coo), borders=col_india(12), names=TRUE) title('Discrete Cosine Transforms')"},{"path":"http://momx.github.io/Momocs/reference/dfourier_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and draws 'dfourier' shapes — dfourier_shape","title":"Calculates and draws 'dfourier' shapes — dfourier_shape","text":"Calculates shapes based 'Discrete cosine transforms' given harmonic coefficients (see dfourier) can generate random 'dfourier' shapes. Mainly intended generate shapes /understand dfourier works.","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and draws 'dfourier' shapes — dfourier_shape","text":"","code":"dfourier_shape(A, B, nb.h, nb.pts = 60, alpha = 2, plot = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/dfourier_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and draws 'dfourier' shapes — dfourier_shape","text":"vector harmonic coefficients B vector harmonic coefficients nb.h /B provided, number harmonics generate nb.pts /B provided, number points use reconstruct shapes alpha power coefficient associated (usually decreasing) amplitude harmonic coefficients (see efourier_shape) plot logical whether plot shape","code":""},{"path":"http://momx.github.io/Momocs/reference/dfourier_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and draws 'dfourier' shapes — dfourier_shape","text":"list shapes plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/dfourier_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and draws 'dfourier' shapes — dfourier_shape","text":"","code":"# some signatures panel(coo_align(Opn(replicate(48, dfourier_shape(alpha=0.5, nb.h=6)))))                                                  # some worms panel(coo_align(Opn(replicate(48, dfourier_shape(alpha=2, nb.h=6)))))"},{"path":"http://momx.github.io/Momocs/reference/dissolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissolve Coe objects — dissolve","title":"Dissolve Coe objects — dissolve","text":"opposite combine, typically used . Note $fac slot may wrong since combine...well combines... $fac. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/dissolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissolve Coe objects — dissolve","text":"","code":"dissolve(x, retain)"},{"path":"http://momx.github.io/Momocs/reference/dissolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissolve Coe objects — dissolve","text":"x Coe object retain partition id retain. name partitions named (see x$method) eg chop","code":""},{"path":"http://momx.github.io/Momocs/reference/dissolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissolve Coe objects — dissolve","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/dissolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissolve Coe objects — dissolve","text":"","code":"data(bot) w <- filter(bot, type==\"whisky\") b <- filter(bot, type==\"beer\") wf <- efourier(w, 10) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bf <- efourier(b, 10) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details wbf <- combine(wf, bf) dissolve(wbf, 1) #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 20 outlines described, 10 harmonics #> # A tibble: 20 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 14 more rows dissolve(wbf, 2) #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 20 outlines described, 10 harmonics #> # A tibble: 20 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 14 more rows  # or using chop (yet combine here makes no sense) bw <- bot %>% chop(~type) %>% lapply(efourier, 10) %>% combine #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bw %>% dissolve(1) #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 20 outlines described, 10 harmonics #> # A tibble: 20 × 2 #>   type  fake  #>   <fct> <fct> #> 1 beer  c     #> 2 beer  c     #> 3 beer  c     #> 4 beer  c     #> 5 beer  c     #> 6 beer  c     #> # ℹ 14 more rows bw %>% dissolve(2) #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 20 outlines described, 10 harmonics #> # A tibble: 20 × 2 #>   type  fake  #>   <fct> <fct> #> 1 beer  c     #> 2 beer  c     #> 3 beer  c     #> 4 beer  c     #> 5 beer  c     #> 6 beer  c     #> # ℹ 14 more rows"},{"path":"http://momx.github.io/Momocs/reference/drawers.html","id":null,"dir":"Reference","previous_headings":"","what":"grindr drawers for shape plots — drawers","title":"grindr drawers for shape plots — drawers","text":"Useful drawers building custom shape plots using grindr approach. See examples vignettes.","code":""},{"path":"http://momx.github.io/Momocs/reference/drawers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grindr drawers for shape plots — drawers","text":"","code":"draw_polygon(   coo,   f,   col = par(\"fg\"),   fill = NA,   lwd = 1,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_outline(   coo,   f,   col = par(\"fg\"),   fill = NA,   lwd = 1,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_outlines(   coo,   f,   col = par(\"fg\"),   fill = NA,   lwd = 1,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_points(   coo,   f,   col = par(\"fg\"),   cex = 1/2,   pch = 20,   transp = 0,   pal = pal_qual,   ... )  draw_landmarks(   coo,   f,   col = par(\"fg\"),   cex = 1/2,   pch = 20,   transp = 0,   pal = pal_qual,   ... )  draw_lines(   coo,   f,   col = par(\"fg\"),   lwd = 1,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_centroid(   coo,   f,   col = par(\"fg\"),   pch = 3,   cex = 0.5,   transp = 0,   pal = pal_qual,   ... )  draw_curve(   coo,   f,   col = par(\"fg\"),   lwd = 1,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_curves(   coo,   f,   col = par(\"fg\"),   lwd = 1,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_firstpoint(   coo,   f,   label = \"^\",   col = par(\"fg\"),   cex = 3/4,   transp = 0,   pal = pal_qual,   ... )  draw_axes(coo, col = \"#999999\", lwd = 1/2, ...)  draw_ticks(coo, col = \"#333333\", cex = 3/4, lwd = 3/4, ...)  draw_labels(coo, labels = 1:nrow(coo), cex = 1/2, d = 1/20, ...)  draw_links(   coo,   f,   links,   col = \"#99999955\",   lwd = 1/2,   lty = 1,   transp = 0,   pal = pal_qual,   ... )  draw_title(   coo,   main = \"\",   sub = \"\",   cex = c(1, 3/4),   font = c(2, 1),   padding = 1/200,   ... )"},{"path":"http://momx.github.io/Momocs/reference/drawers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grindr drawers for shape plots — drawers","text":"coo matrix 2 columns (x, y) coordinates f optionnal factor specification feed. See examples vignettes. col color (hexadecimal) draw components fill color (hexadecimal) draw components lwd draw components lty draw components transp numeric transparency (default:0, min:0, max:1) pal palette use col/border/etc. provided. See [palettes] ... additional options feed core functions drawer cex draw components ((c(2, 1) default) draw_title) pch draw components label indicate first point labels character name labels draw (defaut 1:nrow(coo)) d numeric proportion d(centroid-each_point) add centrifugating landmarks links matrix links use draw segments landmarks. See wings$ldk example main character title (empty default) sub character subtitle (empty default) font numeric feed text (c(2, 1) default) padding numeric fraction graphical window (1/200 default)","code":""},{"path":"http://momx.github.io/Momocs/reference/drawers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grindr drawers for shape plots — drawers","text":"drawing layer","code":""},{"path":"http://momx.github.io/Momocs/reference/drawers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"grindr drawers for shape plots — drawers","text":"approach (soon) replace coo_plot friends versions. comments welcome.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/drawers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"grindr drawers for shape plots — drawers","text":"","code":"bot[1] %>% paper_grid() %>% draw_polygon()  olea %>% paper_chess %>% draw_lines(~var)   hearts[240] %>% paper_white() %>% draw_outline() %>%   coo_sample(24) %>% draw_landmarks %>% draw_labels() %>%   draw_links(links=replicate(2, sample(1:24, 8)))  bot %>%     paper_grid() %>%     draw_outlines() %>%     draw_title(\"Alcohol abuse \\nis dangerous for health\", \"Drink responsibly\")"},{"path":"http://momx.github.io/Momocs/reference/ed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates euclidean distance between two points. — ed","title":"Calculates euclidean distance between two points. — ed","text":"ed simply calculates euclidean distance two points defined (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/ed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates euclidean distance between two points. — ed","text":"","code":"ed(pt1, pt2)"},{"path":"http://momx.github.io/Momocs/reference/ed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates euclidean distance between two points. — ed","text":"pt1 (x; y) coordinates first point. pt2 (x; y) coordinates second point.","code":""},{"path":"http://momx.github.io/Momocs/reference/ed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates euclidean distance between two points. — ed","text":"Returns euclidean distance two points.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates euclidean distance between two points. — ed","text":"","code":"ed(c(0,1), c(1,0)) #> [1] 1.414214"},{"path":"http://momx.github.io/Momocs/reference/edi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates euclidean intermediate between two points. — edi","title":"Calculates euclidean intermediate between two points. — edi","text":"edi simply calculates coordinates points relative distance r pt1-pt2 defined (x; y) coordinates. function used internally may interest analyses.","code":""},{"path":"http://momx.github.io/Momocs/reference/edi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates euclidean intermediate between two points. — edi","text":"","code":"edi(pt1, pt2, r = 0.5)"},{"path":"http://momx.github.io/Momocs/reference/edi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates euclidean intermediate between two points. — edi","text":"pt1 \\((x; y)\\) coordinates first point. pt2 \\((x; y)\\) coordinates second point. r relative distance pt1 pt2.","code":""},{"path":"http://momx.github.io/Momocs/reference/edi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates euclidean intermediate between two points. — edi","text":"returns \\((x; y)\\) interpolated coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/edi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates euclidean intermediate between two points. — edi","text":"","code":"edi(c(0,1), c(1,0), r = 0.5) #> [1] 0.5 0.5"},{"path":"http://momx.github.io/Momocs/reference/edm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates euclidean distance every pairs of points in two matrices. — edm","title":"Calculates euclidean distance every pairs of points in two matrices. — edm","text":"edm returns euclidean distances points \\(1 -> n\\) two 2-col matrices dimension. function used internally may interest analyses.","code":""},{"path":"http://momx.github.io/Momocs/reference/edm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates euclidean distance every pairs of points in two matrices. — edm","text":"","code":"edm(m1, m2)"},{"path":"http://momx.github.io/Momocs/reference/edm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates euclidean distance every pairs of points in two matrices. — edm","text":"m1 first matrix coordinates. m2 second matrix coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/edm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates euclidean distance every pairs of points in two matrices. — edm","text":"Returns vector euclidean distances pairwise coordinates two matrices.","code":""},{"path":"http://momx.github.io/Momocs/reference/edm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates euclidean distance every pairs of points in two matrices. — edm","text":"one wishes align two (shapes) Procrustes surimposition may provide better solution.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/edm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates euclidean distance every pairs of points in two matrices. — edm","text":"","code":"x <- matrix(1:10, nc=2) edm(x, x) #> [1] 0 0 0 0 0 edm(x, x+1) #> [1] 1.414214 1.414214 1.414214 1.414214 1.414214"},{"path":"http://momx.github.io/Momocs/reference/edm_nearest.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","title":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","text":"edm_nearest calculates shortest euclidean distance found every point one matrix among second. words, m1, m2 n rows, result shortest distance first point m1 point m2 , n times. function used internally may interest analyses.","code":""},{"path":"http://momx.github.io/Momocs/reference/edm_nearest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","text":"","code":"edm_nearest(m1, m2, full = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/edm_nearest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","text":"m1 first list matrix coordinates. m2 second list matrix coordinates. full logical. Whether returns condensed version results.","code":""},{"path":"http://momx.github.io/Momocs/reference/edm_nearest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","text":"full TRUE, returns list two components: d every point m1 shortest distance found point m2, pos (m2) row indices points. Otherwise returns d numeric vector shortest distances.","code":""},{"path":"http://momx.github.io/Momocs/reference/edm_nearest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","text":"far function quite time consumming since performs \\( n \\times n \\) euclidean distance computation.  one wishes align two (shapes) Procrustes surimposition may provide better solution.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/edm_nearest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the shortest euclidean distance found for every point of one\nmatrix among those of a second. — edm_nearest","text":"","code":"x <- matrix(1:10, nc=2) edm_nearest(x, x+rnorm(10)) #> [1] 0.9276974 0.2276210 1.3132366 0.3104909 1.5710566 edm_nearest(x, x+rnorm(10), full=TRUE) #> $d #> [1] 1.2055581 1.0015449 1.1344017 1.1321094 0.5926906 #>  #> $pos #> [1] 1 1 3 5 5 #>"},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Elliptical Fourier transform (and its normalization) — efourier","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"efourier computes Elliptical Fourier Analysis (Transforms EFT) matrix (list) (x; y) coordinates. efourier_norm normalizes Fourier coefficients. Read Details carefully.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"","code":"efourier(x, ...)  # S3 method for default efourier(x, nb.h, smooth.it = 0, ...)  # S3 method for Out efourier(x, nb.h, smooth.it = 0, norm = TRUE, start = FALSE, ...)  # S3 method for list efourier(x, ...)  efourier_norm(ef, start = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"x list matrix coordinates object ... useless nb.h integer. number harmonics use. missing, 12 used shapes; 99 percent harmonic power objects, messages. smooth.integer. number smoothing iterations perform. norm whether normalize coefficients using efourier_norm start logical. efourier whether consider first point homologous; efourier_norm whether conserve position first point outline. ef list a_n, b_n, c_n d_n Fourier coefficients, typically returned efourier","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"efourier, list components: , bn, cn, dn harmonic coefficients, plus ao co. latter named a0 c0 Claude (2008) (intentionnaly) propagated error. efourier_norm, list components: , B, C, D harmonic coefficients, plus size, magnitude semi-major axis first fitting ellipse, theta angle, radians, starting semi-major axis first fitting ellipse, psi orientation first fitting ellipse, ao , , lnef concatenation coefficients.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"maths behind see paper JSS. Normalization coefficients long matter trouble, newcomers. two ways normalizing outlines: first, far used, use \"numerical\" alignment, directly matrix coefficients. coefficients first harmonic consumed process harmonics higher rank normalized terms size rotation. sometimes referred using \"first ellipse\", harmonics define ellipse plane, first one mother ellipses, others \"roll\" along. approach really convenient done easily software (option) Momocs . default option efourier. pitfall: shapes prone bad aligments among first ellipses, result poorly (even ) \"homologous\" coefficients. shapes particularly prone either (least roughly) circular /strong bilateral symmetry. can try use stack Coe object returned efourier. Also, perhaps explicitely, morphospace usually show mirroring symmetry, typically visible calculated couple components (usually first two). see  upside-(180 degrees rotated) shapes morphospace, seriously consider aligning shapes efourier step, performing latter norm = FALSE. pitfall explains (quite annoying) message passing efourier just . several options align shapes, using control points (landmarks), far time consuming (less reproducible) possibly best one alignment tricky automate. can also try Procrustes alignment (see fgProcrustes) calliper length (see coo_aligncalliper), etc. also make first point homologous either coo_slide coo_slidedirection minimize subsequent problems. dedicate (day) vignette paper problem.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"Directly borrowed Claude (2008). Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp. Ferson S, Rohlf FJ, Koehn RK. 1985. Measuring shape variation two-dimensional outlines. Systematic Biology 34: 59-68.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/efourier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elliptical Fourier transform (and its normalization) — efourier","text":"","code":"# single shape coo <- bot[1] coo_plot(coo) ef <- efourier(coo, 12) # same but silent efourier(coo, 12, norm=TRUE) #> $an #>  [1] -143.1142910    5.2925309   22.9922936  -11.3596452  -14.9412217 #>  [6]   -5.4200881    5.7177112    0.4509076    0.3107020   -3.1633079 #> [11]    0.2814646    3.4927761 #>  #> $bn #>  [1] -13.8501141 -21.8994092  11.4235084  13.5870435 -12.6401807   2.5050679 #>  [7]   5.1968464  -0.5366171  -1.0431706   1.0823659   2.3427969   0.1022387 #>  #> $cn #>  [1]  64.44753053  -3.15375656 -17.96822626   5.76052596   7.17390949 #>  [6]  -2.98410094  -1.20013013   1.18299684  -0.36305436  -0.46782525 #> [11]   0.67134872   0.08954658 #>  #> $dn #>  [1] -484.90299209   -1.04774048   42.07408510    3.40654863   -9.19128141 #>  [6]   -2.99359284    0.96722479    2.22582484    0.02026172   -2.26134728 #> [11]   -0.04679906    0.80569603 #>  #> $ao #> [1] 349.02 #>  #> $co #> [1] 1080.921 #>  # inverse EFT efi <- efourier_i(ef) coo_draw(efi, border='red', col=NA)   # on Out bot %>% slice(1:5) %>% efourier #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 5 outlines described, 10 harmonics #> # A tibble: 5 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a"},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse elliptical Fourier transform — efourier_i","title":"Inverse elliptical Fourier transform — efourier_i","text":"efourier_i uses inverse elliptical Fourier transformation calculate shape, given list Fourier coefficients, typically obtained computed efourier.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse elliptical Fourier transform — efourier_i","text":"","code":"efourier_i(ef, nb.h, nb.pts = 120)"},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse elliptical Fourier transform — efourier_i","text":"ef list. list containing \\(a_n\\), \\(b_n\\), \\(c_n\\) \\(d_n\\) Fourier coefficients, returned efourier. nb.h integer. number harmonics use. specified, length(ef$) used. nb.pts integer. number points calculate.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse elliptical Fourier transform — efourier_i","text":"matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse elliptical Fourier transform — efourier_i","text":"See efourier mathematical background.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse elliptical Fourier transform — efourier_i","text":"Directly borrowed Claude (2008), also called iefourier .","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse elliptical Fourier transform — efourier_i","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp. Ferson S, Rohlf FJ, Koehn RK. 1985. Measuring shape variation two-dimensional outlines. Systematic Biology 34: 59-68.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/efourier_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse elliptical Fourier transform — efourier_i","text":"","code":"coo <- bot[1] coo_plot(coo) ef  <- efourier(coo, 12) ef #> $an #>  [1] -143.1142910    5.2925309   22.9922936  -11.3596452  -14.9412217 #>  [6]   -5.4200881    5.7177112    0.4509076    0.3107020   -3.1633079 #> [11]    0.2814646    3.4927761 #>  #> $bn #>  [1] -13.8501141 -21.8994092  11.4235084  13.5870435 -12.6401807   2.5050679 #>  [7]   5.1968464  -0.5366171  -1.0431706   1.0823659   2.3427969   0.1022387 #>  #> $cn #>  [1]  64.44753053  -3.15375656 -17.96822626   5.76052596   7.17390949 #>  [6]  -2.98410094  -1.20013013   1.18299684  -0.36305436  -0.46782525 #> [11]   0.67134872   0.08954658 #>  #> $dn #>  [1] -484.90299209   -1.04774048   42.07408510    3.40654863   -9.19128141 #>  [6]   -2.99359284    0.96722479    2.22582484    0.02026172   -2.26134728 #> [11]   -0.04679906    0.80569603 #>  #> $ao #> [1] 349.02 #>  #> $co #> [1] 1080.921 #>  efi <- efourier_i(ef) coo_draw(efi, border='red', col=NA)"},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and draw 'efourier' shapes. — efourier_shape","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"efourier_shape calculates 'Fourier elliptical shape' given Fourier coefficients (see Details) can generate 'efourier' shapes. Mainly intended generate shapes /understand efourier works.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"","code":"efourier_shape(an, bn, cn, dn, nb.h, nb.pts = 60, alpha = 2, plot = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"numeric. \\(a_n\\) Fourier coefficients calculate shape. bn numeric. \\(b_n\\) Fourier coefficients calculate shape. cn numeric. \\(c_n\\) Fourier coefficients calculate shape. dn numeric. \\(d_n\\) Fourier coefficients calculate shape. nb.h integer. number harmonics use. nb.pts integer. number points calculate. alpha numeric. power coefficient associated (usually decreasing) amplitude Fourier coefficients (see Details). plot logical. Whether plot shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"list components: x vector x-coordinates y vector y-coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"efourier_shape can used specifying nb.h alpha. coefficients sampled uniform distribution \\((-\\pi ; \\pi)\\) amplitude divided \\(harmonicrank^alpha\\). alpha lower 1, consecutive coefficients thus increase. See efourier mathematical background.","code":""},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp. Ferson S, Rohlf FJ, Koehn RK. 1985. Measuring shape variation two-dimensional outlines. Systematic Biology 34: 59-68.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/efourier_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and draw 'efourier' shapes. — efourier_shape","text":"","code":"ef <- efourier(bot[1], 24) efourier_shape(ef$an, ef$bn, ef$cn, ef$dn) # equivalent to efourier_i(ef)  #>                 x          y #>  [1,] -139.292006   52.55414 #>  [2,] -136.616807   10.69211 #>  [3,] -131.350271  -30.94211 #>  [4,] -125.199336  -72.07640 #>  [5,] -118.953152 -113.78248 #>  [6,] -113.609682 -155.07182 #>  [7,] -110.814096 -196.99594 #>  [8,] -110.406802 -238.82588 #>  [9,] -114.448576 -280.46843 #> [10,] -121.291958 -321.87890 #> [11,] -128.793705 -362.93618 #> [12,] -133.799480 -404.68963 #> [13,] -133.459946 -446.39242 #> [14,] -121.381226 -485.99486 #> [15,]  -90.225043 -512.97786 #> [16,]  -49.878625 -523.21089 #> [17,]   -8.353210 -526.12066 #> [18,]   33.911396 -525.08469 #> [19,]   74.759609 -519.43972 #> [20,]  113.051448 -502.25491 #> [21,]  136.285584 -468.52283 #> [22,]  141.399365 -427.41134 #> [23,]  140.746409 -385.31652 #> [24,]  138.719031 -343.56495 #> [25,]  136.547192 -301.87577 #> [26,]  132.884166 -259.94004 #> [27,]  128.335128 -218.62173 #> [28,]  123.859620 -176.68909 #> [29,]  118.283114 -135.32263 #> [30,]  115.872309  -93.60856 #> [31,]  116.738256  -51.46991 #> [32,]  121.746650  -10.34707 #> [33,]  130.044438   31.28459 #> [34,]  135.215555   72.30011 #> [35,]  135.968480  114.36171 #> [36,]  127.773756  155.43284 #> [37,]  110.008193  192.61949 #> [38,]   91.059514  230.59227 #> [39,]   78.417823  270.00689 #> [40,]   72.336775  311.64758 #> [41,]   67.126887  353.28501 #> [42,]   63.718346  394.51271 #> [43,]   58.801472  437.18028 #> [44,]   54.675788  477.22927 #> [45,]   57.783825  520.56987 #> [46,]   46.279411  554.26720 #> [47,]    8.173233  561.94185 #> [48,]  -37.145543  559.89637 #> [49,]  -64.096831  541.62656 #> [50,]  -64.927840  500.81669 #> [51,]  -64.170645  459.21723 #> [52,]  -69.796352  417.94924 #> [53,]  -72.732679  375.54798 #> [54,]  -77.369097  334.76587 #> [55,]  -80.882096  292.41632 #> [56,]  -87.983533  251.76743 #> [57,] -103.969321  212.65038 #> [58,] -121.348549  174.68203 #> [59,] -136.478064  135.92288 #> [60,] -141.748300   94.09730 efourier_shape() # is autonomous  #>                 x            y #>  [1,] -0.15480069 -1.973007909 #>  [2,] -0.22809026 -1.818420231 #>  [3,] -0.27032753 -1.617424063 #>  [4,] -0.29533144 -1.379645958 #>  [5,] -0.31810038 -1.115840290 #>  [6,] -0.35332863 -0.837066371 #>  [7,] -0.41396840 -0.553906111 #>  [8,] -0.50997009 -0.275789459 #>  [9,] -0.64731572 -0.010481905 #> [10,] -0.82743225  0.236229469 #> [11,] -1.04703483  0.460635732 #> [12,] -1.29840910  0.660997728 #> [13,] -1.57010032  0.837256167 #> [14,] -1.84793879  0.990604033 #> [15,] -2.11630003  1.122977481 #> [16,] -2.35947761  1.236527684 #> [17,] -2.56303702  1.333135713 #> [18,] -2.71502309  1.414025714 #> [19,] -2.80690968  1.479519099 #> [20,] -2.83420662  1.528955598 #> [21,] -2.79667422  1.560787525 #> [22,] -2.69813421  1.572833685 #> [23,] -2.54590625  1.562660872 #> [24,] -2.34993539  1.528046001 #> [25,] -2.12170552  1.467461982 #> [26,] -1.87305376  1.380526662 #> [27,] -1.61500882  1.268356875 #> [28,] -1.35677236  1.133778649 #> [29,] -1.10494596  0.981359078 #> [30,] -0.86308017  0.817243778 #> [31,] -0.63158802  0.648804395 #> [32,] -0.40802730  0.484121281 #> [33,] -0.18771750  0.331344943 #> [34,]  0.03537770  0.197994496 #> [35,]  0.26759916  0.090260326 #> [36,]  0.51448708  0.012380671 #> [37,]  0.77974312 -0.033842603 #> [38,]  1.06437497 -0.049334829 #> [39,]  1.36612060 -0.037808467 #> [40,]  1.67922192 -0.005575404 #> [41,]  1.99458198  0.038882082 #> [42,]  2.30030138  0.085552509 #> [43,]  2.58255024  0.123698665 #> [44,]  2.82669741  0.142757057 #> [45,]  3.01859091  0.133256549 #> [46,]  3.14586632  0.087675830 #> [47,]  3.19915458  0.001163238 #> [48,]  3.17306813 -0.127946593 #> [49,]  3.06686342 -0.297867638 #> [50,]  2.88470784 -0.503375634 #> [51,]  2.63551577 -0.736101825 #> [52,]  2.33235949 -0.985084971 #> [53,]  1.99150137 -1.237536583 #> [54,]  1.63113051 -1.479755629 #> [55,]  1.26991586 -1.698116048 #> [56,]  0.92550660 -1.880044476 #> [57,]  0.61311653 -2.014907112 #> [58,]  0.34432245 -2.094733481 #> [59,]  0.12618734 -2.114720168 #> [60,] -0.03921072 -2.073477807  panel(Out(a2l(replicate(100, efourier_shape(nb.h=6, alpha=2.5, plot=FALSE))))) # Bubble family"},{"path":"http://momx.github.io/Momocs/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Exports Coe objects and shapes — export","title":"Exports Coe objects and shapes — export","text":"Writes .txt .xls whatever readable single shape,  Coe, PCA object, along individual names $fac.","code":""},{"path":"http://momx.github.io/Momocs/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exports Coe objects and shapes — export","text":"","code":"export(x, file, sep, dec)"},{"path":"http://momx.github.io/Momocs/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exports Coe objects and shapes — export","text":"x Coe PCA object file filenames data.txt default sep field separator string feed write.table). (default tab) tab default dec string  feed write.table) (default \".\") default.","code":""},{"path":"http://momx.github.io/Momocs/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exports Coe objects and shapes — export","text":"external file","code":""},{"path":"http://momx.github.io/Momocs/reference/export.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Exports Coe objects and shapes — export","text":"simple wrapper around write.table. Default parameters write .txt file, readable foreign programs. default parameters, numbers use dots decimal points, considered character chain Excel many countries (locale versions). can solved using dec=',' examples . looking file, specified file, getwd() help. mention everytime use function, cowardly run R Excel 'statistics' , innocent adorable kitten probably murdered somewhere. Use R!","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exports Coe objects and shapes — export","text":"","code":"# Will write (and remove) files on your working directory! if (FALSE) { bf <- efourier(bot, 6) # Export Coe (here Fourier coefficients) export(bf) # data.txt which can be opened by every software including MS Excel  # If you come from a country that uses comma as decimal separator (not recommended, but...) export(bf, dec=',') export(bf, file='data.xls', dec=',')  # Export PCA scores bf %>% PCA %>% export()  # for shapes (matrices) # export(bot[1], file='bot1.txt')   # remove these files from your machine  file.remove(\"coefficients.txt\", \"data.xls\", \"scores.txt\") }"},{"path":"http://momx.github.io/Momocs/reference/fProcrustes.html","id":null,"dir":"Reference","previous_headings":"","what":"Full Procrustes alignment between two shapes — fProcrustes","title":"Full Procrustes alignment between two shapes — fProcrustes","text":"Directly borrowed Claude (2008), called fPsup function.","code":""},{"path":"http://momx.github.io/Momocs/reference/fProcrustes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full Procrustes alignment between two shapes — fProcrustes","text":"","code":"fProcrustes(coo1, coo2)"},{"path":"http://momx.github.io/Momocs/reference/fProcrustes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full Procrustes alignment between two shapes — fProcrustes","text":"coo1 configuration matrix superimposed onto centered preshape coo2. coo2 reference configuration matrix.","code":""},{"path":"http://momx.github.io/Momocs/reference/fProcrustes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full Procrustes alignment between two shapes — fProcrustes","text":"list components: coo1 superimposed centered preshape coo1 onto centered preshape coo2 coo2 centered preshape coo2 rotation rotation matrix scale scale parameter DF full Procrustes distance coo1 coo2.","code":""},{"path":"http://momx.github.io/Momocs/reference/fProcrustes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Full Procrustes alignment between two shapes — fProcrustes","text":"Claude, J. (2008). Morphometrics R. Analysis (p. 316). Springer.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/fac_dispatcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Brew and serve fac from Momocs object — fac_dispatcher","title":"Brew and serve fac from Momocs object — fac_dispatcher","text":"Ease various specifications fac specification passed Momocs objects. Intensively used (internally).","code":""},{"path":"http://momx.github.io/Momocs/reference/fac_dispatcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brew and serve fac from Momocs object — fac_dispatcher","text":"","code":"fac_dispatcher(x, fac)"},{"path":"http://momx.github.io/Momocs/reference/fac_dispatcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brew and serve fac from Momocs object — fac_dispatcher","text":"x Momocs object (Coo, Coe, PCA, etc.) fac specification extract fac","code":""},{"path":"http://momx.github.io/Momocs/reference/fac_dispatcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brew and serve fac from Momocs object — fac_dispatcher","text":"prepared factor (numeric). See examples","code":""},{"path":"http://momx.github.io/Momocs/reference/fac_dispatcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Brew and serve fac from Momocs object — fac_dispatcher","text":"fac can : factor, passed fly column id $fac column name fac; found, return NULL message formula form: ~column_name ($fac, quotes). expresses concise way. Also allows interacting fly. See examples. NULL returns NULL, message","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/fac_dispatcher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brew and serve fac from Momocs object — fac_dispatcher","text":"","code":"bot <- mutate(bot, s=rnorm(40), fake=factor(rep(letters[1:4], 10)))  # factor, on the fly fac_dispatcher(bot, factor(rep(letters[1:4], 10))) #>  [1] a b c d a b c d a b c d a b c d a b c d a b c d a b c d a b c d a b c d a b #> [39] c d #> Levels: a b c d  # column id fac_dispatcher(bot, 1) #>  type1  type2  type3  type4  type5  type6  type7  type8  type9 type10 type11  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky  #> type12 type13 type14 type15 type16 type17 type18 type19 type20 type21 type22  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky   beer   beer  #> type23 type24 type25 type26 type27 type28 type29 type30 type31 type32 type33  #>   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer  #> type34 type35 type36 type37 type38 type39 type40  #>   beer   beer   beer   beer   beer   beer   beer  #> Levels: beer whisky  # column name fac_dispatcher(bot, \"type\") #>  type1  type2  type3  type4  type5  type6  type7  type8  type9 type10 type11  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky  #> type12 type13 type14 type15 type16 type17 type18 type19 type20 type21 type22  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky   beer   beer  #> type23 type24 type25 type26 type27 type28 type29 type30 type31 type32 type33  #>   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer  #> type34 type35 type36 type37 type38 type39 type40  #>   beer   beer   beer   beer   beer   beer   beer  #> Levels: beer whisky # same, numeric case fac_dispatcher(bot, \"s\") #>           s1           s2           s3           s4           s5           s6  #>  1.708650899 -0.759601384  0.972369565 -1.031840383  0.768586627  0.301285060  #>           s7           s8           s9          s10          s11          s12  #>  0.424560581  0.006571057  0.741297749  1.559007487 -0.417168752 -0.420322963  #>          s13          s14          s15          s16          s17          s18  #>  0.697185864 -0.210961609  1.541085498  0.284831960  0.321961376 -1.068526069  #>          s19          s20          s21          s22          s23          s24  #>  1.425715862  1.199570200 -1.678036407  1.828806163 -0.535208856 -0.835660641  #>          s25          s26          s27          s28          s29          s30  #> -0.758469900 -1.324129902  0.788467471 -1.376718465 -1.070395242 -0.986740931  #>          s31          s32          s33          s34          s35          s36  #>  0.536586184 -0.445206584 -0.003501437 -0.623814095  0.460846925 -0.577520120  #>          s37          s38          s39          s40  #>  1.687608566  0.025660517 -0.590307162  1.382021803   # formula interface fac_dispatcher(bot, ~type) #>  type1  type2  type3  type4  type5  type6  type7  type8  type9 type10 type11  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky whisky  #> type12 type13 type14 type15 type16 type17 type18 type19 type20 type21 type22  #> whisky whisky whisky whisky whisky whisky whisky whisky whisky   beer   beer  #> type23 type24 type25 type26 type27 type28 type29 type30 type31 type32 type33  #>   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer   beer  #> type34 type35 type36 type37 type38 type39 type40  #>   beer   beer   beer   beer   beer   beer   beer  #> Levels: beer whisky  # formula interface + interaction on the fly fac_dispatcher(bot, ~type+fake) #>  [1] whisky_a whisky_b whisky_c whisky_d whisky_a whisky_b whisky_c whisky_d #>  [9] whisky_a whisky_b whisky_c whisky_d whisky_a whisky_b whisky_c whisky_d #> [17] whisky_a whisky_b whisky_c whisky_d beer_a   beer_b   beer_c   beer_d   #> [25] beer_a   beer_b   beer_c   beer_d   beer_a   beer_b   beer_c   beer_d   #> [33] beer_a   beer_b   beer_c   beer_d   beer_a   beer_b   beer_c   beer_d   #> Levels: beer_a beer_b beer_c beer_d whisky_a whisky_b whisky_c whisky_d  # when passing NULL or non existing column fac_dispatcher(42, NULL) #> NULL fac_dispatcher(bot, \"loser\") #> not a valid column specification, returning NULL #> NULL"},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":null,"dir":"Reference","previous_headings":"","what":"Full Generalized Procrustes alignment between shapes — fgProcrustes","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"Directly borrowed Claude (2008), called fgpa2 function.","code":""},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"","code":"fgProcrustes(x, tol, coo)"},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"x array, list configurations, , Opn Ldk object tol numeric stop iterations coo logical, working Opn, whether use $coo rather $ldk","code":""},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"list components: rotated array superimposed configurations iterationnumber number iterations Q convergence criterion Qi full list Q Qd difference successive Q interproc.dist minimal sum squared norms pairwise differences shapes superimposed sample mshape mean shape configuration cent.size vector centroid sizes. , Opn Ldk object.","code":""},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"performed Opn object, try use $ldk slot, landmarks previousy defined, (message) $coo slot, case, shapes must number coordinates (coo_sample may help).","code":""},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"Slightly less optimized procGPA shapes package (~20% machine). optimized performance last thing improve! Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"Claude, J. (2008). Morphometrics R. Analysis (p. 316). Springer.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/fgProcrustes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full Generalized Procrustes alignment between shapes — fgProcrustes","text":"","code":"# on Ldk w <- wings %>% slice(1:5) # for the sake of speed stack(w)  fgProcrustes(w, tol=0.1) %>% stack() #> iteration:  1 \tgain: 77.967  #> iteration:  2 \tgain: 0.00039082    # on Out h <- hearts %>% slice(1:5) # for the sake of speed stack(h)  fgProcrustes(h) %>%  stack() #> iteration:  1 \tgain: 8.1326  #> iteration:  2 \tgain: 0.00031224  #> iteration:  3 \tgain: 4.8293e-05  #> iteration:  4 \tgain: 1.0158e-06  #> iteration:  5 \tgain: 4.1771e-05  #> iteration:  6 \tgain: 7.9575e-06  #> iteration:  7 \tgain: 9.2944e-06  #> iteration:  8 \tgain: 3.1971e-07  #> iteration:  9 \tgain: 5.6429e-06  #> iteration:  10 \tgain: 3.6475e-06  #> iteration:  11 \tgain: 1.0455e-06  #> iteration:  12 \tgain: 4.6442e-08  #> iteration:  13 \tgain: 3.9276e-07  #> iteration:  14 \tgain: 5.6006e-07  #> iteration:  15 \tgain: 3.5497e-07  #> iteration:  16 \tgain: 2.2619e-08  #> iteration:  17 \tgain: 1.6228e-07  #> iteration:  18 \tgain: 1.662e-07  #> iteration:  19 \tgain: 8.6435e-08  #> iteration:  20 \tgain: 6.7107e-09  #> iteration:  21 \tgain: 3.6428e-08  #> iteration:  22 \tgain: 4.0699e-08  #> iteration:  23 \tgain: 2.2641e-08  #> iteration:  24 \tgain: 2.0915e-09  #> iteration:  25 \tgain: 9.3406e-09  #> iteration:  26 \tgain: 1.0441e-08  #> iteration:  27 \tgain: 5.8207e-09  #> iteration:  28 \tgain: 6.1735e-10  #> iteration:  29 \tgain: 2.312e-09  #> iteration:  30 \tgain: 2.6457e-09  #> iteration:  31 \tgain: 1.502e-09  #> iteration:  32 \tgain: 1.793e-10  #> iteration:  33 \tgain: 5.7701e-10  #> iteration:  34 \tgain: 6.7226e-10  #> iteration:  35 \tgain: 3.8692e-10  #> iteration:  36 \tgain: 5.1135e-11"},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":null,"dir":"Reference","previous_headings":"","what":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"Directly wrapped around geomorph::gpagen.","code":""},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"","code":"fgsProcrustes(x)"},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"See ?gpagen geomorph package","code":""},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"x Ldk object $slidings","code":""},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"list","code":""},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"Landmarks methods less tested Momocs. Keep mind features still experimental help welcome.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/fgsProcrustes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full Generalized Procrustes alignment between shapes with sliding landmarks — fgsProcrustes","text":"","code":"ch <- chaff %>% slice(1:5) # for the sake of speed chaffp <- fgsProcrustes(ch) #>  #> Performing GPA #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10% #> Singular BE matrix; using generalized inverse   |                                                                               |==============                                                        |  20% #> Singular BE matrix; using generalized inverse   |                                                                               |=====================                                                 |  30% #> Singular BE matrix; using generalized inverse   |                                                                               |============================                                          |  40% #> Singular BE matrix; using generalized inverse   |                                                                               |===================================                                   |  50% #> Singular BE matrix; using generalized inverse   |                                                                               |==========================================                            |  60% #> Singular BE matrix; using generalized inverse   |                                                                               |=================================================                     |  70% #> Singular BE matrix; using generalized inverse   |                                                                               |========================================================              |  80% #> Singular BE matrix; using generalized inverse   |                                                                               |===============================================================       |  90% #> Singular BE matrix; using generalized inverse   |                                                                               |======================================================================| 100% #>  #> Making projections... Finished! chaffp #> An LdkCoe [full Generalized Procrustes] object with:  #> -------------------- #>  - $coo: 5 configuration of landmarks (172 +/- 0 coordinates) #> # A tibble: 5 × 3 #>   id    taxa  centsize #>   <fct> <fct>    <dbl> #> 1 571   tax1     1343. #> 2 572   tax1     1279. #> 3 573   tax1     1232. #> 4 581   tax1     1296. #> 5 582   tax1     1274. chaffp %>% PCA() %>% plot(\"taxa\") #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset based on conditions — filter","title":"Subset based on conditions — filter","text":"Return shapes matching conditions, $fac. See examples ?dplyr::filter.","code":""},{"path":"http://momx.github.io/Momocs/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset based on conditions — filter","text":"","code":"filter(.data, ...)"},{"path":"http://momx.github.io/Momocs/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset based on conditions — filter","text":".data Coo, Coe, PCA object ... logical conditions","code":""},{"path":"http://momx.github.io/Momocs/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset based on conditions — filter","text":"Momocs object class.","code":""},{"path":"http://momx.github.io/Momocs/reference/filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset based on conditions — filter","text":"dplyr verbs maintained. probbaly filter PCA objects. latter calculated using individuals filtering may lead false conclusions. want highlith individuals, see examples plot_PCA.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset based on conditions — filter","text":"","code":"olea #> Opn (curves) #>   - 210 curves, 98 +/- 4 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk # we retain on dorsal views filter(olea, view==\"VD\") #> Opn (curves) #>   - 120 curves, 100 +/- 3 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 120 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VD    O11   #> 3 Aglan cult  VD    O12   #> 4 Aglan cult  VD    O13   #> 5 Aglan cult  VD    O14   #> 6 Aglan cult  VD    O15   #> # ℹ 114 more rows #>   - also: $ldk # only dorsal views and Aglan+PicMa varieties filter(olea, view==\"VD\", var %in% c(\"Aglan\", \"PicMa\")) #> Opn (curves) #>   - 60 curves, 100 +/- 2 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 60 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VD    O11   #> 3 Aglan cult  VD    O12   #> 4 Aglan cult  VD    O13   #> 5 Aglan cult  VD    O14   #> 6 Aglan cult  VD    O15   #> # ℹ 54 more rows #>   - also: $ldk # we create an id column and retain the 120 first shapes olea %>% mutate(id=1:length(olea)) %>% filter(id > 120) #> Opn (curves) #>   - 90 curves, 99 +/- 4 coords (in $coo) #>   - 5 classifiers (in $fac):  #> # A tibble: 90 × 5 #>   var   domes view  ind      id #>   <fct> <fct> <fct> <fct> <int> #> 1 PicMa cult  VD    O24     121 #> 2 PicMa cult  VL    O24     122 #> 3 PicMa cult  VD    O25     123 #> 4 PicMa cult  VL    O25     124 #> 5 PicMa cult  VD    O26     125 #> 6 PicMa cult  VL    O26     126 #> # ℹ 84 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/flip_PCaxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Flips PCA axes — flip_PCaxes","title":"Flips PCA axes — flip_PCaxes","text":"Simply multiply -1, corresponding scores rotation vectors PCA objects. PC orientation arbitrary, may help better display.","code":""},{"path":"http://momx.github.io/Momocs/reference/flip_PCaxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flips PCA axes — flip_PCaxes","text":"","code":"flip_PCaxes(x, axs)"},{"path":"http://momx.github.io/Momocs/reference/flip_PCaxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flips PCA axes — flip_PCaxes","text":"x PCA object axs numeric PC(s) flip","code":""},{"path":"http://momx.github.io/Momocs/reference/flip_PCaxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flips PCA axes — flip_PCaxes","text":"","code":"bp <- bot %>% efourier(6) %>% PCA #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bp %>% plot #> will be deprecated soon, see ?plot_PCA  bp %>% flip_PCaxes(1) %>% plot() #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/get_chull_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates convex hull area/volume of PCA scores — get_chull_area","title":"Calculates convex hull area/volume of PCA scores — get_chull_area","text":"May useful compare shape diversity. Expressed PCA units compared within PCA.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_chull_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates convex hull area/volume of PCA scores — get_chull_area","text":"","code":"get_chull_area(x, fac, xax = 1, yax = 2)  get_chull_volume(x, fac, xax = 1, yax = 2, zax = 3)"},{"path":"http://momx.github.io/Momocs/reference/get_chull_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates convex hull area/volume of PCA scores — get_chull_area","text":"x PCA object fac (optionnal) column name ID $fac slot. xax first PC axis use (1 default) yax second PC axis (2 default) zax third PC axis (3 default volume)","code":""},{"path":"http://momx.github.io/Momocs/reference/get_chull_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates convex hull area/volume of PCA scores — get_chull_area","text":"fac provided global area/volume returned; otherwise named list every level fac","code":""},{"path":"http://momx.github.io/Momocs/reference/get_chull_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates convex hull area/volume of PCA scores — get_chull_area","text":"get_chull_area calculated using coo_chull followed coo_area; get_chull_volume calculated using geometry::convexhulln","code":""},{"path":"http://momx.github.io/Momocs/reference/get_chull_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates convex hull area/volume of PCA scores — get_chull_area","text":"","code":"bp <- PCA(efourier(bot, 12)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details get_chull_area(bp) #> [1] 0.01968577 get_chull_area(bp, 1) #> $beer #> [1] 0.01802331 #>  #> $whisky #> [1] 0.008768242 #>   get_chull_volume(bp) #> [1] 0.0005563784 get_chull_volume(bp, 1) #> $beer #> [1] 0.0004506466 #>  #> $whisky #> [1] 0.0001181342 #>"},{"path":"http://momx.github.io/Momocs/reference/get_ldk.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves landmarks coordinates — get_ldk","title":"Retrieves landmarks coordinates — get_ldk","text":"See Details different behaviors implemented.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_ldk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves landmarks coordinates — get_ldk","text":"","code":"get_ldk(Coo)"},{"path":"http://momx.github.io/Momocs/reference/get_ldk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves landmarks coordinates — get_ldk","text":"Coo , Opn Ldk object","code":""},{"path":"http://momx.github.io/Momocs/reference/get_ldk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves landmarks coordinates — get_ldk","text":"list shapes","code":""},{"path":"http://momx.github.io/Momocs/reference/get_ldk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieves landmarks coordinates — get_ldk","text":"Different behaviors depending class object: Ldk: retrieves landmarks. Ldk slidings defined: retrieves fixed landmarks, sliding ones. See also get_slidings. landmarks $ldk $coo, . Opn: .","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/get_ldk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves landmarks coordinates — get_ldk","text":"","code":"# Out example ldk.h <- get_ldk(hearts) stack(Ldk(ldk.h))   # on Ldk (no slidings) get_ldk(wings) # equivalent to wings$coo #> $AN1 #>          [,1]    [,2] #>  [1,] -0.4933  0.0130 #>  [2,] -0.0777  0.0832 #>  [3,]  0.2231  0.0861 #>  [4,]  0.2641  0.0462 #>  [5,]  0.2645  0.0261 #>  [6,]  0.2471  0.0003 #>  [7,]  0.2311 -0.0228 #>  [8,]  0.2040 -0.0452 #>  [9,]  0.1282 -0.0742 #> [10,]  0.0424 -0.0966 #> [11,] -0.0674 -0.1108 #> [12,] -0.4102 -0.0163 #> [13,] -0.3140  0.0318 #> [14,] -0.1768  0.0341 #> [15,]  0.0715  0.0509 #> [16,] -0.0540  0.0238 #> [17,]  0.0575 -0.0059 #> [18,] -0.1401 -0.0240 #>  #> $AN2 #>          [,1]    [,2] #>  [1,] -0.4814  0.0135 #>  [2,] -0.0058  0.0780 #>  [3,]  0.2345  0.0644 #>  [4,]  0.2460  0.0467 #>  [5,]  0.2487  0.0281 #>  [6,]  0.2430  0.0115 #>  [7,]  0.2316 -0.0039 #>  [8,]  0.1956 -0.0305 #>  [9,]  0.1462 -0.0545 #> [10,]  0.0483 -0.0866 #> [11,] -0.0520 -0.1047 #> [12,] -0.4016 -0.0250 #> [13,] -0.3868  0.0166 #> [14,] -0.1808  0.0229 #> [15,]  0.0484  0.0405 #> [16,] -0.0519  0.0164 #> [17,]  0.0623 -0.0047 #> [18,] -0.1444 -0.0286 #>  #> $AN3 #>          [,1]    [,2] #>  [1,] -0.4622  0.0159 #>  [2,]  0.0089  0.0689 #>  [3,]  0.2404  0.0545 #>  [4,]  0.2501  0.0424 #>  [5,]  0.2600  0.0230 #>  [6,]  0.2541  0.0039 #>  [7,]  0.2369 -0.0105 #>  [8,]  0.1957 -0.0305 #>  [9,]  0.1249 -0.0480 #> [10,]  0.0146 -0.0720 #> [11,] -0.0758 -0.0865 #> [12,] -0.4104 -0.0200 #> [13,] -0.3919  0.0190 #> [14,] -0.1724  0.0182 #> [15,]  0.0577  0.0344 #> [16,] -0.0468  0.0115 #> [17,]  0.0766 -0.0079 #> [18,] -0.1602 -0.0162 #>  #> $AN4 #>          [,1]    [,2] #>  [1,] -0.4534 -0.0028 #>  [2,] -0.0318  0.0738 #>  [3,]  0.2423  0.0808 #>  [4,]  0.2627  0.0559 #>  [5,]  0.2654  0.0322 #>  [6,]  0.2579  0.0143 #>  [7,]  0.2426  0.0018 #>  [8,]  0.1851 -0.0313 #>  [9,]  0.1191 -0.0581 #> [10,]  0.0203 -0.0847 #> [11,] -0.0919 -0.0957 #> [12,] -0.3862 -0.0289 #> [13,] -0.4051 -0.0072 #> [14,] -0.1536  0.0150 #> [15,]  0.0617  0.0436 #> [16,] -0.0549  0.0217 #> [17,]  0.0705 -0.0031 #> [18,] -0.1507 -0.0273 #>  #> $AN5 #>          [,1]    [,2] #>  [1,] -0.4926 -0.0212 #>  [2,] -0.0260  0.0708 #>  [3,]  0.2347  0.0679 #>  [4,]  0.2398  0.0584 #>  [5,]  0.2415  0.0355 #>  [6,]  0.2337  0.0187 #>  [7,]  0.2163  0.0010 #>  [8,]  0.1920 -0.0171 #>  [9,]  0.1271 -0.0443 #> [10,]  0.0427 -0.0699 #> [11,] -0.0516 -0.1016 #> [12,] -0.4242 -0.0505 #> [13,] -0.3970 -0.0018 #> [14,] -0.1374  0.0154 #> [15,]  0.0762  0.0457 #> [16,] -0.0313  0.0170 #> [17,]  0.0880  0.0037 #> [18,] -0.1318 -0.0278 #>  #> $AN6 #>          [,1]    [,2] #>  [1,] -0.4614  0.0567 #>  [2,] -0.0091  0.0684 #>  [3,]  0.2335  0.0345 #>  [4,]  0.2499  0.0171 #>  [5,]  0.2553 -0.0019 #>  [6,]  0.2522 -0.0176 #>  [7,]  0.2383 -0.0356 #>  [8,]  0.2030 -0.0524 #>  [9,]  0.1296 -0.0691 #> [10,]  0.0155 -0.0785 #> [11,] -0.0965 -0.0805 #> [12,] -0.4053  0.0196 #> [13,] -0.3907  0.0522 #> [14,] -0.1607  0.0403 #> [15,]  0.0703  0.0371 #> [16,] -0.0577  0.0258 #> [17,]  0.0801 -0.0118 #> [18,] -0.1463 -0.0042 #>  #> $AN7 #>          [,1]    [,2] #>  [1,] -0.4742 -0.0161 #>  [2,] -0.0633  0.0656 #>  [3,]  0.2206  0.0937 #>  [4,]  0.2490  0.0720 #>  [5,]  0.2576  0.0483 #>  [6,]  0.2512  0.0232 #>  [7,]  0.2388  0.0116 #>  [8,]  0.1871 -0.0273 #>  [9,]  0.1484 -0.0449 #> [10,]  0.0230 -0.0882 #> [11,] -0.0575 -0.1054 #> [12,] -0.3916 -0.0478 #> [13,] -0.3805 -0.0085 #> [14,] -0.1604  0.0119 #> [15,]  0.0647  0.0470 #> [16,] -0.0449  0.0135 #> [17,]  0.0903 -0.0072 #> [18,] -0.1585 -0.0414 #>  #> $AN8 #>          [,1]    [,2] #>  [1,] -0.4698  0.0224 #>  [2,]  0.0525  0.0771 #>  [3,]  0.2450  0.0501 #>  [4,]  0.2603  0.0333 #>  [5,]  0.2587  0.0166 #>  [6,]  0.2552  0.0071 #>  [7,]  0.2373 -0.0083 #>  [8,]  0.1808 -0.0319 #>  [9,]  0.1008 -0.0546 #> [10,]  0.0155 -0.0807 #> [11,] -0.0922 -0.0907 #> [12,] -0.4082 -0.0124 #> [13,] -0.3919  0.0228 #> [14,] -0.1604  0.0248 #> [15,]  0.0494  0.0383 #> [16,] -0.0575  0.0160 #> [17,]  0.0660 -0.0107 #> [18,] -0.1416 -0.0192 #>  #> $AN9 #>          [,1]    [,2] #>  [1,] -0.4652 -0.0110 #>  [2,] -0.0017  0.0759 #>  [3,]  0.2246  0.0759 #>  [4,]  0.2405  0.0587 #>  [5,]  0.2500  0.0443 #>  [6,]  0.2509  0.0258 #>  [7,]  0.2406  0.0057 #>  [8,]  0.2009 -0.0214 #>  [9,]  0.1389 -0.0475 #> [10,]  0.0284 -0.0790 #> [11,] -0.0450 -0.0979 #> [12,] -0.3999 -0.0458 #> [13,] -0.3968 -0.0077 #> [14,] -0.1886  0.0090 #> [15,]  0.0561  0.0424 #> [16,] -0.0683  0.0081 #> [17,]  0.0793 -0.0046 #> [18,] -0.1449 -0.0309 #>  #> $AN10 #>          [,1]    [,2] #>  [1,] -0.4496  0.0335 #>  [2,]  0.0012  0.0701 #>  [3,]  0.2502  0.0412 #>  [4,]  0.2591  0.0249 #>  [5,]  0.2598  0.0083 #>  [6,]  0.2540 -0.0054 #>  [7,]  0.2376 -0.0184 #>  [8,]  0.1914 -0.0377 #>  [9,]  0.1255 -0.0551 #> [10,]  0.0201 -0.0796 #> [11,] -0.0594 -0.0904 #> [12,] -0.4083 -0.0007 #> [13,] -0.3931  0.0279 #> [14,] -0.1805  0.0303 #> [15,]  0.0520  0.0405 #> [16,] -0.0622  0.0241 #> [17,]  0.0662 -0.0066 #> [18,] -0.1640 -0.0070 #>  #> $AN11 #>          [,1]    [,2] #>  [1,] -0.4586  0.0314 #>  [2,] -0.0040  0.0707 #>  [3,]  0.2412  0.0445 #>  [4,]  0.2514  0.0284 #>  [5,]  0.2543  0.0140 #>  [6,]  0.2504 -0.0032 #>  [7,]  0.2330 -0.0248 #>  [8,]  0.1846 -0.0433 #>  [9,]  0.1228 -0.0565 #> [10,]  0.0319 -0.0713 #> [11,] -0.0718 -0.0806 #> [12,] -0.4071 -0.0050 #> [13,] -0.3992  0.0249 #> [14,] -0.1819  0.0293 #> [15,]  0.0809  0.0402 #> [16,] -0.0575  0.0224 #> [17,]  0.0888 -0.0103 #> [18,] -0.1592 -0.0105 #>  #> $TO12 #>          [,1]    [,2] #>  [1,] -0.4577  0.0257 #>  [2,] -0.0119  0.0557 #>  [3,]  0.2215  0.0519 #>  [4,]  0.2416  0.0411 #>  [5,]  0.2510  0.0217 #>  [6,]  0.2488  0.0035 #>  [7,]  0.2333 -0.0147 #>  [8,]  0.1951 -0.0385 #>  [9,]  0.1154 -0.0580 #> [10,]  0.0081 -0.0710 #> [11,] -0.0986 -0.0839 #> [12,] -0.4056  0.0000 #> [13,] -0.3814  0.0248 #> [14,] -0.1579  0.0201 #> [15,]  0.1630  0.0365 #> [16,] -0.0686  0.0122 #> [17,]  0.0985 -0.0115 #> [18,] -0.1947 -0.0157 #>  #> $WY13 #>          [,1]    [,2] #>  [1,] -0.4704  0.0144 #>  [2,]  0.0120  0.0897 #>  [3,]  0.2333  0.0707 #>  [4,]  0.2545  0.0505 #>  [5,]  0.2624  0.0302 #>  [6,]  0.2601  0.0070 #>  [7,]  0.2429 -0.0154 #>  [8,]  0.2026 -0.0363 #>  [9,]  0.1108 -0.0668 #> [10,]  0.0149 -0.0885 #> [11,] -0.1081 -0.1035 #> [12,] -0.4161 -0.0288 #> [13,] -0.3559  0.0268 #> [14,] -0.1632  0.0253 #> [15,]  0.0432  0.0414 #> [16,] -0.0244  0.0162 #> [17,]  0.0478 -0.0092 #> [18,] -0.1462 -0.0237 #>  #> $WY14 #>          [,1]    [,2] #>  [1,] -0.4693 -0.0651 #>  [2,]  0.0093  0.0766 #>  [3,]  0.2223  0.0934 #>  [4,]  0.2417  0.0771 #>  [5,]  0.2472  0.0550 #>  [6,]  0.2427  0.0420 #>  [7,]  0.2263  0.0193 #>  [8,]  0.1913 -0.0059 #>  [9,]  0.1359 -0.0363 #> [10,]  0.0587 -0.0694 #> [11,] -0.0426 -0.0967 #> [12,] -0.4065 -0.0824 #> [13,] -0.4097 -0.0476 #> [14,] -0.1541  0.0086 #> [15,]  0.0189  0.0479 #> [16,] -0.0264  0.0211 #> [17,]  0.0566  0.0022 #> [18,] -0.1423 -0.0397 #>  #> $WY15 #>          [,1]    [,2] #>  [1,] -0.4673  0.0220 #>  [2,] -0.0277  0.0745 #>  [3,]  0.2456  0.0517 #>  [4,]  0.2553  0.0369 #>  [5,]  0.2618  0.0159 #>  [6,]  0.2593  0.0014 #>  [7,]  0.2409 -0.0152 #>  [8,]  0.1932 -0.0402 #>  [9,]  0.1261 -0.0584 #> [10,]  0.0266 -0.0732 #> [11,] -0.1079 -0.0788 #> [12,] -0.4005 -0.0119 #> [13,] -0.3871  0.0193 #> [14,] -0.1765  0.0251 #> [15,]  0.0456  0.0363 #> [16,] -0.0333  0.0174 #> [17,]  0.0724 -0.0072 #> [18,] -0.1266 -0.0156 #>  #> $WY16 #>          [,1]    [,2] #>  [1,] -0.4598  0.0418 #>  [2,]  0.0208  0.0737 #>  [3,]  0.2401  0.0484 #>  [4,]  0.2577  0.0265 #>  [5,]  0.2626  0.0063 #>  [6,]  0.2574 -0.0081 #>  [7,]  0.2337 -0.0255 #>  [8,]  0.1831 -0.0458 #>  [9,]  0.1230 -0.0605 #> [10,]  0.0175 -0.0749 #> [11,] -0.1034 -0.0821 #> [12,] -0.4151  0.0095 #> [13,] -0.4040  0.0348 #> [14,] -0.1433  0.0285 #> [15,]  0.0435  0.0364 #> [16,] -0.0406  0.0177 #> [17,]  0.0610 -0.0099 #> [18,] -0.1344 -0.0169 #>  #> $UR17 #>          [,1]    [,2] #>  [1,] -0.4690  0.0256 #>  [2,]  0.0188  0.0844 #>  [3,]  0.2381  0.0519 #>  [4,]  0.2517  0.0352 #>  [5,]  0.2540  0.0131 #>  [6,]  0.2459 -0.0122 #>  [7,]  0.2249 -0.0331 #>  [8,]  0.1799 -0.0516 #>  [9,]  0.1157 -0.0621 #> [10,]  0.0257 -0.0784 #> [11,] -0.1524 -0.0905 #> [12,] -0.4012 -0.0015 #> [13,] -0.3796  0.0340 #> [14,] -0.1482  0.0442 #> [15,]  0.1153  0.0437 #> [16,] -0.0745  0.0274 #> [17,]  0.0942 -0.0158 #> [18,] -0.1395 -0.0142 #>  #> $UR18 #>          [,1]    [,2] #>  [1,] -0.4999  0.0214 #>  [2,]  0.0533  0.0868 #>  [3,]  0.2081  0.0713 #>  [4,]  0.2263  0.0548 #>  [5,]  0.2358  0.0361 #>  [6,]  0.2391  0.0128 #>  [7,]  0.2206 -0.0235 #>  [8,]  0.1792 -0.0512 #>  [9,]  0.1168 -0.0693 #> [10,]  0.0343 -0.0924 #> [11,] -0.1419 -0.1106 #> [12,] -0.4192 -0.0064 #> [13,] -0.3695  0.0241 #> [14,] -0.1232  0.0410 #> [15,]  0.1380  0.0543 #> [16,] -0.0694  0.0134 #> [17,]  0.0825 -0.0252 #> [18,] -0.1111 -0.0373 #>  #> $UR19 #>          [,1]    [,2] #>  [1,] -0.4668 -0.0044 #>  [2,] -0.0334  0.0689 #>  [3,]  0.2229  0.0664 #>  [4,]  0.2464  0.0514 #>  [5,]  0.2598  0.0307 #>  [6,]  0.2588  0.0141 #>  [7,]  0.2389 -0.0053 #>  [8,]  0.1792 -0.0283 #>  [9,]  0.1107 -0.0468 #> [10,]  0.0349 -0.0718 #> [11,] -0.1502 -0.0893 #> [12,] -0.3964 -0.0316 #> [13,] -0.3764  0.0077 #> [14,] -0.1537  0.0238 #> [15,]  0.1411  0.0493 #> [16,] -0.0807  0.0116 #> [17,]  0.0985 -0.0159 #> [18,] -0.1336 -0.0306 #>  #> $UR20 #>          [,1]    [,2] #>  [1,] -0.4873  0.0122 #>  [2,] -0.0175  0.0784 #>  [3,]  0.2357  0.0725 #>  [4,]  0.2514  0.0514 #>  [5,]  0.2567  0.0255 #>  [6,]  0.2527  0.0058 #>  [7,]  0.2371 -0.0142 #>  [8,]  0.1959 -0.0388 #>  [9,]  0.1245 -0.0612 #> [10,]  0.0397 -0.0783 #> [11,] -0.1466 -0.1012 #> [12,] -0.4242 -0.0296 #> [13,] -0.3325  0.0165 #> [14,] -0.1271  0.0308 #> [15,]  0.0840  0.0459 #> [16,] -0.0807  0.0177 #> [17,]  0.0600 -0.0103 #> [18,] -0.1219 -0.0230 #>  #> $CA21 #>          [,1]    [,2] #>  [1,] -0.4829  0.0300 #>  [2,]  0.0117  0.0938 #>  [3,]  0.2398  0.0578 #>  [4,]  0.2544  0.0325 #>  [5,]  0.2518  0.0092 #>  [6,]  0.2446 -0.0074 #>  [7,]  0.2271 -0.0243 #>  [8,]  0.1758 -0.0524 #>  [9,]  0.1062 -0.0728 #> [10,]  0.0065 -0.0876 #> [11,] -0.0936 -0.0955 #> [12,] -0.4021  0.0090 #> [13,] -0.3899  0.0343 #> [14,] -0.1648  0.0403 #> [15,]  0.0951  0.0433 #> [16,] -0.0210  0.0206 #> [17,]  0.0735 -0.0094 #> [18,] -0.1321 -0.0214 #>  #> $CA22 #>          [,1]    [,2] #>  [1,] -0.4683  0.0225 #>  [2,]  0.0446  0.0866 #>  [3,]  0.2237  0.0673 #>  [4,]  0.2486  0.0447 #>  [5,]  0.2543  0.0291 #>  [6,]  0.2566  0.0081 #>  [7,]  0.2350 -0.0205 #>  [8,]  0.1694 -0.0470 #>  [9,]  0.1025 -0.0648 #> [10,]  0.0227 -0.0858 #> [11,] -0.0900 -0.0984 #> [12,] -0.4127 -0.0165 #> [13,] -0.3935  0.0185 #> [14,] -0.1948  0.0288 #> [15,]  0.0637  0.0464 #> [16,] -0.0261  0.0189 #> [17,]  0.0842 -0.0124 #> [18,] -0.1198 -0.0254 #>  #> $CA23 #>          [,1]    [,2] #>  [1,] -0.4625  0.0195 #>  [2,]  0.0534  0.0874 #>  [3,]  0.2472  0.0558 #>  [4,]  0.2595  0.0425 #>  [5,]  0.2608  0.0208 #>  [6,]  0.2517  0.0033 #>  [7,]  0.2317 -0.0116 #>  [8,]  0.1701 -0.0391 #>  [9,]  0.1081 -0.0590 #> [10,]  0.0151 -0.0825 #> [11,] -0.0976 -0.0988 #> [12,] -0.4123 -0.0236 #> [13,] -0.3980  0.0148 #> [14,] -0.1728  0.0274 #> [15,]  0.0480  0.0493 #> [16,] -0.0277  0.0244 #> [17,]  0.0489 -0.0032 #> [18,] -0.1236 -0.0275 #>  #> $CA24 #>          [,1]    [,2] #>  [1,] -0.4473  0.0502 #>  [2,] -0.0237  0.0884 #>  [3,]  0.2454  0.0522 #>  [4,]  0.2706  0.0277 #>  [5,]  0.2719  0.0059 #>  [6,]  0.2623 -0.0133 #>  [7,]  0.2396 -0.0313 #>  [8,]  0.1828 -0.0538 #>  [9,]  0.1047 -0.0703 #> [10,]  0.0191 -0.0914 #> [11,] -0.0813 -0.1033 #> [12,] -0.3940  0.0049 #> [13,] -0.3814  0.0464 #> [14,] -0.2018  0.0488 #> [15,]  0.0482  0.0441 #> [16,] -0.0358  0.0232 #> [17,]  0.0524 -0.0112 #> [18,] -0.1317 -0.0173 #>  #> $CA25 #>          [,1]    [,2] #>  [1,] -0.4681  0.0445 #>  [2,]  0.0566  0.0841 #>  [3,]  0.2515  0.0503 #>  [4,]  0.2635  0.0318 #>  [5,]  0.2617  0.0109 #>  [6,]  0.2493 -0.0113 #>  [7,]  0.2229 -0.0326 #>  [8,]  0.1654 -0.0584 #>  [9,]  0.1050 -0.0713 #> [10,]  0.0084 -0.0877 #> [11,] -0.1085 -0.0962 #> [12,] -0.4064  0.0035 #> [13,] -0.3850  0.0391 #> [14,] -0.1688  0.0396 #> [15,]  0.0717  0.0458 #> [16,] -0.0227  0.0245 #> [17,]  0.0439 -0.0054 #> [18,] -0.1404 -0.0113 #>  #> $CA26 #>          [,1]    [,2] #>  [1,] -0.4654  0.0045 #>  [2,] -0.0237  0.0591 #>  [3,]  0.2298  0.0652 #>  [4,]  0.2506  0.0472 #>  [5,]  0.2565  0.0359 #>  [6,]  0.2547  0.0191 #>  [7,]  0.2406  0.0016 #>  [8,]  0.1958 -0.0240 #>  [9,]  0.1348 -0.0499 #> [10,]  0.0377 -0.0837 #> [11,] -0.0598 -0.1028 #> [12,] -0.4078 -0.0288 #> [13,] -0.3939  0.0037 #> [14,] -0.1667  0.0187 #> [15,]  0.0639  0.0422 #> [16,] -0.0479  0.0175 #> [17,]  0.0514  0.0013 #> [18,] -0.1504 -0.0267 #>  #> $CA27 #>          [,1]    [,2] #>  [1,] -0.4544  0.0221 #>  [2,] -0.0074  0.0855 #>  [3,]  0.2360  0.0679 #>  [4,]  0.2578  0.0500 #>  [5,]  0.2686  0.0258 #>  [6,]  0.2677  0.0018 #>  [7,]  0.2525 -0.0206 #>  [8,]  0.2016 -0.0483 #>  [9,]  0.1010 -0.0702 #> [10,]  0.0270 -0.0886 #> [11,] -0.0571 -0.0967 #> [12,] -0.3962 -0.0166 #> [13,] -0.3685  0.0227 #> [14,] -0.1830  0.0288 #> [15,]  0.0186  0.0402 #> [16,] -0.0344  0.0185 #> [17,]  0.0542 -0.0106 #> [18,] -0.1840 -0.0120 #>  #> $OR28 #>          [,1]    [,2] #>  [1,] -0.4653 -0.0153 #>  [2,] -0.0530  0.0713 #>  [3,]  0.1996  0.0886 #>  [4,]  0.2548  0.0643 #>  [5,]  0.2654  0.0462 #>  [6,]  0.2632  0.0168 #>  [7,]  0.2399 -0.0084 #>  [8,]  0.1881 -0.0358 #>  [9,]  0.1297 -0.0542 #> [10,]  0.0436 -0.0796 #> [11,] -0.0329 -0.0978 #> [12,] -0.4176 -0.0393 #> [13,] -0.3934 -0.0092 #> [14,] -0.1727  0.0196 #> [15,]  0.0655  0.0490 #> [16,] -0.0419  0.0247 #> [17,]  0.0323 -0.0041 #> [18,] -0.1054 -0.0366 #>  #> $MA29 #>          [,1]    [,2] #>  [1,] -0.4624  0.0319 #>  [2,]  0.0361  0.0848 #>  [3,]  0.2647  0.0476 #>  [4,]  0.2711  0.0332 #>  [5,]  0.2686  0.0142 #>  [6,]  0.2536 -0.0028 #>  [7,]  0.2181 -0.0254 #>  [8,]  0.1662 -0.0468 #>  [9,]  0.1179 -0.0599 #> [10,]  0.0245 -0.0808 #> [11,] -0.0732 -0.0968 #> [12,] -0.3969 -0.0034 #> [13,] -0.3870  0.0305 #> [14,] -0.1745  0.0310 #> [15,]  0.0578  0.0444 #> [16,] -0.0471  0.0241 #> [17,]  0.0261 -0.0030 #> [18,] -0.1635 -0.0226 #>  #> $MA30 #>          [,1]    [,2] #>  [1,] -0.4740  0.0220 #>  [2,]  0.0024  0.0831 #>  [3,]  0.2327  0.0713 #>  [4,]  0.2492  0.0529 #>  [5,]  0.2556  0.0308 #>  [6,]  0.2491  0.0089 #>  [7,]  0.2318 -0.0089 #>  [8,]  0.1827 -0.0386 #>  [9,]  0.1087 -0.0608 #> [10,]  0.0389 -0.0882 #> [11,] -0.0529 -0.1136 #> [12,] -0.4112 -0.0271 #> [13,] -0.3980  0.0168 #> [14,] -0.1748  0.0275 #> [15,]  0.0599  0.0415 #> [16,] -0.0157  0.0171 #> [17,]  0.0480 -0.0105 #> [18,] -0.1324 -0.0244 #>  #> $MA31 #>          [,1]    [,2] #>  [1,] -0.4831 -0.0136 #>  [2,]  0.0024  0.0861 #>  [3,]  0.2431  0.0843 #>  [4,]  0.2554  0.0625 #>  [5,]  0.2540  0.0326 #>  [6,]  0.2405  0.0126 #>  [7,]  0.2165 -0.0073 #>  [8,]  0.1757 -0.0319 #>  [9,]  0.1188 -0.0525 #> [10,]  0.0420 -0.0831 #> [11,] -0.0576 -0.1092 #> [12,] -0.4031 -0.0419 #> [13,] -0.3856 -0.0059 #> [14,] -0.1916  0.0145 #> [15,]  0.0674  0.0531 #> [16,] -0.0285  0.0259 #> [17,]  0.0642 -0.0014 #> [18,] -0.1304 -0.0246 #>  #> $PS32 #>          [,1]    [,2] #>  [1,] -0.4955  0.0422 #>  [2,]  0.0429  0.0871 #>  [3,]  0.2268  0.0616 #>  [4,]  0.2411  0.0429 #>  [5,]  0.2455  0.0159 #>  [6,]  0.2386 -0.0002 #>  [7,]  0.2212 -0.0235 #>  [8,]  0.1736 -0.0527 #>  [9,]  0.1042 -0.0675 #> [10,]  0.0273 -0.0890 #> [11,] -0.0741 -0.1126 #> [12,] -0.4098  0.0008 #> [13,] -0.4000  0.0326 #> [14,] -0.1689  0.0341 #> [15,]  0.0781  0.0438 #> [16,] -0.0248  0.0224 #> [17,]  0.0790 -0.0106 #> [18,] -0.1054 -0.0273 #>  #> $PS33 #>          [,1]    [,2] #>  [1,] -0.4870 -0.0111 #>  [2,]  0.0401  0.0939 #>  [3,]  0.2165  0.0943 #>  [4,]  0.2332  0.0825 #>  [5,]  0.2471  0.0502 #>  [6,]  0.2408  0.0188 #>  [7,]  0.2241 -0.0047 #>  [8,]  0.1764 -0.0367 #>  [9,]  0.1146 -0.0632 #> [10,]  0.0050 -0.0961 #> [11,] -0.0748 -0.1175 #> [12,] -0.4034 -0.0539 #> [13,] -0.4011 -0.0029 #> [14,] -0.1615  0.0180 #> [15,]  0.0824  0.0556 #> [16,] -0.0144  0.0217 #> [17,]  0.0784 -0.0062 #> [18,] -0.1164 -0.0428 #>  #> $PS34 #>          [,1]    [,2] #>  [1,] -0.4862  0.0842 #>  [2,]  0.0260  0.0865 #>  [3,]  0.2370  0.0326 #>  [4,]  0.2426  0.0203 #>  [5,]  0.2407  0.0011 #>  [6,]  0.2355 -0.0171 #>  [7,]  0.2093 -0.0424 #>  [8,]  0.1746 -0.0611 #>  [9,]  0.1018 -0.0804 #> [10,]  0.0167 -0.0920 #> [11,] -0.0894 -0.1024 #> [12,] -0.4233  0.0207 #> [13,] -0.3944  0.0698 #> [14,] -0.1543  0.0526 #> [15,]  0.0847  0.0385 #> [16,]  0.0040  0.0209 #> [17,]  0.0815 -0.0175 #> [18,] -0.1069 -0.0145 #>  #> $PS35 #>          [,1]    [,2] #>  [1,] -0.4698  0.0229 #>  [2,]  0.0008  0.0769 #>  [3,]  0.2413  0.0565 #>  [4,]  0.2534  0.0372 #>  [5,]  0.2562  0.0211 #>  [6,]  0.2530  0.0045 #>  [7,]  0.2392 -0.0150 #>  [8,]  0.1969 -0.0380 #>  [9,]  0.1006 -0.0591 #> [10,]  0.0087 -0.0818 #> [11,] -0.0851 -0.0980 #> [12,] -0.4069 -0.0163 #> [13,] -0.3909  0.0199 #> [14,] -0.1716  0.0275 #> [15,]  0.0642  0.0463 #> [16,] -0.0269  0.0213 #> [17,]  0.0729 -0.0090 #> [18,] -0.1360 -0.0167 #>  #> $PS36 #>          [,1]    [,2] #>  [1,] -0.4781  0.0434 #>  [2,]  0.0151  0.0861 #>  [3,]  0.2315  0.0588 #>  [4,]  0.2497  0.0340 #>  [5,]  0.2522  0.0097 #>  [6,]  0.2468 -0.0098 #>  [7,]  0.2262 -0.0268 #>  [8,]  0.1710 -0.0504 #>  [9,]  0.1161 -0.0662 #> [10,]  0.0229 -0.0872 #> [11,] -0.0725 -0.0919 #> [12,] -0.4162 -0.0013 #> [13,] -0.3934  0.0423 #> [14,] -0.1805  0.0383 #> [15,]  0.0727  0.0398 #> [16,] -0.0165  0.0185 #> [17,]  0.0770 -0.0152 #> [18,] -0.1238 -0.0220 #>  #> $PS37 #>          [,1]    [,2] #>  [1,] -0.4831  0.0333 #>  [2,]  0.0053  0.0903 #>  [3,]  0.2195  0.0586 #>  [4,]  0.2431  0.0411 #>  [5,]  0.2528  0.0130 #>  [6,]  0.2449 -0.0048 #>  [7,]  0.2233 -0.0224 #>  [8,]  0.1825 -0.0408 #>  [9,]  0.1059 -0.0670 #> [10,]  0.0350 -0.0854 #> [11,] -0.0632 -0.1019 #> [12,] -0.4102 -0.0103 #> [13,] -0.4019  0.0322 #> [14,] -0.1665  0.0331 #> [15,]  0.0750  0.0390 #> [16,] -0.0117  0.0188 #> [17,]  0.0926 -0.0086 #> [18,] -0.1432 -0.0182 #>  #> $PS38 #>          [,1]    [,2] #>  [1,] -0.4868  0.0376 #>  [2,]  0.0145  0.0744 #>  [3,]  0.2315  0.0576 #>  [4,]  0.2463  0.0390 #>  [5,]  0.2527  0.0143 #>  [6,]  0.2466  0.0000 #>  [7,]  0.2285 -0.0178 #>  [8,]  0.1868 -0.0382 #>  [9,]  0.1200 -0.0602 #> [10,]  0.0140 -0.0828 #> [11,] -0.0960 -0.0979 #> [12,] -0.4053 -0.0083 #> [13,] -0.3932  0.0282 #> [14,] -0.1530  0.0252 #> [15,]  0.0769  0.0365 #> [16,] -0.0236  0.0192 #> [17,]  0.0819 -0.0094 #> [18,] -0.1417 -0.0175 #>  #> $PS39 #>          [,1]    [,2] #>  [1,] -0.4681  0.0267 #>  [2,]  0.0193  0.0801 #>  [3,]  0.2274  0.0661 #>  [4,]  0.2402  0.0517 #>  [5,]  0.2490  0.0300 #>  [6,]  0.2487  0.0093 #>  [7,]  0.2388 -0.0078 #>  [8,]  0.1901 -0.0408 #>  [9,]  0.1154 -0.0649 #> [10,]  0.0358 -0.0930 #> [11,] -0.0922 -0.1143 #> [12,] -0.4119 -0.0207 #> [13,] -0.3901  0.0205 #> [14,] -0.1749  0.0280 #> [15,]  0.0685  0.0439 #> [16,] -0.0261  0.0209 #> [17,]  0.0726 -0.0088 #> [18,] -0.1425 -0.0269 #>  #> $PS40 #>          [,1]    [,2] #>  [1,] -0.4708  0.0327 #>  [2,]  0.0546  0.0803 #>  [3,]  0.2318  0.0604 #>  [4,]  0.2454  0.0473 #>  [5,]  0.2528  0.0247 #>  [6,]  0.2488  0.0056 #>  [7,]  0.2253 -0.0160 #>  [8,]  0.1810 -0.0400 #>  [9,]  0.1072 -0.0659 #> [10,]  0.0325 -0.0918 #> [11,] -0.0733 -0.1075 #> [12,] -0.4125 -0.0175 #> [13,] -0.3964  0.0257 #> [14,] -0.1769  0.0264 #> [15,]  0.0782  0.0456 #> [16,] -0.0320  0.0199 #> [17,]  0.0493 -0.0081 #> [18,] -0.1450 -0.0218 #>  #> $PS41 #>          [,1]    [,2] #>  [1,] -0.4681  0.0007 #>  [2,] -0.0003  0.0884 #>  [3,]  0.2120  0.0925 #>  [4,]  0.2365  0.0755 #>  [5,]  0.2530  0.0482 #>  [6,]  0.2547  0.0290 #>  [7,]  0.2428  0.0031 #>  [8,]  0.2044 -0.0260 #>  [9,]  0.1192 -0.0625 #> [10,]  0.0515 -0.0936 #> [11,] -0.0682 -0.1217 #> [12,] -0.3970 -0.0443 #> [13,] -0.3857  0.0009 #> [14,] -0.1914  0.0123 #> [15,]  0.0543  0.0404 #> [16,] -0.0266  0.0088 #> [17,]  0.0521 -0.0126 #> [18,] -0.1431 -0.0391 #>  #> $PS42 #>          [,1]    [,2] #>  [1,] -0.4716  0.0113 #>  [2,] -0.0361  0.0801 #>  [3,]  0.2011  0.0886 #>  [4,]  0.2403  0.0590 #>  [5,]  0.2478  0.0350 #>  [6,]  0.2418  0.0160 #>  [7,]  0.2306 -0.0017 #>  [8,]  0.1874 -0.0304 #>  [9,]  0.1155 -0.0642 #> [10,]  0.0496 -0.0922 #> [11,] -0.0430 -0.1309 #> [12,] -0.4147 -0.0391 #> [13,] -0.3963  0.0063 #> [14,] -0.1871  0.0211 #> [15,]  0.0941  0.0519 #> [16,] -0.0092  0.0184 #> [17,]  0.0798  0.0003 #> [18,] -0.1300 -0.0296 #>  #> $PS43 #>          [,1]    [,2] #>  [1,] -0.4650  0.0189 #>  [2,]  0.0777  0.0958 #>  [3,]  0.2329  0.0615 #>  [4,]  0.2406  0.0500 #>  [5,]  0.2516  0.0248 #>  [6,]  0.2474  0.0028 #>  [7,]  0.2232 -0.0239 #>  [8,]  0.1751 -0.0467 #>  [9,]  0.0905 -0.0670 #> [10,]  0.0085 -0.0866 #> [11,] -0.0910 -0.1106 #> [12,] -0.4048 -0.0239 #> [13,] -0.3877  0.0175 #> [14,] -0.2037  0.0338 #> [15,]  0.0961  0.0522 #> [16,] -0.0197  0.0285 #> [17,]  0.0797 -0.0070 #> [18,] -0.1514 -0.0198 #>  #> $AE44 #>          [,1]    [,2] #>  [1,] -0.4725  0.0516 #>  [2,] -0.0143  0.0813 #>  [3,]  0.2422  0.0488 #>  [4,]  0.2507  0.0382 #>  [5,]  0.2559  0.0186 #>  [6,]  0.2537 -0.0002 #>  [7,]  0.2367 -0.0236 #>  [8,]  0.1749 -0.0518 #>  [9,]  0.1033 -0.0718 #> [10,]  0.0238 -0.0987 #> [11,] -0.0727 -0.1095 #> [12,] -0.4000  0.0036 #> [13,] -0.3912  0.0449 #> [14,] -0.1666  0.0384 #> [15,]  0.0829  0.0420 #> [16,] -0.0183  0.0225 #> [17,]  0.0560 -0.0095 #> [18,] -0.1445 -0.0249 #>  #> $AE45 #>          [,1]    [,2] #>  [1,] -0.4700  0.0329 #>  [2,]  0.0211  0.0740 #>  [3,]  0.2225  0.0573 #>  [4,]  0.2380  0.0445 #>  [5,]  0.2463  0.0264 #>  [6,]  0.2464  0.0056 #>  [7,]  0.2289 -0.0202 #>  [8,]  0.1914 -0.0426 #>  [9,]  0.1183 -0.0646 #> [10,]  0.0281 -0.0876 #> [11,] -0.0840 -0.0974 #> [12,] -0.4163 -0.0049 #> [13,] -0.4033  0.0281 #> [14,] -0.1798  0.0299 #> [15,]  0.0811  0.0398 #> [16,] -0.0269  0.0163 #> [17,]  0.0871 -0.0149 #> [18,] -0.1289 -0.0229 #>  #> $AE46 #>          [,1]    [,2] #>  [1,] -0.4763  0.0541 #>  [2,]  0.0198  0.0823 #>  [3,]  0.2385  0.0565 #>  [4,]  0.2495  0.0309 #>  [5,]  0.2487  0.0119 #>  [6,]  0.2414 -0.0050 #>  [7,]  0.2247 -0.0242 #>  [8,]  0.1859 -0.0439 #>  [9,]  0.1116 -0.0648 #> [10,]  0.0350 -0.0872 #> [11,] -0.0774 -0.1079 #> [12,] -0.4132 -0.0092 #> [13,] -0.3855  0.0404 #> [14,] -0.1809  0.0317 #> [15,]  0.0706  0.0405 #> [16,] -0.0278  0.0176 #> [17,]  0.0771 -0.0100 #> [18,] -0.1416 -0.0136 #>  #> $AE47 #>          [,1]    [,2] #>  [1,] -0.4650  0.0251 #>  [2,]  0.0340  0.0867 #>  [3,]  0.2201  0.0688 #>  [4,]  0.2449  0.0413 #>  [5,]  0.2502  0.0272 #>  [6,]  0.2497  0.0056 #>  [7,]  0.2334 -0.0178 #>  [8,]  0.2017 -0.0396 #>  [9,]  0.1236 -0.0666 #> [10,]  0.0180 -0.0880 #> [11,] -0.1076 -0.1018 #> [12,] -0.4067 -0.0178 #> [13,] -0.3950  0.0173 #> [14,] -0.1924  0.0277 #> [15,]  0.0536  0.0477 #> [16,] -0.0110  0.0214 #> [17,]  0.0727 -0.0081 #> [18,] -0.1240 -0.0291 #>  #> $AE48 #>          [,1]    [,2] #>  [1,] -0.4816 -0.0101 #>  [2,] -0.0088  0.0787 #>  [3,]  0.2519  0.0669 #>  [4,]  0.2576  0.0565 #>  [5,]  0.2584  0.0363 #>  [6,]  0.2483  0.0188 #>  [7,]  0.2217 -0.0046 #>  [8,]  0.1745 -0.0324 #>  [9,]  0.1081 -0.0580 #> [10,]  0.0173 -0.0796 #> [11,] -0.1134 -0.0967 #> [12,] -0.3990 -0.0323 #> [13,] -0.3859 -0.0026 #> [14,] -0.1730  0.0227 #> [15,]  0.0797  0.0444 #> [16,] -0.0026  0.0194 #> [17,]  0.0714 -0.0012 #> [18,] -0.1245 -0.0260 #>  #> $AE49 #>          [,1]    [,2] #>  [1,] -0.4629  0.0336 #>  [2,]  0.0171  0.0795 #>  [3,]  0.2194  0.0704 #>  [4,]  0.2486  0.0437 #>  [5,]  0.2537  0.0236 #>  [6,]  0.2519  0.0026 #>  [7,]  0.2329 -0.0160 #>  [8,]  0.2020 -0.0353 #>  [9,]  0.1282 -0.0616 #> [10,]  0.0354 -0.0929 #> [11,] -0.0687 -0.1047 #> [12,] -0.4003 -0.0198 #> [13,] -0.3796  0.0241 #> [14,] -0.2303  0.0291 #> [15,]  0.0574  0.0373 #> [16,] -0.0315  0.0182 #> [17,]  0.0682 -0.0090 #> [18,] -0.1416 -0.0229 #>  #> $AE50 #>          [,1]    [,2] #>  [1,] -0.4796  0.0445 #>  [2,]  0.0328  0.0897 #>  [3,]  0.2322  0.0526 #>  [4,]  0.2452  0.0328 #>  [5,]  0.2481  0.0158 #>  [6,]  0.2460 -0.0086 #>  [7,]  0.2302 -0.0294 #>  [8,]  0.1887 -0.0480 #>  [9,]  0.0998 -0.0674 #> [10,]  0.0049 -0.0882 #> [11,] -0.0920 -0.0998 #> [12,] -0.4136 -0.0102 #> [13,] -0.3879  0.0401 #> [14,] -0.1660  0.0347 #> [15,]  0.0839  0.0398 #> [16,] -0.0172  0.0234 #> [17,]  0.0791 -0.0039 #> [18,] -0.1344 -0.0181 #>  #> $AE51 #>          [,1]    [,2] #>  [1,] -0.4677  0.0660 #>  [2,] -0.0018  0.1009 #>  [3,]  0.2411  0.0573 #>  [4,]  0.2545  0.0301 #>  [5,]  0.2548  0.0037 #>  [6,]  0.2473 -0.0135 #>  [7,]  0.2332 -0.0313 #>  [8,]  0.1707 -0.0620 #>  [9,]  0.1136 -0.0767 #> [10,]  0.0222 -0.1042 #> [11,] -0.0559 -0.1135 #> [12,] -0.3919  0.0170 #> [13,] -0.3774  0.0620 #> [14,] -0.2083  0.0434 #> [15,]  0.0839  0.0383 #> [16,] -0.0297  0.0210 #> [17,]  0.0527 -0.0203 #> [18,] -0.1415 -0.0183 #>  #> $AE52 #>          [,1]    [,2] #>  [1,] -0.4727  0.0471 #>  [2,]  0.0132  0.0814 #>  [3,]  0.2200  0.0560 #>  [4,]  0.2417  0.0392 #>  [5,]  0.2517  0.0124 #>  [6,]  0.2487 -0.0071 #>  [7,]  0.2247 -0.0342 #>  [8,]  0.1889 -0.0556 #>  [9,]  0.1234 -0.0757 #> [10,]  0.0366 -0.0924 #> [11,] -0.0722 -0.1071 #> [12,] -0.4056  0.0170 #> [13,] -0.3994  0.0442 #> [14,] -0.1945  0.0406 #> [15,]  0.0769  0.0411 #> [16,] -0.0155  0.0201 #> [17,]  0.0568 -0.0137 #> [18,] -0.1228 -0.0132 #>  #> $AE53 #>          [,1]    [,2] #>  [1,] -0.4807  0.0159 #>  [2,] -0.0202  0.0827 #>  [3,]  0.2179  0.0740 #>  [4,]  0.2367  0.0518 #>  [5,]  0.2462  0.0284 #>  [6,]  0.2410  0.0037 #>  [7,]  0.2272 -0.0130 #>  [8,]  0.1851 -0.0385 #>  [9,]  0.1207 -0.0622 #> [10,]  0.0321 -0.0902 #> [11,] -0.0706 -0.1060 #> [12,] -0.4145 -0.0256 #> [13,] -0.3957  0.0149 #> [14,] -0.1793  0.0264 #> [15,]  0.0928  0.0493 #> [16,] -0.0085  0.0226 #> [17,]  0.0943 -0.0077 #> [18,] -0.1245 -0.0265 #>  #> $AE54 #>          [,1]    [,2] #>  [1,] -0.4692  0.0562 #>  [2,]  0.0113  0.0832 #>  [3,]  0.2364  0.0432 #>  [4,]  0.2471  0.0269 #>  [5,]  0.2512  0.0092 #>  [6,]  0.2441 -0.0114 #>  [7,]  0.2197 -0.0333 #>  [8,]  0.1746 -0.0524 #>  [9,]  0.1010 -0.0710 #> [10,]  0.0188 -0.0892 #> [11,] -0.0895 -0.1013 #> [12,] -0.4180  0.0126 #> [13,] -0.3956  0.0506 #> [14,] -0.1724  0.0422 #> [15,]  0.1044  0.0406 #> [16,] -0.0057  0.0242 #> [17,]  0.0756 -0.0119 #> [18,] -0.1337 -0.0188 #>  #> $AE55 #>          [,1]    [,2] #>  [1,] -0.4647  0.0148 #>  [2,]  0.0328  0.0689 #>  [3,]  0.2379  0.0568 #>  [4,]  0.2523  0.0430 #>  [5,]  0.2595  0.0223 #>  [6,]  0.2578  0.0052 #>  [7,]  0.2412 -0.0121 #>  [8,]  0.2027 -0.0352 #>  [9,]  0.1038 -0.0530 #> [10,]  0.0136 -0.0693 #> [11,] -0.1152 -0.0897 #> [12,] -0.3986 -0.0184 #> [13,] -0.3831  0.0119 #> [14,] -0.1813  0.0216 #> [15,]  0.0656  0.0390 #> [16,] -0.0403  0.0181 #> [17,]  0.0736 -0.0065 #> [18,] -0.1577 -0.0176 #>  #> $AE56 #>          [,1]    [,2] #>  [1,] -0.4643  0.0376 #>  [2,] -0.0249  0.0706 #>  [3,]  0.2336  0.0638 #>  [4,]  0.2522  0.0424 #>  [5,]  0.2586  0.0186 #>  [6,]  0.2564 -0.0016 #>  [7,]  0.2379 -0.0220 #>  [8,]  0.1841 -0.0415 #>  [9,]  0.1089 -0.0615 #> [10,]  0.0300 -0.0845 #> [11,] -0.0898 -0.0983 #> [12,] -0.4106 -0.0060 #> [13,] -0.3895  0.0278 #> [14,] -0.1702  0.0248 #> [15,]  0.0759  0.0394 #> [16,] -0.0150  0.0170 #> [17,]  0.0744 -0.0099 #> [18,] -0.1477 -0.0166 #>  #> $AE57 #>          [,1]    [,2] #>  [1,] -0.4828  0.0392 #>  [2,] -0.0177  0.0874 #>  [3,]  0.2484  0.0501 #>  [4,]  0.2576  0.0349 #>  [5,]  0.2591  0.0166 #>  [6,]  0.2516 -0.0050 #>  [7,]  0.2218 -0.0278 #>  [8,]  0.1684 -0.0531 #>  [9,]  0.1035 -0.0670 #> [10,]  0.0279 -0.0888 #> [11,] -0.0751 -0.1052 #> [12,] -0.3931 -0.0032 #> [13,] -0.3969  0.0420 #> [14,] -0.1688  0.0401 #> [15,]  0.0818  0.0463 #> [16,] -0.0094  0.0226 #> [17,]  0.0521 -0.0059 #> [18,] -0.1285 -0.0232 #>  #> $AE58 #>          [,1]    [,2] #>  [1,] -0.4712  0.0489 #>  [2,]  0.0625  0.0804 #>  [3,]  0.2222  0.0592 #>  [4,]  0.2441  0.0367 #>  [5,]  0.2491  0.0157 #>  [6,]  0.2467 -0.0018 #>  [7,]  0.2327 -0.0224 #>  [8,]  0.1965 -0.0425 #>  [9,]  0.1163 -0.0686 #> [10,]  0.0347 -0.0930 #> [11,] -0.0869 -0.1097 #> [12,] -0.4093  0.0021 #> [13,] -0.3883  0.0349 #> [14,] -0.1725  0.0325 #> [15,]  0.0504  0.0387 #> [16,] -0.0392  0.0198 #> [17,]  0.0675 -0.0162 #> [18,] -0.1555 -0.0148 #>  #> $AE59 #>          [,1]    [,2] #>  [1,] -0.4829 -0.0110 #>  [2,] -0.0098  0.0702 #>  [3,]  0.2305  0.0864 #>  [4,]  0.2584  0.0618 #>  [5,]  0.2570  0.0425 #>  [6,]  0.2426  0.0193 #>  [7,]  0.2192  0.0022 #>  [8,]  0.1676 -0.0241 #>  [9,]  0.1095 -0.0453 #> [10,]  0.0244 -0.0772 #> [11,] -0.0597 -0.0994 #> [12,] -0.4056 -0.0417 #> [13,] -0.4000 -0.0105 #> [14,] -0.1811  0.0104 #> [15,]  0.0829  0.0435 #> [16,] -0.0125  0.0117 #> [17,]  0.0856 -0.0066 #> [18,] -0.1262 -0.0320 #>  #> $AE60 #>          [,1]    [,2] #>  [1,] -0.4763  0.0391 #>  [2,]  0.0399  0.0951 #>  [3,]  0.2294  0.0748 #>  [4,]  0.2498  0.0509 #>  [5,]  0.2521  0.0178 #>  [6,]  0.2452 -0.0041 #>  [7,]  0.2200 -0.0252 #>  [8,]  0.1877 -0.0446 #>  [9,]  0.1021 -0.0731 #> [10,]  0.0172 -0.1043 #> [11,] -0.1109 -0.1183 #> [12,] -0.3956 -0.0066 #> [13,] -0.3835  0.0327 #> [14,] -0.1856  0.0394 #> [15,]  0.0696  0.0482 #> [16,] -0.0140  0.0210 #> [17,]  0.0847 -0.0112 #> [18,] -0.1318 -0.0316 #>  #> $AE61 #>          [,1]    [,2] #>  [1,] -0.4617  0.0257 #>  [2,] -0.0363  0.0805 #>  [3,]  0.2449  0.0659 #>  [4,]  0.2606  0.0389 #>  [5,]  0.2588  0.0255 #>  [6,]  0.2505  0.0054 #>  [7,]  0.2316 -0.0157 #>  [8,]  0.1783 -0.0465 #>  [9,]  0.1121 -0.0690 #> [10,]  0.0320 -0.0931 #> [11,] -0.0929 -0.1131 #> [12,] -0.4029 -0.0125 #> [13,] -0.3868  0.0196 #> [14,] -0.1833  0.0295 #> [15,]  0.0735  0.0539 #> [16,] -0.0217  0.0250 #> [17,]  0.0709 -0.0047 #> [18,] -0.1278 -0.0153 #>  #> $AE62 #>          [,1]    [,2] #>  [1,] -0.4899 -0.0062 #>  [2,]  0.0120  0.0676 #>  [3,]  0.2322  0.0679 #>  [4,]  0.2437  0.0543 #>  [5,]  0.2506  0.0304 #>  [6,]  0.2433  0.0098 #>  [7,]  0.2302 -0.0042 #>  [8,]  0.1901 -0.0281 #>  [9,]  0.1227 -0.0547 #> [10,]  0.0281 -0.0743 #> [11,] -0.0746 -0.0870 #> [12,] -0.4098 -0.0256 #> [13,] -0.3979 -0.0004 #> [14,] -0.1563  0.0184 #> [15,]  0.0717  0.0423 #> [16,] -0.0308  0.0153 #> [17,]  0.0716 -0.0061 #> [18,] -0.1369 -0.0194 #>  #> $AE63 #>          [,1]    [,2] #>  [1,] -0.4755  0.0458 #>  [2,]  0.0115  0.0887 #>  [3,]  0.2387  0.0626 #>  [4,]  0.2580  0.0351 #>  [5,]  0.2607  0.0113 #>  [6,]  0.2531 -0.0061 #>  [7,]  0.2338 -0.0283 #>  [8,]  0.1817 -0.0528 #>  [9,]  0.0846 -0.0718 #> [10,]  0.0053 -0.0886 #> [11,] -0.0847 -0.0995 #> [12,] -0.3990 -0.0003 #> [13,] -0.3796  0.0437 #> [14,] -0.1870  0.0389 #> [15,]  0.0760  0.0427 #> [16,] -0.0087  0.0158 #> [17,]  0.0698 -0.0190 #> [18,] -0.1387 -0.0180 #>  #> $AE64 #>          [,1]    [,2] #>  [1,] -0.4869  0.0242 #>  [2,] -0.0225  0.0761 #>  [3,]  0.2350  0.0677 #>  [4,]  0.2443  0.0560 #>  [5,]  0.2491  0.0389 #>  [6,]  0.2493  0.0173 #>  [7,]  0.2331 -0.0081 #>  [8,]  0.1806 -0.0367 #>  [9,]  0.1241 -0.0617 #> [10,]  0.0381 -0.0926 #> [11,] -0.0605 -0.1162 #> [12,] -0.3956 -0.0361 #> [13,] -0.3832  0.0226 #> [14,] -0.1822  0.0248 #> [15,]  0.0825  0.0473 #> [16,] -0.0211  0.0178 #> [17,]  0.0552 -0.0041 #> [18,] -0.1393 -0.0370 #>  #> $AE65 #>          [,1]    [,2] #>  [1,] -0.4734  0.0418 #>  [2,]  0.0120  0.0760 #>  [3,]  0.2281  0.0557 #>  [4,]  0.2417  0.0392 #>  [5,]  0.2475  0.0208 #>  [6,]  0.2471  0.0067 #>  [7,]  0.2335 -0.0141 #>  [8,]  0.1969 -0.0382 #>  [9,]  0.1173 -0.0641 #> [10,]  0.0343 -0.0854 #> [11,] -0.1142 -0.0941 #> [12,] -0.4119 -0.0102 #> [13,] -0.3943  0.0260 #> [14,] -0.1705  0.0265 #> [15,]  0.0578  0.0328 #> [16,] -0.0101  0.0157 #> [17,]  0.0916 -0.0131 #> [18,] -0.1334 -0.0221 #>  #> $AE66 #>          [,1]    [,2] #>  [1,] -0.4733  0.0634 #>  [2,]  0.0375  0.0889 #>  [3,]  0.2215  0.0532 #>  [4,]  0.2409  0.0342 #>  [5,]  0.2528  0.0053 #>  [6,]  0.2475 -0.0172 #>  [7,]  0.2245 -0.0341 #>  [8,]  0.1735 -0.0584 #>  [9,]  0.0939 -0.0720 #> [10,]  0.0066 -0.0898 #> [11,] -0.1113 -0.1010 #> [12,] -0.4122  0.0161 #> [13,] -0.3891  0.0520 #> [14,] -0.1736  0.0397 #> [15,]  0.1103  0.0418 #> [16,] -0.0110  0.0195 #> [17,]  0.0908 -0.0196 #> [18,] -0.1295 -0.0220 #>  #> $AE67 #>          [,1]    [,2] #>  [1,] -0.4745 -0.0048 #>  [2,] -0.0180  0.0739 #>  [3,]  0.2023  0.0863 #>  [4,]  0.2362  0.0689 #>  [5,]  0.2474  0.0435 #>  [6,]  0.2454  0.0244 #>  [7,]  0.2370  0.0076 #>  [8,]  0.1946 -0.0248 #>  [9,]  0.1253 -0.0550 #> [10,]  0.0461 -0.0881 #> [11,] -0.0717 -0.1084 #> [12,] -0.4133 -0.0474 #> [13,] -0.4007 -0.0074 #> [14,] -0.1827  0.0092 #> [15,]  0.0698  0.0415 #> [16,] -0.0069  0.0150 #> [17,]  0.0830 -0.0029 #> [18,] -0.1193 -0.0316 #>  #> $AE68 #>          [,1]    [,2] #>  [1,] -0.4682  0.0363 #>  [2,]  0.0162  0.0848 #>  [3,]  0.2220  0.0626 #>  [4,]  0.2528  0.0392 #>  [5,]  0.2574  0.0164 #>  [6,]  0.2491 -0.0044 #>  [7,]  0.2243 -0.0272 #>  [8,]  0.1727 -0.0476 #>  [9,]  0.1078 -0.0619 #> [10,]  0.0231 -0.0810 #> [11,] -0.0979 -0.0994 #> [12,] -0.4090 -0.0105 #> [13,] -0.3968  0.0310 #> [14,] -0.1951  0.0358 #> [15,]  0.0985  0.0423 #> [16,] -0.0013  0.0195 #> [17,]  0.0729 -0.0110 #> [18,] -0.1284 -0.0248 #>  #> $AE69 #>          [,1]    [,2] #>  [1,] -0.4863  0.0295 #>  [2,]  0.0127  0.0793 #>  [3,]  0.2191  0.0650 #>  [4,]  0.2358  0.0459 #>  [5,]  0.2457  0.0240 #>  [6,]  0.2417  0.0087 #>  [7,]  0.2301 -0.0121 #>  [8,]  0.1995 -0.0360 #>  [9,]  0.1184 -0.0630 #> [10,]  0.0296 -0.0845 #> [11,] -0.0793 -0.1054 #> [12,] -0.4148 -0.0143 #> [13,] -0.3983  0.0188 #> [14,] -0.1556  0.0227 #> [15,]  0.0775  0.0426 #> [16,] -0.0229  0.0174 #> [17,]  0.0789 -0.0132 #> [18,] -0.1320 -0.0255 #>  #> $AE70 #>          [,1]    [,2] #>  [1,] -0.4737  0.0113 #>  [2,]  0.0050  0.0868 #>  [3,]  0.2235  0.0796 #>  [4,]  0.2462  0.0555 #>  [5,]  0.2500  0.0330 #>  [6,]  0.2454  0.0145 #>  [7,]  0.2256 -0.0071 #>  [8,]  0.1972 -0.0254 #>  [9,]  0.1149 -0.0624 #> [10,]  0.0369 -0.0947 #> [11,] -0.0880 -0.1198 #> [12,] -0.4060 -0.0291 #> [13,] -0.3921  0.0033 #> [14,] -0.1731  0.0192 #> [15,]  0.0698  0.0518 #> [16,] -0.0206  0.0244 #> [17,]  0.0761 -0.0092 #> [18,] -0.1368 -0.0317 #>  #> $AE71 #>          [,1]    [,2] #>  [1,] -0.4874 -0.0215 #>  [2,] -0.0026  0.0984 #>  [3,]  0.2117  0.0955 #>  [4,]  0.2368  0.0724 #>  [5,]  0.2441  0.0511 #>  [6,]  0.2405  0.0297 #>  [7,]  0.2309  0.0125 #>  [8,]  0.1885 -0.0225 #>  [9,]  0.1217 -0.0534 #> [10,]  0.0463 -0.0908 #> [11,] -0.0510 -0.1233 #> [12,] -0.3904 -0.0572 #> [13,] -0.3866 -0.0109 #> [14,] -0.2039  0.0073 #> [15,]  0.0774  0.0526 #> [16,] -0.0172  0.0150 #> [17,]  0.0720 -0.0079 #> [18,] -0.1308 -0.0471 #>  #> $AE72 #>          [,1]    [,2] #>  [1,] -0.4795  0.0247 #>  [2,]  0.0091  0.0831 #>  [3,]  0.2254  0.0679 #>  [4,]  0.2418  0.0477 #>  [5,]  0.2478  0.0260 #>  [6,]  0.2434  0.0069 #>  [7,]  0.2229 -0.0137 #>  [8,]  0.1698 -0.0435 #>  [9,]  0.1011 -0.0675 #> [10,]  0.0302 -0.0889 #> [11,] -0.0886 -0.1022 #> [12,] -0.4144 -0.0192 #> [13,] -0.3939  0.0218 #> [14,] -0.1871  0.0307 #> [15,]  0.1069  0.0493 #> [16,] -0.0070  0.0188 #> [17,]  0.0938 -0.0142 #> [18,] -0.1216 -0.0280 #>  #> $AE73 #>          [,1]    [,2] #>  [1,] -0.4812  0.0565 #>  [2,] -0.0083  0.0817 #>  [3,]  0.2518  0.0414 #>  [4,]  0.2618  0.0231 #>  [5,]  0.2579  0.0073 #>  [6,]  0.2441 -0.0147 #>  [7,]  0.2224 -0.0303 #>  [8,]  0.1684 -0.0514 #>  [9,]  0.0983 -0.0710 #> [10,]  0.0396 -0.0905 #> [11,] -0.0744 -0.1091 #> [12,] -0.3931  0.0040 #> [13,] -0.3867  0.0503 #> [14,] -0.1847  0.0468 #> [15,]  0.0925  0.0426 #> [16,] -0.0247  0.0228 #> [17,]  0.0492 -0.0054 #> [18,] -0.1331 -0.0041 #>  #> $AE74 #>          [,1]    [,2] #>  [1,] -0.4993  0.0324 #>  [2,]  0.0385  0.0888 #>  [3,]  0.2101  0.0738 #>  [4,]  0.2442  0.0458 #>  [5,]  0.2478  0.0201 #>  [6,]  0.2385 -0.0078 #>  [7,]  0.2092 -0.0311 #>  [8,]  0.1675 -0.0509 #>  [9,]  0.1004 -0.0700 #> [10,]  0.0204 -0.0891 #> [11,] -0.0874 -0.1027 #> [12,] -0.4197 -0.0120 #> [13,] -0.3998  0.0311 #> [14,] -0.1515  0.0383 #> [15,]  0.0957  0.0439 #> [16,]  0.0090  0.0234 #> [17,]  0.0858 -0.0101 #> [18,] -0.1094 -0.0239 #>  #> $AE75 #>          [,1]    [,2] #>  [1,] -0.4930  0.0009 #>  [2,]  0.0098  0.0850 #>  [3,]  0.2238  0.0734 #>  [4,]  0.2375  0.0589 #>  [5,]  0.2455  0.0384 #>  [6,]  0.2455  0.0211 #>  [7,]  0.2315 -0.0059 #>  [8,]  0.1734 -0.0333 #>  [9,]  0.1027 -0.0571 #> [10,]  0.0428 -0.0851 #> [11,] -0.0623 -0.1083 #> [12,] -0.4081 -0.0362 #> [13,] -0.3975  0.0072 #> [14,] -0.1826  0.0205 #> [15,]  0.0913  0.0498 #> [16,] -0.0073  0.0133 #> [17,]  0.0610 -0.0098 #> [18,] -0.1140 -0.0327 #>  #> $AE76 #>          [,1]    [,2] #>  [1,] -0.4792  0.0348 #>  [2,]  0.0304  0.0869 #>  [3,]  0.2140  0.0581 #>  [4,]  0.2300  0.0414 #>  [5,]  0.2386  0.0231 #>  [6,]  0.2373  0.0049 #>  [7,]  0.2247 -0.0140 #>  [8,]  0.1851 -0.0421 #>  [9,]  0.1217 -0.0651 #> [10,]  0.0216 -0.0856 #> [11,] -0.0886 -0.1011 #> [12,] -0.4228 -0.0215 #> [13,] -0.3953  0.0281 #> [14,] -0.1876  0.0300 #> [15,]  0.1045  0.0452 #> [16,] -0.0007  0.0172 #> [17,]  0.0934 -0.0135 #> [18,] -0.1271 -0.0268 #>  #> $AE77 #>          [,1]    [,2] #>  [1,] -0.4881  0.0362 #>  [2,]  0.0112  0.0821 #>  [3,]  0.2292  0.0667 #>  [4,]  0.2434  0.0459 #>  [5,]  0.2498  0.0225 #>  [6,]  0.2441  0.0014 #>  [7,]  0.2256 -0.0232 #>  [8,]  0.1860 -0.0492 #>  [9,]  0.1195 -0.0705 #> [10,]  0.0140 -0.0947 #> [11,] -0.0906 -0.1020 #> [12,] -0.4026 -0.0068 #> [13,] -0.3875  0.0336 #> [14,] -0.1753  0.0313 #> [15,]  0.0810  0.0459 #> [16,] -0.0129  0.0188 #> [17,]  0.0793 -0.0134 #> [18,] -0.1262 -0.0247 #>  #> $AE78 #>          [,1]    [,2] #>  [1,] -0.4808  0.0257 #>  [2,]  0.0119  0.0828 #>  [3,]  0.2359  0.0674 #>  [4,]  0.2512  0.0466 #>  [5,]  0.2487  0.0253 #>  [6,]  0.2389  0.0053 #>  [7,]  0.2190 -0.0150 #>  [8,]  0.1791 -0.0401 #>  [9,]  0.1275 -0.0625 #> [10,]  0.0294 -0.0893 #> [11,] -0.0727 -0.1060 #> [12,] -0.4010 -0.0194 #> [13,] -0.4092  0.0233 #> [14,] -0.1771  0.0352 #> [15,]  0.0698  0.0404 #> [16,] -0.0148  0.0155 #> [17,]  0.0663 -0.0123 #> [18,] -0.1222 -0.0228 #>  #> $AE79 #>          [,1]    [,2] #>  [1,] -0.4854 -0.0160 #>  [2,]  0.0061  0.0899 #>  [3,]  0.2144  0.0921 #>  [4,]  0.2502  0.0634 #>  [5,]  0.2546  0.0396 #>  [6,]  0.2495  0.0239 #>  [7,]  0.2275  0.0048 #>  [8,]  0.1833 -0.0226 #>  [9,]  0.1243 -0.0512 #> [10,]  0.0498 -0.0852 #> [11,] -0.0740 -0.1218 #> [12,] -0.3882 -0.0466 #> [13,] -0.3775 -0.0073 #> [14,] -0.2143  0.0109 #> [15,]  0.0727  0.0477 #> [16,] -0.0267  0.0160 #> [17,]  0.0627 -0.0037 #> [18,] -0.1292 -0.0337 #>  #> $AE80 #>          [,1]    [,2] #>  [1,] -0.4770  0.0323 #>  [2,]  0.0028  0.0796 #>  [3,]  0.2192  0.0600 #>  [4,]  0.2403  0.0375 #>  [5,]  0.2502  0.0177 #>  [6,]  0.2468  0.0028 #>  [7,]  0.2361 -0.0172 #>  [8,]  0.1945 -0.0413 #>  [9,]  0.1137 -0.0629 #> [10,]  0.0326 -0.0831 #> [11,] -0.0776 -0.1016 #> [12,] -0.4146 -0.0084 #> [13,] -0.3839  0.0274 #> [14,] -0.2006  0.0291 #> [15,]  0.0822  0.0417 #> [16,] -0.0149  0.0200 #> [17,]  0.0785 -0.0103 #> [18,] -0.1282 -0.0233 #>  #> $AE81 #>          [,1]    [,2] #>  [1,] -0.4625  0.0125 #>  [2,]  0.0122  0.0972 #>  [3,]  0.2143  0.0808 #>  [4,]  0.2348  0.0651 #>  [5,]  0.2503  0.0410 #>  [6,]  0.2534  0.0207 #>  [7,]  0.2349 -0.0058 #>  [8,]  0.1980 -0.0317 #>  [9,]  0.1238 -0.0673 #> [10,]  0.0546 -0.1022 #> [11,] -0.0467 -0.1261 #> [12,] -0.4013 -0.0416 #> [13,] -0.3820  0.0075 #> [14,] -0.2137  0.0199 #> [15,]  0.0583  0.0513 #> [16,] -0.0247  0.0182 #> [17,]  0.0494 -0.0079 #> [18,] -0.1531 -0.0316 #>  #> $AE82 #>          [,1]    [,2] #>  [1,] -0.4883 -0.0152 #>  [2,] -0.0164  0.0892 #>  [3,]  0.2108  0.0868 #>  [4,]  0.2351  0.0724 #>  [5,]  0.2480  0.0471 #>  [6,]  0.2410  0.0243 #>  [7,]  0.2141 -0.0064 #>  [8,]  0.1917 -0.0298 #>  [9,]  0.1307 -0.0653 #> [10,]  0.0442 -0.0980 #> [11,] -0.0780 -0.1146 #> [12,] -0.3971 -0.0369 #> [13,] -0.3903 -0.0044 #> [14,] -0.1827  0.0154 #> [15,]  0.0974  0.0553 #> [16,] -0.0215  0.0170 #> [17,]  0.0864 -0.0036 #> [18,] -0.1253 -0.0333 #>  #> $AE83 #>          [,1]    [,2] #>  [1,] -0.4668  0.0570 #>  [2,]  0.0029  0.0886 #>  [3,]  0.2390  0.0506 #>  [4,]  0.2567  0.0261 #>  [5,]  0.2587  0.0026 #>  [6,]  0.2436 -0.0248 #>  [7,]  0.2192 -0.0429 #>  [8,]  0.1795 -0.0629 #>  [9,]  0.1235 -0.0753 #> [10,]  0.0217 -0.0877 #> [11,] -0.0879 -0.0963 #> [12,] -0.4110  0.0186 #> [13,] -0.3814  0.0537 #> [14,] -0.1887  0.0495 #> [15,]  0.0936  0.0451 #> [16,] -0.0185  0.0264 #> [17,]  0.0418 -0.0133 #> [18,] -0.1261 -0.0149 #>  #> $AE84 #>          [,1]    [,2] #>  [1,] -0.4812  0.0442 #>  [2,]  0.0448  0.0968 #>  [3,]  0.2255  0.0617 #>  [4,]  0.2478  0.0425 #>  [5,]  0.2591  0.0180 #>  [6,]  0.2498 -0.0017 #>  [7,]  0.2289 -0.0281 #>  [8,]  0.1867 -0.0532 #>  [9,]  0.1105 -0.0763 #> [10,]  0.0286 -0.0992 #> [11,] -0.0938 -0.1047 #> [12,] -0.3920  0.0044 #> [13,] -0.3772  0.0462 #> [14,] -0.1932  0.0398 #> [15,]  0.0649  0.0383 #> [16,] -0.0299  0.0180 #> [17,]  0.0600 -0.0188 #> [18,] -0.1393 -0.0281 #>  #> $AE85 #>          [,1]    [,2] #>  [1,] -0.4611  0.0127 #>  [2,]  0.0154  0.0912 #>  [3,]  0.2370  0.0709 #>  [4,]  0.2518  0.0454 #>  [5,]  0.2528  0.0309 #>  [6,]  0.2509  0.0117 #>  [7,]  0.2381 -0.0070 #>  [8,]  0.1968 -0.0369 #>  [9,]  0.1009 -0.0629 #> [10,]  0.0191 -0.0904 #> [11,] -0.0797 -0.1074 #> [12,] -0.4117 -0.0313 #> [13,] -0.3981  0.0050 #> [14,] -0.1649  0.0262 #> [15,]  0.0475  0.0479 #> [16,] -0.0288  0.0249 #> [17,]  0.0693 -0.0046 #> [18,] -0.1354 -0.0264 #>  #> $AE86 #>          [,1]    [,2] #>  [1,] -0.4746 -0.0102 #>  [2,] -0.0048  0.0982 #>  [3,]  0.2290  0.0868 #>  [4,]  0.2432  0.0694 #>  [5,]  0.2495  0.0465 #>  [6,]  0.2450  0.0269 #>  [7,]  0.2298  0.0018 #>  [8,]  0.1892 -0.0311 #>  [9,]  0.1274 -0.0604 #> [10,]  0.0578 -0.0941 #> [11,] -0.0414 -0.1274 #> [12,] -0.3930 -0.0612 #> [13,] -0.3824  0.0085 #> [14,] -0.1932  0.0158 #> [15,]  0.0533  0.0491 #> [16,] -0.0299  0.0185 #> [17,]  0.0498 -0.0022 #> [18,] -0.1549 -0.0351 #>  #> $AE87 #>          [,1]    [,2] #>  [1,] -0.4700  0.0346 #>  [2,]  0.0075  0.0853 #>  [3,]  0.2372  0.0643 #>  [4,]  0.2583  0.0437 #>  [5,]  0.2639  0.0246 #>  [6,]  0.2569 -0.0012 #>  [7,]  0.2319 -0.0174 #>  [8,]  0.1824 -0.0420 #>  [9,]  0.1036 -0.0660 #> [10,]  0.0394 -0.0887 #> [11,] -0.0630 -0.1144 #> [12,] -0.3993 -0.0161 #> [13,] -0.3864  0.0292 #> [14,] -0.1710  0.0321 #> [15,]  0.0501  0.0412 #> [16,] -0.0248  0.0161 #> [17,]  0.0472 -0.0097 #> [18,] -0.1638 -0.0155 #>  #> $AE88 #>          [,1]    [,2] #>  [1,] -0.4789  0.0466 #>  [2,]  0.0268  0.0831 #>  [3,]  0.2438  0.0371 #>  [4,]  0.2548  0.0207 #>  [5,]  0.2559  0.0020 #>  [6,]  0.2477 -0.0151 #>  [7,]  0.2317 -0.0271 #>  [8,]  0.1799 -0.0469 #>  [9,]  0.1011 -0.0651 #> [10,]  0.0353 -0.0829 #> [11,] -0.0892 -0.0917 #> [12,] -0.4086  0.0069 #> [13,] -0.4010  0.0471 #> [14,] -0.1455  0.0405 #> [15,]  0.0471  0.0396 #> [16,] -0.0206  0.0232 #> [17,]  0.0565 -0.0062 #> [18,] -0.1368 -0.0116 #>  #> $AE89 #>          [,1]    [,2] #>  [1,] -0.4690  0.0593 #>  [2,]  0.0698  0.0872 #>  [3,]  0.2319  0.0416 #>  [4,]  0.2512  0.0188 #>  [5,]  0.2517 -0.0043 #>  [6,]  0.2471 -0.0202 #>  [7,]  0.2183 -0.0396 #>  [8,]  0.1770 -0.0567 #>  [9,]  0.1112 -0.0710 #> [10,]  0.0155 -0.0877 #> [11,] -0.1024 -0.0898 #> [12,] -0.4069  0.0179 #> [13,] -0.3957  0.0535 #> [14,] -0.1706  0.0430 #> [15,]  0.0837  0.0418 #> [16,] -0.0302  0.0247 #> [17,]  0.0648 -0.0124 #> [18,] -0.1475 -0.0060 #>  #> $AE90 #>          [,1]    [,2] #>  [1,] -0.4802 -0.0309 #>  [2,] -0.0233  0.0907 #>  [3,]  0.2213  0.0933 #>  [4,]  0.2414  0.0753 #>  [5,]  0.2467  0.0519 #>  [6,]  0.2403  0.0348 #>  [7,]  0.2267  0.0144 #>  [8,]  0.1900 -0.0138 #>  [9,]  0.1237 -0.0532 #> [10,]  0.0422 -0.0917 #> [11,] -0.0573 -0.1295 #> [12,] -0.4019 -0.0754 #> [13,] -0.3867 -0.0167 #> [14,] -0.1757  0.0123 #> [15,]  0.0683  0.0591 #> [16,] -0.0120  0.0220 #> [17,]  0.0642  0.0026 #> [18,] -0.1275 -0.0454 #>  #> $AE91 #>          [,1]    [,2] #>  [1,] -0.4779  0.0343 #>  [2,] -0.0051  0.0874 #>  [3,]  0.2188  0.0711 #>  [4,]  0.2418  0.0494 #>  [5,]  0.2468  0.0277 #>  [6,]  0.2444  0.0099 #>  [7,]  0.2258 -0.0153 #>  [8,]  0.1875 -0.0437 #>  [9,]  0.1220 -0.0740 #> [10,]  0.0300 -0.1010 #> [11,] -0.0978 -0.1141 #> [12,] -0.4076 -0.0196 #> [13,] -0.3892  0.0245 #> [14,] -0.1812  0.0342 #> [15,]  0.0914  0.0433 #> [16,] -0.0160  0.0187 #> [17,]  0.0841 -0.0124 #> [18,] -0.1180 -0.0206 #>  #> $AE92 #>          [,1]    [,2] #>  [1,] -0.4656  0.0404 #>  [2,]  0.0042  0.0833 #>  [3,]  0.2235  0.0551 #>  [4,]  0.2493  0.0348 #>  [5,]  0.2565  0.0143 #>  [6,]  0.2524 -0.0079 #>  [7,]  0.2341 -0.0255 #>  [8,]  0.1980 -0.0432 #>  [9,]  0.1148 -0.0632 #> [10,]  0.0300 -0.0813 #> [11,] -0.0854 -0.1019 #> [12,] -0.4114 -0.0068 #> [13,] -0.3884  0.0291 #> [14,] -0.1832  0.0313 #> [15,]  0.0617  0.0390 #> [16,] -0.0179  0.0219 #> [17,]  0.0760 -0.0099 #> [18,] -0.1484 -0.0095 #>  #> $AE93 #>          [,1]    [,2] #>  [1,] -0.4952 -0.0307 #>  [2,] -0.0084  0.0880 #>  [3,]  0.2071  0.0946 #>  [4,]  0.2316  0.0816 #>  [5,]  0.2467  0.0549 #>  [6,]  0.2453  0.0383 #>  [7,]  0.2234  0.0091 #>  [8,]  0.1754 -0.0252 #>  [9,]  0.1271 -0.0547 #> [10,]  0.0341 -0.0909 #> [11,] -0.0819 -0.1079 #> [12,] -0.3926 -0.0640 #> [13,] -0.3841 -0.0171 #> [14,] -0.1796  0.0081 #> [15,]  0.1004  0.0557 #> [16,] -0.0091  0.0132 #> [17,]  0.0923 -0.0063 #> [18,] -0.1324 -0.0468 #>  #> $AE94 #>          [,1]    [,2] #>  [1,] -0.4698  0.0335 #>  [2,] -0.0216  0.0792 #>  [3,]  0.2474  0.0542 #>  [4,]  0.2598  0.0366 #>  [5,]  0.2638  0.0178 #>  [6,]  0.2596 -0.0003 #>  [7,]  0.2374 -0.0203 #>  [8,]  0.1819 -0.0429 #>  [9,]  0.1096 -0.0649 #> [10,]  0.0342 -0.0885 #> [11,] -0.0859 -0.0998 #> [12,] -0.3934 -0.0067 #> [13,] -0.3849  0.0245 #> [14,] -0.1768  0.0324 #> [15,]  0.0505  0.0429 #> [16,] -0.0276  0.0247 #> [17,]  0.0610 -0.0049 #> [18,] -0.1454 -0.0177 #>  #> $AE95 #>          [,1]    [,2] #>  [1,] -0.4671  0.0312 #>  [2,] -0.0061  0.0664 #>  [3,]  0.2297  0.0527 #>  [4,]  0.2486  0.0341 #>  [5,]  0.2520  0.0135 #>  [6,]  0.2493  0.0015 #>  [7,]  0.2372 -0.0153 #>  [8,]  0.1981 -0.0390 #>  [9,]  0.1311 -0.0586 #> [10,]  0.0390 -0.0802 #> [11,] -0.0883 -0.0946 #> [12,] -0.4060 -0.0092 #> [13,] -0.3842  0.0282 #> [14,] -0.1979  0.0305 #> [15,]  0.0683  0.0382 #> [16,] -0.0176  0.0225 #> [17,]  0.0693 -0.0105 #> [18,] -0.1554 -0.0115 #>  #> $AE96 #>          [,1]    [,2] #>  [1,] -0.4496  0.0251 #>  [2,]  0.0418  0.0929 #>  [3,]  0.2379  0.0655 #>  [4,]  0.2481  0.0523 #>  [5,]  0.2581  0.0299 #>  [6,]  0.2557  0.0055 #>  [7,]  0.2381 -0.0173 #>  [8,]  0.1991 -0.0432 #>  [9,]  0.1126 -0.0703 #> [10,]  0.0403 -0.0928 #> [11,] -0.0848 -0.1123 #> [12,] -0.3990 -0.0242 #> [13,] -0.3887  0.0212 #> [14,] -0.1800  0.0272 #> [15,]  0.0494  0.0466 #> [16,] -0.0371  0.0209 #> [17,]  0.0319 -0.0083 #> [18,] -0.1738 -0.0188 #>  #> $AE97 #>          [,1]    [,2] #>  [1,] -0.4752  0.0313 #>  [2,] -0.0129  0.0794 #>  [3,]  0.2411  0.0647 #>  [4,]  0.2630  0.0408 #>  [5,]  0.2667  0.0187 #>  [6,]  0.2589  0.0001 #>  [7,]  0.2373 -0.0218 #>  [8,]  0.1823 -0.0483 #>  [9,]  0.1101 -0.0685 #> [10,]  0.0322 -0.0905 #> [11,] -0.0857 -0.1034 #> [12,] -0.3916 -0.0011 #> [13,] -0.3707  0.0294 #> [14,] -0.1594  0.0302 #> [15,]  0.0684  0.0464 #> [16,] -0.0400  0.0168 #> [17,]  0.0472 -0.0064 #> [18,] -0.1714 -0.0179 #>  #> $AE98 #>          [,1]    [,2] #>  [1,] -0.4805  0.0310 #>  [2,]  0.0152  0.0817 #>  [3,]  0.2335  0.0515 #>  [4,]  0.2456  0.0339 #>  [5,]  0.2510  0.0165 #>  [6,]  0.2463 -0.0020 #>  [7,]  0.2240 -0.0203 #>  [8,]  0.1898 -0.0367 #>  [9,]  0.1122 -0.0542 #> [10,]  0.0281 -0.0775 #> [11,] -0.0741 -0.0984 #> [12,] -0.4098 -0.0139 #> [13,] -0.3935  0.0240 #> [14,] -0.1848  0.0289 #> [15,]  0.0663  0.0398 #> [16,] -0.0167  0.0198 #> [17,]  0.0885 -0.0078 #> [18,] -0.1409 -0.0163 #>  #> $AE99 #>          [,1]    [,2] #>  [1,] -0.4590  0.0473 #>  [2,] -0.0082  0.0763 #>  [3,]  0.2412  0.0497 #>  [4,]  0.2554  0.0312 #>  [5,]  0.2586  0.0137 #>  [6,]  0.2549 -0.0042 #>  [7,]  0.2314 -0.0258 #>  [8,]  0.1965 -0.0468 #>  [9,]  0.1246 -0.0728 #> [10,]  0.0303 -0.0900 #> [11,] -0.0930 -0.1030 #> [12,] -0.3969  0.0077 #> [13,] -0.3798  0.0425 #> [14,] -0.2065  0.0362 #> [15,]  0.0579  0.0396 #> [16,] -0.0358  0.0229 #> [17,]  0.0666 -0.0084 #> [18,] -0.1383 -0.0161 #>  #> $AE100 #>          [,1]    [,2] #>  [1,] -0.4465  0.0572 #>  [2,]  0.0411  0.0848 #>  [3,]  0.2502  0.0521 #>  [4,]  0.2663  0.0287 #>  [5,]  0.2668  0.0076 #>  [6,]  0.2608 -0.0132 #>  [7,]  0.2354 -0.0369 #>  [8,]  0.1695 -0.0604 #>  [9,]  0.0920 -0.0708 #> [10,]  0.0016 -0.0921 #> [11,] -0.1146 -0.0914 #> [12,] -0.4002  0.0082 #> [13,] -0.3877  0.0479 #> [14,] -0.1849  0.0425 #> [15,]  0.0621  0.0415 #> [16,] -0.0326  0.0214 #> [17,]  0.0604 -0.0142 #> [18,] -0.1397 -0.0129 #>  #> $CX101 #>          [,1]    [,2] #>  [1,] -0.4675  0.0358 #>  [2,]  0.0076  0.0890 #>  [3,]  0.2398  0.0591 #>  [4,]  0.2530  0.0387 #>  [5,]  0.2530  0.0160 #>  [6,]  0.2435 -0.0025 #>  [7,]  0.2281 -0.0208 #>  [8,]  0.1904 -0.0450 #>  [9,]  0.1145 -0.0676 #> [10,]  0.0441 -0.0922 #> [11,] -0.0861 -0.1011 #> [12,] -0.4050 -0.0034 #> [13,] -0.4006  0.0308 #> [14,] -0.1777  0.0344 #> [15,]  0.0503  0.0428 #> [16,] -0.0234  0.0200 #> [17,]  0.0666 -0.0124 #> [18,] -0.1306 -0.0216 #>  #> $CX102 #>          [,1]    [,2] #>  [1,] -0.4888  0.0420 #>  [2,]  0.0310  0.0749 #>  [3,]  0.2320  0.0461 #>  [4,]  0.2452  0.0355 #>  [5,]  0.2490  0.0209 #>  [6,]  0.2463 -0.0001 #>  [7,]  0.2282 -0.0249 #>  [8,]  0.1735 -0.0509 #>  [9,]  0.1146 -0.0649 #> [10,]  0.0404 -0.0844 #> [11,] -0.0664 -0.1011 #> [12,] -0.4162  0.0110 #> [13,] -0.3960  0.0379 #> [14,] -0.1586  0.0274 #> [15,]  0.0461  0.0383 #> [16,] -0.0118  0.0157 #> [17,]  0.0706 -0.0104 #> [18,] -0.1394 -0.0132 #>  #> $CX103 #>          [,1]    [,2] #>  [1,] -0.4607  0.0433 #>  [2,] -0.0028  0.0881 #>  [3,]  0.2367  0.0578 #>  [4,]  0.2565  0.0380 #>  [5,]  0.2685  0.0039 #>  [6,]  0.2615 -0.0101 #>  [7,]  0.2378 -0.0312 #>  [8,]  0.1889 -0.0549 #>  [9,]  0.1104 -0.0715 #> [10,]  0.0204 -0.0899 #> [11,] -0.0858 -0.0956 #> [12,] -0.3957 -0.0012 #> [13,] -0.3755  0.0427 #> [14,] -0.1941  0.0420 #> [15,]  0.0460  0.0436 #> [16,] -0.0207  0.0213 #> [17,]  0.0641 -0.0091 #> [18,] -0.1553 -0.0172 #>  #> $CX104 #>          [,1]    [,2] #>  [1,] -0.4740  0.0362 #>  [2,]  0.0148  0.0902 #>  [3,]  0.2410  0.0524 #>  [4,]  0.2495  0.0367 #>  [5,]  0.2536  0.0150 #>  [6,]  0.2499 -0.0044 #>  [7,]  0.2304 -0.0224 #>  [8,]  0.1789 -0.0498 #>  [9,]  0.1190 -0.0697 #> [10,]  0.0377 -0.0896 #> [11,] -0.0732 -0.1019 #> [12,] -0.3990 -0.0067 #> [13,] -0.3906  0.0306 #> [14,] -0.1890  0.0359 #> [15,]  0.0466  0.0460 #> [16,] -0.0228  0.0254 #> [17,]  0.0727 -0.0101 #> [18,] -0.1455 -0.0140 #>  #> $CX105 #>          [,1]    [,2] #>  [1,] -0.4668  0.0618 #>  [2,]  0.0094  0.0873 #>  [3,]  0.2422  0.0529 #>  [4,]  0.2512  0.0324 #>  [5,]  0.2543  0.0050 #>  [6,]  0.2490 -0.0107 #>  [7,]  0.2352 -0.0310 #>  [8,]  0.1858 -0.0570 #>  [9,]  0.1074 -0.0749 #> [10,]  0.0270 -0.0931 #> [11,] -0.0583 -0.1068 #> [12,] -0.4072  0.0148 #> [13,] -0.3952  0.0506 #> [14,] -0.1745  0.0392 #> [15,]  0.0449  0.0349 #> [16,] -0.0158  0.0211 #> [17,]  0.0501 -0.0115 #> [18,] -0.1385 -0.0147 #>  #> $CX106 #>          [,1]    [,2] #>  [1,] -0.4715  0.0348 #>  [2,]  0.0383  0.0970 #>  [3,]  0.2271  0.0693 #>  [4,]  0.2476  0.0416 #>  [5,]  0.2507  0.0204 #>  [6,]  0.2462  0.0005 #>  [7,]  0.2329 -0.0169 #>  [8,]  0.1895 -0.0447 #>  [9,]  0.1317 -0.0662 #> [10,]  0.0419 -0.0952 #> [11,] -0.0667 -0.1140 #> [12,] -0.4058 -0.0158 #> [13,] -0.3849  0.0256 #> [14,] -0.1853  0.0312 #> [15,]  0.0307  0.0462 #> [16,] -0.0225  0.0202 #> [17,]  0.0530 -0.0107 #> [18,] -0.1530 -0.0232 #>  #> $CX107 #>          [,1]    [,2] #>  [1,] -0.4590  0.0148 #>  [2,]  0.0363  0.0863 #>  [3,]  0.2260  0.0699 #>  [4,]  0.2480  0.0478 #>  [5,]  0.2538  0.0260 #>  [6,]  0.2493  0.0091 #>  [7,]  0.2424 -0.0048 #>  [8,]  0.1848 -0.0373 #>  [9,]  0.1359 -0.0516 #> [10,]  0.0476 -0.0813 #> [11,] -0.0687 -0.1059 #> [12,] -0.4071 -0.0230 #> [13,] -0.3946  0.0101 #> [14,] -0.2028  0.0189 #> [15,]  0.0294  0.0402 #> [16,] -0.0230  0.0168 #> [17,]  0.0519 -0.0071 #> [18,] -0.1502 -0.0288 #>  #> $CX108 #>          [,1]    [,2] #>  [1,] -0.4555  0.0398 #>  [2,]  0.0470  0.0891 #>  [3,]  0.2562  0.0561 #>  [4,]  0.2701  0.0390 #>  [5,]  0.2680  0.0145 #>  [6,]  0.2584 -0.0016 #>  [7,]  0.2320 -0.0199 #>  [8,]  0.1668 -0.0458 #>  [9,]  0.1151 -0.0631 #> [10,]  0.0296 -0.0835 #> [11,] -0.0592 -0.0990 #> [12,] -0.3938 -0.0068 #> [13,] -0.3848  0.0315 #> [14,] -0.2053  0.0334 #> [15,]  0.0194  0.0418 #> [16,] -0.0607  0.0127 #> [17,]  0.0395 -0.0129 #> [18,] -0.1427 -0.0254 #>  #> $CX109 #>          [,1]    [,2] #>  [1,] -0.4667  0.0415 #>  [2,]  0.0338  0.0789 #>  [3,]  0.2422  0.0496 #>  [4,]  0.2538  0.0348 #>  [5,]  0.2566  0.0152 #>  [6,]  0.2470 -0.0006 #>  [7,]  0.2342 -0.0169 #>  [8,]  0.1996 -0.0404 #>  [9,]  0.1256 -0.0646 #> [10,]  0.0298 -0.0862 #> [11,] -0.0508 -0.0996 #> [12,] -0.4027 -0.0035 #> [13,] -0.3905  0.0319 #> [14,] -0.1961  0.0325 #> [15,]  0.0087  0.0352 #> [16,] -0.0277  0.0175 #> [17,]  0.0499 -0.0075 #> [18,] -0.1466 -0.0177 #>  #> $CX110 #>          [,1]    [,2] #>  [1,] -0.4672  0.0148 #>  [2,] -0.0006  0.0759 #>  [3,]  0.2450  0.0556 #>  [4,]  0.2527  0.0457 #>  [5,]  0.2575  0.0260 #>  [6,]  0.2521  0.0083 #>  [7,]  0.2378 -0.0110 #>  [8,]  0.1833 -0.0363 #>  [9,]  0.1208 -0.0568 #> [10,]  0.0466 -0.0793 #> [11,] -0.0694 -0.0989 #> [12,] -0.4047 -0.0193 #> [13,] -0.3958  0.0109 #> [14,] -0.1872  0.0241 #> [15,]  0.0241  0.0417 #> [16,] -0.0231  0.0205 #> [17,]  0.0664 -0.0083 #> [18,] -0.1382 -0.0136 #>  #> $CX111 #>          [,1]    [,2] #>  [1,] -0.4677  0.0403 #>  [2,]  0.0196  0.0881 #>  [3,]  0.2339  0.0595 #>  [4,]  0.2494  0.0417 #>  [5,]  0.2516  0.0225 #>  [6,]  0.2500  0.0040 #>  [7,]  0.2268 -0.0213 #>  [8,]  0.1892 -0.0451 #>  [9,]  0.1276 -0.0688 #> [10,]  0.0479 -0.0954 #> [11,] -0.0531 -0.1165 #> [12,] -0.4007 -0.0060 #> [13,] -0.3897  0.0315 #> [14,] -0.1988  0.0346 #> [15,]  0.0346  0.0453 #> [16,] -0.0262  0.0179 #> [17,]  0.0552 -0.0111 #> [18,] -0.1495 -0.0211 #>  #> $CX112 #>          [,1]    [,2] #>  [1,] -0.4564  0.0647 #>  [2,]  0.0275  0.0924 #>  [3,]  0.2515  0.0403 #>  [4,]  0.2605  0.0205 #>  [5,]  0.2628 -0.0063 #>  [6,]  0.2530 -0.0233 #>  [7,]  0.2335 -0.0405 #>  [8,]  0.1908 -0.0613 #>  [9,]  0.0918 -0.0767 #> [10,]  0.0060 -0.0898 #> [11,] -0.0921 -0.0952 #> [12,] -0.3958  0.0241 #> [13,] -0.3816  0.0571 #> [14,] -0.1921  0.0501 #> [15,]  0.0472  0.0384 #> [16,] -0.0190  0.0215 #> [17,]  0.0587 -0.0154 #> [18,] -0.1462 -0.0008 #>  #> $CX113 #>          [,1]    [,2] #>  [1,] -0.4751  0.0569 #>  [2,]  0.0052  0.0783 #>  [3,]  0.2519  0.0382 #>  [4,]  0.2542  0.0256 #>  [5,]  0.2513  0.0055 #>  [6,]  0.2471 -0.0123 #>  [7,]  0.2233 -0.0291 #>  [8,]  0.1824 -0.0469 #>  [9,]  0.1096 -0.0678 #> [10,]  0.0453 -0.0893 #> [11,] -0.0698 -0.1008 #> [12,] -0.4007  0.0165 #> [13,] -0.3929  0.0455 #> [14,] -0.1801  0.0341 #> [15,]  0.0579  0.0377 #> [16,] -0.0185  0.0201 #> [17,]  0.0591 -0.0086 #> [18,] -0.1500 -0.0037 #>  #> $CX114 #>          [,1]    [,2] #>  [1,] -0.4516  0.0474 #>  [2,]  0.0362  0.0865 #>  [3,]  0.2354  0.0643 #>  [4,]  0.2578  0.0385 #>  [5,]  0.2614  0.0162 #>  [6,]  0.2522 -0.0055 #>  [7,]  0.2305 -0.0240 #>  [8,]  0.1886 -0.0484 #>  [9,]  0.1193 -0.0725 #> [10,]  0.0389 -0.1026 #> [11,] -0.0797 -0.1136 #> [12,] -0.4040  0.0051 #> [13,] -0.3864  0.0390 #> [14,] -0.1879  0.0325 #> [15,]  0.0302  0.0375 #> [16,] -0.0300  0.0176 #> [17,]  0.0510 -0.0096 #> [18,] -0.1620 -0.0084 #>  #> $CX115 #>          [,1]    [,2] #>  [1,] -0.4523  0.0176 #>  [2,]  0.0035  0.0833 #>  [3,]  0.2144  0.0768 #>  [4,]  0.2443  0.0558 #>  [5,]  0.2566  0.0296 #>  [6,]  0.2542  0.0105 #>  [7,]  0.2407 -0.0070 #>  [8,]  0.2163 -0.0307 #>  [9,]  0.1366 -0.0594 #> [10,]  0.0410 -0.0894 #> [11,] -0.0903 -0.1067 #> [12,] -0.4030 -0.0281 #> [13,] -0.3952  0.0062 #> [14,] -0.1757  0.0183 #> [15,]  0.0380  0.0414 #> [16,] -0.0322  0.0175 #> [17,]  0.0617 -0.0073 #> [18,] -0.1585 -0.0283 #>  #> $CX116 #>          [,1]    [,2] #>  [1,] -0.4638  0.0562 #>  [2,]  0.0597  0.0945 #>  [3,]  0.2388  0.0506 #>  [4,]  0.2573  0.0282 #>  [5,]  0.2573  0.0022 #>  [6,]  0.2492 -0.0153 #>  [7,]  0.2263 -0.0375 #>  [8,]  0.1867 -0.0609 #>  [9,]  0.1100 -0.0799 #> [10,]  0.0215 -0.0950 #> [11,] -0.0765 -0.1068 #> [12,] -0.4073  0.0138 #> [13,] -0.3775  0.0529 #> [14,] -0.1544  0.0461 #> [15,]  0.0437  0.0430 #> [16,] -0.0265  0.0239 #> [17,]  0.0387 -0.0080 #> [18,] -0.1834 -0.0080 #>  #> $CX117 #>          [,1]    [,2] #>  [1,] -0.4699  0.0301 #>  [2,]  0.0096  0.0909 #>  [3,]  0.2565  0.0431 #>  [4,]  0.2598  0.0340 #>  [5,]  0.2595  0.0158 #>  [6,]  0.2551  0.0034 #>  [7,]  0.2364 -0.0176 #>  [8,]  0.2000 -0.0399 #>  [9,]  0.1255 -0.0658 #> [10,]  0.0271 -0.0897 #> [11,] -0.0544 -0.1021 #> [12,] -0.3901 -0.0085 #> [13,] -0.3751  0.0295 #> [14,] -0.1805  0.0350 #> [15,]  0.0155  0.0443 #> [16,] -0.0440  0.0198 #> [17,]  0.0343 -0.0054 #> [18,] -0.1652 -0.0169 #>  #> $CX118 #>          [,1]    [,2] #>  [1,] -0.4717  0.0591 #>  [2,]  0.0228  0.0912 #>  [3,]  0.2401  0.0542 #>  [4,]  0.2557  0.0372 #>  [5,]  0.2604  0.0132 #>  [6,]  0.2551 -0.0035 #>  [7,]  0.2380 -0.0238 #>  [8,]  0.1861 -0.0494 #>  [9,]  0.1134 -0.0730 #> [10,]  0.0372 -0.0981 #> [11,] -0.0711 -0.1055 #> [12,] -0.4021 -0.0079 #> [13,] -0.3762  0.0492 #> [14,] -0.1826  0.0340 #> [15,]  0.0230  0.0341 #> [16,] -0.0235  0.0166 #> [17,]  0.0383 -0.0098 #> [18,] -0.1430 -0.0179 #>  #> $CX119 #>          [,1]    [,2] #>  [1,] -0.4823  0.0484 #>  [2,]  0.0239  0.0839 #>  [3,]  0.2381  0.0493 #>  [4,]  0.2559  0.0323 #>  [5,]  0.2612  0.0093 #>  [6,]  0.2540 -0.0136 #>  [7,]  0.2274 -0.0340 #>  [8,]  0.1855 -0.0536 #>  [9,]  0.1077 -0.0661 #> [10,]  0.0256 -0.0857 #> [11,] -0.0909 -0.0937 #> [12,] -0.4008  0.0051 #> [13,] -0.3850  0.0448 #> [14,] -0.1620  0.0341 #> [15,]  0.0659  0.0387 #> [16,] -0.0253  0.0186 #> [17,]  0.0440 -0.0063 #> [18,] -0.1428 -0.0115 #>  #> $CX120 #>          [,1]    [,2] #>  [1,] -0.4575  0.0294 #>  [2,]  0.0270  0.0921 #>  [3,]  0.2328  0.0739 #>  [4,]  0.2574  0.0451 #>  [5,]  0.2623  0.0192 #>  [6,]  0.2555 -0.0027 #>  [7,]  0.2341 -0.0226 #>  [8,]  0.1904 -0.0453 #>  [9,]  0.1083 -0.0686 #> [10,]  0.0369 -0.0939 #> [11,] -0.0767 -0.1056 #> [12,] -0.4021 -0.0155 #> [13,] -0.3876  0.0264 #> [14,] -0.1826  0.0346 #> [15,]  0.0479  0.0459 #> [16,] -0.0293  0.0198 #> [17,]  0.0432 -0.0130 #> [18,] -0.1598 -0.0193 #>  #> $CX121 #>          [,1]    [,2] #>  [1,] -0.4785  0.0252 #>  [2,] -0.0091  0.0782 #>  [3,]  0.2140  0.0670 #>  [4,]  0.2430  0.0459 #>  [5,]  0.2600  0.0218 #>  [6,]  0.2575  0.0084 #>  [7,]  0.2420 -0.0185 #>  [8,]  0.2009 -0.0467 #>  [9,]  0.1466 -0.0688 #> [10,]  0.0406 -0.0924 #> [11,] -0.0734 -0.1098 #> [12,] -0.3879 -0.0101 #> [13,] -0.3856  0.0271 #> [14,] -0.1764  0.0262 #> [15,]  0.0299  0.0448 #> [16,] -0.0162  0.0209 #> [17,]  0.0502 -0.0023 #> [18,] -0.1576 -0.0167 #>  #> $CX122 #>          [,1]    [,2] #>  [1,] -0.4806  0.0049 #>  [2,]  0.0172  0.0810 #>  [3,]  0.2174  0.0773 #>  [4,]  0.2429  0.0558 #>  [5,]  0.2512  0.0339 #>  [6,]  0.2482  0.0140 #>  [7,]  0.2267 -0.0067 #>  [8,]  0.1961 -0.0262 #>  [9,]  0.1269 -0.0542 #> [10,]  0.0394 -0.0811 #> [11,] -0.0736 -0.1045 #> [12,] -0.4104 -0.0276 #> [13,] -0.3947  0.0023 #> [14,] -0.1550  0.0162 #> [15,]  0.0567  0.0419 #> [16,] -0.0242  0.0153 #> [17,]  0.0737 -0.0086 #> [18,] -0.1579 -0.0338 #>  #> $CX123 #>          [,1]    [,2] #>  [1,] -0.4703 -0.0009 #>  [2,]  0.0011  0.0805 #>  [3,]  0.2146  0.0747 #>  [4,]  0.2348  0.0585 #>  [5,]  0.2453  0.0350 #>  [6,]  0.2442  0.0149 #>  [7,]  0.2372 -0.0030 #>  [8,]  0.2186 -0.0235 #>  [9,]  0.1342 -0.0582 #> [10,]  0.0391 -0.0843 #> [11,] -0.0726 -0.1051 #> [12,] -0.4090 -0.0371 #> [13,] -0.3966 -0.0061 #> [14,] -0.1624  0.0193 #> [15,]  0.0557  0.0467 #> [16,] -0.0272  0.0190 #> [17,]  0.0718 -0.0052 #> [18,] -0.1583 -0.0251 #>  #> $CX124 #>          [,1]    [,2] #>  [1,] -0.4725  0.0441 #>  [2,]  0.0318  0.0808 #>  [3,]  0.2382  0.0419 #>  [4,]  0.2504  0.0237 #>  [5,]  0.2492  0.0019 #>  [6,]  0.2414 -0.0135 #>  [7,]  0.2276 -0.0298 #>  [8,]  0.1945 -0.0472 #>  [9,]  0.1219 -0.0661 #> [10,]  0.0311 -0.0885 #> [11,] -0.0963 -0.0840 #> [12,] -0.4066  0.0093 #> [13,] -0.3944  0.0425 #> [14,] -0.1724  0.0390 #> [15,]  0.0667  0.0418 #> [16,] -0.0108  0.0205 #> [17,]  0.0548 -0.0049 #> [18,] -0.1546 -0.0115 #>  #> $CX125 #>          [,1]    [,2] #>  [1,] -0.4697  0.0196 #>  [2,]  0.0007  0.0850 #>  [3,]  0.2228  0.0760 #>  [4,]  0.2485  0.0540 #>  [5,]  0.2548  0.0319 #>  [6,]  0.2511  0.0132 #>  [7,]  0.2366 -0.0097 #>  [8,]  0.1950 -0.0372 #>  [9,]  0.1279 -0.0620 #> [10,]  0.0443 -0.0943 #> [11,] -0.0773 -0.1149 #> [12,] -0.3987 -0.0131 #> [13,] -0.3908  0.0161 #> [14,] -0.1816  0.0213 #> [15,]  0.0376  0.0408 #> [16,] -0.0073  0.0137 #> [17,]  0.0592 -0.0103 #> [18,] -0.1531 -0.0300 #>  #> $DE126 #>          [,1]    [,2] #>  [1,] -0.4620  0.0204 #>  [2,]  0.0082  0.0893 #>  [3,]  0.2061  0.0797 #>  [4,]  0.2374  0.0529 #>  [5,]  0.2457  0.0306 #>  [6,]  0.2482  0.0060 #>  [7,]  0.2341 -0.0151 #>  [8,]  0.2064 -0.0363 #>  [9,]  0.1421 -0.0635 #> [10,]  0.0572 -0.0906 #> [11,] -0.0335 -0.1073 #> [12,] -0.4127 -0.0169 #> [13,] -0.4018  0.0111 #> [14,] -0.1876  0.0241 #> [15,]  0.0279  0.0403 #> [16,] -0.0425  0.0145 #> [17,]  0.0729 -0.0123 #> [18,] -0.1460 -0.0269 #>  #> $DE127 #>          [,1]    [,2] #>  [1,] -0.4570  0.0468 #>  [2,] -0.0090  0.0753 #>  [3,]  0.2381  0.0463 #>  [4,]  0.2556  0.0275 #>  [5,]  0.2614  0.0064 #>  [6,]  0.2515 -0.0129 #>  [7,]  0.2287 -0.0278 #>  [8,]  0.1883 -0.0456 #>  [9,]  0.1180 -0.0624 #> [10,]  0.0408 -0.0818 #> [11,] -0.0823 -0.0867 #> [12,] -0.4025  0.0048 #> [13,] -0.3888  0.0415 #> [14,] -0.2028  0.0371 #> [15,]  0.0490  0.0347 #> [16,] -0.0422  0.0204 #> [17,]  0.1004 -0.0180 #> [18,] -0.1473 -0.0057 #>   # on Ldk (slidings) get_ldk(chaff) #> $shp1 #>              x    y #> ScarTop    697  977 #> ScarRight  766  991 #> ScarBottom 704 1046 #> ScarLeft   629 1008 #> RofScar    818  981 #> LofScar    567 1017 #> GInsL      594 1077 #> GInsR      809 1044 #> GJoinL     645  950 #> GJoinR     731  926 #> LTop       541  962 #> RTop       835  911 #>  #> $shp2 #>              x    y #> ScarTop    677  964 #> ScarRight  748  992 #> ScarBottom 677 1039 #> ScarLeft   603  985 #> RofScar    803  994 #> LofScar    551  984 #> GInsL      575 1051 #> GInsR      784 1041 #> GJoinL     642  949 #> GJoinR     715  947 #> LTop       541  949 #> RTop       822  955 #>  #> $shp3 #>              x    y #> ScarTop    684  981 #> ScarRight  748 1006 #> ScarBottom 683 1047 #> ScarLeft   620 1006 #> RofScar    808 1009 #> LofScar    566 1007 #> GInsL      594 1082 #> GInsR      788 1064 #> GJoinL     629  957 #> GJoinR     727  953 #> LTop       551  956 #> RTop       823  960 #>  #> $shp4 #>              x    y #> ScarTop    750 1035 #> ScarRight  820 1056 #> ScarBottom 748 1104 #> ScarLeft   681 1058 #> RofScar    880 1058 #> LofScar    626 1059 #> GInsL      646 1114 #> GInsR      845 1137 #> GJoinL     714  984 #> GJoinR     799 1015 #> LTop       611  985 #> RTop       888 1018 #>  #> $shp5 #>              x    y #> ScarTop    740 1067 #> ScarRight  802 1091 #> ScarBottom 739 1136 #> ScarLeft   674 1093 #> RofScar    862 1092 #> LofScar    604 1095 #> GInsL      636 1173 #> GInsR      829 1165 #> GJoinL     697 1054 #> GJoinR     777 1040 #> LTop       594 1052 #> RTop       874 1044 #>  #> $shp6 #>              x   y #> ScarTop    784 903 #> ScarRight  841 921 #> ScarBottom 782 954 #> ScarLeft   720 914 #> RofScar    919 928 #> LofScar    663 913 #> GInsL      704 994 #> GInsR      886 983 #> GJoinL     751 888 #> GJoinR     828 897 #> LTop       654 887 #> RTop       928 905 #>  #> $shp7 #>              x    y #> ScarTop    766 1041 #> ScarRight  841 1055 #> ScarBottom 768 1108 #> ScarLeft   688 1063 #> RofScar    892 1055 #> LofScar    631 1065 #> GInsL      664 1102 #> GInsR      873 1085 #> GJoinL     707 1006 #> GJoinR     824  992 #> LTop       601 1008 #> RTop       921  997 #>  #> $shp8 #>              x    y #> ScarTop    822 1134 #> ScarRight  895 1149 #> ScarBottom 823 1201 #> ScarLeft   747 1159 #> RofScar    951 1146 #> LofScar    688 1161 #> GInsL      721 1201 #> GInsR      920 1188 #> GJoinL     755 1112 #> GJoinR     879 1114 #> LTop       665 1118 #> RTop       964 1121 #>  #> $shp9 #>              x    y #> ScarTop    772 1041 #> ScarRight  829 1054 #> ScarBottom 767 1104 #> ScarLeft   695 1049 #> RofScar    893 1061 #> LofScar    638 1052 #> GInsL      661 1094 #> GInsR      859 1110 #> GJoinL     711 1007 #> GJoinR     822 1015 #> LTop       619 1005 #> RTop       912 1026 #>  #> $shp10 #>              x    y #> ScarTop    824  978 #> ScarRight  875 1013 #> ScarBottom 821 1047 #> ScarLeft   752 1012 #> RofScar    980 1017 #> LofScar    652 1014 #> GInsL      722 1133 #> GInsR      940 1111 #> GJoinL     760  977 #> GJoinR     873  971 #> LTop       640  981 #> RTop       991  985 #>  #> $shp11 #>              x    y #> ScarTop    773 1004 #> ScarRight  832 1022 #> ScarBottom 777 1060 #> ScarLeft   716 1030 #> RofScar    927 1019 #> LofScar    605 1040 #> GInsL      679 1167 #> GInsR      878 1140 #> GJoinL     716 1002 #> GJoinR     861  965 #> LTop       594 1012 #> RTop       945  973 #>  #> $shp12 #>              x    y #> ScarTop    792  986 #> ScarRight  849  992 #> ScarBottom 795 1044 #> ScarLeft   732 1003 #> RofScar    951  987 #> LofScar    636 1014 #> GInsL      700 1159 #> GInsR      899 1119 #> GJoinL     749  983 #> GJoinR     856  969 #> LTop       630  995 #> RTop       959  970 #>  #> $shp13 #>              x    y #> ScarTop    753 1244 #> ScarRight  830 1265 #> ScarBottom 759 1322 #> ScarLeft   678 1288 #> RofScar    940 1259 #> LofScar    566 1306 #> GInsL      634 1413 #> GInsR      884 1392 #> GJoinL     674 1242 #> GJoinR     822 1213 #> LTop       550 1254 #> RTop       952 1220 #>  #> $shp14 #>              x    y #> ScarTop    754 1113 #> ScarRight  819 1149 #> ScarBottom 749 1179 #> ScarLeft   678 1137 #> RofScar    943 1169 #> LofScar    572 1128 #> GInsL      643 1254 #> GInsR      850 1287 #> GJoinL     673 1099 #> GJoinR     831 1115 #> LTop       561 1099 #> RTop       956 1129 #>  #> $shp15 #>              x    y #> ScarTop    742 1127 #> ScarRight  805 1151 #> ScarBottom 740 1182 #> ScarLeft   672 1154 #> RofScar    910 1158 #> LofScar    557 1157 #> GInsL      654 1279 #> GInsR      830 1270 #> GJoinL     658 1118 #> GJoinR     814 1098 #> LTop       543 1113 #> RTop       922 1115 #>  #> $shp16 #>               x    y #> ScarTop     821 1105 #> ScarRight   886 1110 #> ScarBottom  831 1167 #> ScarLeft    763 1140 #> RofScar     985 1101 #> LofScar     656 1167 #> GInsL       715 1240 #> GInsR       954 1184 #> GJoinL      732 1098 #> GJoinR      899 1045 #> LTop        635 1118 #> RTop       1001 1049 #>  #> $shp17 #>               x    y #> ScarTop     829 1103 #> ScarRight   898 1123 #> ScarBottom  825 1162 #> ScarLeft    754 1115 #> RofScar    1004 1134 #> LofScar     661 1109 #> GInsL       703 1199 #> GInsR       958 1215 #> GJoinL      747 1081 #> GJoinR      917 1103 #> LTop        651 1080 #> RTop       1010 1122 #>  #> $shp18 #>              x    y #> ScarTop    763 1102 #> ScarRight  826 1107 #> ScarBottom 774 1158 #> ScarLeft   701 1126 #> RofScar    924 1094 #> LofScar    615 1140 #> GInsL      659 1226 #> GInsR      878 1229 #> GJoinL     695 1110 #> GJoinR     828 1080 #> LTop       612 1123 #> RTop       927 1077 #>  #> $shp19 #>              x    y #> ScarTop    653 1169 #> ScarRight  724 1197 #> ScarBottom 653 1254 #> ScarLeft   569 1202 #> RofScar    830 1210 #> LofScar    439 1212 #> GInsL      523 1311 #> GInsR      775 1297 #> GJoinL     539 1141 #> GJoinR     728 1124 #> LTop       405 1151 #> RTop       873 1128 #>  #> $shp20 #>              x    y #> ScarTop    600 1155 #> ScarRight  663 1197 #> ScarBottom 592 1232 #> ScarLeft   525 1187 #> RofScar    781 1208 #> LofScar    405 1187 #> GInsL      460 1289 #> GInsR      716 1289 #> GJoinL     500 1114 #> GJoinR     667 1128 #> LTop       372 1118 #> RTop       812 1149 #>  #> $shp21 #>              x    y #> ScarTop    612 1193 #> ScarRight  677 1228 #> ScarBottom 610 1269 #> ScarLeft   543 1228 #> RofScar    773 1230 #> LofScar    429 1228 #> GInsL      482 1289 #> GInsR      734 1299 #> GJoinL     527 1167 #> GJoinR     665 1147 #> LTop       403 1169 #> RTop       799 1161 #>  get_ldk(chaff) %>% Ldk %>% fgProcrustes(tol=0.1) %>% stack #> iteration:  1 \tgain: 1448.7  #> iteration:  2 \tgain: 0.027479"},{"path":"http://momx.github.io/Momocs/reference/get_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paired individual on a Coe, PCA or LDA objects — get_pairs","title":"Get paired individual on a Coe, PCA or LDA objects — get_pairs","text":"paired individuals, .e. treatment repeated measures, coded coded $fac, methods allows retrieve corresponding PC/LD scores, coefficients Coe objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paired individual on a Coe, PCA or LDA objects — get_pairs","text":"","code":"get_pairs(x, fac, range)"},{"path":"http://momx.github.io/Momocs/reference/get_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paired individual on a Coe, PCA or LDA objects — get_pairs","text":"x Coe, PCA LDA object. fac factor column name id corresponding pairing factor. range numeric range coefficients Coe, PC (LD) axes return scores.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paired individual on a Coe, PCA or LDA objects — get_pairs","text":"list components x1 coefficients/scores corresponding first level fac provided; x2 thing second level; fac corresponding fac.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paired individual on a Coe, PCA or LDA objects — get_pairs","text":"","code":"bot2 <- bot1 <- coo_scale(coo_center(coo_sample(bot, 60))) bot1$fac$session <- factor(rep(\"session1\", 40)) # we simulate an measurement error bot2 <- coo_jitter(bot1, amount=0.01) bot2$fac$session <- factor(rep(\"session2\", 40)) botc <- combine(bot1, bot2) botcf <- efourier(botc, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details  # we gonna plot the PCA with the two measurement sessions and the two types botcp <- PCA(botcf) plot(botcp, \"type\", col=col_summer(2), pch=rep(c(1, 20), each=40), eigen=FALSE) #> will be deprecated soon, see ?plot_PCA bot.pairs <- get_pairs(botcp, fac = \"session\", range=1:2) segments(bot.pairs$session1[, 1], bot.pairs$session1[, 2],        bot.pairs$session2[, 1], bot.pairs$session2[, 2],        col=col_summer(2)[bot.pairs$fac$type])"},{"path":"http://momx.github.io/Momocs/reference/get_slidings.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts sliding landmarks coordinates — get_slidings","title":"Extracts sliding landmarks coordinates — get_slidings","text":"Ldk object.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_slidings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts sliding landmarks coordinates — get_slidings","text":"","code":"get_slidings(Coo, partition)"},{"path":"http://momx.github.io/Momocs/reference/get_slidings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts sliding landmarks coordinates — get_slidings","text":"Coo Ldk object partition numeric one(s) get.","code":""},{"path":"http://momx.github.io/Momocs/reference/get_slidings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts sliding landmarks coordinates — get_slidings","text":"list list(s) coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/get_slidings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts sliding landmarks coordinates — get_slidings","text":"","code":"# for each example below a list with partition containign shapes is returned # extracts the first partition get_slidings(chaff, 1) %>% names() #> [1] \"partition1\" # the first and the fourth get_slidings(chaff, c(1, 4)) %>%  names() #> [1] \"partition1\" \"partition4\" # all of them get_slidings(chaff) %>%  names #> [1] \"partition1\" \"partition2\" \"partition3\" \"partition4\" # here we want to see it get_slidings(chaff, 1)[[1]] %>%  Ldk %>% stack"},{"path":"http://momx.github.io/Momocs/reference/harm.contrib.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonic contribution to shape — hcontrib","title":"Harmonic contribution to shape — hcontrib","text":"Calculates contribution harmonics shape. amplitude every coefficients given harmonic multiplied coefficients provided resulting shapes reconstructed plotted. Naturally, works Fourier-based methods.","code":""},{"path":"http://momx.github.io/Momocs/reference/harm.contrib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonic contribution to shape — hcontrib","text":"","code":"hcontrib(Coe, ...)  # S3 method for OutCoe hcontrib(   Coe,   id,   harm.r,   amp.r = c(0, 0.5, 1, 2, 5, 10),   main = \"Harmonic contribution to shape\",   xlab = \"Harmonic rank\",   ylab = \"Amplification factor\",   ... )"},{"path":"http://momx.github.io/Momocs/reference/harm.contrib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonic contribution to shape — hcontrib","text":"Coe Coe object (either OutCoe (soon) OpnCoe) ... additional parameter pass coo_draw id id particular shape, otherwise working meanshape harm.r range harmonics explore contributions amp.r vector numeric multiplying coefficients main title plot xlab title x-axis ylab title y-axis","code":""},{"path":"http://momx.github.io/Momocs/reference/harm.contrib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonic contribution to shape — hcontrib","text":"plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/harm.contrib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonic contribution to shape — hcontrib","text":"","code":"data(bot) bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details hcontrib(bot.f) #> no 'id' provided, working on the meanshape  hcontrib(bot.f, harm.r=3:10, amp.r=1:8, col=\"grey20\",    main=\"A huge panel\") #> no 'id' provided, working on the meanshape"},{"path":"http://momx.github.io/Momocs/reference/harm_pow.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates harmonic power given a list from e/t/rfourier — harm_pow","title":"Calculates harmonic power given a list from e/t/rfourier — harm_pow","text":"Given list , bn (eventually cn dn), returns harmonic power.","code":""},{"path":"http://momx.github.io/Momocs/reference/harm_pow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates harmonic power given a list from e/t/rfourier — harm_pow","text":"","code":"harm_pow(xf)"},{"path":"http://momx.github.io/Momocs/reference/harm_pow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates harmonic power given a list from e/t/rfourier — harm_pow","text":"xf list , bn (cn, dn) components, typically e/r/tfourier passed coo_","code":""},{"path":"http://momx.github.io/Momocs/reference/harm_pow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates harmonic power given a list from e/t/rfourier — harm_pow","text":"Returns vector harmonic power","code":""},{"path":"http://momx.github.io/Momocs/reference/harm_pow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates harmonic power given a list from e/t/rfourier — harm_pow","text":"","code":"ef <- efourier(bot[1], 24) rf <- efourier(bot[1], 24) harm_pow(ef) #>           H1           H2           H3           H4           H5           H6  #> 1.299790e+05 2.593195e+02 1.376114e+03 1.792188e+02 2.594795e+02 2.675959e+01  #>           H7           H8           H9          H10          H11          H12  #> 3.103764e+01 3.422527e+00 6.584799e-01 8.255293e+00 3.010409e+00 6.433551e+00  #>          H13          H14          H15          H16          H17          H18  #> 1.082413e+00 1.171377e+00 1.929022e-01 4.769194e-01 2.059250e-01 1.971375e-01  #>          H19          H20          H21          H22          H23          H24  #> 1.099667e-01 1.586647e-01 4.222544e-02 1.447763e-01 5.618937e-02 1.570677e-01  harm_pow(rf) #>           H1           H2           H3           H4           H5           H6  #> 1.299790e+05 2.593195e+02 1.376114e+03 1.792188e+02 2.594795e+02 2.675959e+01  #>           H7           H8           H9          H10          H11          H12  #> 3.103764e+01 3.422527e+00 6.584799e-01 8.255293e+00 3.010409e+00 6.433551e+00  #>          H13          H14          H15          H16          H17          H18  #> 1.082413e+00 1.171377e+00 1.929022e-01 4.769194e-01 2.059250e-01 1.971375e-01  #>          H19          H20          H21          H22          H23          H24  #> 1.099667e-01 1.586647e-01 4.222544e-02 1.447763e-01 5.618937e-02 1.570677e-01   plot(cumsum(harm_pow(ef)[-1]), type='o',   main='Cumulated harmonic power without the first harmonic',   ylab='Cumulated harmonic power', xlab='Harmonic rank')"},{"path":"http://momx.github.io/Momocs/reference/img_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a .jpg image — img_plot","title":"Plots a .jpg image — img_plot","text":"simple image plotter. provided path, reads .jpg plots . provided imagematrix, ask choose interactively .jpeg image.","code":""},{"path":"http://momx.github.io/Momocs/reference/img_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a .jpg image — img_plot","text":"","code":"img_plot(img)  img_plot0(img)"},{"path":"http://momx.github.io/Momocs/reference/img_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a .jpg image — img_plot","text":"img matrix image, obtained readJPEG.","code":""},{"path":"http://momx.github.io/Momocs/reference/img_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a .jpg image — img_plot","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/img_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots a .jpg image — img_plot","text":"img_plot used import functions import_jpg1; img_plot0 job preserves par plots axes.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract outlines coordinates from an image silhouette — import_Conte","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"Provided image 'mask' (.e. black pixels white background), point form start algorithm, returns (x; y) coordinates outline.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"","code":"import_Conte(img, x)"},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"img matrix binary image mask. x numeric (x; y) coordinates starting point within shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"matrix (x; y) coordinates outline points.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"Used internally import_jpg1 may useful purposes.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"Note function deprecated Momocs Momacs Momit fully operationnal. image single shape, may want try imager::highlight function. Momocs may use point.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_Conte.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract outlines coordinates from an image silhouette — import_Conte","text":"original algorithm due : Pavlidis, T. (1982). Algorithms graphics image processing. Computer science press. detailed : Rohlf, F. J. (1990). overview image processing analysis techniques morphometrics. Proceedings Michigan Morphometrics Workshop. Special Publication . 2 (pp. 47-60). University Michigan Museum Zoology: Ann Arbor. translated R : Claude, J. (2008). Morphometrics R. (p. 316). Springer.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/import_StereoMorph.html","id":null,"dir":"Reference","previous_headings":"","what":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","title":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","text":"Helps read .txt files created StereoMorph (x; y) coordinates Momocs objects. Can applied 'curves' 'ldk' text files.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_StereoMorph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","text":"","code":"import_StereoMorph_curve1(path)  import_StereoMorph_curve(path, names)  import_StereoMorph_ldk1(path)  import_StereoMorph_ldk(path, names)"},{"path":"http://momx.github.io/Momocs/reference/import_StereoMorph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","text":"path toward single file folder containing .txt files produced StereoMorph names feed lf_structure","code":""},{"path":"http://momx.github.io/Momocs/reference/import_StereoMorph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","text":"list class Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/import_StereoMorph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","text":"*1 functions import single .txt file. counterpart ('1') work path indicates folder, .e. 'curves' 'ldk'. return list Opn Ldk objects, respectively. Please hesitate contact particular case need something.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_StereoMorph.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import files creates by StereoMorph into Momocs — import_StereoMorph_curve1","text":"Note function deprecated Momocs Momacs Momit fully operationnal.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract outline coordinates from multiple .jpg files — import_jpg","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"function used import outline coordinates built around import_jpg1.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"","code":"import_jpg(   jpg.paths = .lf.auto(),   auto.notcentered = TRUE,   fun.notcentered = NULL,   threshold = 0.5 )"},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"jpg.paths vector paths corresponding .jpg files import. provided (NULL), switches automatic version. See Details . auto.notcentered logical TRUE random locations used . one (assumed) within shape (black pixel); FALSE locator called, click point within shape. fun.notcentered NULL default. shapes centered random pick black pixel satisfactory. See import_jpg1 help examples. threshold threshold value use binarize images. , pixels turned 1, 0.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"list matrices (x; y) coordinates can passed ","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"see import_jpg1 important informations outlines extracted, import_Conte algorithm . jpg.paths provided (NULL), select .jpg file folder contains files. outlines imported .","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"Note function deprecated Momocs Momacs Momit fully operationnal. Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/import_jpg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract outline coordinates from multiple .jpg files — import_jpg","text":"","code":"# \\donttest{  lf <- list.files('/foo/jpegs', full.names=TRUE) coo <- import_jpg(lf) #> Extracting 0.jpg outlines... #> Done in 0 secs Out(coo) #> empty Out  coo <- import_jpg() #> Warning: unable to translate '<d0><ff><ff><ff><ff><ff><ff><ff><c0><aa><ef>' to a wide string #> Warning: input string 1 is invalid #> Extracting 0.jpg outlines... #> Done in 0 secs # }"},{"path":"http://momx.github.io/Momocs/reference/import_jpg1.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract outline coordinates from a single .jpg file — import_jpg1","title":"Extract outline coordinates from a single .jpg file — import_jpg1","text":"Used import outline coordinates .jpg files. function used single images wrapped import_jpg. relies import_Conte","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract outline coordinates from a single .jpg file — import_jpg1","text":"","code":"import_jpg1(   jpg.path,   auto.notcentered = TRUE,   fun.notcentered = NULL,   threshold = 0.5,   ... )"},{"path":"http://momx.github.io/Momocs/reference/import_jpg1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract outline coordinates from a single .jpg file — import_jpg1","text":"jpg.path vector paths corresponding .jpg files import, obtained list.files. auto.notcentered logical TRUE random locations used one (assumed) within shape (corresponds black pixel) middle point black; FALSE locator called, click point within shape. fun.notcentered NULL default can accept function , passed imagematrix returns numeric length two corresponds starting point imagematrix Conte algorithm. instruction wraps , function may wrong proposing starting position. See examples quick example. threshold threshold value use binarize images. , pixels turned 1, 0. ... arguments passed read.table, eg. 'skip', 'dec', etc.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract outline coordinates from a single .jpg file — import_jpg1","text":"matrix (x; y) coordinates can passed ","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract outline coordinates from a single .jpg file — import_jpg1","text":"jpegs can provided either RVB 8-bit greylevels monochrome. function binarizes pixels values using 'threshold' argument. try start apply import_Conte algorithm center image 'looking' downwards first black/white 'frontier' pixels. point first outlines. latter may useful align manually images want retain information consequent morphometric analyses. point center image within shape, .e. 'white' two choices defined 'auto.notcentered' argument. TRUE, random starting points tried 'black' within shape; FALSE asked click point within shape. pixels borders white, functions adds 2-pixel border white pixels; otherwise import_Conte fail return error. Finally, remember images working directory, list.files must called argument full.names=TRUE! Note use fun.notcentered argument probably leads serious headaches probably imply dissection functions: import_Conte, img_plot import_jpg ","code":""},{"path":"http://momx.github.io/Momocs/reference/import_jpg1.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract outline coordinates from a single .jpg file — import_jpg1","text":"Note function deprecated Momocs Momacs Momit fully operationnal.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/import_tps.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a tps file — import_tps","title":"Import a tps file — import_tps","text":"returns list coordinates, curves, scale","code":""},{"path":"http://momx.github.io/Momocs/reference/import_tps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a tps file — import_tps","text":"","code":"import_tps(tps.path, curves = TRUE)  tps2coo(tps, curves = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/import_tps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a tps file — import_tps","text":"tps.path lines, typically readLines, describing single shape tps-like format. need manually build Coo object : eg (coo=your_list$coo). curves logical whether read curves, tps lines single tps file tps2coo used import_tps may useful data import. provided lines (eg readLines) tps-like description (\"LM\", \"CURVES\", etc.) returns list coordinates, curves, etc.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_tps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a tps file — import_tps","text":"list components: coo matrix coordinates; cur list matrices; scale scale numeric.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_tps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import a tps file — import_tps","text":"Note function deprecated Momocs Momacs Momit fully operationnal.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/import_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Import coordinates from a .txt file — import_txt","title":"Import coordinates from a .txt file — import_txt","text":"wrapper around read.table can used import outline/landmark coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import coordinates from a .txt file — import_txt","text":"","code":"import_txt(txt.paths = .lf.auto(), ...)"},{"path":"http://momx.github.io/Momocs/reference/import_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import coordinates from a .txt file — import_txt","text":"txt.paths vector paths corresponding .txt files import. provided (NULL), switches automatic version, just import_jpg. See Details . ... arguments passed read.table, eg. 'skip', 'dec', etc.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import coordinates from a .txt file — import_txt","text":"list matrix(ces) (x; y) coordinates can passed , Opn Ldk.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_txt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import coordinates from a .txt file — import_txt","text":"Columns named .txt files. can tune using ... argument. Define read.table arguments allow import single file, pass function, ie .txt file header (eg ('x', 'y')), forget header=TRUE.","code":""},{"path":"http://momx.github.io/Momocs/reference/import_txt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import coordinates from a .txt file — import_txt","text":"Note function deprecated Momocs Momacs Momit fully operationnal. Silent message progress bars () options(\"verbose\"=FALSE).","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical inspection of shapes — inspect","title":"Graphical inspection of shapes — inspect","text":"Allows plot shapes, individually, Coo (, Opn Ldk) objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphical inspection of shapes — inspect","text":"","code":"inspect(x, id, ...)"},{"path":"http://momx.github.io/Momocs/reference/inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphical inspection of shapes — inspect","text":"x Coo object id id shape plot, provided random shape plotted. passed '' shapes plotted, one one. ... arguments passed coo_plot","code":""},{"path":"http://momx.github.io/Momocs/reference/inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphical inspection of shapes — inspect","text":"interactive plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphical inspection of shapes — inspect","text":"","code":"if (FALSE) { inspect(bot, 5) inspect(bot) inspect(bot, 5, pch=3, points=TRUE) # an example of '...' use }"},{"path":"http://momx.github.io/Momocs/reference/is.html","id":null,"dir":"Reference","previous_headings":"","what":"Class and component testers — is","title":"Class and component testers — is","text":"Class testers test classes object given class. instance is_PCA PCA object (classes PCA prcomp) return TRUE. Component testers check there_is particular component (eg $fac, etc.) object.","code":""},{"path":"http://momx.github.io/Momocs/reference/is.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class and component testers — is","text":"","code":"is_Coo(x)  is_PCA(x)  is_LDA(x)  is_Out(x)  is_Opn(x)  is_Ldk(x)  is_Coe(x)  is_OutCoe(x)  is_OpnCoe(x)  is_LdkCoe(x)  is_TraCoe(x)  is_shp(x)  is_fac(x)  is_ldk(x)  is_slidings(x)  is_links(x)"},{"path":"http://momx.github.io/Momocs/reference/is.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class and component testers — is","text":"x object test","code":""},{"path":"http://momx.github.io/Momocs/reference/is.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class and component testers — is","text":"logical","code":""},{"path":"http://momx.github.io/Momocs/reference/is.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class and component testers — is","text":"","code":"is_Coo(bot) #> [1] TRUE is_Out(bot) #> [1] TRUE is_Ldk(bot) #> [1] FALSE is_ldk(hearts) # mind the capitals! #> [1] TRUE"},{"path":"http://momx.github.io/Momocs/reference/is_equallyspacedradii.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests if coordinates likely have equally spaced radii — is_equallyspacedradii","title":"Tests if coordinates likely have equally spaced radii — is_equallyspacedradii","text":"Returns TRUE/FALSE whether sd angles successive radii /thesh","code":""},{"path":"http://momx.github.io/Momocs/reference/is_equallyspacedradii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests if coordinates likely have equally spaced radii — is_equallyspacedradii","text":"","code":"is_equallyspacedradii(coo, thres)"},{"path":"http://momx.github.io/Momocs/reference/is_equallyspacedradii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests if coordinates likely have equally spaced radii — is_equallyspacedradii","text":"coo matrix (x; y) coordinates Coo object. thres numeric threshold (arbitrarily pi/90, eg 2 degrees, default)","code":""},{"path":"http://momx.github.io/Momocs/reference/is_equallyspacedradii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests if coordinates likely have equally spaced radii — is_equallyspacedradii","text":"single vector logical. NA returned, coordinates likely identical, least x y.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/is_equallyspacedradii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests if coordinates likely have equally spaced radii — is_equallyspacedradii","text":"","code":"bot[1] %>% is_equallyspacedradii #> [1] NA bot[1] %>% coo_samplerr(36) %>% is_equallyspacedradii #> [1] NA # higher tolerance but wrong bot[1] %>% coo_samplerr(36) %>% is_equallyspacedradii(thres=5*2*pi/360) #> [1] NA # coo_interpolate is a better option bot[1] %>% coo_interpolate(1200) %>% coo_samplerr(36) %>% is_equallyspacedradii #> [1] NA # Coo method bot %>% coo_interpolate(360) %>% coo_samplerr(36) %>% is_equallyspacedradii #>         brahma          caney         chimay         corona    deusventrue  #>             NA             NA             NA             NA             NA  #>          duvel   franziskaner     grimbergen        guiness     hoegardeen  #>             NA             NA             NA             NA             NA  #>        jupiler     kingfisher       latrappe lindemanskriek    nicechouffe  #>             NA             NA             NA             NA             NA  #>     pecheresse   sierranevada     tanglefoot          tauro      westmalle  #>             NA             NA             NA             NA             NA  #>          amrut    ballantines      bushmills         chivas        dalmore  #>             NA             NA             NA             NA             NA  #>   famousgrouse    glendronach   glenmorangie   highlandpark    jackdaniels  #>             NA             NA             NA             NA             NA  #>             jb  johnniewalker       magallan     makersmark           oban  #>             NA             NA             NA             NA             NA  #>     oldpotrero      redbreast         tamdhu     wildturkey         yoichi  #>             NA             NA             NA             NA             NA"},{"path":"http://momx.github.io/Momocs/reference/layers.html","id":null,"dir":"Reference","previous_headings":"","what":"grindr layers for multivariate plots — layers","title":"grindr layers for multivariate plots — layers","text":"Useful layers building custom mutivariate plots using cheapbabi approach. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grindr layers for multivariate plots — layers","text":"","code":"layer_frame(x, center_origin = TRUE, zoom = 0.9)  layer_axes(x, col = \"#999999\", lwd = 1/2, ...)  layer_ticks(x, col = \"#333333\", cex = 3/4, lwd = 3/4, ...)  layer_grid(x, col = \"#999999\", lty = 3, grid = 3, ...)  layer_box(x, border = \"#e5e5e5\", ...)  layer_fullframe(x, ...)  layer_points(x, pch = 20, cex = 4/log1p(nrow(x$xy)), transp = 0, ...)  layer_ellipses(x, conf = 0.5, lwd = 1, alpha = 0, ...)  layer_ellipsesfilled(x, conf = 0.5, lwd = 1, alpha = 0, ...)  layer_ellipsesaxes(x, conf = 0.5, lwd = 1, alpha = 0, ...)  layer_chull(x, ...)  layer_chullfilled(x, alpha = 0.8, ...)  layer_stars(x, alpha = 0.5, ...)  layer_delaunay(x, ...)  layer_density(   x,   levels_density = 20,   levels_contour = 4,   alpha = 1/3,   n = 200,   density = TRUE,   contour = TRUE )  layer_labelpoints(   x,   col = par(\"fg\"),   cex = 2/3,   font = 1,   abbreviate = FALSE,   ... )  layer_labelgroups(   x,   col = par(\"fg\"),   cex = 3/4,   font = 2,   rect = TRUE,   alpha = 1/4,   abbreviate = FALSE,   ... )  layer_rug(x, size = 1/200, ...)  layer_histogram_2(x, freq = FALSE, breaks, split = FALSE, transp = 0)  layer_density_2(x, bw, split = FALSE, rug = TRUE, transp = 0)  layer_title(x, title = \"\", cex = 3/4, ...)  layer_axesnames(x, cex = 3/4, name = \"Axis\", ...)  layer_eigen(x, nb_max = 5, cex = 1/2, ...)  layer_axesvar(x, cex = 3/4, ...)  layer_legend(x, probs = seq(0, 1, 0.25), cex = 3/4, ...)"},{"path":"http://momx.github.io/Momocs/reference/layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grindr layers for multivariate plots — layers","text":"x list, typically returned plot_PCA center_origin logical whether center origin (default TRUE) zoom numeric change zoom (default 0.9) col color (hexadecimal) use drawing components lwd linewidth drawing components ... additional options feed core functions layer cex use drawing components lty linetype drawing components grid numeric number grid draw border color (hexadecimal) use draw border pch use drawing components transp transparency use (min: 0 defaut:0 max:1) conf numeric 0 1 confidence ellipses alpha numeric 0 1 transparency components levels_density numeric number levels use feed MASS::kde2d levels_contour numeric number levels use feed graphics::contour n numeric number grid points feed MASS::kde2d density logical whether draw density estimate contour logical whether draw contour lines font feed text abbreviate logical whether abbreviate names rect logical whether draw rectangle names size numeric fraction graphical window (default: 1/200) freq logicalto feed[hist] (default:FALSE`) breaks feed hist (default: calculated pooled values) split logical whether split two distributions two plots bw feed density (default: stats::bw.nrd0) rug logical whether add rug (default: TRUE) title add plot (default \"\") name use axes (default \"Axis\") nb_max numeric number eigen values display (default 5) probs numeric sequence feed stats::quantile indicate draw ticks legend labels","code":""},{"path":"http://momx.github.io/Momocs/reference/layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grindr layers for multivariate plots — layers","text":"drawing layer","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/layers_morphospace.html","id":null,"dir":"Reference","previous_headings":"","what":"Morphospace layers — layers_morphospace","title":"Morphospace layers — layers_morphospace","text":"Used internally plot_PCA, plot_LDA, etc. may useful elsewhere.","code":""},{"path":"http://momx.github.io/Momocs/reference/layers_morphospace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Morphospace layers — layers_morphospace","text":"","code":"layer_morphospace_PCA(   x,   position = c(\"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\")[1],   nb = 12,   nr = 6,   nc = 5,   rotate = 0,   size = 0.9,   col = \"#999999\",   flipx = FALSE,   flipy = FALSE,   draw = TRUE )  layer_morphospace_LDA(   x,   position = c(\"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\")[1],   nb = 12,   nr = 6,   nc = 5,   rotate = 0,   size = 0.9,   col = \"#999999\",   flipx = FALSE,   flipy = FALSE,   draw = TRUE )"},{"path":"http://momx.github.io/Momocs/reference/layers_morphospace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Morphospace layers — layers_morphospace","text":"x layered PCA LDA. Typically, object returned plot_PCA plot_LDA position one range, full, circle, xy, range_axes, full_axes feed morphospace_positions (default: range) nb numeric total number shapes position=\"circle\" (default: 12) nr numeric number rows position shapes (default: 6) nc numeric number columns position shapes (default 5) rotate numeric angle (radians) rotate shapes displayed morphospace (default: 0) size numeric size use feed coo_template (default: 0.9) col color draw shapes (default: #999999) flipx logical whether flip shapes x-axis (default: FALSE) flipy logical whether flip shapes y-axis (default: FALSE) draw logical whether draw shapes (default: TRUE)","code":""},{"path":"http://momx.github.io/Momocs/reference/layers_morphospace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Morphospace layers — layers_morphospace","text":"drawing layer","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ldk_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks 'ldk' shapes — ldk_check","title":"Checks 'ldk' shapes — ldk_check","text":"simple utility, used internally, mostly Ldk methods, graphical functions, notably l2a. Returns array landmarks arranged (nb.ldk) x (x; y) x (nb.shapes), passed either list, matrix array coordinates. list provided, checks number landmarks consistent.","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks 'ldk' shapes — ldk_check","text":"","code":"ldk_check(ldk)"},{"path":"http://momx.github.io/Momocs/reference/ldk_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks 'ldk' shapes — ldk_check","text":"ldk matrix (x; y) coordinates, list, array.","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks 'ldk' shapes — ldk_check","text":"array (x; y) coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ldk_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks 'ldk' shapes — ldk_check","text":"","code":"#coo_check('Not a shape') #coo_check(matrix(1:10, ncol=2)) #coo_check(list(x=1:5, y=6:10))"},{"path":"http://momx.github.io/Momocs/reference/ldk_chull.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws convex hulls around landmark positions — ldk_chull","title":"Draws convex hulls around landmark positions — ldk_chull","text":"wrapper uses coo_chull","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_chull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws convex hulls around landmark positions — ldk_chull","text":"","code":"ldk_chull(ldk, col = \"grey40\", lty = 1)"},{"path":"http://momx.github.io/Momocs/reference/ldk_chull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws convex hulls around landmark positions — ldk_chull","text":"ldk array (list) landmarks col color drawing convex hull lty lty drawing convex hulls","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_chull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws convex hulls around landmark positions — ldk_chull","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ldk_chull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws convex hulls around landmark positions — ldk_chull","text":"","code":"coo_plot(MSHAPES(wings)) ldk_chull(wings$coo)"},{"path":"http://momx.github.io/Momocs/reference/ldk_confell.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws confidence ellipses for landmark positions — ldk_confell","title":"Draws confidence ellipses for landmark positions — ldk_confell","text":"Draws confidence ellipses landmark positions","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_confell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws confidence ellipses for landmark positions — ldk_confell","text":"","code":"ldk_confell(   ldk,   conf = 0.5,   col = \"grey40\",   ell.lty = 1,   ax = TRUE,   ax.lty = 2 )"},{"path":"http://momx.github.io/Momocs/reference/ldk_confell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws confidence ellipses for landmark positions — ldk_confell","text":"ldk array (list) landmarks conf confidence level (normal quantile, 0.5 default) col color ellipse ell.lty lty ellipse ax logical whether draw ellipses axes ax.lty lty ellipses axes","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_confell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws confidence ellipses for landmark positions — ldk_confell","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ldk_confell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws confidence ellipses for landmark positions — ldk_confell","text":"","code":"coo_plot(MSHAPES(wings)) ldk_confell(wings$coo)"},{"path":"http://momx.github.io/Momocs/reference/ldk_contour.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws kernel density contours around landmark — ldk_contour","title":"Draws kernel density contours around landmark — ldk_contour","text":"Using kde2d MASS package.","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_contour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws kernel density contours around landmark — ldk_contour","text":"","code":"ldk_contour(ldk, nlevels = 5, grid.nb = 50, col = \"grey60\")"},{"path":"http://momx.github.io/Momocs/reference/ldk_contour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws kernel density contours around landmark — ldk_contour","text":"ldk array (list) landmarks nlevels number contour lines grid.nb grid.nb col color drawing contour lines","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_contour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws kernel density contours around landmark — ldk_contour","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ldk_contour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws kernel density contours around landmark — ldk_contour","text":"","code":"coo_plot(MSHAPES(wings)) ldk_contour(wings$coo)"},{"path":"http://momx.github.io/Momocs/reference/ldk_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add landmarks labels — ldk_labels","title":"Add landmarks labels — ldk_labels","text":"Add landmarks labels","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add landmarks labels — ldk_labels","text":"","code":"ldk_labels(ldk, d = 0.05, cex = 2/3, ...)"},{"path":"http://momx.github.io/Momocs/reference/ldk_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add landmarks labels — ldk_labels","text":"ldk matrix (x; y) coordinates: plot labels d far coordinates, (centroid-landmark) segment cex cex label ... additional parameters fed text","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add landmarks labels — ldk_labels","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/ldk_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add landmarks labels — ldk_labels","text":"","code":"coo_plot(wings[1]) ldk_labels(wings[1])  # closer and smaller coo_plot(wings[1]) ldk_labels(wings[1], d=0.05, cex=0.5)"},{"path":"http://momx.github.io/Momocs/reference/ldk_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws links between landmarks — ldk_links","title":"Draws links between landmarks — ldk_links","text":"Cosmetics useful visualize shape variation.","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws links between landmarks — ldk_links","text":"","code":"ldk_links(ldk, links, ...)"},{"path":"http://momx.github.io/Momocs/reference/ldk_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws links between landmarks — ldk_links","text":"ldk matrix (x; y) coordinates links matrix links. first column starting-id, second column ending-id (id= number coordinate) ... additional parameters fed segments","code":""},{"path":"http://momx.github.io/Momocs/reference/ldk_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws links between landmarks — ldk_links","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/lf_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","title":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","text":"filenames consistently named character serating factors, every individual including belonging levels, e.g.: 001_speciesI_siteA_ind1_dorsalview 002_speciesI_siteA_ind2_lateralview etc., function returns data.frame can passed , Opn, Ldk objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/lf_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","text":"","code":"lf_structure(lf, names = character(), split = \"_\", trim.extension = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/lf_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","text":"lf list (names used, except list import_tps case names(lf$coo) used) list filenames, characters, typically obtained list.files. Alternatively, path folder containing files. Actually, lf length 1 (single character), function assumes path list.files . names names groups, vector characters length corresponds number groups. split character, spliting factor used file names. trim.extension logical. Whether remove last characters filenames, typically extension, e.g. '.jpg'.","code":""},{"path":"http://momx.github.io/Momocs/reference/lf_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","text":"data.frame , every individual, corresponding level every group.","code":""},{"path":"http://momx.github.io/Momocs/reference/lf_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","text":"number groups must consistent across filenames.","code":""},{"path":"http://momx.github.io/Momocs/reference/lf_structure.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"bind_db.Coe <- bind_db.Coo\nExtracts structure from filenames — lf_structure","text":", view, good practice 'store' grouping structure filenames, course mandatory. Note also can: ) import_jpg save list, say 'foo'; ii) pass 'names(foo)' lf_structure. See Momocs' vignette illustration. Note function deprecated Momocs Momacs Momit fully operationnal.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/links_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates links (all pairwise combinations) between landmarks — links_all","title":"Creates links (all pairwise combinations) between landmarks — links_all","text":"Creates links (pairwise combinations) landmarks","code":""},{"path":"http://momx.github.io/Momocs/reference/links_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates links (all pairwise combinations) between landmarks — links_all","text":"","code":"links_all(coo)"},{"path":"http://momx.github.io/Momocs/reference/links_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates links (all pairwise combinations) between landmarks — links_all","text":"coo matrix (list) (x; y) coordinates","code":""},{"path":"http://momx.github.io/Momocs/reference/links_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates links (all pairwise combinations) between landmarks — links_all","text":"matrix can passed ldk_links, etc. columns row ids original shape.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/links_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates links (all pairwise combinations) between landmarks — links_all","text":"","code":"w <- wings[1] coo_plot(w) links <- links_all(w) ldk_links(w, links)"},{"path":"http://momx.github.io/Momocs/reference/links_delaunay.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","title":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","text":"Creates links (Delaunay triangulation) landmarks","code":""},{"path":"http://momx.github.io/Momocs/reference/links_delaunay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","text":"","code":"links_delaunay(coo)"},{"path":"http://momx.github.io/Momocs/reference/links_delaunay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","text":"coo matrix (list) (x; y) coordinates","code":""},{"path":"http://momx.github.io/Momocs/reference/links_delaunay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","text":"matrix can passed ldk_links, etc. columns row ids original shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/links_delaunay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","text":"uses delaunayn geometry package.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/links_delaunay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates links (Delaunay triangulation) between landmarks — links_delaunay","text":"","code":"w <- wings[1] coo_plot(w, poly=FALSE) links <- links_delaunay(w) ldk_links(w, links)"},{"path":"http://momx.github.io/Momocs/reference/measure.html","id":null,"dir":"Reference","previous_headings":"","what":"Measures shape descriptors — measure","title":"Measures shape descriptors — measure","text":"Calculates shape descriptors Coo objects. function returns scalar fed coordinates can passed naturally Momocs (pick apropos(\"coo_\")). Functions without arguments (eg coo_area) passed without brackets functions arguments (eg d) passed \"entirely\". See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/measure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measures shape descriptors — measure","text":"","code":"measure(x, ...)"},{"path":"http://momx.github.io/Momocs/reference/measure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measures shape descriptors — measure","text":"x Coo object, list shapes, shape matrix. ... list functions. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/measure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measures shape descriptors — measure","text":"TraCoe object, raw data.frame","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/measure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measures shape descriptors — measure","text":"","code":"bm <- measure(bot, coo_area, coo_perim) bm #> A TraCoe object -------------------- #>  - $coe: 40 shapes described with 2 variables #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows bm$coe #> # A tibble: 40 × 2 #>       area perim #>      <dbl> <dbl> #>  1 234515  2482. #>  2 201056. 2269. #>  3 119460. 1578. #>  4 119568. 1817. #>  5 165736. 2066. #>  6 114015  1487. #>  7 149503  1954. #>  8 147642. 1826. #>  9 130178. 1751. #> 10 219548  2399. #> # ℹ 30 more rows  # how to use arguments, eg with the d() function measure(wings, coo_area, d(1, 3), d(4, 5)) #> A TraCoe object -------------------- #>  - $coe: 127 shapes described with 3 variables #> # A tibble: 127 × 1 #>   group #>   <fct> #> 1 AN    #> 2 AN    #> 3 AN    #> 4 AN    #> 5 AN    #> 6 AN    #> # ℹ 121 more rows  # alternatively, to get a data_frame measure(bot$coo, coo_area, coo_perim) #> # A tibble: 40 × 2 #>       area perim #>      <dbl> <dbl> #>  1 234515  2482. #>  2 201056. 2269. #>  3 119460. 1578. #>  4 119568. 1817. #>  5 165736. 2066. #>  6 114015  1487. #>  7 149503  1954. #>  8 147642. 1826. #>  9 130178. 1751. #> 10 219548  2399. #> # ℹ 30 more rows  # and also, to get a data_frame (one row) measure(bot[1], coo_area, coo_perim) #> # A tibble: 1 × 2 #>     area perim #>    <dbl> <dbl> #> 1 234515 2482."},{"path":"http://momx.github.io/Momocs/reference/morphospace_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates nice positions on a plane for drawing shapes — morphospace_positions","title":"Calculates nice positions on a plane for drawing shapes — morphospace_positions","text":"Calculates nice positions plane drawing shapes","code":""},{"path":"http://momx.github.io/Momocs/reference/morphospace_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates nice positions on a plane for drawing shapes — morphospace_positions","text":"","code":"morphospace_positions(   xy,   pos.shp = c(\"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\")[1],   nb.shp = 12,   nr.shp = 6,   nc.shp = 5,   circle.r.shp )"},{"path":"http://momx.github.io/Momocs/reference/morphospace_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates nice positions on a plane for drawing shapes — morphospace_positions","text":"xy matrix points typically PCA multivariate method morphospace can calculated pos.shp shapes positionned: range xy, full extent plane, circle rosewind, xy values provided, range_axes range xy axes, full_axes thing (0.85) range axes. can also directly pass matrix (data.frame) columns named (\"x\", \"y\"). nb.shp total number shapes nr.shp number rows position shapes nc.shp number cols position shapes circle.r.shp circle, radius","code":""},{"path":"http://momx.github.io/Momocs/reference/morphospace_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates nice positions on a plane for drawing shapes — morphospace_positions","text":"data.frame positions","code":""},{"path":"http://momx.github.io/Momocs/reference/morphospace_positions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates nice positions on a plane for drawing shapes — morphospace_positions","text":"See plot.PCA self-speaking examples","code":""},{"path":"http://momx.github.io/Momocs/reference/mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots mosaics of shapes. — mosaic_engine","title":"Plots mosaics of shapes. — mosaic_engine","text":"soon replace panel. See examples vignettes.","code":""},{"path":"http://momx.github.io/Momocs/reference/mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots mosaics of shapes. — mosaic_engine","text":"","code":"mosaic_engine(   coo_list,   dim,   asp = 1,   byrow = TRUE,   fromtop = TRUE,   sample = 60,   relatively = FALSE,   template_size = 0.92 )  mosaic(x, ...)  # S3 method for Out mosaic(   x,   f,   relatively = FALSE,   pal = pal_qual,   sample = 60,   paper_fun = paper_white,   draw_fun = draw_outlines,   legend = TRUE,   dim = NA,   asp = 1,   byrow = TRUE,   fromtop = TRUE,   ... )  # S3 method for Opn mosaic(   x,   f,   relatively = FALSE,   pal = pal_qual,   sample = 60,   paper_fun = paper_white,   draw_fun = draw_curves,   legend = TRUE,   dim = NA,   asp = 1,   byrow = TRUE,   fromtop = TRUE,   ... )  # S3 method for Ldk mosaic(   x,   f,   relatively = FALSE,   pal = pal_qual,   sample = 60,   paper_fun = paper_white,   draw_fun = draw_landmarks,   legend = TRUE,   dim = NA,   asp = 1,   byrow = TRUE,   fromtop = TRUE,   ... )"},{"path":"http://momx.github.io/Momocs/reference/mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots mosaics of shapes. — mosaic_engine","text":"coo_list list shapes dim numeric length 2, desired dimensions rows columns asp numeric yx ratio used calculate dim (1 default). byrow logical whether order shapes rows fromtop logical whether order shapes top sample numeric number points coo_sample relatively logical TRUE use coo_template_relatively , FALSE(default) coo_template. words, whether preserve size . template_size numeric feed coo_template(_relatively). useful add padding around shapes default value (0.95) lowered. x Coo object ... additional arguments feed main drawer number shapes > 1000 (default: 64). non-numeric (eg FALSE) sample. f factor specification feed fac_dispatcher pal one palettes paper_fun papers function (default: paper) draw_fun one drawers pile.list legend logical whether draw legend (improved versions)","code":""},{"path":"http://momx.github.io/Momocs/reference/mosaic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots mosaics of shapes. — mosaic_engine","text":"list templated translated shapes","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/mosaic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots mosaics of shapes. — mosaic_engine","text":"","code":"# On Out --- bot %>% mosaic  bot %>% mosaic(~type)   # As with other grindr functions you can continue the pipe bot %>% mosaic(~type, asp=0.5) %>% draw_firstpoint   # On Opn ---- same grammar olea %>% mosaic(~view+var, paper_fun=paper_dots)    # On Ldk  mosaic(wings, ~group, pal=pal_qual_Dark2, pch=3)    # On Out with different sizes  # would work on other Coo too shapes2 <- shapes sizes <- runif(30, 1, 2) shapes2 %>% mosaic(relatively=FALSE)  shapes2 %>% mosaic(relatively=TRUE) %>% draw_centroid()"},{"path":"http://momx.github.io/Momocs/reference/mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new variables — mutate","title":"Add new variables — mutate","text":"Add new variables $fac. See examples ?dplyr::mutate.","code":""},{"path":"http://momx.github.io/Momocs/reference/mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new variables — mutate","text":"","code":"mutate(.data, ...)"},{"path":"http://momx.github.io/Momocs/reference/mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new variables — mutate","text":".data Coo, Coe, PCA object ... comma separated list unquoted expressions","code":""},{"path":"http://momx.github.io/Momocs/reference/mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new variables — mutate","text":"Momocs object class.","code":""},{"path":"http://momx.github.io/Momocs/reference/mutate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add new variables — mutate","text":"dplyr verbs maintained.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add new variables — mutate","text":"","code":"olea #> Opn (curves) #>   - 210 curves, 99 +/- 3 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk mutate(olea, id=factor(1:length(olea))) #> Opn (curves) #>   - 210 curves, 99 +/- 4 coords (in $coo) #>   - 5 classifiers (in $fac):  #> # A tibble: 210 × 5 #>   var   domes view  ind   id    #>   <fct> <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   1     #> 2 Aglan cult  VL    O10   2     #> 3 Aglan cult  VD    O11   3     #> 4 Aglan cult  VL    O11   4     #> 5 Aglan cult  VD    O12   5     #> 6 Aglan cult  VL    O12   6     #> # ℹ 204 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/npoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate natural polynomial fits on open outlines — npoly","title":"Calculate natural polynomial fits on open outlines — npoly","text":"Calculates natural polynomial coefficients, linear model fit (see lm), matrix (x; y) coordinates Opn object","code":""},{"path":"http://momx.github.io/Momocs/reference/npoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate natural polynomial fits on open outlines — npoly","text":"","code":"npoly(x, ...)  # S3 method for default npoly(x, degree, ...)  # S3 method for Opn npoly(   x,   degree,   baseline1 = c(-0.5, 0),   baseline2 = c(0.5, 0),   nb.pts = 120,   ... )  # S3 method for list npoly(x, ...)"},{"path":"http://momx.github.io/Momocs/reference/npoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate natural polynomial fits on open outlines — npoly","text":"x matrix (list) (x; y) coordinates Opn object ... useless degree polynomial degree fit (Intercept also returned) baseline1 numeric \\((x; y)\\) coordinates first baseline default \\((x= -0.5; y=0)\\) baseline2 numeric \\((x; y)\\) coordinates second baseline default \\((x= 0.5; y=0)\\) nb.pts number points sample calculate polynomials","code":""},{"path":"http://momx.github.io/Momocs/reference/npoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate natural polynomial fits on open outlines — npoly","text":"applied single shape, list components: coeff coefficients (including intercept) ortho whether orthogonal natural polynomials fitted degree degree fit (retrieved coeff though) baseline1 first baseline point (far first point) baseline2 second baseline point (far last point) r2 r2 fit mod raw lm model otherwise, OpnCoe object.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/npoly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate natural polynomial fits on open outlines — npoly","text":"","code":"data(olea) o <- olea[1] op <- opoly(o, degree=4) op #> $coeff #> (Intercept)          x1          x2          x3          x4  #>  0.20937101  0.01991936 -0.95319289 -0.03075138 -0.11975200  #>  #> $ortho #> [1] TRUE #>  #> $degree #> [1] 4 #>  #> $baseline1 #> [1] -0.5  0.0 #>  #> $baseline2 #> [1] 0.5 0.0 #>  #> $r2 #> [1] 0.9986415 #>  #> $mod #>  #> Call: #> lm(formula = coo[, 2] ~ x) #>  #> Coefficients: #> (Intercept)           x1           x2           x3           x4   #>     0.20937      0.01992     -0.95319     -0.03075     -0.11975   #>  #>  # shape reconstruction opi <- opoly_i(op) coo_plot(o) coo_draw(opi, border=\"red\")  # R2 for degree 1 to 10 r <- numeric() for (i in 1:10) { r[i] <- npoly(o, degree=i)$r2 } plot(2:10, r[2:10], type='b', pch=20, col='red', main='R2 / degree')"},{"path":"http://momx.github.io/Momocs/reference/opoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate orthogonal polynomial fits on open outlines — opoly","title":"Calculate orthogonal polynomial fits on open outlines — opoly","text":"Calculates orthogonal polynomial coefficients, linear model fit (see lm), matrix (x; y) coordinates Opn object","code":""},{"path":"http://momx.github.io/Momocs/reference/opoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate orthogonal polynomial fits on open outlines — opoly","text":"","code":"opoly(x, ...)  # S3 method for default opoly(x, degree, ...)  # S3 method for Opn opoly(   x,   degree,   baseline1 = c(-0.5, 0),   baseline2 = c(0.5, 0),   nb.pts = 120,   ... )  # S3 method for list opoly(x, ...)"},{"path":"http://momx.github.io/Momocs/reference/opoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate orthogonal polynomial fits on open outlines — opoly","text":"x matrix (list) (x; y) coordinates ... useless degree polynomial degree fit (Intercept also returned) baseline1 numeric \\((x; y)\\) coordinates first baseline default \\((x= -0.5; y=0)\\) baseline2 numeric \\((x; y)\\) coordinates second baseline default \\((x= 0.5; y=0)\\) nb.pts number points sample calculate polynomials","code":""},{"path":"http://momx.github.io/Momocs/reference/opoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate orthogonal polynomial fits on open outlines — opoly","text":"list components applied single shape: coeff coefficients (including intercept) ortho whether orthogonal natural polynomials fitted degree degree fit (retrieved coeff though) baseline1 first baseline point (far first point) baseline2 second baseline point (far last point) r2 r2 fit mod raw lm model otherwise OpnCoe object.","code":""},{"path":"http://momx.github.io/Momocs/reference/opoly.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate orthogonal polynomial fits on open outlines — opoly","text":"Orthogonal polynomials sometimes called Legendre's polynomials. preferred natural polynomials since adding degree change lower orders coefficients.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/opoly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate orthogonal polynomial fits on open outlines — opoly","text":"","code":"data(olea) o <- olea[1] op <- opoly(o, degree=4) op #> $coeff #> (Intercept)          x1          x2          x3          x4  #>  0.20937101  0.01991936 -0.95319289 -0.03075138 -0.11975200  #>  #> $ortho #> [1] TRUE #>  #> $degree #> [1] 4 #>  #> $baseline1 #> [1] -0.5  0.0 #>  #> $baseline2 #> [1] 0.5 0.0 #>  #> $r2 #> [1] 0.9986415 #>  #> $mod #>  #> Call: #> lm(formula = coo[, 2] ~ x) #>  #> Coefficients: #> (Intercept)           x1           x2           x3           x4   #>     0.20937      0.01992     -0.95319     -0.03075     -0.11975   #>  #>  # shape reconstruction opi <- opoly_i(op) coo_plot(o) coo_draw(opi) lines(opi, col='red')  # R2 for degree 1 to 10 r <- numeric() for (i in 1:10) { r[i] <- opoly(o, degree=i)$r2 } plot(2:10, r[2:10], type='b', pch=20, col='red', main='R2 / degree')"},{"path":"http://momx.github.io/Momocs/reference/pProcrustes.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial Procrustes alignment between two shapes — pProcrustes","title":"Partial Procrustes alignment between two shapes — pProcrustes","text":"Directly borrowed Claude (2008), called pPsup .","code":""},{"path":"http://momx.github.io/Momocs/reference/pProcrustes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial Procrustes alignment between two shapes — pProcrustes","text":"","code":"pProcrustes(coo1, coo2)"},{"path":"http://momx.github.io/Momocs/reference/pProcrustes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial Procrustes alignment between two shapes — pProcrustes","text":"coo1 Configuration matrix superimposed onto centered preshape coo2. coo2 Reference configuration matrix.","code":""},{"path":"http://momx.github.io/Momocs/reference/pProcrustes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial Procrustes alignment between two shapes — pProcrustes","text":"list components coo1 superimposed centered preshape coo1 onto centered preshape coo2 coo2 centered preshape coo2 rotation rotation matrix DP partial Procrustes distance coo1 coo2 rho trigonometric Procrustes distance.","code":""},{"path":"http://momx.github.io/Momocs/reference/pProcrustes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial Procrustes alignment between two shapes — pProcrustes","text":"Claude, J. (2008). Morphometrics R. Analysis (p. 316). Springer.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Color palettes — palettes","title":"Color palettes — palettes","text":"colorblind friendly RColorBrewer palettes recreated without number colors limitation transparency support thanks pal_alpha can used alone. Also, viridis palettes (see package CRAN), yet color ramps borrowed Momocs depend . Also, pal_qual_solarized based Solarized: https://ethanschoonover.com/solarized/ pal_seq_grey shades grey grey10 grey90.","code":""},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color palettes — palettes","text":"","code":"pal_alpha(cols, transp = 0)  pal_manual(cols, transp = 0)  pal_qual_solarized(n, transp = 0)  pal_seq_grey(n, transp = 0)  pal_div_BrBG(n, transp = 0)  pal_div_PiYG(n, transp = 0)  pal_div_PRGn(n, transp = 0)  pal_div_PuOr(n, transp = 0)  pal_div_RdBu(n, transp = 0)  pal_div_RdYlBu(n, transp = 0)  pal_qual_Dark2(n, transp = 0)  pal_qual_Paired(n, transp = 0)  pal_qual_Set2(n, transp = 0)  pal_seq_Blues(n, transp = 0)  pal_seq_BuGn(n, transp = 0)  pal_seq_BuPu(n, transp = 0)  pal_seq_GnBu(n, transp = 0)  pal_seq_Greens(n, transp = 0)  pal_seq_Greys(n, transp = 0)  pal_seq_Oranges(n, transp = 0)  pal_seq_OrRd(n, transp = 0)  pal_seq_PuBu(n, transp = 0)  pal_seq_PuBuGn(n, transp = 0)  pal_seq_PuRd(n, transp = 0)  pal_seq_Purples(n, transp = 0)  pal_seq_RdPu(n, transp = 0)  pal_seq_Reds(n, transp = 0)  pal_seq_YlGn(n, transp = 0)  pal_seq_YlGnBu(n, transp = 0)  pal_seq_YlOrBr(n, transp = 0)  pal_seq_YlOrRd(n, transp = 0)  pal_seq_magma(n, transp = 0)  pal_seq_inferno(n, transp = 0)  pal_seq_plasma(n, transp = 0)  pal_seq_viridis(n, transp = 0)  pal_qual(n, transp = 0)  pal_seq(n, transp = 0)  pal_div(n, transp = 0)"},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color palettes — palettes","text":"cols color(s) hexadecimal values transp numeric 0 1 (0, eg opaque, default) n numeric number colors","code":""},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color palettes — palettes","text":"palette function","code":""},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color palettes — palettes","text":"Default color palettes currently: pal_qual=pal_qual_Set2 pal_seq=pal_seq_viridis pal_div=pal_div_RdBu","code":""},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Color palettes — palettes","text":"RColorBrewer palettes happy n lower 3 given number palette. case, functions create color palette colorRampPalette return colors even .","code":""},{"path":"http://momx.github.io/Momocs/reference/palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color palettes — palettes","text":"","code":"pal_div_BrBG(5) %>% barplot(rep(1, 5), col=.)  pal_div_BrBG(5, 0.5) %>% barplot(rep(1, 5), col=.)"},{"path":"http://momx.github.io/Momocs/reference/panel.Coo.html","id":null,"dir":"Reference","previous_headings":"","what":"Family picture of shapes — panel","title":"Family picture of shapes — panel","text":"Plots outlines, side side, Coo (, Opn Ldk) objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/panel.Coo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family picture of shapes — panel","text":"","code":"panel(x, ...)  # S3 method for Out panel(   x,   dim,   cols,   borders,   fac,   palette = col_summer,   coo_sample = 120,   names = NULL,   cex.names = 0.6,   points = TRUE,   points.pch = 3,   points.cex = 0.2,   points.col,   ... )  # S3 method for Opn panel(   x,   cols,   borders,   fac,   palette = col_summer,   coo_sample = 120,   names = NULL,   cex.names = 0.6,   points = TRUE,   points.pch = 3,   points.cex = 0.2,   points.col,   ... )  # S3 method for Ldk panel(   x,   cols,   borders,   fac,   palette = col_summer,   names = NULL,   cex.names = 0.6,   points = TRUE,   points.pch = 3,   points.cex = 0.2,   points.col = \"#333333\",   ... )"},{"path":"http://momx.github.io/Momocs/reference/panel.Coo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family picture of shapes — panel","text":"x Coo object plot. ... additional arguments feed generic plot dim coo_listpanel: numeric length 2 specifying dimensions panel cols vector colors drawing outlines. Either single value length exactly equal number coordinates. borders vector colors drawing borders. Either single value length exactly equals number coordinates. fac factor within $fac slot colors palette color palette coo_sample NULL number point per shape display (plot quickly) names whether plot names . TRUE uses shape names, something fac_dispatcher cex.names cex names points logical (Ldk) whether draw points points.pch (Ldk) pch points points.cex (Ldk) cex points points.col (Ldk) col  points","code":""},{"path":"http://momx.github.io/Momocs/reference/panel.Coo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family picture of shapes — panel","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/panel.Coo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Family picture of shapes — panel","text":"want reorder shapes according factor, use arrange.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/panel.Coo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family picture of shapes — panel","text":"","code":"panel(mosquito, names=TRUE, cex.names=0.5)  panel(olea)  panel(bot, c(4, 10))  # an illustration of the use of fac panel(bot, fac='type', palette=col_spring, names=TRUE)"},{"path":"http://momx.github.io/Momocs/reference/papers.html","id":null,"dir":"Reference","previous_headings":"","what":"grindr papers for shape plots — papers","title":"grindr papers for shape plots — papers","text":"Papers use drawers building custom shape plots using grindr approach. See examples vignettes.","code":""},{"path":"http://momx.github.io/Momocs/reference/papers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grindr papers for shape plots — papers","text":"","code":"paper(coo, ...)  paper_white(coo)  paper_grid(coo, grid = c(10, 5), cols = c(\"#ffa500\", \"#e5e5e5\"), ...)  paper_chess(coo, n = 50, col = \"#E5E5E5\")  paper_dots(coo, pch = 20, n = 50, col = \"#7F7F7F\")"},{"path":"http://momx.github.io/Momocs/reference/papers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grindr papers for shape plots — papers","text":"coo single shape Coo object ... arguments feed plotting function within paper function grid numeric length 2 (roughly) specify number majors lines, number minor lines within two major ones cols colors (hexadecimal preferred) use grid drawing n numeric number squares chessboard col color (hexadecimal) use chessboard drawing pch use dots","code":""},{"path":"http://momx.github.io/Momocs/reference/papers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grindr papers for shape plots — papers","text":"drawing layer","code":""},{"path":"http://momx.github.io/Momocs/reference/papers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"grindr papers for shape plots — papers","text":"approach (soon) replace coo_plot friends versions. comments welcome.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutes and breed Coe (and others) objects — perm","title":"Permutes and breed Coe (and others) objects — perm","text":"methods applies permutations column-wise coe Coe object relies function can used matrix. Coe object, uses sample every column (row) (without) replacement.","code":""},{"path":"http://momx.github.io/Momocs/reference/perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutes and breed Coe (and others) objects — perm","text":"","code":"perm(x, ...)  # S3 method for default perm(x, margin = 2, size, replace = TRUE, ...)  # S3 method for Coe perm(x, size, replace = TRUE, ...)"},{"path":"http://momx.github.io/Momocs/reference/perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutes and breed Coe (and others) objects — perm","text":"x object permute ... useless margin numeric whether 1 2 (rows columns) size numeric required size final object, size default. replace logical, whether use sample replacement","code":""},{"path":"http://momx.github.io/Momocs/reference/perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutes and breed Coe (and others) objects — perm","text":"Coe object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutes and breed Coe (and others) objects — perm","text":"","code":"m <- matrix(1:12, nrow=3) m #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    6    9   12 perm(m, margin=2, size=5) #>      [,1] [,2] [,3] [,4] #> [1,]    3    4    9   11 #> [2,]    1    6    8   12 #> [3,]    3    5    7   11 #> [4,]    1    6    9   12 #> [5,]    3    4    8   12 perm(m, margin=1, size=10) #>       [,1] [,2] [,3] #>  [1,]    1    2    9 #>  [2,]   10    8    3 #>  [3,]   10    5    3 #>  [4,]   10   11    6 #>  [5,]    1    5    9 #>  [6,]    4    5    9 #>  [7,]    1    8    6 #>  [8,]    7   11    3 #>  [9,]    7    2   12 #> [10,]    4    8    3  bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.m <- perm(bot.f, 80) bot.m #> An OutCoe object [ elliptical Fourier analysis ] #> -------------------- #>  - $coe: 80 outlines described, 12 harmonics #> # A tibble: 0 × 0"},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical pile of shapes — pile","title":"Graphical pile of shapes — pile","text":"Pile shapes graphical window. Useful check normalization terms size, position, rotation, first point, etc. , essentially, shortcut around paper + drawers grindr family.","code":""},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphical pile of shapes — pile","text":"","code":"pile(coo, f, sample, subset, pal, paper_fun, draw_fun, transp, ...)  # S3 method for default pile(   coo,   f,   sample,   subset,   pal = pal_qual,   paper_fun = paper,   draw_fun = draw_curves,   transp = 0,   ... )  # S3 method for list pile(   coo,   f,   sample = 64,   subset = 1000,   pal = pal_qual,   paper_fun = paper,   draw_fun = draw_curves,   transp = 0,   ... )  # S3 method for array pile(   coo,   f,   sample = 64,   subset = 1000,   pal = pal_qual,   paper_fun = paper,   draw_fun = draw_landmarks,   transp = 0,   ... )  # S3 method for Out pile(   coo,   f,   sample = 64,   subset = 1000,   pal = pal_qual,   paper_fun = paper,   draw_fun = draw_outlines,   transp = 0,   ... )  # S3 method for Opn pile(   coo,   f,   sample = 64,   subset = 1000,   pal = pal_qual,   paper_fun = paper,   draw_fun = draw_curves,   transp = 0,   ... )  # S3 method for Ldk pile(   coo,   f,   sample = 64,   subset = 1000,   pal = pal_qual,   paper_fun = paper,   draw_fun = draw_landmarks,   transp = 0,   ... )"},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphical pile of shapes — pile","text":"coo single shape  Coo object f factor specification sample numeric number points coo_sample number shapes > 1000 (default: 64). non-numeric (eg FALSE) sample. subset numeric draw number (randomly chosen) shapes number shapes > 1000 (default: 1000) non-numeric (eg FALSE) sample. pal palette among palettes (default: pal_qual) paper_fun papers function (default: paper) draw_fun one drawers pile.list transp numeric transparency (default:adjusted, min:0, max=0) ... arguments feed core drawer, depending object","code":""},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphical pile of shapes — pile","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphical pile of shapes — pile","text":"Large Coo sampled, terms number shapes points drawn.","code":""},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Graphical pile of shapes — pile","text":"variation plot called stack Momocs 1.2.5","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/pile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphical pile of shapes — pile","text":"","code":"# all Coo are supported with sensible defaults pile(bot)    # outlines  pile(olea, ~var, pal=pal_qual_Dark2, paper_fun=paper_grid)   # curves  pile(wings)  # landmarks   # you can continue the pipe with compatible drawers pile(bot, trans=0.9) %>% draw_centroid   # if you are not happy with this, build your own ! # eg see Momocs::pile.Out (no quotes)  my_pile <- function(x, col_labels=\"red\", transp=0.5){     x %>% paper_chess(n=100) %>%           draw_landmarks(transp=transp) %>%           draw_labels(col=col_labels) } # using it wings %>% my_pile(transp=3/4)    # and as gridr functions propagate, you can even continue:  wings %>% my_pile() %>% draw_centroid(col=\"blue\", cex=5)    # method on lists  bot$coo %>% pile    # it can be tuned when we have a list of landmarks with:  wings$coo %>% pile(draw_fun=draw_landmarks)   # or on arrays (turn for draw_landmarks)  wings$coo %>% l2a %>% #we now have an array      pile"},{"path":"http://momx.github.io/Momocs/reference/plot.LDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots Linear Discriminant Analysis — plot.LDA","title":"Plots Linear Discriminant Analysis — plot.LDA","text":"Momocs' LDA plotter many graphical options.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.LDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots Linear Discriminant Analysis — plot.LDA","text":"","code":"# S3 method for LDA plot(   x,   fac = x$fac,   xax = 1,   yax = 2,   points = TRUE,   col = \"#000000\",   pch = 20,   cex = 0.5,   palette = col_solarized,   center.origin = FALSE,   zoom = 1,   xlim = NULL,   ylim = NULL,   bg = par(\"bg\"),   grid = TRUE,   nb.grids = 3,   morphospace = FALSE,   pos.shp = c(\"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\")[1],   amp.shp = 1,   size.shp = 1,   nb.shp = 12,   nr.shp = 6,   nc.shp = 5,   rotate.shp = 0,   flipx.shp = FALSE,   flipy.shp = FALSE,   pts.shp = 60,   border.shp = col_alpha(\"#000000\", 0.5),   lwd.shp = 1,   col.shp = col_alpha(\"#000000\", 0.95),   stars = FALSE,   ellipses = FALSE,   conf.ellipses = 0.5,   ellipsesax = TRUE,   conf.ellipsesax = c(0.5, 0.9),   lty.ellipsesax = 1,   lwd.ellipsesax = sqrt(2),   chull = FALSE,   chull.lty = 1,   chull.filled = FALSE,   chull.filled.alpha = 0.92,   density = FALSE,   lev.density = 20,   contour = FALSE,   lev.contour = 3,   n.kde2d = 100,   delaunay = FALSE,   loadings = FALSE,   labelspoints = FALSE,   col.labelspoints = par(\"fg\"),   cex.labelspoints = 0.6,   abbreviate.labelspoints = TRUE,   labelsgroups = TRUE,   cex.labelsgroups = 0.8,   rect.labelsgroups = FALSE,   abbreviate.labelsgroups = FALSE,   color.legend = FALSE,   axisnames = TRUE,   axisvar = TRUE,   unit = FALSE,   eigen = TRUE,   rug = TRUE,   title = substitute(x),   box = TRUE,   old.par = TRUE,   ... )"},{"path":"http://momx.github.io/Momocs/reference/plot.LDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots Linear Discriminant Analysis — plot.LDA","text":"x object class \"LDA\", typically obtained LDA fac name column id $fac slot, formula combining colum names $fac slot (cf. examples). factor numeric length can also passed fly. xax first PC axis yax second PC axis points logical whether plot points col color points (either global, every level fac every individual, see examples) pch pch points (either global, every level fac every individual, see examples) cex size points palette palette center.origin logical whether center plot onto origin zoom keep distances xlim numeric length two ; provided along ylim, x y lims use ylim numeric length two ; provided along xlim, x y lims use bg color background grid logical whether draw grid nb.grids many morphospace logical whether add morphological space pos.shp passed morphospace_positions, one \"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\". directly matrix positions. See morphospace_positions amp.shp amplification factor shape deformation size.shp size shapes nb.shp (pos.shp=\"circle\") number shapes compass nr.shp (pos.shp=\"full\" \"range) number shapes per row nc.shp (pos.shp=\"full\" \"range) number shapes per column rotate.shp angle radians rotate shapes (several methods, vector angles) flipx.shp , whether apply coo_flipx flipy.shp , whether apply coo_flipy pts.shp number points fro drawing shapes border.shp border color shapes lwd.shp line width shapes col.shp color shapes stars logical whether draw \"stars\" ellipses logical whether draw confidence ellipses conf.ellipses numeric quantile (bivariate gaussian) confidence ellipses ellipsesax logical whether draw ellipse axes conf.ellipsesax one numeric, quantiles (bivariate gaussian) ellipses axes lty.ellipsesax yes, lty draw axes lwd.ellipsesax yes, one numeric line widths chull logical whether draw convex hull chull.lty yes, linetype chull.filled logical whether add filled convex hulls chull.filled.alpha numeric alpha transparency density whether add 2d density kernel estimation (based kde2d) lev.density yes, number levels plot (image) contour whether add contour lines based 2d density kernel lev.contour yes, (approximate) number lines draw n.kde2d number bins kde2d, ie 'smoothness' density kernel delaunay logical whether add delaunay 'mesh' points loadings logical whether add loadings every variables labelspoints TRUE rownames used labels, colname $fac can also passed col.labelspoints color labels, otherwise inherited fac cex.labelspoints cex labels abbreviate.labelspoints logical whether abbreviate labelsgroups logical whether add labels groups cex.labelsgroups ifyes, numeric size labels rect.labelsgroups logical whether add rectangle behind groups names abbreviate.labelsgroups logical, whether abbreviate group names color.legend logical whether add (cheap) color legend numeric fac axisnames logical whether add PC names axisvar logical whether draw variance explain unit logical whether add plane unit eigen logical whether draw plot eigen values rug logical whether add rug margins title character name plot box whether draw box around plotting region old.par whether restore old par. Set FALSE want reuse graphical window. ... useless , just fit generic plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.LDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots Linear Discriminant Analysis — plot.LDA","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.LDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots Linear Discriminant Analysis — plot.LDA","text":"Widely inspired \"layers\" philosophy behind graphical functions ade4 R package.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.LDA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plots Linear Discriminant Analysis — plot.LDA","text":"Morphospaces deprecated far. 99% code shared plot.PCA waiting general rewriting multivariate plotter. See https://github.com/vbonhomme/Momocs/issues/121","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots Principal Component Analysis — plot.PCA","title":"Plots Principal Component Analysis — plot.PCA","text":"Momocs' PCA plotter morphospaces many graphical options.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots Principal Component Analysis — plot.PCA","text":"","code":"# S3 method for PCA plot(   x,   fac,   xax = 1,   yax = 2,   points = TRUE,   col = \"#000000\",   pch = 20,   cex = 0.5,   palette = col_solarized,   center.origin = FALSE,   zoom = 1,   xlim = NULL,   ylim = NULL,   bg = par(\"bg\"),   grid = TRUE,   nb.grids = 3,   morphospace = TRUE,   pos.shp = c(\"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\")[1],   amp.shp = 1,   size.shp = 1,   nb.shp = 12,   nr.shp = 6,   nc.shp = 5,   rotate.shp = 0,   flipx.shp = FALSE,   flipy.shp = FALSE,   pts.shp = 60,   border.shp = col_alpha(\"#000000\", 0.5),   lwd.shp = 1,   col.shp = col_alpha(\"#000000\", 0.95),   stars = FALSE,   ellipses = FALSE,   conf.ellipses = 0.5,   ellipsesax = FALSE,   conf.ellipsesax = c(0.5, 0.9),   lty.ellipsesax = 1,   lwd.ellipsesax = sqrt(2),   chull = FALSE,   chull.lty = 1,   chull.filled = TRUE,   chull.filled.alpha = 0.92,   density = FALSE,   lev.density = 20,   contour = FALSE,   lev.contour = 3,   n.kde2d = 100,   delaunay = FALSE,   loadings = FALSE,   labelspoints = FALSE,   col.labelspoints = par(\"fg\"),   cex.labelspoints = 0.6,   abbreviate.labelspoints = TRUE,   labelsgroups = TRUE,   cex.labelsgroups = 0.8,   rect.labelsgroups = FALSE,   abbreviate.labelsgroups = FALSE,   color.legend = FALSE,   axisnames = TRUE,   axisvar = TRUE,   unit = FALSE,   eigen = TRUE,   rug = TRUE,   title = substitute(x),   box = TRUE,   old.par = TRUE,   ... )"},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots Principal Component Analysis — plot.PCA","text":"x PCA, typically obtained PCA fac name column id $fac slot, formula combining colum names $fac slot (cf. examples). factor numeric length can also passed fly. xax first PC axis yax second PC axis points logical whether plot points col color points (either global, every level fac every individual, see examples) pch pch points (either global, every level fac every individual, see examples) cex size points palette palette center.origin logical whether center plot onto origin zoom keep distances xlim numeric length two ; provided along ylim, x y lims use ylim numeric length two ; provided along xlim, x y lims use bg color background grid logical whether draw grid nb.grids many morphospace logical whether add morphological space pos.shp passed morphospace_positions, one \"range\", \"full\", \"circle\", \"xy\", \"range_axes\", \"full_axes\". directly matrix positions. See morphospace_positions amp.shp amplification factor shape deformation size.shp size shapes nb.shp (pos.shp=\"circle\") number shapes compass nr.shp (pos.shp=\"full\" \"range) number shapes per row nc.shp (pos.shp=\"full\" \"range) number shapes per column rotate.shp angle radians rotate shapes (several methods, vector angles) flipx.shp , whether apply coo_flipx flipy.shp , whether apply coo_flipy pts.shp number points fro drawing shapes border.shp border color shapes lwd.shp line width shapes col.shp color shapes stars logical whether draw \"stars\" ellipses logical whether draw confidence ellipses conf.ellipses numeric quantile (bivariate gaussian) confidence ellipses ellipsesax logical whether draw ellipse axes conf.ellipsesax one numeric, quantiles (bivariate gaussian) ellipses axes lty.ellipsesax yes, lty draw axes lwd.ellipsesax yes, one numeric line widths chull logical whether draw convex hull chull.lty yes, linetype chull.filled logical whether add filled convex hulls chull.filled.alpha numeric alpha transparency density whether add 2d density kernel estimation (based kde2d) lev.density yes, number levels plot (image) contour whether add contour lines based 2d density kernel lev.contour yes, (approximate) number lines draw n.kde2d number bins kde2d, ie 'smoothness' density kernel delaunay logical whether add delaunay 'mesh' points loadings logical whether add loadings every variables labelspoints TRUE rownames used labels, colname $fac can also passed col.labelspoints color labels, otherwise inherited fac cex.labelspoints cex labels abbreviate.labelspoints logical whether abbreviate labelsgroups logical whether add labels groups cex.labelsgroups ifyes, numeric size labels rect.labelsgroups logical whether add rectangle behind groups names abbreviate.labelsgroups logical, whether abbreviate group names color.legend logical whether add (cheap) color legend numeric fac axisnames logical whether add PC names axisvar logical whether draw variance explain unit logical whether add plane unit eigen logical whether draw plot eigen values rug logical whether add rug margins title character name plot box whether draw box around plotting region old.par whether restore old par. Set FALSE want reuse graphical window. ... useless , just fit generic plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots Principal Component Analysis — plot.PCA","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots Principal Component Analysis — plot.PCA","text":"Widely inspired \"layers\" philosophy behind graphical functions ade4 R package.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plots Principal Component Analysis — plot.PCA","text":"NAs $fac handled quite experimentally. importantly, early 2018, plan complete rewrite plot.PCA multivariate plotters.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot.PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots Principal Component Analysis — plot.PCA","text":"","code":"# \\donttest{ bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot.p <- PCA(bot.f)  ### Morphospace options plot(bot.p, pos.shp=\"full\") #> will be deprecated soon, see ?plot_PCA  plot(bot.p, pos.shp=\"range\") #> will be deprecated soon, see ?plot_PCA  plot(bot.p, pos.shp=\"xy\") #> will be deprecated soon, see ?plot_PCA  plot(bot.p, pos.shp=\"circle\") #> will be deprecated soon, see ?plot_PCA  plot(bot.p, pos.shp=\"range_axes\") #> will be deprecated soon, see ?plot_PCA  plot(bot.p, pos.shp=\"full_axes\") #> will be deprecated soon, see ?plot_PCA   plot(bot.p, morpho=FALSE) #> will be deprecated soon, see ?plot_PCA   ### Passing factors to plot.PCA # 3 equivalent methods plot(bot.p, \"type\") #> will be deprecated soon, see ?plot_PCA  plot(bot.p, 1) #> will be deprecated soon, see ?plot_PCA  plot(bot.p, ~type) #> will be deprecated soon, see ?plot_PCA   # let's create a dummy factor of the correct length # and another added to the $fac with mutate # and a numeric of the correct length f <- factor(rep(letters[1:2], 20)) z <- factor(rep(LETTERS[1:2], 20)) bot %<>% mutate(cs=coo_centsize(.), z=z) bp <- bot %>% efourier %>% PCA #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) # so bp contains type, cs (numeric) and z; not f # yet f can be passed on the fly plot(bp, f) #> will be deprecated soon, see ?plot_PCA  # numeric fac are allowed plot(bp, \"cs\", cex=3, color.legend=TRUE) #> will be deprecated soon, see ?plot_PCA  # formula allows combinations of factors plot(bp, ~type+z) #> will be deprecated soon, see ?plot_PCA   ### other morphometric approaches works the same # open curves op <- npoly(olea, 5) #> 'nb.pts' missing and set to: 91 op.p <- PCA(op) op.p #> A PCA object #> -------------------- #>  - 210 shapes  #>  - $method: [ npoly analysis ] #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>  - All components: sdev, rotation, center, scale, x, eig, fac, mshape, method, mod, baseline1, baseline2, cuts. plot(op.p, ~ domes + var, morpho=TRUE) # use of formula #> will be deprecated soon, see ?plot_PCA   # landmarks wp <- fgProcrustes(wings, tol=1e-4) #> iteration:  1 \tgain: 53084  #> iteration:  2 \tgain: 0.1323  #> iteration:  3 \tgain: 0.056732  #> iteration:  4 \tgain: 0.00012401  #> iteration:  5 \tgain: 0.038609  #> iteration:  6 \tgain: 0.018221  #> iteration:  7 \tgain: 0.0014165  #> iteration:  8 \tgain: 6.1489e-06  wpp <- PCA(wp) wpp #> A PCA object #> -------------------- #>  - 127 shapes  #>  - $method: [ procrustes analysis ] #> # A tibble: 127 × 1 #>   group #>   <fct> #> 1 AN    #> 2 AN    #> 3 AN    #> 4 AN    #> 5 AN    #> 6 AN    #> # ℹ 121 more rows #>  - All components: sdev, rotation, center, scale, x, eig, fac, mshape, method, cuts, links. plot(wpp, 1) #> will be deprecated soon, see ?plot_PCA   ### Cosmetic options # window plot(bp, 1, zoom=2) #> will be deprecated soon, see ?plot_PCA  plot(bp, zoom=0.5) #> will be deprecated soon, see ?plot_PCA  plot(bp, center.origin=FALSE, grid=FALSE) #> will be deprecated soon, see ?plot_PCA   # colors plot(bp, col=\"red\") # globally #> will be deprecated soon, see ?plot_PCA  plot(bp, 1, col=c(\"#00FF00\", \"#0000FF\")) # for every level #> will be deprecated soon, see ?plot_PCA  # a color vector of the right length plot(bp, 1, col=rep(c(\"#00FF00\", \"#0000FF\"), each=20)) #> will be deprecated soon, see ?plot_PCA  # a color vector of the right length, mixign Rcolor names (not a good idea though) plot(bp, 1, col=rep(c(\"#00FF00\", \"forestgreen\"), each=20)) #> will be deprecated soon, see ?plot_PCA    # ellipses plot(bp, 1, conf.ellipsesax=2/3) #> will be deprecated soon, see ?plot_PCA  plot(bp, 1, ellipsesax=FALSE) #> will be deprecated soon, see ?plot_PCA  plot(bp, 1, ellipsesax=TRUE, ellipses=TRUE) #> will be deprecated soon, see ?plot_PCA   # stars plot(bp, 1, stars=TRUE, ellipsesax=FALSE) #> will be deprecated soon, see ?plot_PCA   # convex hulls plot(bp, 1, chull=TRUE) #> will be deprecated soon, see ?plot_PCA  plot(bp, 1, chull.lty=3) #> will be deprecated soon, see ?plot_PCA   # filled convex hulls plot(bp, 1, chull.filled=TRUE) #> will be deprecated soon, see ?plot_PCA  plot(bp, 1, chull.filled.alpha = 0.8, chull.lty =1) # you can omit chull.filled=TRUE #> will be deprecated soon, see ?plot_PCA   # density kernel plot(bp, 1, density=TRUE, contour=TRUE, lev.contour=10) #> will be deprecated soon, see ?plot_PCA   # delaunay plot(bp, 1, delaunay=TRUE) #> will be deprecated soon, see ?plot_PCA   # loadings flower %>% PCA %>% plot(1, loadings=TRUE) #> will be deprecated soon, see ?plot_PCA   # point/group labelling plot(bp, 1, labelspoint=TRUE) # see options for abbreviations #> will be deprecated soon, see ?plot_PCA  plot(bp, 1, labelsgroup=TRUE) # see options for abbreviations #> will be deprecated soon, see ?plot_PCA   # clean axes, no rug, no border, random title plot(bp, axisvar=FALSE, axisnames=FALSE, rug=FALSE, box=FALSE, title=\"random\") #> will be deprecated soon, see ?plot_PCA   # no eigen plot(bp, eigen=FALSE) # eigen cause troubles to graphical window #> will be deprecated soon, see ?plot_PCA  # eigen may causes troubles to the graphical window. you can try old.par = TRUE # }"},{"path":"http://momx.github.io/Momocs/reference/plot_CV.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a cross-validation table as an heatmap — plot_CV","title":"Plots a cross-validation table as an heatmap — plot_CV","text":"Either frequencies (percentages) plus marginal sums, values heatmaps. Used Momocs plotting cross-validation tables may used table (likely freq=FALSE).","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_CV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a cross-validation table as an heatmap — plot_CV","text":"","code":"plot_CV(   x,   freq = FALSE,   rm0 = FALSE,   pc = FALSE,   fill = TRUE,   labels = TRUE,   axis.size = 10,   axis.x.angle = 45,   cell.size = 2.5,   signif = 2,   ... )  # S3 method for default plot_CV(   x,   freq = FALSE,   rm0 = FALSE,   pc = FALSE,   fill = TRUE,   labels = TRUE,   axis.size = 10,   axis.x.angle = 45,   cell.size = 2.5,   signif = 2,   ... )  # S3 method for LDA plot_CV(   x,   freq = TRUE,   rm0 = TRUE,   pc = TRUE,   fill = TRUE,   labels = TRUE,   axis.size = 10,   axis.x.angle = 45,   cell.size = 2.5,   signif = 2,   ... )"},{"path":"http://momx.github.io/Momocs/reference/plot_CV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a cross-validation table as an heatmap — plot_CV","text":"x (cross-validation table) LDA object freq logical whether display frequencies (within actual class) counts rm0 logical whether remove zeros pc logical whether multiply proportion 100, ie display percentages fill logical whether fill cell according count/freq labels logical whether add text labels cells axis.size numeric adjust axis labels axis.x.angle numeric rotate x-axis labels cell.size numeric adjust text labels cells signif numeric round frequencies using signif ... useless ","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_CV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a cross-validation table as an heatmap — plot_CV","text":"ggplot object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_CV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a cross-validation table as an heatmap — plot_CV","text":"","code":"h <- hearts %>%      fgProcrustes(0.01) %>% coo_slide(ldk=2) %T>% stack %>%      efourier(6, norm=FALSE) %>% LDA(~aut) #> iteration:  1 \tgain: 30322  #> iteration:  2 \tgain: 1.2498  #> iteration:  3 \tgain: 0.34194  #> iteration:  4 \tgain: 0.0062954    h %>% plot_CV() #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the Momocs package. #>   Please report the issue at <https://github.com/MomX/Momocs/issues>.  h %>% plot_CV(freq=FALSE, rm0=FALSE, fill=FALSE)  # you can customize the returned gg with some ggplot2 functions h %>% plot_CV(labels=FALSE, fill=TRUE, axis.size=5) + ggplot2::ggtitle(\"A confusion matrix\")   # or build your own using the prepared data_frame: df <- h %>% plot_CV() %$% data df #> # A tibble: 34 × 4 #>    actual predicted     n actual2 #>    <fct>  <fct>     <dbl> <fct>   #>  1 ced    ced       0.77  ced     #>  2 ced    mat       0.1   ced     #>  3 ced    rom       0.067 ced     #>  4 ced    vince     0.067 ced     #>  5 jeya   jeya      0.87  jeya    #>  6 jeya   ponnu     0.067 jeya    #>  7 jeya   vince     0.067 jeya    #>  8 mat    ced       0.033 mat     #>  9 mat    jeya      0.1   mat     #> 10 mat    mat       0.47  mat     #> # ℹ 24 more rows  # you can even use it as a cross-table plotter bot$fac %>% table %>% plot_CV()"},{"path":"http://momx.github.io/Momocs/reference/plot_CV2.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a cross-correlation table — plot_CV2","title":"Plots a cross-correlation table — plot_CV2","text":"contingency/confusion table. simple graphic representation based variable width /color arrows segments, based relative frequencies.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_CV2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a cross-correlation table — plot_CV2","text":"","code":"plot_CV2(x, ...)  # S3 method for LDA plot_CV2(x, ...)  # S3 method for table plot_CV2(   x,   links.FUN = arrows,   col = TRUE,   col0 = \"black\",   col.breaks = 5,   palette = col_heat,   lwd = TRUE,   lwd0 = 5,   gap.dots = 0.2,   pch.dots = 20,   gap.names = 0.25,   cex.names = 1,   legend = TRUE,   ... )"},{"path":"http://momx.github.io/Momocs/reference/plot_CV2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a cross-correlation table — plot_CV2","text":"x LDA object, table squared matrix ... useless . links.FUN function draw links: eg segments (default), arrows, etc. col logical whether vary color links col0 color default link (col = FALSE) col.breaks number different colors palette color palette, eg col_summer, col_hot, etc. lwd logical whether vary width links lwd0 width default link (lwd = FALSE) gap.dots numeric set space dots links pch.dots pch dots gap.names numeric set space dots group names cex.names cex names legend logical whether add legend","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_CV2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a cross-correlation table — plot_CV2","text":"ggplot2 object","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_CV2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plots a cross-correlation table — plot_CV2","text":"freq=FALSE, fill colors weighted within actual classes displayed classes sizes balanced.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_CV2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a cross-correlation table — plot_CV2","text":"","code":"# Below various table that you can try. We will use the last one for the examples. #pure random a <- sample(rep(letters[1:4], each=10)) b <- sample(rep(letters[1:4], each=10)) tab <- table(a, b)  # veryhuge + some structure a <- sample(rep(letters[1:10], each=10)) b <- sample(rep(letters[1:10], each=10)) tab <- table(a, b) diag(tab) <- round(runif(10, 10, 20))  tab <- matrix(c(8, 3, 1, 0, 0,                 2, 7, 1, 2, 3,                 3, 5, 9, 1, 1,                 1, 1, 2, 7, 1,                 0, 9, 1, 4, 5), 5, 5, byrow=TRUE) tab <- as.table(tab)  # good prediction tab <- matrix(c(8, 1, 1, 0, 0,                1, 7, 1, 0, 0,                 1, 2, 9, 1, 0,                 1, 1, 1, 7, 1,                 0, 0, 0, 1, 8), 5, 5, byrow=TRUE) tab <- as.table(tab)   plot_CV2(tab) plot_CV2(tab, arrows) # if you prefer arrows  plot_CV2(tab, lwd=FALSE, lwd0=1, palette=col_india) # if you like india but not lwds  plot_CV2(tab, col=FALSE, col0='pink') # only lwd  plot_CV2(tab, col=FALSE, lwd0=10, cex.names=2) # if you're getting old  plot_CV2(tab, col=FALSE, lwd=FALSE) # pretty but useless  plot_CV2(tab, col.breaks=2) # if you think it's either good or bad  plot_CV2(tab, pch=NA) # if you do not like dots  plot_CV2(tab, gap.dots=0) # if you want to 'fill the gap'  plot_CV2(tab, gap.dots=1) # or not   #trilo examples trilo.f <- efourier(trilo, 8) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details trilo.l <- LDA(PCA(trilo.f), 'onto') #> 8 PC retained trilo.l #>  * Cross-validation table ($CV.tab): #>       classified #> actual  a  b  c  d #>      a  0  5  2  0 #>      b  3 12  1  0 #>      c  0  3 11  4 #>      d  0  0  3  6 #>  #>  * Class accuracy ($CV.ce): #>         a         b         c         d  #> 0.0000000 0.7500000 0.6111111 0.6666667  #>  #>  * Leave-one-out cross-validation ($CV.correct): (58% - 29/50):  plot_CV2(trilo.l)   # olea example op <- opoly(olea, 5) #> 'nb.pts' missing and set to 91 opl <- LDA(PCA(op), 'var') #> 4 PC retained plot_CV2(opl)"},{"path":"http://momx.github.io/Momocs/reference/plot_LDA.html","id":null,"dir":"Reference","previous_headings":"","what":"LDA plot using grindr layers — plot_LDA","title":"LDA plot using grindr layers — plot_LDA","text":"Quickly vizualise LDA objects build customs plots using layers. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_LDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LDA plot using grindr layers — plot_LDA","text":"","code":"plot_LDA(   x,   axes = c(1, 2),   palette = pal_qual,   points = TRUE,   points_transp = 1/4,   morphospace = FALSE,   morphospace_position = \"range\",   chull = TRUE,   chullfilled = FALSE,   labelgroups = FALSE,   legend = TRUE,   title = \"\",   center_origin = TRUE,   zoom = 0.9,   eigen = TRUE,   box = TRUE,   iftwo_layer = layer_histogram_2,   iftwo_split = FALSE,   axesnames = TRUE,   axesvar = TRUE )"},{"path":"http://momx.github.io/Momocs/reference/plot_LDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LDA plot using grindr layers — plot_LDA","text":"x LDA object axes numeric length two select PCs use (c(1, 2) default) palette color palette use col_summer default points logical whether draw layer_points points_transp numeric feed layer_points (default:0.25) morphospace logical whether draw using layer_morphospace_PCA morphospace_position feed layer_morphospace_PCA (default: \"range\") chull logical whether draw layer_chull chullfilled logical whether draw layer_chullfilled labelgroups logical whether draw layer_labelgroups legend logical whether draw layer_legend title character specified, fee layer_title (default \"\") center_origin logical whether center origin zoom numeric zoom level frame (default: 0.9) eigen logical whether draw using layer_eigen box logical whether draw using layer_box iftwo_layer function (quotes) drawing LD1 two levels. far, one layer_histogram_2 (default) layer_density_2 iftwo_split feed split argument layer_histogram_2 layer_density_2 axesnames logical whether draw using layer_axesnames axesvar logical whether draw using layer_axesvar","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_LDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LDA plot using grindr layers — plot_LDA","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_LDA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LDA plot using grindr layers — plot_LDA","text":"approach replace plot.LDA. part grindr approach may packaged point. comments welcome.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_LDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LDA plot using grindr layers — plot_LDA","text":"","code":"### First prepare an LDA object  # Some outlines with bot bl <- bot %>%       # cheap alignement before efourier       coo_align() %>% coo_center %>% coo_slidedirection(\"left\") %>%       # add a fake column       mutate(fake=sample(letters[1:5], 40, replace=TRUE)) %>%       # EFT       efourier(6, norm=FALSE) %>%       # LDA       LDA(~fake) #> factor passed was a character, and coerced to a factor.  bl %>% plot_LDA %>% layer_morphospace_LDA #> * layer_morphospace_LDA is back, but experimental   # Below inherited from plot_PCA and to adapt here. #plot_PCA(bp) #plot_PCA(bp, ~type) #plot_PCA(bp, ~fake)  # Some curves with olea #op <- olea %>% #mutate(s=coo_area(.)) %>% #filter(var != \"Cypre\") %>% #chop(~view) %>% lapply(opoly, 5, nb.pts=90) %>% #combine %>% PCA #op$fac$s %<>% as.character() %>% as.numeric()  #op %>% plot_PCA(title=\"hi there!\")  ### Now we can play with layers # and for instance build a custom plot # it should start with plot_PCA()  #my_plot <- function(x, ...){  #x %>% #     plot_PCA(...) %>% #    layer_points %>% #     layer_ellipsesaxes %>% #    layer_rug # }  # and even continue after this function # op %>% my_plot(~var, axes=c(1, 3)) %>% #     layer_title(\"hi there!\") %>% #    layer_stars()  # You get the idea."},{"path":"http://momx.github.io/Momocs/reference/plot_MSHAPES.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison of a list of shapes — plot_MSHAPES","title":"Pairwise comparison of a list of shapes — plot_MSHAPES","text":"\"Confusion matrix\" list shapes. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_MSHAPES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison of a list of shapes — plot_MSHAPES","text":"","code":"plot_MSHAPES(x, draw_fun, size, palette)"},{"path":"http://momx.github.io/Momocs/reference/plot_MSHAPES.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison of a list of shapes — plot_MSHAPES","text":"x list shapes (eg returned MSHAPES) draw_fun one draw_outline, draw_curves, draw_landmarks. result MSHAPES passed, detected based $Coe, otherwise default draw_curves. size numeric shrinking factor shapes (coo_template; 3/4 default) palette palettes","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_MSHAPES.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise comparison of a list of shapes — plot_MSHAPES","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_MSHAPES.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pairwise comparison of a list of shapes — plot_MSHAPES","text":"Directly inspired Chitwood et al. (2016) New Phytologist","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_MSHAPES.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise comparison of a list of shapes — plot_MSHAPES","text":"","code":"x <- bot %>% efourier(6) %>% MSHAPES(~type) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details  # custom colors x %>% plot_MSHAPES(palette=pal_manual(c(\"darkgreen\", \"orange\")))   # also works on list of shapes, eg: leaves <- shapes %>% slice(grep(\"leaf\", names(shapes))) %$% coo class(leaves) #> [1] \"list\" leaves %>% plot_MSHAPES()   # or shapes %>% # subset and degrade slice(1:12) %>% coo_sample(60) %$%  # grab the coo     coo %>%     plot_MSHAPES()"},{"path":"http://momx.github.io/Momocs/reference/plot_NMDS.html","id":null,"dir":"Reference","previous_headings":"","what":"NMDS plot unsing grindr layers — plot_NMDS","title":"NMDS plot unsing grindr layers — plot_NMDS","text":"Quickly vizualise MDS NMDS objects build customs plots using layers. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_NMDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NMDS plot unsing grindr layers — plot_NMDS","text":"","code":"plot_NMDS(   x,   f = NULL,   axes = c(1, 2),   points = TRUE,   points_transp = 1/4,   chull = TRUE,   chullfilled = FALSE,   labelgroups = FALSE,   legend = TRUE,   title = \"\",   box = TRUE,   axesnames = TRUE,   palette = pal_qual )  plot_MDS(   x,   f = NULL,   axes = c(1, 2),   points = TRUE,   points_transp = 1/4,   chull = TRUE,   chullfilled = FALSE,   labelgroups = FALSE,   legend = TRUE,   title = \"\",   box = TRUE,   axesnames = TRUE,   palette = pal_qual )"},{"path":"http://momx.github.io/Momocs/reference/plot_NMDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NMDS plot unsing grindr layers — plot_NMDS","text":"x result MDS NMDS f factor specification feed fac_dispatcher axes numeric length two select PCs use (c(1, 2) default) points logical whether draw layer_points points_transp numeric feed layer_points (default:0.25) chull logical whether draw layer_chull chullfilled logical whether draw layer_chullfilled labelgroups logical whether draw layer_labelgroups legend logical whether draw layer_legend title character specified, fee layer_title (default \"\") box logical whether draw using layer_box axesnames logical whether draw using layer_axesnames palette color palette use col_summer default","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_NMDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NMDS plot unsing grindr layers — plot_NMDS","text":"plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_NMDS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NMDS plot unsing grindr layers — plot_NMDS","text":"","code":"### First prepare an NMDS object x <- bot %>% efourier %>% NMDS #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) #> 'comm' has negative data: 'autotransform', 'noshare' and 'wascores' set to FALSE #> Warning: results may be meaningless because data have negative entries #>                  in method “bray” #> Run 0 stress 0.07227125  #> Run 1 stress 0.07227125  #> ... New best solution #> ... Procrustes: rmse 5.165599e-06  max resid 1.848616e-05  #> ... Similar to previous best #> Run 2 stress 0.07227125  #> ... New best solution #> ... Procrustes: rmse 1.848561e-06  max resid 7.686046e-06  #> ... Similar to previous best #> Run 3 stress 0.1610098  #> Run 4 stress 0.07227125  #> ... Procrustes: rmse 6.814352e-06  max resid 2.80386e-05  #> ... Similar to previous best #> Run 5 stress 0.07227125  #> ... Procrustes: rmse 8.042268e-06  max resid 3.293377e-05  #> ... Similar to previous best #> Run 6 stress 0.07227125  #> ... Procrustes: rmse 2.510741e-06  max resid 7.634959e-06  #> ... Similar to previous best #> Run 7 stress 0.1660041  #> Run 8 stress 0.07227125  #> ... Procrustes: rmse 1.181586e-06  max resid 3.464235e-06  #> ... Similar to previous best #> Run 9 stress 0.1642555  #> Run 10 stress 0.07227125  #> ... Procrustes: rmse 5.427893e-06  max resid 2.018695e-05  #> ... Similar to previous best #> Run 11 stress 0.07227125  #> ... Procrustes: rmse 1.396985e-06  max resid 6.777242e-06  #> ... Similar to previous best #> Run 12 stress 0.07227125  #> ... Procrustes: rmse 5.297107e-06  max resid 2.060719e-05  #> ... Similar to previous best #> Run 13 stress 0.07227125  #> ... Procrustes: rmse 5.87307e-06  max resid 2.1449e-05  #> ... Similar to previous best #> Run 14 stress 0.1660723  #> Run 15 stress 0.07227125  #> ... Procrustes: rmse 8.005086e-06  max resid 3.40387e-05  #> ... Similar to previous best #> Run 16 stress 0.07227125  #> ... Procrustes: rmse 4.941503e-06  max resid 1.943066e-05  #> ... Similar to previous best #> Run 17 stress 0.1591579  #> Run 18 stress 0.07227125  #> ... Procrustes: rmse 1.363299e-06  max resid 5.158787e-06  #> ... Similar to previous best #> Run 19 stress 0.07227125  #> ... Procrustes: rmse 5.783015e-06  max resid 2.420838e-05  #> ... Similar to previous best #> Run 20 stress 0.07227125  #> ... Procrustes: rmse 3.842551e-06  max resid 1.520619e-05  #> ... Similar to previous best #> *** Best solution repeated 14 times  plot_NMDS(x) #> Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...): plot.new has not been called yet plot_NMDS(x, ~type) %>% layer_stars() %>% layer_labelpoints() #> Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...): plot.new has not been called yet  ### Same on MDS object x <- bot %>% efourier %>% MDS #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power)  plot_MDS(x) #> Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...): plot.new has not been called yet plot_MDS(x, ~type) %>% layer_stars() %>% layer_labelpoints() #> Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...): plot.new has not been called yet"},{"path":"http://momx.github.io/Momocs/reference/plot_PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA plot using grindr layers — plot_PCA","title":"PCA plot using grindr layers — plot_PCA","text":"Quickly vizualise PCA objects friends build customs plots using layers. See examples.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA plot using grindr layers — plot_PCA","text":"","code":"plot_PCA(   x,   f = NULL,   axes = c(1, 2),   palette = NULL,   points = TRUE,   points_transp = 1/4,   morphospace = TRUE,   morphospace_position = \"range\",   chull = TRUE,   chullfilled = FALSE,   labelpoints = FALSE,   labelgroups = FALSE,   legend = TRUE,   title = \"\",   center_origin = TRUE,   zoom = 0.9,   eigen = TRUE,   box = TRUE,   axesnames = TRUE,   axesvar = TRUE )"},{"path":"http://momx.github.io/Momocs/reference/plot_PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA plot using grindr layers — plot_PCA","text":"x PCA object f factor specification feed fac_dispatcher axes numeric length two select PCs use (c(1, 2) default) palette color palette use col_summer default points logical whether draw layer_points points_transp numeric feed layer_points (default:0.25) morphospace logical whether draw using layer_morphospace_PCA morphospace_position feed layer_morphospace_PCA (default: \"range\") chull logical whether draw layer_chull chullfilled logical whether draw layer_chullfilled labelpoints logical whether draw layer_labelpoints labelgroups logical whether draw layer_labelgroups legend logical whether draw layer_legend title character specified, fee layer_title (default \"\") center_origin logical whether center origin zoom numeric zoom level frame (default: 0.9) eigen logical whether draw using layer_eigen box logical whether draw using layer_box axesnames logical whether draw using layer_axesnames axesvar logical whether draw using layer_axesvar","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA plot using grindr layers — plot_PCA","text":"plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_PCA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"PCA plot using grindr layers — plot_PCA","text":"approach replace plot.PCA (plot.lda versions. part grindr approach may packaged point. comments welcome.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA plot using grindr layers — plot_PCA","text":"","code":"### First prepare two PCA objects.  # Some outlines with bot bp <- bot %>% mutate(fake=sample(letters[1:5], 40, replace=TRUE)) %>% efourier(6) %>% PCA #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details plot_PCA(bp)  plot_PCA(bp, ~type)  plot_PCA(bp, ~fake) #> factor passed was a character, and coerced to a factor.   # Some curves with olea op <- olea %>% mutate(s=coo_area(.)) %>% filter(var != \"Cypre\") %>% chop(~view) %>% opoly(5, nb.pts=90) %>% combine %>% PCA op$fac$s %<>% as.character() %>% as.numeric()  op %>% plot_PCA(title=\"hi there!\")  ### Now we can play with layers # and for instance build a custom plot # it should start with plot_PCA()  my_plot <- function(x, ...){  x %>%     plot_PCA(...) %>%     layer_points %>%     layer_ellipsesaxes %>%     layer_rug }  # and even continue after this function op %>% my_plot(~var, axes=c(1, 3)) %>%     layer_title(\"hi there!\")    # grindr allows (almost nice) tricks like highlighting:  # bp %>% .layerize_PCA(~fake) %>% #   layer_frame %>% layer_axes() %>% #   layer_morphospace_PCA() -> x  # highlight <- function(x, ..., col_F=\"#CCCCCC\", col_T=\"#FC8D62FF\"){ #  args <- list(...) #  x$colors_groups <- c(col_F, col_T) #  x$colors_rows <- c(col_F, col_T)[(x$f %in% args)+1] #  x #  } # x %>% highlight(\"a\", \"b\") %>% layer_points()  # You get the idea."},{"path":"http://momx.github.io/Momocs/reference/plot_devsegments.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws colored segments from a matrix of coordinates. — plot_devsegments","title":"Draws colored segments from a matrix of coordinates. — plot_devsegments","text":"Given matrix (x; y) coordinates, draws segments every points defined row matrix uses color display information.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_devsegments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws colored segments from a matrix of coordinates. — plot_devsegments","text":"","code":"plot_devsegments(coo, cols, lwd = 1)"},{"path":"http://momx.github.io/Momocs/reference/plot_devsegments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws colored segments from a matrix of coordinates. — plot_devsegments","text":"coo matrix coordinates. cols vector color length = nrow(coo). lwd lwd use drawing segments.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_devsegments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws colored segments from a matrix of coordinates. — plot_devsegments","text":"drawing last plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_devsegments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws colored segments from a matrix of coordinates. — plot_devsegments","text":"","code":"# we load some data guinness <- coo_sample(bot[9], 100)  # we calculate the diff between 48 harm and one with 6 harm. out.6    <- efourier_i(efourier(guinness, nb.h=6), nb.pts=120)  # we calculate deviations, you can also try 'edm' dev <- edm_nearest(out.6, guinness) / coo_centsize(out.6)  # we prepare the color scale d.cut <- cut(dev, breaks=20, labels=FALSE, include.lowest=TRUE) cols  <- paste0(col_summer(20)[d.cut], 'CC')  # we draw the results coo_plot(guinness, main='Guiness fitted with 6 harm.', points=FALSE) par(xpd=NA) plot_devsegments(out.6, cols=cols, lwd=4) coo_draw(out.6, lty=2, points=FALSE, col=NA)  par(xpd=FALSE)"},{"path":"http://momx.github.io/Momocs/reference/plot_silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Silhouette plot — plot_silhouette","title":"Silhouette plot — plot_silhouette","text":"used, far, KMEDOIDS.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silhouette plot — plot_silhouette","text":"","code":"plot_silhouette(x, palette = pal_qual)"},{"path":"http://momx.github.io/Momocs/reference/plot_silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silhouette plot — plot_silhouette","text":"x object returned KMEDOIDS palette one palettes","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silhouette plot — plot_silhouette","text":"ggplot plot","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Silhouette plot — plot_silhouette","text":"","code":"olea %>% opoly(5) %>%     KMEDOIDS(4) %>%     plot_silhouette(pal_qual_solarized) #> 'nb.pts' missing and set to 91"},{"path":"http://momx.github.io/Momocs/reference/plot_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots confusion matrix of sample sizes within $fac — plot_table","title":"Plots confusion matrix of sample sizes within $fac — plot_table","text":"utility plots confusion matrix sample size (barplot) every object $fac. Useful visually large sample sizes, (un)balanced designs, etc.","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots confusion matrix of sample sizes within $fac — plot_table","text":"","code":"plot_table(x, fac1, fac2 = fac1, rm0 = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/plot_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots confusion matrix of sample sizes within $fac — plot_table","text":"x object $fac slot (Coo, Coe, PCA, etc.) fac1 name id first factor fac2 name id second factor rm0 logical whether print zeros","code":""},{"path":"http://momx.github.io/Momocs/reference/plot_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots confusion matrix of sample sizes within $fac — plot_table","text":"ggplot2 object","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/plot_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots confusion matrix of sample sizes within $fac — plot_table","text":"","code":"plot_table(olea, \"var\") #> Warning: `select_()` was deprecated in dplyr 0.7.0. #> ℹ Please use `select()` instead. #> ℹ The deprecated feature was likely used in the Momocs package. #>   Please report the issue at <https://github.com/MomX/Momocs/issues>.  plot_table(olea, \"domes\", \"var\")  gg <- plot_table(olea, \"domes\", \"var\", rm0 = TRUE) gg  library(ggplot2) gg + coord_equal()  gg + scale_fill_gradient(low=\"green\", high = \"red\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale.  gg + coord_flip()"},{"path":"http://momx.github.io/Momocs/reference/poly_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates shape from a polynomial model — opoly_i","title":"Calculates shape from a polynomial model — opoly_i","text":"Returns matrix (x; y) coordinates passed list obtained opoly npoly.","code":""},{"path":"http://momx.github.io/Momocs/reference/poly_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates shape from a polynomial model — opoly_i","text":"","code":"opoly_i(pol, nb.pts = 120, reregister = TRUE)  npoly_i(pol, nb.pts = 120, reregister = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/poly_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates shape from a polynomial model — opoly_i","text":"pol pol list created npoly opoly nb.pts number points predict. default (higher) number points original shape. reregister logical whether reregister shape original baseline.","code":""},{"path":"http://momx.github.io/Momocs/reference/poly_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates shape from a polynomial model — opoly_i","text":"matrix (x; y) coordinates.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/poly_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates shape from a polynomial model — opoly_i","text":"","code":"data(olea) o <- olea[5] coo_plot(o) for (i in 2:7){ x <- opoly_i(opoly(o, i)) coo_draw(x, border=col_summer(7)[i], points=FALSE)  }"},{"path":"http://momx.github.io/Momocs/reference/reLDA.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Basically wrapper around predict.lda package MASS. Uses LDA model classify new data.","code":""},{"path":"http://momx.github.io/Momocs/reference/reLDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"reLDA(newdata, LDA)  # S3 method for default reLDA(newdata, LDA)  # S3 method for PCA reLDA(newdata, LDA)  # S3 method for Coe reLDA(newdata, LDA)"},{"path":"http://momx.github.io/Momocs/reference/reLDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"newdata use, PCA Coe object LDA LDA object","code":""},{"path":"http://momx.github.io/Momocs/reference/reLDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"list components (?predict.lda ). class factor classification posterior posterior probabilities classes x scores test cases res data.frame results CV.tab confusion matrix results CV.correct proportion diagonal CV.tab newdata data used calculate passed predict.lda","code":""},{"path":"http://momx.github.io/Momocs/reference/reLDA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"","text":"Uses number PC axis LDA object provided. probably use rePCA conjunction reLDA get 'homologous' scores.","code":""},{"path":"http://momx.github.io/Momocs/reference/reLDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"","text":"","code":"# We select the first 10 individuals in bot, # for whisky and beer bottles. It will be our referential. bot1   <- slice(bot, c(1:10, 21:30)) # Same thing for the other 10 individuals. # It will be our unknown dataset on which we want # to calculate classes. bot2   <- slice(bot, c(11:20, 31:40))  # We calculate efourier on these two datasets bot1.f <- efourier(bot1, 8) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bot2.f <- efourier(bot2, 8) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details  # Here we obtain our LDA model: first, a PCA, then a LDA bot1.p <- PCA(bot1.f) bot1.l <- LDA(bot1.p, \"type\") #> 6 PC retained  # we redo the same PCA since we worked with scores bot2.p <- rePCA(bot1.p, bot2.f)  # we finally \"predict\" with the model obtained before bot2.l <- reLDA(bot2.p, bot1.l) bot2.l #> $class #>  [1] whisky whisky whisky whisky beer   whisky whisky beer   whisky whisky #> [11] beer   beer   beer   whisky beer   whisky beer   beer   beer   beer   #> Levels: beer whisky #>  #> $posterior #>                        beer       whisky #> jupiler        1.588583e-05 9.999841e-01 #> kingfisher     9.172746e-02 9.082725e-01 #> latrappe       2.276644e-02 9.772336e-01 #> lindemanskriek 5.840887e-03 9.941591e-01 #> nicechouffe    7.031244e-01 2.968756e-01 #> pecheresse     1.773492e-06 9.999982e-01 #> sierranevada   2.144720e-04 9.997855e-01 #> tanglefoot     9.372426e-01 6.275742e-02 #> tauro          1.183763e-05 9.999882e-01 #> westmalle      1.157018e-04 9.998843e-01 #> jb             9.975581e-01 2.441892e-03 #> johnniewalker  8.473188e-01 1.526812e-01 #> magallan       1.000000e+00 3.192177e-09 #> makersmark     1.093923e-01 8.906077e-01 #> oban           9.999880e-01 1.199656e-05 #> oldpotrero     2.425202e-02 9.757480e-01 #> redbreast      9.999820e-01 1.795276e-05 #> tamdhu         8.589367e-01 1.410633e-01 #> wildturkey     9.999905e-01 9.478960e-06 #> yoichi         9.744921e-01 2.550790e-02 #>  #> $x #>                       LD1 #> jupiler         2.9341875 #> kingfisher      0.6087998 #> latrappe        0.9982650 #> lindemanskriek  1.3640608 #> nicechouffe    -0.2289504 #> pecheresse      3.5163722 #> sierranevada    2.2430113 #> tanglefoot     -0.7179197 #> tauro           3.0122943 #> westmalle       2.4069164 #> jb             -1.5965434 #> johnniewalker  -0.4550552 #> magallan       -5.1945591 #> makersmark      0.5568188 #> oban           -3.0087530 #> oldpotrero      0.9810760 #> redbreast      -2.9017076 #> tamdhu         -0.4796867 #> wildturkey     -3.0712994 #> yoichi         -0.9673275 #>  #> $newdata #>                         PC1           PC2           PC3           PC4 #> jupiler         0.047558323 -0.0009556964 -1.132936e-02 -0.0038135827 #> kingfisher      0.031019804  0.0092893037 -5.639726e-03  0.0006984167 #> latrappe       -0.140467542  0.0368452619  8.204030e-03 -0.0074130929 #> lindemanskriek  0.028727335 -0.0093711139 -6.350860e-03  0.0040530566 #> nicechouffe     0.014137615 -0.0087352325 -1.464619e-03  0.0102437348 #> pecheresse      0.046019149 -0.0022071144 -1.263256e-02 -0.0019483303 #> sierranevada   -0.045574138  0.0101119946 -4.587309e-03 -0.0139742083 #> tanglefoot     -0.083848693  0.0019607973  1.265634e-02 -0.0086813906 #> tauro           0.047804962 -0.0010302173 -1.166643e-02 -0.0038315686 #> westmalle       0.043104213 -0.0006618641 -9.661507e-03  0.0013659528 #> jb              0.033826795 -0.0043832070  8.789680e-03 -0.0012973929 #> johnniewalker   0.027546559  0.0433572509 -5.503569e-07  0.0080407513 #> magallan        0.062757370  0.0344623824  1.994348e-02  0.0054305457 #> makersmark     -0.066073754 -0.0410683917 -2.500513e-02 -0.0028195062 #> oban            0.056001340 -0.0017415641  1.469954e-02  0.0024240694 #> oldpotrero     -0.039446859 -0.0560097481 -1.838963e-02  0.0143275711 #> redbreast      -0.070467008 -0.0453726482  1.443590e-03  0.0008230393 #> tamdhu          0.040245919  0.0099990120  8.849077e-03 -0.0054926858 #> wildturkey      0.009047941 -0.0118958979  1.825586e-02 -0.0002205672 #> yoichi         -0.041919333  0.0374066929  1.388610e-02  0.0020851880 #>                          PC5          PC6 #> jupiler         0.0005273680 -0.003411272 #> kingfisher     -0.0025505108 -0.000645225 #> latrappe        0.0014020218 -0.011164248 #> lindemanskriek -0.0005455535 -0.004342575 #> nicechouffe    -0.0031229185 -0.005062708 #> pecheresse      0.0030349867 -0.005659553 #> sierranevada   -0.0050825894 -0.003254912 #> tanglefoot     -0.0051466484 -0.003608419 #> tauro           0.0011495431 -0.003297832 #> westmalle       0.0015195495 -0.004960376 #> jb             -0.0020355558  0.003538980 #> johnniewalker  -0.0046821155 -0.006875580 #> magallan        0.0055312084  0.011826574 #> makersmark      0.0039534995  0.017991125 #> oban            0.0001554770  0.005786238 #> oldpotrero      0.0023407200  0.001001825 #> redbreast      -0.0038050474  0.012566253 #> tamdhu         -0.0011719141  0.000222802 #> wildturkey     -0.0020315441  0.003880876 #> yoichi          0.0105600234 -0.004531973 #>"},{"path":"http://momx.github.io/Momocs/reference/rePCA.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Basically reapply rotation new Coe object.","code":""},{"path":"http://momx.github.io/Momocs/reference/rePCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"rePCA(PCA, Coe)"},{"path":"http://momx.github.io/Momocs/reference/rePCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"PCA PCA object Coe Coe object","code":""},{"path":"http://momx.github.io/Momocs/reference/rePCA.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"","text":"Quite experimental. Dimensions matrices methods must match.","code":""},{"path":"http://momx.github.io/Momocs/reference/rePCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"","text":"","code":"b <- filter(bot, type==\"beer\") w <- filter(bot, type==\"whisky\")  bf <- efourier(b, 8) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bp <- PCA(bf)  wf <- efourier(w, 8) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details  # and we use the \"beer\" PCA on the whisky coefficients wp <- rePCA(bp, wf)  plot(wp) #> will be deprecated soon, see ?plot_PCA   plot(bp, eig=FALSE) #> will be deprecated soon, see ?plot_PCA points(wp$x[, 1:2], col=\"red\", pch=4)"},{"path":"http://momx.github.io/Momocs/reference/rearrange_ldk.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrange, (select and reorder) landmarks to retain — rearrange_ldk","title":"Rearrange, (select and reorder) landmarks to retain — rearrange_ldk","text":"Helps reorder retain landmarks simply changing order recorded Coo objects. Note Opn objects, rearranges $ldk component. Ldk, rearranges $coo directly.","code":""},{"path":"http://momx.github.io/Momocs/reference/rearrange_ldk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrange, (select and reorder) landmarks to retain — rearrange_ldk","text":"","code":"rearrange_ldk(Coo, new_ldk_ids)"},{"path":"http://momx.github.io/Momocs/reference/rearrange_ldk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrange, (select and reorder) landmarks to retain — rearrange_ldk","text":"Coo appropriate Coo object (typically Ldk) landmarks inside new_ldk_ids vector numeric ldk retain right order (see )","code":""},{"path":"http://momx.github.io/Momocs/reference/rearrange_ldk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrange, (select and reorder) landmarks to retain — rearrange_ldk","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rearrange_ldk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rearrange, (select and reorder) landmarks to retain — rearrange_ldk","text":"","code":"# Out example hearts %>% slice(1) %T>% stack %$% ldk  #> [[1]] #> [1] 65 56 50 19 #>  hearts %>% rearrange_ldk(c(4, 1)) %>%        slice(1) %T>%stack %$% ldk  #> [[1]] #> [1] 19 65 #>   # Ldk example wings %>% slice(1) %T>% stack %$% coo  #> $AN1 #>          [,1]    [,2] #>  [1,] -0.4933  0.0130 #>  [2,] -0.0777  0.0832 #>  [3,]  0.2231  0.0861 #>  [4,]  0.2641  0.0462 #>  [5,]  0.2645  0.0261 #>  [6,]  0.2471  0.0003 #>  [7,]  0.2311 -0.0228 #>  [8,]  0.2040 -0.0452 #>  [9,]  0.1282 -0.0742 #> [10,]  0.0424 -0.0966 #> [11,] -0.0674 -0.1108 #> [12,] -0.4102 -0.0163 #> [13,] -0.3140  0.0318 #> [14,] -0.1768  0.0341 #> [15,]  0.0715  0.0509 #> [16,] -0.0540  0.0238 #> [17,]  0.0575 -0.0059 #> [18,] -0.1401 -0.0240 #>  wings %>% rearrange_ldk(c(1, 3, 12:15)) %>%       slice(1) %T>% stack %$% coo  #> $AN1 #>         [,1]    [,2] #> [1,] -0.4933  0.0130 #> [2,]  0.2231  0.0861 #> [3,] -0.4102 -0.0163 #> [4,] -0.3140  0.0318 #> [5,] -0.1768  0.0341 #> [6,]  0.0715  0.0509 #>"},{"path":"http://momx.github.io/Momocs/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %$%, %<>%, %>%, %T>%","code":""},{"path":"http://momx.github.io/Momocs/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns by name — rename","title":"Rename columns by name — rename","text":"Rename variables, $fac. See examples dplyr::rename.","code":""},{"path":"http://momx.github.io/Momocs/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns by name — rename","text":"","code":"rename(.data, ...)"},{"path":"http://momx.github.io/Momocs/reference/rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns by name — rename","text":".data Coo, Coe, PCA object ... comma separated list unquoted expressions","code":""},{"path":"http://momx.github.io/Momocs/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns by name — rename","text":"Momocs object class.","code":""},{"path":"http://momx.github.io/Momocs/reference/rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename columns by name — rename","text":"dplyr verbs maintained.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns by name — rename","text":"","code":"olea #> Opn (curves) #>   - 210 curves, 99 +/- 3 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk rename(olea, variety=var, domesticated=domes) # rename var column #> Opn (curves) #>   - 210 curves, 98 +/- 4 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   variety domesticated view  ind   #>   <fct>   <fct>        <fct> <fct> #> 1 Aglan   cult         VD    O10   #> 2 Aglan   cult         VL    O10   #> 3 Aglan   cult         VD    O11   #> 4 Aglan   cult         VL    O11   #> 5 Aglan   cult         VD    O12   #> 6 Aglan   cult         VL    O12   #> # ℹ 204 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale coordinates from pixels to real length units — rescale","title":"Rescale coordinates from pixels to real length units — rescale","text":"time, (x, y) coordinates recorded pixels. want mm, cm, etc. need convert rescale . functions job two cases: ) either homogeneous rescaling factor, e.g. pictures taken using magnification ii) various magnifications. Details section","code":""},{"path":"http://momx.github.io/Momocs/reference/rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale coordinates from pixels to real length units — rescale","text":"","code":"rescale(x, scaling_factor, scale_mapping, magnification_col, ...)"},{"path":"http://momx.github.io/Momocs/reference/rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale coordinates from pixels to real length units — rescale","text":"x Coo object scaling_factor numeric homogeneous scaling factor. (x, y) coordinates scale scale_mapping either data.frame path read data.frame. MUST contain three columns order: magnification found $fac, column \"magnification_col\", pixels, real length unit. Column names matter must specified, read.table reads header=TRUE Every different magnification level found $fac, column \"magnification_col\" must row. magnification_col name id $fac column look magnification levels every image ... additional arguments (besides header=TRUE) pass read.table 'scale_mapping' path","code":""},{"path":"http://momx.github.io/Momocs/reference/rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale coordinates from pixels to real length units — rescale","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/rescale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rescale coordinates from pixels to real length units — rescale","text":") case straightforward, 1cm 500pix long pictures, just call rescale(your_Coo, scaling_factor=1/500) coordinates cm. ii) second case subtle. First need code Coo object, fac slot, column named, say \"mag\", magnification. Imagine 4 magnifications: 0.5, 1, 2 5, indicate magnification, many pixels stands many units real world. information passed data.frame, built externally R, must look like : . , optical reasons, ratio pix/real_unit, linear function magnification. shapes centered apply (single different) scaling_factor.","code":"mag   pix    cm 0.5   1304   10 1     921    10 2     816    5 5     1020   5"},{"path":"http://momx.github.io/Momocs/reference/rescale.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rescale coordinates from pixels to real length units — rescale","text":"function simple quite complex detail. Feel free contact problem . can just access code (type rescale) reply .","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Radii variation Fourier transform (equally spaced radii) — rfourier","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"rfourier computes radii variation Fourier analysis matrix list coordinates points equally spaced radii.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"","code":"rfourier(x, ...)  # S3 method for default rfourier(x, nb.h, smooth.it = 0, norm = FALSE, ...)  # S3 method for Out rfourier(x, nb.h = 40, smooth.it = 0, norm = TRUE, thres = pi/90, ...)  # S3 method for list rfourier(x, ...)"},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"x list matrix coordinates object ... useless nb.h integer. number harmonics use. missing, 12 used shapes; 99 percent harmonic power objects, messages. smooth.integer. number smoothing iterations perform. norm logical. Whether scale outlines mean length radii used equals 1. thres numeric tolerance feed is_equallyspacedradii","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"list following components: vector \\(a_{1->n}\\) harmonic coefficients bn vector \\(b_{1->n}\\) harmonic coefficients ao ao harmonic coefficient. r vector radii lengths.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"see JSS paper maths behind. methods objects tests coordinates equally spaced radii using is_equallyspacedradii. message printed case.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"Silent message progress bars () options(\"verbose\"=FALSE). Directly borrowed Claude (2008), called fourier1 .","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rfourier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radii variation Fourier transform (equally spaced radii) — rfourier","text":"","code":"data(bot) coo <- coo_center(bot[1]) # centering is almost mandatory for rfourier family coo_plot(coo) rf  <- rfourier(coo, 12) rf #> $an #>  [1]  9.216460e-15 -4.745309e+02  8.327818e-01  2.719483e+02 -1.430955e+01 #>  [6] -1.110619e+02  2.489911e+01 -1.011701e+00 -1.771458e+01  5.542552e+01 #> [11]  6.786737e-01 -5.902187e+01 #>  #> $bn #>  [1]  1.054744e-13 -1.108663e+01 -5.032796e+01  1.187178e+01  1.332257e+02 #>  [6]  4.068663e+00 -1.709325e+02 -1.013725e+01  1.391797e+02  1.085760e+01 #> [11] -7.449979e+01 -2.355442e+00 #>  #> $ao #> [1] 669.1267 #>  #> $r #>   [1] 139.1167 135.1134 135.8741 136.8427 141.0323 143.5802 151.2095 162.8116 #>   [9] 175.5101 182.5204 198.0176 214.4721 223.4262 241.8735 260.7074 269.7883 #>  [17] 289.8301 310.0117 320.9760 342.0111 363.0862 373.1664 393.9569 415.7375 #>  [25] 436.2997 445.8192 465.8759 484.9159 494.7304 512.1917 523.5711 525.7951 #>  [33] 528.7641 528.6261 529.8403 529.9849 528.9630 529.2840 529.5332 529.6230 #>  [41] 526.6029 525.3373 516.8135 501.5361 492.0222 473.0432 453.3357 442.8940 #>  [49] 422.7064 402.9506 393.5883 373.2914 353.4743 342.9622 323.7894 303.5315 #>  [57] 283.8734 274.5648 254.3851 234.8608 225.9056 207.4851 188.9917 179.2651 #>  [65] 163.2102 148.4020 142.2876 131.8906 124.2115 121.7441 122.3408 126.4329 #>  [73] 133.8555 138.8126 149.4057 160.3977 165.1035 178.0327 190.2983 196.3891 #>  [81] 207.9233 218.2629 225.0539 239.8685 256.5975 274.7171 283.4915 303.0400 #>  [89] 323.0170 333.5460 353.5262 373.8148 383.4986 404.8965 425.3750 435.1409 #>  [97] 455.5781 476.1955 487.0166 508.4428 526.8989 546.1072 554.4755 557.9344 #> [105] 558.1869 558.1342 557.6074 557.8729 556.8590 542.6716 524.9317 515.3814 #> [113] 494.2988 473.6200 462.7267 442.2440 421.9866 401.6471 390.8306 370.6053 #> [121] 350.7010 341.4100 321.0176 301.2409 290.9421 272.0980 254.7364 246.6077 #> [129] 230.9259 217.6545 212.0765 201.6712 191.0722 180.1960 174.3784 163.0992 #> [137] 152.9502 148.4252 #>  rfi <- rfourier_i(rf) coo_draw(rfi, border='red', col=NA)   # Out method bot %>% rfourier() #> some shapes seem(s) to have some identical coordinates #> 'nb.h' not provided and set to 60 (99% harmonic power) #> An OutCoe object [ radii variation (equally spaced radii) analysis ] #> -------------------- #>  - $coe: 40 outlines described, 60 harmonics #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows"},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse radii variation Fourier transform — rfourier_i","title":"Inverse radii variation Fourier transform — rfourier_i","text":"rfourier_i uses inverse radii variation (equally spaced radii) transformation calculate shape, given list Fourier coefficients, typically obtained computed rfourier.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse radii variation Fourier transform — rfourier_i","text":"","code":"rfourier_i(rf, nb.h, nb.pts = 120)"},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse radii variation Fourier transform — rfourier_i","text":"rf list ao, bn components, typically returned rfourier. nb.h integer. number harmonics calculate/use. nb.pts integer. number points calculate.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse radii variation Fourier transform — rfourier_i","text":"list components: x vector x-coordinates. y vector y-coordinates. angle vector angles used. r vector radii calculated.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse radii variation Fourier transform — rfourier_i","text":"See JSS paper maths behind.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse radii variation Fourier transform — rfourier_i","text":"Directly borrowed Claude (2008), called ifourier1 .","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse radii variation Fourier transform — rfourier_i","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rfourier_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse radii variation Fourier transform — rfourier_i","text":"","code":"data(bot) coo <- coo_center(bot[1]) # centering is almost mandatory for rfourier family coo_plot(coo) rf  <- rfourier(coo, 12) rf #> $an #>  [1]  9.216460e-15 -4.745309e+02  8.327818e-01  2.719483e+02 -1.430955e+01 #>  [6] -1.110619e+02  2.489911e+01 -1.011701e+00 -1.771458e+01  5.542552e+01 #> [11]  6.786737e-01 -5.902187e+01 #>  #> $bn #>  [1]  1.054744e-13 -1.108663e+01 -5.032796e+01  1.187178e+01  1.332257e+02 #>  [6]  4.068663e+00 -1.709325e+02 -1.013725e+01  1.391797e+02  1.085760e+01 #> [11] -7.449979e+01 -2.355442e+00 #>  #> $ao #> [1] 669.1267 #>  #> $r #>   [1] 139.1167 135.1134 135.8741 136.8427 141.0323 143.5802 151.2095 162.8116 #>   [9] 175.5101 182.5204 198.0176 214.4721 223.4262 241.8735 260.7074 269.7883 #>  [17] 289.8301 310.0117 320.9760 342.0111 363.0862 373.1664 393.9569 415.7375 #>  [25] 436.2997 445.8192 465.8759 484.9159 494.7304 512.1917 523.5711 525.7951 #>  [33] 528.7641 528.6261 529.8403 529.9849 528.9630 529.2840 529.5332 529.6230 #>  [41] 526.6029 525.3373 516.8135 501.5361 492.0222 473.0432 453.3357 442.8940 #>  [49] 422.7064 402.9506 393.5883 373.2914 353.4743 342.9622 323.7894 303.5315 #>  [57] 283.8734 274.5648 254.3851 234.8608 225.9056 207.4851 188.9917 179.2651 #>  [65] 163.2102 148.4020 142.2876 131.8906 124.2115 121.7441 122.3408 126.4329 #>  [73] 133.8555 138.8126 149.4057 160.3977 165.1035 178.0327 190.2983 196.3891 #>  [81] 207.9233 218.2629 225.0539 239.8685 256.5975 274.7171 283.4915 303.0400 #>  [89] 323.0170 333.5460 353.5262 373.8148 383.4986 404.8965 425.3750 435.1409 #>  [97] 455.5781 476.1955 487.0166 508.4428 526.8989 546.1072 554.4755 557.9344 #> [105] 558.1869 558.1342 557.6074 557.8729 556.8590 542.6716 524.9317 515.3814 #> [113] 494.2988 473.6200 462.7267 442.2440 421.9866 401.6471 390.8306 370.6053 #> [121] 350.7010 341.4100 321.0176 301.2409 290.9421 272.0980 254.7364 246.6077 #> [129] 230.9259 217.6545 212.0765 201.6712 191.0722 180.1960 174.3784 163.0992 #> [137] 152.9502 148.4252 #>  rfi <- rfourier_i(rf) coo_draw(rfi, border='red', col=NA)"},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and draw 'rfourier' shapes. — rfourier_shape","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"rfourier_shape calculates 'Fourier radii variation shape' given Fourier coefficients (see Details) can generate 'rfourier' shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"","code":"rfourier_shape(an, bn, nb.h, nb.pts = 80, alpha = 2, plot = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"numeric. \\(a_n\\) Fourier coefficients calculate shape. bn numeric. \\(b_n\\) Fourier coefficients calculate shape. nb.h integer. number harmonics use. nb.pts integer. number points calculate. alpha numeric. power coefficient associated (usually decreasing) amplitude Fourier coefficients (see Details). plot logical. Whether plot shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"rfourier_shape can used specifying nb.h alpha. coefficients sampled uniform distribution \\((-\\pi ; \\pi)\\) amplitude divided \\(harmonicrank^alpha\\). alpha lower 1, consecutive coefficients thus increase. See rfourier mathematical background.","code":""},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rfourier_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and draw 'rfourier' shapes. — rfourier_shape","text":"","code":"data(bot) rf <- rfourier(bot[1], 24) rfourier_shape(rf$an, rf$bn) # equivalent to rfourier_i(rf)  #>                 x             y #>  [1,] -504.032401  0.000000e+00 #>  [2,]  152.277511  1.213684e+01 #>  [3,]  123.922985  1.988014e+01 #>  [4,] -405.769720 -9.869758e+01 #>  [5,] -299.257786 -9.855215e+01 #>  [6,]  -64.033528 -2.689724e+01 #>  [7,] -297.588603 -1.538718e+02 #>  [8,] -247.659860 -1.541471e+02 #>  [9,]   34.115634  2.520344e+01 #> [10,]  -81.118036 -7.054630e+01 #> [11,]  -96.952489 -9.889967e+01 #> [12,]  181.738917  2.175623e+02 #> [13,]  320.377819  4.522104e+02 #> [14,]  650.392457  1.092799e+03 #> [15,] 1019.781679  2.072239e+03 #> [16,]  766.774556  1.932160e+03 #> [17,]  840.274273  2.733288e+03 #> [18,] 1733.216439  7.797650e+03 #> [19,] 1683.030508  1.201390e+04 #> [20,]  472.998568  7.920093e+03 #> [21,]   -3.693822  1.857488e+02 #> [22,]  193.709205 -1.942018e+03 #> [23,]   21.862735 -1.208644e+02 #> [24,]   53.714265 -2.031549e+02 #> [25,]  370.520921 -1.054083e+03 #> [26,]  216.540448 -4.880980e+02 #> [27,]  135.732670 -2.501862e+02 #> [28,]  466.908353 -7.179336e+02 #> [29,]  411.781716 -5.348072e+02 #> [30,]  235.560214 -2.602254e+02 #> [31,]  517.224029 -4.872563e+02 #> [32,]  572.278421 -4.590422e+02 #> [33,]  346.348891 -2.351772e+02 #> [34,]  534.117025 -3.036705e+02 #> [35,]  679.577570 -3.178066e+02 #> [36,]  455.098727 -1.702117e+02 #> [37,]  529.331468 -1.512772e+02 #> [38,]  725.483690 -1.461831e+02 #> [39,]  545.014188 -6.533097e+01 #> [40,]  512.204019 -2.037956e+01 #> [41,]  711.685148  2.831651e+01 #> [42,]  599.323333  7.184102e+01 #> [43,]  487.280383  9.818574e+01 #> [44,]  648.008281  1.851938e+02 #> [45,]  605.439186  2.264407e+02 #> [46,]  453.428917  2.120475e+02 #> [47,]  549.059655  3.121661e+02 #> [48,]  558.226691  3.790460e+02 #> [49,]  404.964997  3.248349e+02 #> [50,]  430.145214  4.052228e+02 #> [51,]  461.416259  5.097305e+02 #> [52,]  334.454312  4.343772e+02 #> [53,]  303.642443  4.668906e+02 #> [54,]  326.758921  6.022910e+02 #> [55,]  236.290598  5.326163e+02 #> [56,]  176.846385  5.031047e+02 #> [57,]  171.184806  6.474451e+02 #> [58,]  109.884528  6.074778e+02 #> [59,]   51.833348  5.196517e+02 #> [60,]   12.809119  6.441236e+02 #> [61,]  -38.593591  6.462278e+02 #> [62,]  -72.750399  5.193108e+02 #> [63,] -133.044116  5.985585e+02 #> [64,] -196.546600  6.393370e+02 #> [65,] -198.662349  5.006002e+02 #> [66,] -256.653752  5.215311e+02 #> [67,] -347.381274  5.836753e+02 #> [68,] -324.847387  4.585191e+02 #> [69,] -354.756103  4.246838e+02 #> [70,] -474.501207  4.840310e+02 #> [71,] -445.049745  3.870485e+02 #> [72,] -429.185843  3.170675e+02 #> [73,] -566.188571  3.524040e+02 #> [74,] -546.614528  2.826337e+02 #> [75,] -483.371296  2.030398e+02 #> [76,] -622.486699  2.049985e+02 #> [77,] -607.488016  1.477626e+02 #> [78,] -514.459992  8.253138e+01 #> [79,] -692.324999  5.517977e+01 #> [80,] -504.032401  1.234523e-13 rfourier_shape() # not very interesting  #>                 x             y #>  [1,] -1.70783049  0.000000e+00 #>  [2,] -1.42387492 -1.134858e-01 #>  [3,] -1.12842604 -1.810258e-01 #>  [4,] -0.83525063 -2.031626e-01 #>  [5,] -0.55314503 -1.821628e-01 #>  [6,] -0.28573344 -1.200222e-01 #>  [7,] -0.03274864 -1.693308e-02 #>  [8,]  0.20762473  1.292287e-01 #>  [9,]  0.43605675  3.221435e-01 #> [10,]  0.64983694  5.651467e-01 #> [11,]  0.84177670  8.586828e-01 #> [12,]  1.00061227  1.197848e+00 #> [13,]  1.11285389  1.570783e+00 #> [14,]  1.16562637  1.958503e+00 #> [15,]  1.14977127  2.336383e+00 #> [16,]  1.06240688  2.677111e+00 #> [17,]  0.90828491  2.954516e+00 #> [18,]  0.69959955  3.147462e+00 #> [19,]  0.45430408  3.242938e+00 #> [20,]  0.19336079  3.237717e+00 #> [21,] -0.06240765  3.138252e+00 #> [22,] -0.29514415  2.958947e+00 #> [23,] -0.49188023  2.719276e+00 #> [24,] -0.64526044  2.440466e+00 #> [25,] -0.75311265  2.142507e+00 #> [26,] -0.81720368  1.842037e+00 #> [27,] -0.84168817  1.551423e+00 #> [28,] -0.83175975  1.278941e+00 #> [29,] -0.79285960  1.029737e+00 #> [30,] -0.73054609  8.070406e-01 #> [31,] -0.65086608  6.131551e-01 #> [32,] -0.56087882  4.498982e-01 #> [33,] -0.46892701  3.184099e-01 #> [34,] -0.38434108  2.185159e-01 #> [35,] -0.31647156  1.479989e-01 #> [36,] -0.27319902  1.021793e-01 #> [37,] -0.25928964  7.410219e-02 #> [38,] -0.27507300  5.542650e-02 #> [39,] -0.31587991  3.786459e-02 #> [40,] -0.37249857  1.482096e-02 #> [41,] -0.43263981 -1.721386e-02 #> [42,] -0.48312454 -5.791225e-02 #> [43,] -0.51230209 -1.032276e-01 #> [44,] -0.51213827 -1.463636e-01 #> [45,] -0.47949724 -1.793370e-01 #> [46,] -0.41635659 -1.947105e-01 #> [47,] -0.32897716 -1.870389e-01 #> [48,] -0.22631518 -1.536721e-01 #> [49,] -0.11813866 -9.476267e-02 #> [50,] -0.01334510 -1.257189e-02 #> [51,]  0.08113017  8.962521e-02 #> [52,]  0.16063793  2.086307e-01 #> [53,]  0.22244168  3.420336e-01 #> [54,]  0.26492212  4.883117e-01 #> [55,]  0.28673533  6.463225e-01 #> [56,]  0.28627059  8.144022e-01 #> [57,]  0.26160815  9.894390e-01 #> [58,]  0.21096982  1.166311e+00 #> [59,]  0.13345744  1.337968e+00 #> [60,]  0.02975436  1.496238e+00 #> [61,] -0.09753442  1.633159e+00 #> [62,] -0.24410623  1.742492e+00 #> [63,] -0.40474725  1.820937e+00 #> [64,] -0.57446280  1.868642e+00 #> [65,] -0.74957661  1.888824e+00 #> [66,] -0.92838875  1.886525e+00 #> [67,] -1.11108727  1.866866e+00 #> [68,] -1.29882939  1.833286e+00 #> [69,] -1.49218159  1.786313e+00 #> [70,] -1.68934733  1.723276e+00 #> [71,] -1.88473800  1.639109e+00 #> [72,] -2.06840699  1.528067e+00 #> [73,] -2.22666734  1.385910e+00 #> [74,] -2.34389910  1.211941e+00 #> [75,] -2.40520955  1.010307e+00 #> [76,] -2.39933834  7.901548e-01 #> [77,] -2.32108398  5.645699e-01 #> [78,] -2.17260957  3.485372e-01 #> [79,] -1.96325086  1.564753e-01 #> [80,] -1.70783049  4.182978e-16  rfourier_shape(nb.h=12) # better  #>                 x             y #>  [1,]  3.17350221  0.000000e+00 #>  [2,]  2.82968114  2.255316e-01 #>  [3,]  2.43948432  3.913502e-01 #>  [4,]  2.06536164  5.023692e-01 #>  [5,]  1.74268302  5.739037e-01 #>  [6,]  1.47564178  6.198424e-01 #>  [7,]  1.24842809  6.455149e-01 #>  [8,]  1.04054160  6.476482e-01 #>  [9,]  0.83709685  6.184180e-01 #> [10,]  0.63206684  5.496925e-01 #> [11,]  0.42754983  4.361367e-01 #> [12,]  0.23216062  2.779229e-01 #> [13,]  0.05887461  8.310097e-02 #> [14,] -0.07873057 -1.322843e-01 #> [15,] -0.17140187 -3.482958e-01 #> [16,] -0.21769695 -5.485646e-01 #> [17,] -0.22348979 -7.269792e-01 #> [18,] -0.19763895 -8.891673e-01 #> [19,] -0.14677845 -1.047742e+00 #> [20,] -0.07253700 -1.214591e+00 #> [21,]  0.02774197 -1.395042e+00 #> [22,]  0.15824615 -1.586486e+00 #> [23,]  0.32205629 -1.780433e+00 #> [24,]  0.51961489 -1.965257e+00 #> [25,]  0.74804094 -2.128078e+00 #> [26,]  1.00099083 -2.256307e+00 #> [27,]  1.26941847 -2.339827e+00 #> [28,]  1.54350539 -2.373345e+00 #> [29,]  1.81487968 -2.357100e+00 #> [30,]  2.07741451 -2.294938e+00 #> [31,]  2.32588321 -2.191122e+00 #> [32,]  2.55405607 -2.048687e+00 #> [33,]  2.75500192 -1.870696e+00 #> [34,]  2.92452011 -1.662726e+00 #> [35,]  3.06492303 -1.433321e+00 #> [36,]  3.18450875 -1.191040e+00 #> [37,]  3.29071918 -9.404522e-01 #> [38,]  3.38068991 -6.812003e-01 #> [39,]  3.43662398 -4.119489e-01 #> [40,]  3.43105716 -1.365148e-01 #> [41,]  3.33973942  1.328815e-01 #> [42,]  3.15355628  3.780175e-01 #> [43,]  2.88139811  5.805943e-01 #> [44,]  2.54314959  7.268048e-01 #> [45,]  2.15980801  8.077911e-01 #> [46,]  1.74916782  8.180039e-01 #> [47,]  1.32926781  7.557509e-01 #> [48,]  0.92374397  6.272389e-01 #> [49,]  0.56104073  4.500281e-01 #> [50,]  0.26536741  2.499921e-01 #> [51,]  0.04586366  5.066599e-02 #> [52,] -0.10657467 -1.384153e-01 #> [53,] -0.21116372 -3.246923e-01 #> [54,] -0.28370198 -5.229272e-01 #> [55,] -0.32811803 -7.396021e-01 #> [56,] -0.33890179 -9.641311e-01 #> [57,] -0.31062985 -1.174846e+00 #> [58,] -0.24514106 -1.355220e+00 #> [59,] -0.15025456 -1.506367e+00 #> [60,] -0.03270006 -1.644366e+00 #> [61,]  0.10654541 -1.784042e+00 #> [62,]  0.26942175 -1.923201e+00 #> [63,]  0.45383040 -2.041759e+00 #> [64,]  0.65099261 -2.117583e+00 #> [65,]  0.85157720 -2.145851e+00 #> [66,]  1.05549177 -2.144803e+00 #> [67,]  1.27470132 -2.141773e+00 #> [68,]  1.52343457 -2.150314e+00 #> [69,]  1.80214577 -2.157375e+00 #> [70,]  2.08954349 -2.131510e+00 #> [71,]  2.35233176 -2.045763e+00 #> [72,]  2.56756650 -1.896829e+00 #> [73,]  2.74007725 -1.705464e+00 #> [74,]  2.89889227 -1.498907e+00 #> [75,]  3.07230123 -1.290518e+00 #> [76,]  3.25891076 -1.073231e+00 #> [77,]  3.41707300 -8.311533e-01 #> [78,]  3.48261728 -5.586930e-01 #> [79,]  3.40428186 -2.713285e-01 #> [80,]  3.17350221 -7.772839e-16 rfourier_shape(nb.h=6, alpha=0.4, nb.pts=500)  #>                    x             y #>   [1,] -0.0491200860  0.000000e+00 #>   [2,] -0.2084169677 -2.624432e-03 #>   [3,] -0.3651579671 -9.197757e-03 #>   [4,] -0.5187481480 -1.960486e-02 #>   [5,] -0.6686120572 -3.370396e-02 #>   [6,] -0.8141968885 -5.132785e-02 #>   [7,] -0.9549754990 -7.228533e-02 #>   [8,] -1.0904492617 -9.636282e-02 #>   [9,] -1.2201507346 -1.233262e-01 #>  [10,] -1.3436461299 -1.529225e-01 #>  [11,] -1.4605375691 -1.848825e-01 #>  [12,] -1.5704651080 -2.189223e-01 #>  [13,] -1.6731085219 -2.547461e-01 #>  [14,] -1.7681888383 -2.920483e-01 #>  [15,] -1.8554696101 -3.305162e-01 #>  [16,] -1.9347579196 -3.698323e-01 #>  [17,] -2.0059051113 -4.096771e-01 #>  [18,] -2.0688072476 -4.497315e-01 #>  [19,] -2.1234052862 -4.896792e-01 #>  [20,] -2.1696849807 -5.292097e-01 #>  [21,] -2.2076765055 -5.680204e-01 #>  [22,] -2.2374538086 -6.058192e-01 #>  [23,] -2.2591336999 -6.423268e-01 #>  [24,] -2.2728746803 -6.772791e-01 #>  [25,] -2.2788755223 -7.104290e-01 #>  [26,] -2.2773736126 -7.415490e-01 #>  [27,] -2.2686430689 -7.704324e-01 #>  [28,] -2.2529926444 -7.968955e-01 #>  [29,] -2.2307634363 -8.207789e-01 #>  [30,] -2.2023264132 -8.419489e-01 #>  [31,] -2.1680797801 -8.602988e-01 #>  [32,] -2.1284461984 -8.757498e-01 #>  [33,] -2.0838698812 -8.882515e-01 #>  [34,] -2.0348135832 -8.977828e-01 #>  [35,] -1.9817555060 -9.043521e-01 #>  [36,] -1.9251861395 -9.079973e-01 #>  [37,] -1.8656050613 -9.087858e-01 #>  [38,] -1.8035177144 -9.068141e-01 #>  [39,] -1.7394321860 -9.022073e-01 #>  [40,] -1.6738560068 -8.951181e-01 #>  [41,] -1.6072929924 -8.857264e-01 #>  [42,] -1.5402401484 -8.742373e-01 #>  [43,] -1.4731846559 -8.608803e-01 #>  [44,] -1.4066009599 -8.459079e-01 #>  [45,] -1.3409479759 -8.295930e-01 #>  [46,] -1.2766664334 -8.122281e-01 #>  [47,] -1.2141763720 -7.941224e-01 #>  [48,] -1.1538748044 -7.756002e-01 #>  [49,] -1.0961335611 -7.569983e-01 #>  [50,] -1.0412973273 -7.386639e-01 #>  [51,] -0.9896818842 -7.209517e-01 #>  [52,] -0.9415725634 -7.042219e-01 #>  [53,] -0.8972229215 -6.888374e-01 #>  [54,] -0.8568536420 -6.751610e-01 #>  [55,] -0.8206516680 -6.635532e-01 #>  [56,] -0.7887695698 -6.543692e-01 #>  [57,] -0.7613251464 -6.479569e-01 #>  [58,] -0.7384012629 -6.446535e-01 #>  [59,] -0.7200459201 -6.447840e-01 #>  [60,] -0.7062725530 -6.486581e-01 #>  [61,] -0.6970605534 -6.565683e-01 #>  [62,] -0.6923560095 -6.687876e-01 #>  [63,] -0.6920726546 -6.855676e-01 #>  [64,] -0.6960930158 -7.071363e-01 #>  [65,] -0.7042697506 -7.336965e-01 #>  [66,] -0.7164271618 -7.654244e-01 #>  [67,] -0.7323628762 -8.024680e-01 #>  [68,] -0.7518496727 -8.449458e-01 #>  [69,] -0.7746374472 -8.929461e-01 #>  [70,] -0.8004552968 -9.465258e-01 #>  [71,] -0.8290137076 -1.005710e+00 #>  [72,] -0.8600068311 -1.070491e+00 #>  [73,] -0.8931148291 -1.140830e+00 #>  [74,] -0.9280062735 -1.216654e+00 #>  [75,] -0.9643405812 -1.297860e+00 #>  [76,] -1.0017704669 -1.384310e+00 #>  [77,] -1.0399443990 -1.475836e+00 #>  [78,] -1.0785090381 -1.572243e+00 #>  [79,] -1.1171116449 -1.673301e+00 #>  [80,] -1.1554024393 -1.778755e+00 #>  [81,] -1.1930368966 -1.888324e+00 #>  [82,] -1.2296779651 -2.001698e+00 #>  [83,] -1.2649981922 -2.118548e+00 #>  [84,] -1.2986817448 -2.238521e+00 #>  [85,] -1.3304263137 -2.361242e+00 #>  [86,] -1.3599448889 -2.486323e+00 #>  [87,] -1.3869673977 -2.613356e+00 #>  [88,] -1.4112421967 -2.741922e+00 #>  [89,] -1.4325374086 -2.871590e+00 #>  [90,] -1.4506421003 -3.001923e+00 #>  [91,] -1.4653672949 -3.132473e+00 #>  [92,] -1.4765468151 -3.262792e+00 #>  [93,] -1.4840379560 -3.392429e+00 #>  [94,] -1.4877219855 -3.520935e+00 #>  [95,] -1.4875044727 -3.647863e+00 #>  [96,] -1.4833154461 -3.772773e+00 #>  [97,] -1.4751093840 -3.895232e+00 #>  [98,] -1.4628650411 -4.014819e+00 #>  [99,] -1.4465851166 -4.131123e+00 #> [100,] -1.4262957691 -4.243749e+00 #> [101,] -1.4020459862 -4.352318e+00 #> [102,] -1.3739068164 -4.456468e+00 #> [103,] -1.3419704722 -4.555859e+00 #> [104,] -1.3063493139 -4.650170e+00 #> [105,] -1.2671747247 -4.739105e+00 #> [106,] -1.2245958881 -4.822388e+00 #> [107,] -1.1787784776 -4.899772e+00 #> [108,] -1.1299032728 -4.971034e+00 #> [109,] -1.0781647115 -5.035978e+00 #> [110,] -1.0237693915 -5.094433e+00 #> [111,] -0.9669345344 -5.146259e+00 #> [112,] -0.9078864223 -5.191341e+00 #> [113,] -0.8468588211 -5.229591e+00 #> [114,] -0.7840914015 -5.260953e+00 #> [115,] -0.7198281696 -5.285393e+00 #> [116,] -0.6543159179 -5.302906e+00 #> [117,] -0.5878027086 -5.313515e+00 #> [118,] -0.5205363974 -5.317267e+00 #> [119,] -0.4527632100 -5.314232e+00 #> [120,] -0.3847263775 -5.304507e+00 #> [121,] -0.3166648409 -5.288209e+00 #> [122,] -0.2488120312 -5.265479e+00 #> [123,] -0.1813947314 -5.236475e+00 #> [124,] -0.1146320266 -5.201377e+00 #> [125,] -0.0487343464 -5.160380e+00 #> [126,]  0.0160973966 -5.113696e+00 #> [127,]  0.0796725679 -5.061551e+00 #> [128,]  0.1418114731 -5.004184e+00 #> [129,]  0.2023459158 -4.941846e+00 #> [130,]  0.2611196546 -4.874796e+00 #> [131,]  0.3179887584 -4.803302e+00 #> [132,]  0.3728218614 -4.727637e+00 #> [133,]  0.4255003222 -4.648082e+00 #> [134,]  0.4759182873 -4.564918e+00 #> [135,]  0.5239826665 -4.478430e+00 #> [136,]  0.5696130218 -4.388902e+00 #> [137,]  0.6127413771 -4.296619e+00 #> [138,]  0.6533119534 -4.201861e+00 #> [139,]  0.6912808373 -4.104908e+00 #> [140,]  0.7266155877 -4.006033e+00 #> [141,]  0.7592947892 -3.905504e+00 #> [142,]  0.7893075590 -3.803583e+00 #> [143,]  0.8166530147 -3.700524e+00 #> [144,]  0.8413397116 -3.596575e+00 #> [145,]  0.8633850551 -3.491972e+00 #> [146,]  0.8828146984 -3.386944e+00 #> [147,]  0.8996619308 -3.281709e+00 #> [148,]  0.9139670646 -3.176477e+00 #> [149,]  0.9257768282 -3.071445e+00 #> [150,]  0.9351437707 -2.966802e+00 #> [151,]  0.9421256853 -2.862724e+00 #> [152,]  0.9467850565 -2.759379e+00 #> [153,]  0.9491885368 -2.656923e+00 #> [154,]  0.9494064572 -2.555503e+00 #> [155,]  0.9475123753 -2.455254e+00 #> [156,]  0.9435826648 -2.356304e+00 #> [157,]  0.9376961491 -2.258769e+00 #> [158,]  0.9299337804 -2.162759e+00 #> [159,]  0.9203783660 -2.068372e+00 #> [160,]  0.9091143424 -1.975701e+00 #> [161,]  0.8962275968 -1.884830e+00 #> [162,]  0.8818053352 -1.795837e+00 #> [163,]  0.8659359955 -1.708793e+00 #> [164,]  0.8487092038 -1.623763e+00 #> [165,]  0.8302157700 -1.540806e+00 #> [166,]  0.8105477206 -1.459978e+00 #> [167,]  0.7897983634 -1.381328e+00 #> [168,]  0.7680623804 -1.304902e+00 #> [169,]  0.7454359438 -1.230744e+00 #> [170,]  0.7220168495 -1.158893e+00 #> [171,]  0.6979046618 -1.089385e+00 #> [172,]  0.6732008652 -1.022254e+00 #> [173,]  0.6480090149 -9.575309e-01 #> [174,]  0.6224348813 -8.952457e-01 #> [175,]  0.5965865813 -8.354251e-01 #> [176,]  0.5705746901 -7.780943e-01 #> [177,]  0.5445123285 -7.232763e-01 #> [178,]  0.5185152175 -6.709918e-01 #> [179,]  0.4927016963 -6.212598e-01 #> [180,]  0.4671926980 -5.740964e-01 #> [181,]  0.4421116760 -5.295157e-01 #> [182,]  0.4175844799 -4.875285e-01 #> [183,]  0.3937391733 -4.481428e-01 #> [184,]  0.3707057924 -4.113631e-01 #> [185,]  0.3486160418 -3.771903e-01 #> [186,]  0.3276029246 -3.456207e-01 #> [187,]  0.3078003067 -3.166465e-01 #> [188,]  0.2893424132 -2.902547e-01 #> [189,]  0.2723632581 -2.664268e-01 #> [190,]  0.2569960074 -2.451388e-01 #> [191,]  0.2433722778 -2.263602e-01 #> [192,]  0.2316213732 -2.100539e-01 #> [193,]  0.2218694622 -1.961760e-01 #> [194,]  0.2142387017 -1.846750e-01 #> [195,]  0.2088463099 -1.754920e-01 #> [196,]  0.2058035963 -1.685601e-01 #> [197,]  0.2052149531 -1.638045e-01 #> [198,]  0.2071768177 -1.611420e-01 #> [199,]  0.2117766109 -1.604812e-01 #> [200,]  0.2190916621 -1.617224e-01 #> [201,]  0.2291881286 -1.647577e-01 #> [202,]  0.2421199188 -1.694711e-01 #> [203,]  0.2579276294 -1.757388e-01 #> [204,]  0.2766375062 -1.834295e-01 #> [205,]  0.2982604381 -1.924048e-01 #> [206,]  0.3227909968 -2.025195e-01 #> [207,]  0.3502065298 -2.136224e-01 #> [208,]  0.3804663197 -2.255571e-01 #> [209,]  0.4135108174 -2.381624e-01 #> [210,]  0.4492609619 -2.512732e-01 #> [211,]  0.4876175946 -2.647216e-01 #> [212,]  0.5284609771 -2.783377e-01 #> [213,]  0.5716504229 -2.919508e-01 #> [214,]  0.6170240493 -3.053901e-01 #> [215,]  0.6643986583 -3.184865e-01 #> [216,]  0.7135697522 -3.310734e-01 #> [217,]  0.7643116904 -3.429877e-01 #> [218,]  0.8163779912 -3.540719e-01 #> [219,]  0.8695017848 -3.641744e-01 #> [220,]  0.9233964170 -3.731515e-01 #> [221,]  0.9777562091 -3.808685e-01 #> [222,]  1.0322573710 -3.872008e-01 #> [223,]  1.0865590706 -3.920356e-01 #> [224,]  1.1403046542 -3.952724e-01 #> [225,]  1.1931230181 -3.968250e-01 #> [226,]  1.2446301253 -3.966222e-01 #> [227,]  1.2944306629 -3.946088e-01 #> [228,]  1.3421198325 -3.907467e-01 #> [229,]  1.3872852681 -3.850157e-01 #> [230,]  1.4295090700 -3.774145e-01 #> [231,]  1.4683699469 -3.679610e-01 #> [232,]  1.5034454531 -3.566934e-01 #> [233,]  1.5343143114 -3.436699e-01 #> [234,]  1.5605588062 -3.289696e-01 #> [235,]  1.5817672343 -3.126924e-01 #> [236,]  1.5975363993 -2.949590e-01 #> [237,]  1.6074741327 -2.759107e-01 #> [238,]  1.6112018279 -2.557092e-01 #> [239,]  1.6083569694 -2.345362e-01 #> [240,]  1.5985956413 -2.125926e-01 #> [241,]  1.5815949977 -1.900976e-01 #> [242,]  1.5570556790 -1.672881e-01 #> [243,]  1.5247041559 -1.444175e-01 #> [244,]  1.4842949853 -1.217543e-01 #> [245,]  1.4356129607 -9.958054e-02 #> [246,]  1.3784751417 -7.819084e-02 #> [247,]  1.3127327457 -5.789019e-02 #> [248,]  1.2382728880 -3.899233e-02 #> [249,]  1.1550201551 -2.181784e-02 #> [250,]  1.0629379977 -6.692109e-03 #> [251,]  0.9620299310  6.056806e-03 #> [252,]  0.8523405308  1.610035e-02 #> [253,]  0.7339562151  2.311176e-02 #> [254,]  0.6070058016  2.676834e-02 #> [255,]  0.4716608340  2.675388e-02 #> [256,]  0.3281356702  2.276096e-02 #> [257,]  0.1766873280  1.449337e-02 #> [258,]  0.0176150845  1.668473e-03 #> [259,] -0.1487401725 -1.598046e-02 #> [260,] -0.3219968412 -3.870196e-02 #> [261,] -0.5017337489 -6.672411e-02 #> [262,] -0.6874915390 -1.002524e-01 #> [263,] -0.8787742964 -1.394678e-01 #> [264,] -1.0750514062 -1.845244e-01 #> [265,] -1.2757596359 -2.355482e-01 #> [266,] -1.4803054332 -2.926349e-01 #> [267,] -1.6880674276 -3.558488e-01 #> [268,] -1.8983991234 -4.252210e-01 #> [269,] -2.1106317703 -5.007487e-01 #> [270,] -2.3240773954 -5.823941e-01 #> [271,] -2.5380319828 -6.700832e-01 #> [272,] -2.7517787794 -7.637059e-01 #> [273,] -2.9645917117 -8.631154e-01 #> [274,] -3.1757388921 -9.681279e-01 #> [275,] -3.3844861954 -1.078523e+00 #> [276,] -3.5901008841 -1.194044e+00 #> [277,] -3.7918552610 -1.314399e+00 #> [278,] -3.9890303282 -1.439261e+00 #> [279,] -4.1809194290 -1.568267e+00 #> [280,] -4.3668318522 -1.701026e+00 #> [281,] -4.5460963756 -1.837112e+00 #> [282,] -4.7180647275 -1.976072e+00 #> [283,] -4.8821149447 -2.117426e+00 #> [284,] -5.0376546055 -2.260666e+00 #> [285,] -5.1841239189 -2.405266e+00 #> [286,] -5.3209986490 -2.550677e+00 #> [287,] -5.4477928568 -2.696333e+00 #> [288,] -5.5640614420 -2.841653e+00 #> [289,] -5.6694024686 -2.986046e+00 #> [290,] -5.7634592592 -3.128912e+00 #> [291,] -5.8459222440 -3.269645e+00 #> [292,] -5.9165305543 -3.407638e+00 #> [293,] -5.9750733473 -3.542286e+00 #> [294,] -6.0213908563 -3.672987e+00 #> [295,] -6.0553751569 -3.799149e+00 #> [296,] -6.0769706462 -3.920192e+00 #> [297,] -6.0861742300 -4.035549e+00 #> [298,] -6.0830352171 -4.144672e+00 #> [299,] -6.0676549213 -4.247037e+00 #> [300,] -6.0401859731 -4.342140e+00 #> [301,] -6.0008313457 -4.429510e+00 #> [302,] -5.9498431002 -4.508703e+00 #> [303,] -5.8875208598 -4.579310e+00 #> [304,] -5.8142100201 -4.640957e+00 #> [305,] -5.7302997090 -4.693309e+00 #> [306,] -5.6362205080 -4.736073e+00 #> [307,] -5.5324419493 -4.768996e+00 #> [308,] -5.4194698055 -4.791870e+00 #> [309,] -5.2978431877 -4.804534e+00 #> [310,] -5.1681314720 -4.806871e+00 #> [311,] -5.0309310732 -4.798816e+00 #> [312,] -4.8868620859 -4.780348e+00 #> [313,] -4.7365648154 -4.751499e+00 #> [314,] -4.5806962193 -4.712346e+00 #> [315,] -4.4199262834 -4.663017e+00 #> [316,] -4.2549343536 -4.603689e+00 #> [317,] -4.0864054489 -4.534584e+00 #> [318,] -3.9150265759 -4.455973e+00 #> [319,] -3.7414830713 -4.368169e+00 #> [320,] -3.5664549920 -4.271531e+00 #> [321,] -3.3906135775 -4.166459e+00 #> [322,] -3.2146178059 -4.053391e+00 #> [323,] -3.0391110633 -3.932804e+00 #> [324,] -2.8647179495 -3.805208e+00 #> [325,] -2.6920412365 -3.671144e+00 #> [326,] -2.5216590002 -3.531185e+00 #> [327,] -2.3541219405 -3.385924e+00 #> [328,] -2.1899509060 -3.235982e+00 #> [329,] -2.0296346383 -3.081995e+00 #> [330,] -1.8736277460 -2.924614e+00 #> [331,] -1.7223489218 -2.764504e+00 #> [332,] -1.5761794099 -2.602335e+00 #> [333,] -1.4354617320 -2.438783e+00 #> [334,] -1.3004986772 -2.274524e+00 #> [335,] -1.1715525591 -2.110228e+00 #> [336,] -1.0488447423 -1.946562e+00 #> [337,] -0.9325554379 -1.784179e+00 #> [338,] -0.8228237665 -1.623718e+00 #> [339,] -0.7197480838 -1.465800e+00 #> [340,] -0.6233865647 -1.311026e+00 #> [341,] -0.5337580368 -1.159971e+00 #> [342,] -0.4508430560 -1.013182e+00 #> [343,] -0.3745852119 -8.711775e-01 #> [344,] -0.3048926515 -7.344407e-01 #> [345,] -0.2416398079 -6.034202e-01 #> [346,] -0.1846693177 -4.785269e-01 #> [347,] -0.1337941121 -3.601316e-01 #> [348,] -0.0887996638 -2.485638e-01 #> [349,] -0.0494463715 -1.441101e-01 #> [350,] -0.0154720622 -4.701310e-02 #> [351,]  0.0134054074  4.252949e-02 #> [352,]  0.0374854712  1.243654e-01 #> [353,]  0.0570821171  1.983879e-01 #> [354,]  0.0725211136  2.645363e-01 #> [355,]  0.0841372209  3.227948e-01 #> [356,]  0.0922714074  3.731929e-01 #> [357,]  0.0972680931  4.158035e-01 #> [358,]  0.0994724381  4.507425e-01 #> [359,]  0.0992276988  4.781669e-01 #> [360,]  0.0968726680  4.982736e-01 #> [361,]  0.0927392197  5.112970e-01 #> [362,]  0.0871499740  5.175069e-01 #> [363,]  0.0804160985  5.172066e-01 #> [364,]  0.0728352630  5.107299e-01 #> [365,]  0.0646897580  4.984384e-01 #> [366,]  0.0562447922  4.807189e-01 #> [367,]  0.0477469784  4.579800e-01 #> [368,]  0.0394230163  4.306493e-01 #> [369,]  0.0314785819  3.991701e-01 #> [370,]  0.0240974266  3.639978e-01 #> [371,]  0.0174406929  3.255972e-01 #> [372,]  0.0116464470  2.844384e-01 #> [373,]  0.0068294301  2.409941e-01 #> [374,]  0.0030810269  1.957358e-01 #> [375,]  0.0004694488  1.491308e-01 #> [376,] -0.0009598730  1.016390e-01 #> [377,] -0.0011836908  5.370944e-02 #> [378,] -0.0002001469  5.777811e-03 #> [379,]  0.0019722053 -4.173675e-02 #> [380,]  0.0052955579 -8.843425e-02 #> [381,]  0.0097141677 -1.339364e-01 #> [382,]  0.0151558267 -1.778890e-01 #> [383,]  0.0215334678 -2.199639e-01 #> [384,]  0.0287468917 -2.598611e-01 #> [385,]  0.0366845972 -2.973105e-01 #> [386,]  0.0452256982 -3.320731e-01 #> [387,]  0.0542419100 -3.639424e-01 #> [388,]  0.0635995851 -3.927453e-01 #> [389,]  0.0731617813 -4.183428e-01 #> [390,]  0.0827903424 -4.406302e-01 #> [391,]  0.0923479727 -4.595377e-01 #> [392,]  0.1017002861 -4.750298e-01 #> [393,]  0.1107178119 -4.871055e-01 #> [394,]  0.1192779386 -4.957969e-01 #> [395,]  0.1272667785 -5.011692e-01 #> [396,]  0.1345809348 -5.033190e-01 #> [397,]  0.1411291575 -5.023730e-01 #> [398,]  0.1468338708 -4.984867e-01 #> [399,]  0.1516325589 -4.918424e-01 #> [400,]  0.1554789968 -4.826475e-01 #> [401,]  0.1583443157 -4.711320e-01 #> [402,]  0.1602178907 -4.575464e-01 #> [403,]  0.1611080441 -4.421595e-01 #> [404,]  0.1610425565 -4.252554e-01 #> [405,]  0.1600689790 -4.071311e-01 #> [406,]  0.1582547442 -3.880940e-01 #> [407,]  0.1556870729 -3.684587e-01 #> [408,]  0.1524726756 -3.485441e-01 #> [409,]  0.1487372509 -3.286714e-01 #> [410,]  0.1446247831 -3.091602e-01 #> [411,]  0.1402966432 -2.903264e-01 #> [412,]  0.1359305000 -2.724793e-01 #> [413,]  0.1317190495 -2.559187e-01 #> [414,]  0.1278685704 -2.409329e-01 #> [415,]  0.1245973187 -2.277954e-01 #> [416,]  0.1221337714 -2.167632e-01 #> [417,]  0.1207147347 -2.080744e-01 #> [418,]  0.1205833303 -2.019462e-01 #> [419,]  0.1219868758 -1.985731e-01 #> [420,]  0.1251746763 -1.981249e-01 #> [421,]  0.1303957451 -2.007457e-01 #> [422,]  0.1378964703 -2.065525e-01 #> [423,]  0.1479182489 -2.156342e-01 #> [424,]  0.1606951045 -2.280504e-01 #> [425,]  0.1764513113 -2.438315e-01 #> [426,]  0.1953990416 -2.629782e-01 #> [427,]  0.2177360577 -2.854609e-01 #> [428,]  0.2436434683 -3.112207e-01 #> [429,]  0.2732835666 -3.401690e-01 #> [430,]  0.3067977706 -3.721887e-01 #> [431,]  0.3443046826 -4.071349e-01 #> [432,]  0.3858982853 -4.448357e-01 #> [433,]  0.4316462915 -4.850940e-01 #> [434,]  0.4815886611 -5.276885e-01 #> [435,]  0.5357363014 -5.723759e-01 #> [436,]  0.5940699617 -6.188922e-01 #> [437,]  0.6565393349 -6.669551e-01 #> [438,]  0.7230623754 -7.162661e-01 #> [439,]  0.7935248421 -7.665126e-01 #> [440,]  0.8677800724 -8.173707e-01 #> [441,]  0.9456489928 -8.685073e-01 #> [442,]  1.0269203697 -9.195827e-01 #> [443,]  1.1113513010 -9.702536e-01 #> [444,]  1.1986679491 -1.020175e+00 #> [445,]  1.2885665117 -1.069005e+00 #> [446,]  1.3807144290 -1.116402e+00 #> [447,]  1.4747518185 -1.162036e+00 #> [448,]  1.5702931325 -1.205583e+00 #> [449,]  1.6669290275 -1.246731e+00 #> [450,]  1.7642284357 -1.285184e+00 #> [451,]  1.8617408256 -1.320661e+00 #> [452,]  1.9589986377 -1.352900e+00 #> [453,]  2.0555198811 -1.381659e+00 #> [454,]  2.1508108725 -1.406721e+00 #> [455,]  2.2443691025 -1.427890e+00 #> [456,]  2.3356862074 -1.444999e+00 #> [457,]  2.4242510296 -1.457907e+00 #> [458,]  2.5095527440 -1.466500e+00 #> [459,]  2.5910840309 -1.470694e+00 #> [460,]  2.6683442720 -1.470437e+00 #> [461,]  2.7408427500 -1.465704e+00 #> [462,]  2.8081018272 -1.456504e+00 #> [463,]  2.8696600830 -1.442874e+00 #> [464,]  2.9250753866 -1.424882e+00 #> [465,]  2.9739278858 -1.402627e+00 #> [466,]  3.0158228871 -1.376237e+00 #> [467,]  3.0503936105 -1.345868e+00 #> [468,]  3.0773037961 -1.311704e+00 #> [469,]  3.0962501455 -1.273953e+00 #> [470,]  3.1069645794 -1.232850e+00 #> [471,]  3.1092162952 -1.188653e+00 #> [472,]  3.1028136086 -1.141638e+00 #> [473,]  3.0876055668 -1.092103e+00 #> [474,]  3.0634833183 -1.040361e+00 #> [475,]  3.0303812321 -9.867403e-01 #> [476,]  2.9882777541 -9.315820e-01 #> [477,]  2.9371959947 -8.752358e-01 #> [478,]  2.8772040430 -8.180593e-01 #> [479,]  2.8084150020 -7.604142e-01 #> [480,]  2.7309867450 -7.026646e-01 #> [481,]  2.6451213919 -6.451738e-01 #> [482,]  2.5510645094 -5.883018e-01 #> [483,]  2.4491040361 -5.324030e-01 #> [484,]  2.3395689420 -4.778231e-01 #> [485,]  2.2228276275 -4.248973e-01 #> [486,]  2.0992860718 -3.739474e-01 #> [487,]  1.9693857436 -3.252796e-01 #> [488,]  1.8336012848 -2.791826e-01 #> [489,]  1.6924379826 -2.359253e-01 #> [490,]  1.5464290467 -1.957551e-01 #> [491,]  1.3961327068 -1.588961e-01 #> [492,]  1.2421291512 -1.255476e-01 #> [493,]  1.0850173244 -9.588280e-02 #> [494,]  0.9254116045 -7.004754e-02 #> [495,]  0.7639383824 -4.815950e-02 #> [496,]  0.6012325644 -3.030744e-02 #> [497,]  0.4379340204 -1.655068e-02 #> [498,]  0.2746840012 -6.918859e-03 #> [499,]  0.1121215474 -1.411859e-03 #> [500,] -0.0491200860  1.203095e-17  # Butterflies of the vignette' cover panel(Out(a2l(replicate(100, rfourier_shape(nb.h=6, alpha=0.4, nb.pts=200, plot=FALSE)))))"},{"path":"http://momx.github.io/Momocs/reference/rm_asym.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","title":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","text":"obtained efourier, otherwise message returned. rm_asym sets B C coefficients 0; rm_sym sets D coefficients 0.","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_asym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","text":"","code":"rm_asym(OutCoe)  # S3 method for default rm_asym(OutCoe)  # S3 method for OutCoe rm_asym(OutCoe)  rm_sym(OutCoe)  # S3 method for default rm_sym(OutCoe)  # S3 method for OutCoe rm_sym(OutCoe)"},{"path":"http://momx.github.io/Momocs/reference/rm_asym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","text":"OutCoe OutCoe object","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_asym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","text":"OutCoe object","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_asym.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","text":": first mention, two applications. Iwata, H., Niikura, S., Matsuura, S., Takano, Y., & Ukai, Y. (1998). Evaluation variation root shape Japanese radish (Raphanus sativus L.) based image analysis using elliptic Fourier descriptors. Euphytica, 102, 143-149. Iwata, H., Nesumi, H., Ninomiya, S., Takano, Y., & Ukai, Y. (2002). Evaluation Genotype x Environment Interactions Citrus Leaf Morphology Using Image Analysis Elliptic Fourier Descriptors. Breeding Science, 52(2), 89-94. doi:10.1270/jsbbs.52.89 Yoshioka, Y., Iwata, H., Ohsawa, R., & Ninomiya, S. (2004). Analysis petal shape variation Primula sieboldii elliptic fourier descriptors principal component analysis. Annals Botany, 94(5), 657-64. doi:10.1093/aob/mch190","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rm_asym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes asymmetric and symmetric variation on OutCoe objects — rm_asym","text":"","code":"botf <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details botSym <- rm_asym(botf) boxplot(botSym)  botSymp <- PCA(botSym) plot(botSymp) #> will be deprecated soon, see ?plot_PCA  plot(botSymp, amp.shp=5) #> will be deprecated soon, see ?plot_PCA   # Asymmetric only botAsym <- rm_sym(botf) boxplot(botAsym)  botAsymp <- PCA(botAsym) plot(botAsymp) #> will be deprecated soon, see ?plot_PCA  # strange shapes because the original shape was mainly symmetric and would need its # symmetric (eg its average) for a proper reconstruction. Should only be used like that: plot(botAsymp, morpho=FALSE) #> will be deprecated soon, see ?plot_PCA"},{"path":"http://momx.github.io/Momocs/reference/rm_harm.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes harmonics from Coe objects — rm_harm","title":"Removes harmonics from Coe objects — rm_harm","text":"Useful drop harmonics Coe objects. work Fourier-based approached since looks [-D][1-drop] pattern.","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_harm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes harmonics from Coe objects — rm_harm","text":"","code":"rm_harm(x, drop = 1)"},{"path":"http://momx.github.io/Momocs/reference/rm_harm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes harmonics from Coe objects — rm_harm","text":"x Coe object drop numeric number harmonics drop","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_harm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes harmonics from Coe objects — rm_harm","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rm_harm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes harmonics from Coe objects — rm_harm","text":"","code":"data(bot) bf <- efourier(bot) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) colnames(rm_harm(bf, 1)$coe) #>  [1] \"A2\" \"A3\" \"A4\" \"A5\" \"A6\" \"A7\" \"A8\" \"A9\" \"B2\" \"B3\" \"B4\" \"B5\" \"B6\" \"B7\" \"B8\" #> [16] \"B9\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" \"C7\" \"C8\" \"C9\" \"D2\" \"D3\" \"D4\" \"D5\" \"D6\" \"D7\" #> [31] \"D8\" \"D9\""},{"path":"http://momx.github.io/Momocs/reference/rm_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove shapes with missing data in fac — rm_missing","title":"Remove shapes with missing data in fac — rm_missing","text":"row (within given column specified) containing NA $fac corresponding shapes $coo, lines $coe objects also dropped.","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove shapes with missing data in fac — rm_missing","text":"","code":"rm_missing(x, by)"},{"path":"http://momx.github.io/Momocs/reference/rm_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove shapes with missing data in fac — rm_missing","text":"x object NA column $fac objects complete views","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove shapes with missing data in fac — rm_missing","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rm_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove shapes with missing data in fac — rm_missing","text":"","code":"bot$fac$type[3] <- NA bot$fac$fake[9] <- NA  bot %>% length() #> [1] 40 bot %>% rm_missing() %>% length #> [1] 38 bot %>% rm_missing(\"fake\") %>% length() #> [1] 39"},{"path":"http://momx.github.io/Momocs/reference/rm_uncomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove shapes with incomplete slices — rm_uncomplete","title":"Remove shapes with incomplete slices — rm_uncomplete","text":"Imagine take three views every object study. , can slice, filter chop entire dataset, morphometrics , want combine . forgotten one view, impossible obtain, one objects, combine work. function helps remove ugly ducklings. See examples","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_uncomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove shapes with incomplete slices — rm_uncomplete","text":"","code":"rm_uncomplete(x, id, by)"},{"path":"http://momx.github.io/Momocs/reference/rm_uncomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove shapes with incomplete slices — rm_uncomplete","text":"x object remove uncomplete \"\" id objects, within $fac slot column $fac objects complete views","code":""},{"path":"http://momx.github.io/Momocs/reference/rm_uncomplete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove shapes with incomplete slices — rm_uncomplete","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rm_uncomplete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove shapes with incomplete slices — rm_uncomplete","text":"","code":"# we load olea data(olea) # we select the var Aglan since it is the only one complete ol <- filter(olea, var == \"Aglan\") # everything seems fine table(ol$view, ol$ind) #>      #>      O1 O10 O11 O12 O13 O14 O15 O16 O17 O18 O19 O2 O20 O21 O22 O23 O24 O25 O26 #>   VD  1   1   1   1   1   1   1   1   1   1   1  1   1   1   1   1   1   1   1 #>   VL  1   1   1   1   1   1   1   1   1   1   1  1   1   1   1   1   1   1   1 #>      #>      O27 O28 O29 O3 O30 O4 O5 O6 O7 O8 O9 #>   VD   1   1   1  1   1  1  1  1  1  1  1 #>   VL   1   1   1  1   1  1  1  1  1  1  1 # indeed rm_uncomplete(ol, id=\"ind\", by=\"view\") #> all ids have 2 slices #> Opn (curves) #>   - 60 curves, 98 +/- 4 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 60 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 54 more rows #>   - also: $ldk  # we mess the ol object by removing a single shape ol.pb <- slice(ol, -1) table(ol.pb$view, ol.pb$ind) #>      #>      O1 O10 O11 O12 O13 O14 O15 O16 O17 O18 O19 O2 O20 O21 O22 O23 O24 O25 O26 #>   VD  1   0   1   1   1   1   1   1   1   1   1  1   1   1   1   1   1   1   1 #>   VL  1   1   1   1   1   1   1   1   1   1   1  1   1   1   1   1   1   1   1 #>      #>      O27 O28 O29 O3 O30 O4 O5 O6 O7 O8 O9 #>   VD   1   1   1  1   1  1  1  1  1  1  1 #>   VL   1   1   1  1   1  1  1  1  1  1  1 # the counterpart has been removed with a notice ol.ok <- rm_uncomplete(ol.pb, \"ind\", \"view\") #> those shapes did not have 2 slices and has been removed: O10 # now you can combine them table(ol.ok$view, ol.ok$ind) #>      #>      O1 O10 O11 O12 O13 O14 O15 O16 O17 O18 O19 O2 O20 O21 O22 O23 O24 O25 O26 #>   VD  0   0   0   0   0   0   0   0   0   0   0  0   0   0   0   0   0   0   0 #>   VL  0   0   0   0   0   0   0   0   0   0   0  0   0   0   0   0   0   0   0 #>      #>      O27 O28 O29 O3 O30 O4 O5 O6 O7 O8 O9 #>   VD   0   0   0  0   0  0  0  0  0  0  0 #>   VL   0   0   0  0   0  0  0  0  0  0  0"},{"path":"http://momx.github.io/Momocs/reference/rw_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Renames levels on Momocs objects — rw_fac","title":"Renames levels on Momocs objects — rw_fac","text":"rw_fac stands 'rewriting rule'. Typically useful correct typos import, merge levels within covariates. Drops levels silently.","code":""},{"path":"http://momx.github.io/Momocs/reference/rw_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renames levels on Momocs objects — rw_fac","text":"","code":"rw_fac(x, fac, from, to)"},{"path":"http://momx.github.io/Momocs/reference/rw_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renames levels on Momocs objects — rw_fac","text":"x Momocs object fac id name $fac column look (fac_dispatcher yet supported) level(s) renamed; passed single several characters name used rename /levels","code":""},{"path":"http://momx.github.io/Momocs/reference/rw_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renames levels on Momocs objects — rw_fac","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/rw_fac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renames levels on Momocs objects — rw_fac","text":"","code":"# single renaming rw_fac(bot, \"type\", \"whisky\", \"agua_de_fuego\")$type # 1 instead of \"type\" is fine too #>         type1         type2         type3         type4         type5  #>          beer          beer          beer          beer          beer  #>         type6         type7         type8         type9        type10  #>          beer          beer          beer          beer          beer  #>        type11        type12        type13        type14        type15  #>          beer          beer          beer          beer          beer  #>        type16        type17        type18        type19        type20  #>          beer          beer          beer          beer          beer  #>        type21        type22        type23        type24        type25  #> agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego  #>        type26        type27        type28        type29        type30  #> agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego  #>        type31        type32        type33        type34        type35  #> agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego  #>        type36        type37        type38        type39        type40  #> agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego agua_de_fuego  #> Levels: agua_de_fuego beer # several renaming bot2 <- mutate(bot, fake=factor(rep(letters[1:4], 10))) rw_fac(bot2, \"fake\", c(\"a\", \"e\"), \"ae\")$fake #>  fake1  fake2  fake3  fake4  fake5  fake6  fake7  fake8  fake9 fake10 fake11  #>     ae     ae      b      c     ae     ae      b      c     ae     ae      b  #> fake12 fake13 fake14 fake15 fake16 fake17 fake18 fake19 fake20 fake21 fake22  #>      c     ae     ae      b      c     ae     ae      b      c     ae     ae  #> fake23 fake24 fake25 fake26 fake27 fake28 fake29 fake30 fake31 fake32 fake33  #>      b      c     ae     ae      b      c     ae     ae      b      c     ae  #> fake34 fake35 fake36 fake37 fake38 fake39 fake40  #>     ae      b      c     ae     ae      b      c  #> Levels: ae b c"},{"path":"http://momx.github.io/Momocs/reference/sample_frac.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a fraction of shapes — sample_frac","title":"Sample a fraction of shapes — sample_frac","text":"Sample fraction shapes Momocs object. See examples ?dplyr::sample_n.","code":""},{"path":"http://momx.github.io/Momocs/reference/sample_frac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a fraction of shapes — sample_frac","text":"","code":"sample_frac(tbl, size, replace, fac, ...)"},{"path":"http://momx.github.io/Momocs/reference/sample_frac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a fraction of shapes — sample_frac","text":"tbl Momocs object (Coo, Coe) size numeric (0 < numeric <= 1) fraction shapes select replace logical whether sample done ot without replacement fac column name $fac defined; size applied within levels factor ... additional arguments dplyr::sample_frac maintain generic compatibility","code":""},{"path":"http://momx.github.io/Momocs/reference/sample_frac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a fraction of shapes — sample_frac","text":"Momocs object class","code":""},{"path":"http://momx.github.io/Momocs/reference/sample_frac.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sample a fraction of shapes — sample_frac","text":"resulting fraction rounded ceiling.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/sample_frac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a fraction of shapes — sample_frac","text":"","code":"# samples 50% of the bottles no matter their type sample_frac(bot, 0.5) #> Out (outlines) #>   - 20 outlines, 158 +/- 22 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 20 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 beer   d     #> 2 whisky a     #> 3 beer   c     #> 4 beer   d     #> 5 beer   d     #> 6 beer   d     #> # ℹ 14 more rows #>   - also: $ldk # 80% bottles of beer and of whisky table(sample_frac(bot, 0.8, fac=\"type\")$fac) #>         fake #> type      a  b  c  d #>   beer    0  0  7  9 #>   whisky 10  6  0  0 # bootstrap the same number of bootles of each type but with replacement table(names(sample_frac(bot, 1, replace=TRUE))) #>  #>          amrut      bushmills          caney         chimay         chivas  #>              1              2              1              1              2  #>         corona        dalmore    deusventrue    glendronach   glenmorangie  #>              1              1              2              2              1  #>     grimbergen        guiness   highlandpark     hoegardeen    jackdaniels  #>              1              2              2              1              1  #>     kingfisher       latrappe lindemanskriek       magallan     makersmark  #>              1              1              3              2              1  #>    nicechouffe      redbreast         tamdhu      westmalle     wildturkey  #>              1              1              1              1              2  #>         yoichi  #>              5"},{"path":"http://momx.github.io/Momocs/reference/sample_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample n shapes — sample_n","title":"Sample n shapes — sample_n","text":"Sample n shapes Momocs object. See examples ?dplyr::sample_n.","code":""},{"path":"http://momx.github.io/Momocs/reference/sample_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample n shapes — sample_n","text":"","code":"sample_n(tbl, size, replace, fac, ...)"},{"path":"http://momx.github.io/Momocs/reference/sample_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample n shapes — sample_n","text":"tbl Momocs object (Coo, Coe) size numeric many shapes sample replace logical whether sample done ot without replacement fac column name $fac defined; size applied within levels factor ... additional arguments dplyr::sample_n maintain generic compatibility","code":""},{"path":"http://momx.github.io/Momocs/reference/sample_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample n shapes — sample_n","text":"Momocs object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/sample_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample n shapes — sample_n","text":"","code":"# samples 5 bottles no matter their type sample_n(bot, 5) #> Out (outlines) #>   - 5 outlines, 165 +/- 21 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 5 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky b     #> 4 whisky a     #> 5 whisky a     #>   - also: $ldk # 5 bottles of beer and of whisky table(sample_n(bot, 5, fac=\"type\")$type) #>  #>   beer whisky  #>      5      5  # many repetitions table(names(sample_n(bot, 400, replace=TRUE))) #>  #>          amrut    ballantines         brahma      bushmills          caney  #>              9              8              8             10             11  #>         chimay         chivas         corona        dalmore    deusventrue  #>             14              9             16             17              6  #>          duvel   famousgrouse   franziskaner    glendronach   glenmorangie  #>             11             13             11             14             11  #>     grimbergen        guiness   highlandpark     hoegardeen    jackdaniels  #>              8              7              9              9              8  #>             jb  johnniewalker        jupiler     kingfisher       latrappe  #>             11             10             11             14             14  #> lindemanskriek       magallan     makersmark    nicechouffe           oban  #>              7             17              6              4              7  #>     oldpotrero     pecheresse      redbreast   sierranevada         tamdhu  #>             10             10             14              9             10  #>     tanglefoot          tauro      westmalle     wildturkey         yoichi  #>              6              4              7             12              8"},{"path":"http://momx.github.io/Momocs/reference/scree.html","id":null,"dir":"Reference","previous_headings":"","what":"How many axes to retain this much of variance or trace ? — scree","title":"How many axes to retain this much of variance or trace ? — scree","text":"set functions around PCA/LDA eigen/trace. scree calculates proportion cumulated proportion; scree_min returns minimal number axis use retain given proportion; scree_plot displays screeplot.","code":""},{"path":"http://momx.github.io/Momocs/reference/scree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How many axes to retain this much of variance or trace ? — scree","text":"","code":"scree(x, nax)  # S3 method for PCA scree(x, nax)  # S3 method for LDA scree(x, nax)  scree_min(x, prop)  scree_plot(x, nax)"},{"path":"http://momx.github.io/Momocs/reference/scree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"How many axes to retain this much of variance or trace ? — scree","text":"x PCA object nax numeric range axes consider. default scree_min, display 0.99 scree_plot prop numeric many axes enough gather proportion variance. Default 1, axes returned defaut 1: axis returned","code":""},{"path":"http://momx.github.io/Momocs/reference/scree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"How many axes to retain this much of variance or trace ? — scree","text":"scree returns data.frame, scree_min numeric, scree_plot ggplot.","code":""},{"path":"http://momx.github.io/Momocs/reference/scree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How many axes to retain this much of variance or trace ? — scree","text":"","code":"# On PCA bp <- PCA(efourier(bot)) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) scree(bp) #> # A tibble: 40 × 3 #>     axis proportion cumsum #>    <int>      <dbl>  <dbl> #>  1     1    0.761    0.761 #>  2     2    0.170    0.931 #>  3     3    0.0294   0.960 #>  4     4    0.0135   0.974 #>  5     5    0.00860  0.982 #>  6     6    0.00719  0.990 #>  7     7    0.00306  0.993 #>  8     8    0.00190  0.994 #>  9     9    0.00159  0.996 #> 10    10    0.00122  0.997 #> # ℹ 30 more rows scree_min(bp, 0.99) #> [1] 7 scree_min(bp, 1) #> [1] 37  scree_plot(bp)  scree_plot(bp, 1:5)   # on LDA, it uses svd bl <- LDA(PCA(opoly(olea)), \"var\") #> 'nb.pts' missing and set to 91 #> 'degree' missing and set to 5 #> 4 PC retained scree(bl) #> # A tibble: 3 × 3 #>    axis proportion cumsum #>   <int>      <dbl>  <dbl> #> 1     1     0.913   0.913 #> 2     2     0.0603  0.973 #> 3     3     0.0268  1"},{"path":"http://momx.github.io/Momocs/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns by name — select","title":"Select columns by name — select","text":"Select variables name, $fac. Selected variables can also renamed fly. See examples ?dplyr::select.","code":""},{"path":"http://momx.github.io/Momocs/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns by name — select","text":"","code":"select(.data, ...)"},{"path":"http://momx.github.io/Momocs/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns by name — select","text":".data Coo, Coe, PCA object ... comma separated list unquoted expressions","code":""},{"path":"http://momx.github.io/Momocs/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select columns by name — select","text":"Momocs object class.","code":""},{"path":"http://momx.github.io/Momocs/reference/select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select columns by name — select","text":"dplyr verbs maintained.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns by name — select","text":"","code":"olea #> Opn (curves) #>   - 210 curves, 98 +/- 3 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk select(olea, var, view) # drops domes and ind #> Opn (curves) #>   - 210 curves, 99 +/- 4 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 210 × 2 #>   var   view  #>   <fct> <fct> #> 1 Aglan VD    #> 2 Aglan VL    #> 3 Aglan VD    #> 4 Aglan VL    #> 5 Aglan VD    #> 6 Aglan VL    #> # ℹ 204 more rows #>   - also: $ldk select(olea, variety=var, domesticated_status=domes, view) #> Opn (curves) #>   - 210 curves, 99 +/- 4 coords (in $coo) #>   - 3 classifiers (in $fac):  #> # A tibble: 210 × 3 #>   variety domesticated_status view  #>   <fct>   <fct>               <fct> #> 1 Aglan   cult                VD    #> 2 Aglan   cult                VL    #> 3 Aglan   cult                VD    #> 4 Aglan   cult                VL    #> 5 Aglan   cult                VD    #> 6 Aglan   cult                VL    #> # ℹ 204 more rows #>   - also: $ldk # combine with filter with magrittr pipes # only dorsal views, and 'var' and 'domes' columns filter(olea, view==\"VD\") %>% select(var, domes) #> Opn (curves) #>   - 120 curves, 99 +/- 3 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 120 × 2 #>   var   domes #>   <fct> <fct> #> 1 Aglan cult  #> 2 Aglan cult  #> 3 Aglan cult  #> 4 Aglan cult  #> 5 Aglan cult  #> 6 Aglan cult  #> # ℹ 114 more rows #>   - also: $ldk head(olea$fac) #> # A tibble: 6 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   # select some columns select(olea, domes, view) #> Opn (curves) #>   - 210 curves, 98 +/- 3 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 210 × 2 #>   domes view  #>   <fct> <fct> #> 1 cult  VD    #> 2 cult  VL    #> 3 cult  VD    #> 4 cult  VL    #> 5 cult  VD    #> 6 cult  VL    #> # ℹ 204 more rows #>   - also: $ldk # remove some columns select(olea, -ind) #> Opn (curves) #>   - 210 curves, 99 +/- 4 coords (in $coo) #>   - 3 classifiers (in $fac):  #> # A tibble: 210 × 3 #>   var   domes view  #>   <fct> <fct> <fct> #> 1 Aglan cult  VD    #> 2 Aglan cult  VL    #> 3 Aglan cult  VD    #> 4 Aglan cult  VL    #> 5 Aglan cult  VD    #> 6 Aglan cult  VL    #> # ℹ 204 more rows #>   - also: $ldk # rename on the fly and select some columns select(olea, foo=domes) #> Opn (curves) #>   - 210 curves, 99 +/- 4 coords (in $coo) #>   - 1 classifiers (in $fac):  #> # A tibble: 210 × 1 #>   foo   #>   <fct> #> 1 cult  #> 2 cult  #> 3 cult  #> 4 cult  #> 5 cult  #> 6 cult  #> # ℹ 204 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"sfourier computes radii variation Fourier analysis matrix list coordinates points equally spaced aong curvilinear abscissa.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"","code":"sfourier(x, nb.h)  # S3 method for default sfourier(x, nb.h)  # S3 method for Out sfourier(x, nb.h)  # S3 method for list sfourier(x, nb.h)"},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"x list matrix coordinates object nb.h integer. number harmonics use. missing, 12 used shapes; 99 percent harmonic power objects, messages.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"list following components: vector \\(a_{1->n}\\) harmonic coefficients bn vector \\(b_{1->n}\\) harmonic coefficients ao ao harmonic coefficient r vector radii lengths","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"implementation still quite experimental (Dec. 2016)","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"Renaud S, Michaux JR (2003): Adaptive latitudinal trends mandible shape Apodemus wood mice. J Biogeogr 30:1617-1628.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/sfourier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radii variation Fourier transform (equally spaced curvilinear abscissa) — sfourier","text":"","code":"molars[4] %>% coo_center %>% coo_scale %>% coo_interpolate(1080) %>% coo_slidedirection(\"right\") %>%    coo_sample(360) %T>% coo_plot(zoom=2) %>%    sfourier(16) %>%    sfourier_i() %>%    coo_draw(bor=\"red\", points=TRUE)"},{"path":"http://momx.github.io/Momocs/reference/sfourier_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse radii variation Fourier transform — sfourier_i","title":"Inverse radii variation Fourier transform — sfourier_i","text":"sfourier_i uses inverse radii variation (equally spaced curvilinear abscissa) transformation calculate shape, given list Fourier coefficients, typically obtained computed sfourier.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse radii variation Fourier transform — sfourier_i","text":"","code":"sfourier_i(rf, nb.h, nb.pts = 120, dtheta = FALSE)"},{"path":"http://momx.github.io/Momocs/reference/sfourier_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse radii variation Fourier transform — sfourier_i","text":"rf list ao, bn components, typically returned sfourier. nb.h integer. number harmonics calculate/use. nb.pts integer. number points calculate. dtheta logical. Whether use dtheta correction method. FALSE default. TRUE, tries correct angular difference reconstructed points; otherwise equal angles used.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse radii variation Fourier transform — sfourier_i","text":"list components: x vector x-coordinates. y vector y-coordinates. angle vector angles used. r vector radii calculated.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse radii variation Fourier transform — sfourier_i","text":"Renaud S, Pale JRM, Michaux JR (2003): Adaptive latitudinal trends mandible shape Apodemus wood mice. J Biogeogr 30:1617-1628.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/sfourier_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse radii variation Fourier transform — sfourier_i","text":"","code":"coo <- coo_center(bot[1]) # centering is almost mandatory for sfourier family coo_plot(coo) rf  <- sfourier(coo, 12) rf #> $an #>  [1]  4.604028e-03 -2.999389e-01 -9.402145e-04  1.149290e-02  7.204731e-03 #>  [6] -9.029436e-03 -3.801153e-04 -3.509909e-03  3.066128e-03 -1.605563e-04 #> [11] -5.282196e-05 -2.663480e-03 #>  #> $bn #>  [1] -5.890572e-03  3.958517e-02 -7.064423e-03 -2.988931e-03  1.291082e-02 #>  [6]  2.814025e-03 -1.504084e-03  5.682629e-04  5.198896e-03 -3.561684e-05 #> [11] -1.358067e-03  2.234144e-03 #>  #> $ao #> [1] 334.5633 #>  #> $r #>   [1] 139.1167 135.1134 135.8741 136.8427 141.0323 143.5802 151.2095 162.8116 #>   [9] 175.5101 182.5204 198.0176 214.4721 223.4262 241.8735 260.7074 269.7883 #>  [17] 289.8301 310.0117 320.9760 342.0111 363.0862 373.1664 393.9569 415.7375 #>  [25] 436.2997 445.8192 465.8759 484.9159 494.7304 512.1917 523.5711 525.7951 #>  [33] 528.7641 528.6261 529.8403 529.9849 528.9630 529.2840 529.5332 529.6230 #>  [41] 526.6029 525.3373 516.8135 501.5361 492.0222 473.0432 453.3357 442.8940 #>  [49] 422.7064 402.9506 393.5883 373.2914 353.4743 342.9622 323.7894 303.5315 #>  [57] 283.8734 274.5648 254.3851 234.8608 225.9056 207.4851 188.9917 179.2651 #>  [65] 163.2102 148.4020 142.2876 131.8906 124.2115 121.7441 122.3408 126.4329 #>  [73] 133.8555 138.8126 149.4057 160.3977 165.1035 178.0327 190.2983 196.3891 #>  [81] 207.9233 218.2629 225.0539 239.8685 256.5975 274.7171 283.4915 303.0400 #>  [89] 323.0170 333.5460 353.5262 373.8148 383.4986 404.8965 425.3750 435.1409 #>  [97] 455.5781 476.1955 487.0166 508.4428 526.8989 546.1072 554.4755 557.9344 #> [105] 558.1869 558.1342 557.6074 557.8729 556.8590 542.6716 524.9317 515.3814 #> [113] 494.2988 473.6200 462.7267 442.2440 421.9866 401.6471 390.8306 370.6053 #> [121] 350.7010 341.4100 321.0176 301.2409 290.9421 272.0980 254.7364 246.6077 #> [129] 230.9259 217.6545 212.0765 201.6712 191.0722 180.1960 174.3784 163.0992 #> [137] 152.9502 148.4252 #>  rfi <- sfourier_i(rf) coo_draw(rfi, border='red', col=NA)"},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and draw 'sfourier' shapes. — sfourier_shape","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"sfourier_shape calculates 'Fourier radii variation shape' given Fourier coefficients (see Details) can generate 'sfourier' shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"","code":"sfourier_shape(an, bn, nb.h, nb.pts = 80, alpha = 2, plot = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"numeric. \\(a_n\\) Fourier coefficients calculate shape. bn numeric. \\(b_n\\) Fourier coefficients calculate shape. nb.h integer. number harmonics use. nb.pts integer. number points calculate. alpha numeric. power coefficient associated (usually decreasing) amplitude Fourier coefficients (see Details). plot logical. Whether plot shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"sfourier_shape can used specifying nb.h alpha. coefficients sampled uniform distribution \\((-\\pi ; \\pi)\\) amplitude divided \\(harmonicrank^alpha\\). alpha lower 1, consecutive coefficients thus increase. See sfourier mathematical background.","code":""},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"Renaud S, Pale JRM, Michaux JR (2003): Adaptive latitudinal trends mandible shape Apodemus wood mice. J Biogeogr 30:1617-1628.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/sfourier_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and draw 'sfourier' shapes. — sfourier_shape","text":"","code":"rf <- sfourier(bot[1], 24) sfourier_shape(rf$an, rf$bn) # equivalent to sfourier_i(rf)  #>                  x             y #>  [1,] -0.290097233  0.000000e+00 #>  [2,] -0.271959700 -2.167576e-02 #>  [3,] -0.246484918 -3.954193e-02 #>  [4,] -0.217733972 -5.296062e-02 #>  [5,] -0.189896582 -6.253711e-02 #>  [6,] -0.161756328 -6.794564e-02 #>  [7,] -0.129280368 -6.684598e-02 #>  [8,] -0.093457131 -5.816908e-02 #>  [9,] -0.056911599 -4.204430e-02 #> [10,] -0.020498051 -1.782664e-02 #> [11,]  0.012003787  1.224487e-02 #> [12,]  0.037674640  4.510087e-02 #> [13,]  0.059580159  8.409685e-02 #> [14,]  0.077938313  1.309531e-01 #> [15,]  0.087952301  1.787227e-01 #> [16,]  0.089723461  2.260901e-01 #> [17,]  0.084960971  2.763655e-01 #> [18,]  0.070321004  3.163705e-01 #> [19,]  0.046429512  3.314256e-01 #> [20,]  0.019913853  3.334462e-01 #> [21,] -0.006649182  3.343630e-01 #> [22,] -0.031682610  3.176318e-01 #> [23,] -0.049327516  2.726987e-01 #> [24,] -0.057930387  2.191009e-01 #> [25,] -0.060592889  1.723788e-01 #> [26,] -0.056570309  1.275136e-01 #> [27,] -0.044606160  8.221929e-02 #> [28,] -0.026786000  4.118703e-02 #> [29,] -0.003378834  4.388307e-03 #> [30,]  0.025798149 -2.849944e-02 #> [31,]  0.058618676 -5.522233e-02 #> [32,]  0.094446012 -7.575806e-02 #> [33,]  0.130822044 -8.883054e-02 #> [34,]  0.161850879 -9.201979e-02 #> [35,]  0.189408545 -8.857751e-02 #> [36,]  0.220645564 -8.252378e-02 #> [37,]  0.252775395 -7.224049e-02 #> [38,]  0.279699320 -5.635869e-02 #> [39,]  0.302648329 -3.627852e-02 #> [40,]  0.317717406 -1.264133e-02 #> [41,]  0.314194975  1.250118e-02 #> [42,]  0.292885334  3.510823e-02 #> [43,]  0.262693915  5.293215e-02 #> [44,]  0.225005085  6.430404e-02 #> [45,]  0.180944070  6.767500e-02 #> [46,]  0.137869807  6.447525e-02 #> [47,]  0.097568618  5.547232e-02 #> [48,]  0.056393859  3.829245e-02 #> [49,]  0.016752301  1.343754e-02 #> [50,] -0.016789374 -1.581660e-02 #> [51,] -0.044589066 -4.925793e-02 #> [52,] -0.067069580 -8.710755e-02 #> [53,] -0.083178505 -1.278980e-01 #> [54,] -0.093570208 -1.724712e-01 #> [55,] -0.097166720 -2.190209e-01 #> [56,] -0.090346447 -2.570238e-01 #> [57,] -0.073587369 -2.783178e-01 #> [58,] -0.051890843 -2.868696e-01 #> [59,] -0.028919129 -2.899267e-01 #> [60,] -0.005779918 -2.906509e-01 #> [61,]  0.017359802 -2.906800e-01 #> [62,]  0.040168810 -2.867352e-01 #> [63,]  0.059710443 -2.686342e-01 #> [64,]  0.071446661 -2.324054e-01 #> [65,]  0.074293397 -1.872085e-01 #> [66,]  0.069720055 -1.416741e-01 #> [67,]  0.057052553 -9.586057e-02 #> [68,]  0.036028165 -5.085343e-02 #> [69,]  0.009821433 -1.175738e-02 #> [70,] -0.020089825  2.049331e-02 #> [71,] -0.055257428  4.805599e-02 #> [72,] -0.094037716  6.947178e-02 #> [73,] -0.132851358  8.268862e-02 #> [74,] -0.171860865  8.886274e-02 #> [75,] -0.210848274  8.856668e-02 #> [76,] -0.245371280  8.080615e-02 #> [77,] -0.272295567  6.623194e-02 #> [78,] -0.290646288  4.662644e-02 #> [79,] -0.297232987  2.369010e-02 #> [80,] -0.290097233  7.105333e-17 sfourier_shape() # not very interesting  #>                  x             y #>  [1,] -0.945118007  0.000000e+00 #>  [2,] -1.089655560 -8.684786e-02 #>  [3,] -1.224220418 -1.963935e-01 #>  [4,] -1.343537389 -3.267959e-01 #>  [5,] -1.442069318 -4.749051e-01 #>  [6,] -1.515125904 -6.364277e-01 #>  [7,] -1.559856027 -8.065425e-01 #>  [8,] -1.575773677 -9.807844e-01 #>  [9,] -1.564617563 -1.155885e+00 #> [10,] -1.529566340 -1.330225e+00 #> [11,] -1.474053174 -1.503658e+00 #> [12,] -1.400572047 -1.676645e+00 #> [13,] -1.309892716 -1.848902e+00 #> [14,] -1.200988990 -2.017920e+00 #> [15,] -1.071767042 -2.177875e+00 #> [16,] -0.920422241 -2.319330e+00 #> [17,] -0.747034817 -2.429994e+00 #> [18,] -0.554907030 -2.496498e+00 #> [19,] -0.351185770 -2.506853e+00 #> [20,] -0.146498336 -2.453031e+00 #> [21,]  0.046394820 -2.333025e+00 #> [22,]  0.214638297 -2.151842e+00 #> [23,]  0.347504343 -1.921118e+00 #> [24,]  0.438218807 -1.657405e+00 #> [25,]  0.484901075 -1.379480e+00 #> [26,]  0.490363516 -1.105315e+00 #> [27,]  0.460828661 -8.494120e-01 #> [28,]  0.403923046 -6.210854e-01 #> [29,]  0.326508157 -4.240570e-01 #> [30,]  0.232951810 -2.573439e-01 #> [31,]  0.124314258 -1.171115e-01 #> [32,] -0.001340897  1.075575e-03 #> [33,] -0.147624087  1.002394e-01 #> [34,] -0.317886999  1.807336e-01 #> [35,] -0.513251749  2.400238e-01 #> [36,] -0.731178192  2.734684e-01 #> [37,] -0.964983613  2.757819e-01 #> [38,] -1.204450247  2.426936e-01 #> [39,] -1.437343375  1.722947e-01 #> [40,] -1.651408292  6.570619e-02 #> [41,] -1.836292173 -7.306234e-02 #> [42,] -1.984880367 -2.379280e-01 #> [43,] -2.093730023 -4.218812e-01 #> [44,] -2.162566216 -6.180382e-01 #> [45,] -2.193090184 -8.202390e-01 #> [46,] -2.187549211 -1.023014e+00 #> [47,] -2.147572924 -1.220996e+00 #> [48,] -2.073675643 -1.408063e+00 #> [49,] -1.965592490 -1.576662e+00 #> [50,] -1.823330567 -1.717688e+00 #> [51,] -1.648565296 -1.821184e+00 #> [52,] -1.445874819 -1.877850e+00 #> [53,] -1.223327227 -1.881028e+00 #> [54,] -0.992112686 -1.828689e+00 #> [55,] -0.765194301 -1.724804e+00 #> [56,] -0.555254267 -1.579625e+00 #> [57,] -0.372444248 -1.408637e+00 #> [58,] -0.222539419 -1.230271e+00 #> [59,] -0.106013852 -1.062835e+00 #> [60,] -0.018321147 -9.213033e-01 #> [61,]  0.048656444 -8.147245e-01 #> [62,]  0.104343507 -7.448305e-01 #> [63,]  0.156966287 -7.061831e-01 #> [64,]  0.211445246 -6.878001e-01 #> [65,]  0.268211852 -6.758548e-01 #> [66,]  0.323221424 -6.567994e-01 #> [67,]  0.369109956 -6.201842e-01 #> [68,]  0.397141945 -5.605622e-01 #> [69,]  0.399402278 -4.781304e-01 #> [70,]  0.370649888 -3.780940e-01 #> [71,]  0.309378472 -2.690586e-01 #> [72,]  0.217877577 -1.609604e-01 #> [73,]  0.101379497 -6.310007e-02 #> [74,] -0.033373044  1.725594e-02 #> [75,] -0.179667239  7.546911e-02 #> [76,] -0.332009446  1.093380e-01 #> [77,] -0.486653324  1.183713e-01 #> [78,] -0.641391147  1.028941e-01 #> [79,] -0.794775929  6.334533e-02 #> [80,] -0.945118007  2.314871e-16  sfourier_shape(nb.h=12) # better  #>                 x             y #>  [1,] -3.73028216  0.000000e+00 #>  [2,] -3.79081371 -3.021359e-01 #>  [3,] -3.74114732 -6.001673e-01 #>  [4,] -3.61177769 -8.785124e-01 #>  [5,] -3.43507276 -1.131245e+00 #>  [6,] -3.22637825 -1.355238e+00 #>  [7,] -2.98195669 -1.541857e+00 #>  [8,] -2.69374968 -1.676629e+00 #>  [9,] -2.36746422 -1.749000e+00 #> [10,] -2.02848468 -1.764122e+00 #> [11,] -1.71086482 -1.745226e+00 #> [12,] -1.43868404 -1.722270e+00 #> [13,] -1.21456649 -1.714350e+00 #> [14,] -1.02323427 -1.719254e+00 #> [15,] -0.84545308 -1.717996e+00 #> [16,] -0.67059890 -1.689812e+00 #> [17,] -0.49955732 -1.624986e+00 #> [18,] -0.33920388 -1.526061e+00 #> [19,] -0.19602476 -1.399275e+00 #> [20,] -0.07446420 -1.246861e+00 #> [21,]  0.02125625 -1.068899e+00 #> [22,]  0.08706282 -8.728423e-01 #> [23,]  0.12298195 -6.798846e-01 #> [24,]  0.13720637 -5.189339e-01 #> [25,]  0.14417303 -4.101533e-01 #> [26,]  0.15553796 -3.505940e-01 #> [27,]  0.17054532 -3.143538e-01 #> [28,]  0.17457563 -2.684332e-01 #> [29,]  0.14836597 -1.926924e-01 #> [30,]  0.08076147 -8.921790e-02 #> [31,] -0.02595140  2.444779e-02 #> [32,] -0.16280016  1.305870e-01 #> [33,] -0.32648936  2.216922e-01 #> [34,] -0.52516205  2.985792e-01 #> [35,] -0.77085296  3.604918e-01 #> [36,] -1.06420436  3.980237e-01 #> [37,] -1.38501767  3.958232e-01 #> [38,] -1.69830982  3.422051e-01 #> [39,] -1.97268399  2.364661e-01 #> [40,] -2.19714866  8.742009e-02 #> [41,] -2.38344487 -9.483244e-02 #> [42,] -2.55272406 -3.059956e-01 #> [43,] -2.71784631 -5.476390e-01 #> [44,] -2.87509273 -8.216706e-01 #> [45,] -3.01006409 -1.125796e+00 #> [46,] -3.11033755 -1.454559e+00 #> [47,] -3.17270089 -1.803829e+00 #> [48,] -3.19899367 -2.172175e+00 #> [49,] -3.18554363 -2.555223e+00 #> [50,] -3.11700723 -2.936409e+00 #> [51,] -2.97140412 -3.282536e+00 #> [52,] -2.73341309 -3.550058e+00 #> [53,] -2.40622080 -3.699884e+00 #> [54,] -2.01370848 -3.711722e+00 #> [55,] -1.59238058 -3.589343e+00 #> [56,] -1.17931764 -3.355004e+00 #> [57,] -0.80341929 -3.038645e+00 #> [58,] -0.48285695 -2.669392e+00 #> [59,] -0.22670844 -2.272850e+00 #> [60,] -0.03722754 -1.872036e+00 #> [61,]  0.08884098 -1.487592e+00 #> [62,]  0.15903666 -1.135244e+00 #> [63,]  0.18276462 -8.222485e-01 #> [64,]  0.16785204 -5.459978e-01 #> [65,]  0.11761273 -2.963670e-01 #> [66,]  0.02989255 -6.074290e-02 #> [67,] -0.10145958  1.704739e-01 #> [68,] -0.28309891  3.995915e-01 #> [69,] -0.51751306  6.195225e-01 #> [70,] -0.79872291  8.147643e-01 #> [71,] -1.11093808  9.661547e-01 #> [72,] -1.43263632  1.058382e+00 #> [73,] -1.74574192  1.086575e+00 #> [74,] -2.04499551  1.057390e+00 #> [75,] -2.34006808  9.829441e-01 #> [76,] -2.64618338  8.714462e-01 #> [77,] -2.96731752  7.217568e-01 #> [78,] -3.28344281  5.267408e-01 #> [79,] -3.55279054  2.831649e-01 #> [80,] -3.73028216  9.136556e-16 sfourier_shape(nb.h=6, alpha=0.4, nb.pts=500)  #>                   x             y #>   [1,] -4.627376537  0.000000e+00 #>   [2,] -4.433329065 -5.582545e-02 #>   [3,] -4.224758345 -1.064150e-01 #>   [4,] -4.002543436 -1.512667e-01 #>   [5,] -3.767629800 -1.899219e-01 #>   [6,] -3.521024150 -2.219692e-01 #>   [7,] -3.263788935 -2.470472e-01 #>   [8,] -2.997036513 -2.648476e-01 #>   [9,] -2.721923035 -2.751171e-01 #>  [10,] -2.439642077 -2.776596e-01 #>  [11,] -2.151418074 -2.723378e-01 #>  [12,] -1.858499581 -2.590742e-01 #>  [13,] -1.562152419 -2.378520e-01 #>  [14,] -1.263652728 -2.087150e-01 #>  [15,] -0.964280000 -1.717679e-01 #>  [16,] -0.665310099 -1.271752e-01 #>  [17,] -0.368008349 -7.516038e-02 #>  [18,] -0.073622700 -1.600461e-02 #>  [19,]  0.216622959  4.995549e-02 #>  [20,]  0.501535323  1.223299e-01 #>  [21,]  0.779957967  2.006780e-01 #>  [22,]  1.050777396  2.845114e-01 #>  [23,]  1.312928801  3.732977e-01 #>  [24,]  1.565401492  4.664638e-01 #>  [25,]  1.807243971  5.634001e-01 #>  [26,]  2.037568623  6.634647e-01 #>  [27,]  2.255555987  7.659880e-01 #>  [28,]  2.460458599  8.702773e-01 #>  [29,]  2.651604365  9.756215e-01 #>  [30,]  2.828399466  1.081296e+00 #>  [31,]  2.990330767  1.186570e+00 #>  [32,]  3.136967724  1.290706e+00 #>  [33,]  3.267963782  1.392973e+00 #>  [34,]  3.383057253  1.492643e+00 #>  [35,]  3.482071683  1.589005e+00 #>  [36,]  3.564915697  1.681362e+00 #>  [37,]  3.631582343  1.769040e+00 #>  [38,]  3.682147928  1.851395e+00 #>  [39,]  3.716770372  1.927811e+00 #>  [40,]  3.735687085  1.997711e+00 #>  [41,]  3.739212390  2.060557e+00 #>  [42,]  3.727734519  2.115855e+00 #>  [43,]  3.701712184  2.163158e+00 #>  [44,]  3.661670782  2.202072e+00 #>  [45,]  3.608198236  2.232254e+00 #>  [46,]  3.541940509  2.253418e+00 #>  [47,]  3.463596839  2.265338e+00 #>  [48,]  3.373914701  2.267845e+00 #>  [49,]  3.273684558  2.260832e+00 #>  [50,]  3.163734428  2.244255e+00 #>  [51,]  3.044924295  2.218130e+00 #>  [52,]  2.918140422  2.182539e+00 #>  [53,]  2.784289581  2.137621e+00 #>  [54,]  2.644293265  2.083581e+00 #>  [55,]  2.499081894  2.020679e+00 #>  [56,]  2.349589075  1.949237e+00 #>  [57,]  2.196745937  1.869630e+00 #>  [58,]  2.041475583  1.782289e+00 #>  [59,]  1.884687703  1.687693e+00 #>  [60,]  1.727273364  1.586370e+00 #>  [61,]  1.570100018  1.478893e+00 #>  [62,]  1.414006763  1.365873e+00 #>  [63,]  1.259799875  1.247959e+00 #>  [64,]  1.108248641  1.125831e+00 #>  [65,]  0.960081515  1.000197e+00 #>  [66,]  0.815982618  8.717886e-01 #>  [67,]  0.676588603  7.413547e-01 #>  [68,]  0.542485892  6.096580e-01 #>  [69,]  0.414208305  4.774694e-01 #>  [70,]  0.292235085  3.455634e-01 #>  [71,]  0.176989328  2.147129e-01 #>  [72,]  0.068836826  8.568446e-02 #>  [73,] -0.031914693 -4.076659e-02 #>  [74,] -0.125015907 -1.639010e-01 #>  [75,] -0.210275850 -2.830002e-01 #>  [76,] -0.287561464 -3.973705e-01 #>  [77,] -0.356796774 -5.063479e-01 #>  [78,] -0.417961694 -6.093015e-01 #>  [79,] -0.471090475 -7.056376e-01 #>  [80,] -0.516269827 -7.948032e-01 #>  [81,] -0.553636720 -8.762891e-01 #>  [82,] -0.583375898 -9.496328e-01 #>  [83,] -0.605717121 -1.014421e+00 #>  [84,] -0.620932169 -1.070293e+00 #>  [85,] -0.629331624 -1.116939e+00 #>  [86,] -0.631261470 -1.154105e+00 #>  [87,] -0.627099534 -1.181595e+00 #>  [88,] -0.617251795 -1.199267e+00 #>  [89,] -0.602148591 -1.207036e+00 #>  [90,] -0.582240768 -1.204875e+00 #>  [91,] -0.557995780 -1.192811e+00 #>  [92,] -0.529893781 -1.170930e+00 #>  [93,] -0.498423747 -1.139369e+00 #>  [94,] -0.464079635 -1.098320e+00 #>  [95,] -0.427356630 -1.048023e+00 #>  [96,] -0.388747489 -9.887688e-01 #>  [97,] -0.348739018 -9.208941e-01 #>  [98,] -0.307808706 -8.447780e-01 #>  [99,] -0.266421528 -7.608402e-01 #> [100,] -0.225026950 -6.695371e-01 #> [101,] -0.184056148 -5.713584e-01 #> [102,] -0.143919460 -4.668239e-01 #> [103,] -0.105004083 -3.564786e-01 #> [104,] -0.067672028 -2.408900e-01 #> [105,] -0.032258349 -1.206429e-01 #> [106,]  0.000930360  3.663704e-03 #> [107,]  0.031617179  1.314216e-01 #> [108,]  0.059555797  2.620170e-01 #> [109,]  0.084531157  3.948349e-01 #> [110,]  0.106359826  5.292628e-01 #> [111,]  0.124890076  6.646951e-01 #> [112,]  0.140001702  8.005368e-01 #> [113,]  0.151605574  9.362071e-01 #> [114,]  0.159642930  1.071143e+00 #> [115,]  0.164084435  1.204802e+00 #> [116,]  0.164929016  1.336668e+00 #> [117,]  0.162202475  1.466249e+00 #> [118,]  0.155955923  1.593086e+00 #> [119,]  0.146264033  1.716749e+00 #> [120,]  0.133223137  1.836846e+00 #> [121,]  0.116949199  1.953017e+00 #> [122,]  0.097575667  2.064943e+00 #> [123,]  0.075251245  2.172341e+00 #> [124,]  0.050137591  2.274971e+00 #> [125,]  0.022406980  2.372629e+00 #> [126,] -0.007760058  2.465155e+00 #> [127,] -0.040177094  2.552427e+00 #> [128,] -0.074654133  2.634364e+00 #> [129,] -0.110999897  2.710924e+00 #> [130,] -0.149024040  2.782103e+00 #> [131,] -0.188539275  2.847934e+00 #> [132,] -0.229363393  2.908485e+00 #> [133,] -0.271321155  2.963859e+00 #> [134,] -0.314246041  3.014189e+00 #> [135,] -0.357981845  3.059637e+00 #> [136,] -0.402384096  3.100393e+00 #> [137,] -0.447321296  3.136673e+00 #> [138,] -0.492675970  3.168710e+00 #> [139,] -0.538345508  3.196760e+00 #> [140,] -0.584242813  3.221092e+00 #> [141,] -0.630296726  3.241990e+00 #> [142,] -0.676452245  3.259746e+00 #> [143,] -0.722670536  3.274659e+00 #> [144,] -0.768928722  3.287031e+00 #> [145,] -0.815219480  3.297166e+00 #> [146,] -0.861550426  3.305363e+00 #> [147,] -0.907943314  3.311917e+00 #> [148,] -0.954433052  3.317116e+00 #> [149,] -1.001066541  3.321233e+00 #> [150,] -1.047901360  3.324532e+00 #> [151,] -1.095004306  3.327258e+00 #> [152,] -1.142449802  3.329639e+00 #> [153,] -1.190318193  3.331882e+00 #> [154,] -1.238693949  3.334174e+00 #> [155,] -1.287663792  3.336676e+00 #> [156,] -1.337314765  3.339528e+00 #> [157,] -1.387732261  3.342839e+00 #> [158,] -1.438998042  3.346696e+00 #> [159,] -1.491188260  3.351156e+00 #> [160,] -1.544371493  3.356251e+00 #> [161,] -1.598606842  3.361983e+00 #> [162,] -1.653942074  3.368329e+00 #> [163,] -1.710411865  3.375238e+00 #> [164,] -1.768036130  3.382633e+00 #> [165,] -1.826818484  3.390412e+00 #> [166,] -1.886744835  3.398450e+00 #> [167,] -1.947782128  3.406598e+00 #> [168,] -2.009877256  3.414689e+00 #> [169,] -2.072956149  3.422533e+00 #> [170,] -2.136923057  3.429927e+00 #> [171,] -2.201660027  3.436652e+00 #> [172,] -2.267026591  3.442474e+00 #> [173,] -2.332859667  3.447151e+00 #> [174,] -2.398973676  3.450435e+00 #> [175,] -2.465160879  3.452068e+00 #> [176,] -2.531191939  3.451794e+00 #> [177,] -2.596816695  3.449354e+00 #> [178,] -2.661765154  3.444494e+00 #> [179,] -2.725748693  3.436964e+00 #> [180,] -2.788461461  3.426521e+00 #> [181,] -2.849581979  3.412935e+00 #> [182,] -2.908774916  3.395985e+00 #> [183,] -2.965693039  3.375468e+00 #> [184,] -3.019979320  3.351197e+00 #> [185,] -3.071269177  3.323005e+00 #> [186,] -3.119192842  3.290745e+00 #> [187,] -3.163377841  3.254293e+00 #> [188,] -3.203451545  3.213552e+00 #> [189,] -3.239043804  3.168446e+00 #> [190,] -3.269789615  3.118929e+00 #> [191,] -3.295331819  3.064983e+00 #> [192,] -3.315323806  3.006617e+00 #> [193,] -3.329432188  2.943869e+00 #> [194,] -3.337339447  2.876805e+00 #> [195,] -3.338746512  2.805523e+00 #> [196,] -3.333375252  2.730147e+00 #> [197,] -3.320970870  2.650830e+00 #> [198,] -3.301304172  2.567752e+00 #> [199,] -3.274173686  2.481120e+00 #> [200,] -3.239407629  2.391167e+00 #> [201,] -3.196865687  2.298148e+00 #> [202,] -3.146440608  2.202341e+00 #> [203,] -3.088059580  2.104048e+00 #> [204,] -3.021685390  2.003584e+00 #> [205,] -2.947317354  1.901284e+00 #> [206,] -2.864991998  1.797499e+00 #> [207,] -2.774783494  1.692590e+00 #> [208,] -2.676803843  1.586927e+00 #> [209,] -2.571202796  1.480890e+00 #> [210,] -2.458167516  1.374862e+00 #> [211,] -2.337921982  1.269229e+00 #> [212,] -2.210726134  1.164378e+00 #> [213,] -2.076874767  1.060692e+00 #> [214,] -1.936696174  9.585491e-01 #> [215,] -1.790550564  8.583193e-01 #> [216,] -1.638828235  7.603634e-01 #> [217,] -1.481947546  6.650295e-01 #> [218,] -1.320352681  5.726511e-01 #> [219,] -1.154511226  4.835452e-01 #> [220,] -0.984911582  3.980103e-01 #> [221,] -0.812060220  3.163244e-01 #> [222,] -0.636478812  2.387439e-01 #> [223,] -0.458701243  1.655015e-01 #> [224,] -0.279270541  9.680565e-02 #> [225,] -0.098735734  3.283887e-02 #> [226,]  0.082351332 -2.624263e-02 #> [227,]  0.263439206 -8.030977e-02 #> [228,]  0.443980029 -1.292610e-01 #> [229,]  0.623432721 -1.730224e-01 #> [230,]  0.801266107 -2.115477e-01 #> [231,]  0.976961978 -2.448184e-01 #> [232,]  1.150018056 -2.728425e-01 #> [233,]  1.319950846 -2.956548e-01 #> [234,]  1.486298345 -3.133153e-01 #> [235,]  1.648622604 -3.259088e-01 #> [236,]  1.806512109 -3.335429e-01 #> [237,]  1.959583970 -3.363477e-01 #> [238,]  2.107485904 -3.344731e-01 #> [239,]  2.249897996 -3.280880e-01 #> [240,]  2.386534221 -3.173782e-01 #> [241,]  2.517143730 -3.025445e-01 #> [242,]  2.641511868 -2.838008e-01 #> [243,]  2.759460944 -2.613717e-01 #> [244,]  2.870850727 -2.354911e-01 #> [245,]  2.975578676 -2.063994e-01 #> [246,]  3.073579898 -1.743418e-01 #> [247,]  3.164826842 -1.395657e-01 #> [248,]  3.249328723 -1.023190e-01 #> [249,]  3.327130692 -6.284809e-02 #> [250,]  3.398312748 -2.139530e-02 #> [251,]  3.462988412  2.180249e-02 #> [252,]  3.521303171  6.651593e-02 #> [253,]  3.573432693  1.125248e-01 #> [254,]  3.619580855  1.596199e-01 #> [255,]  3.659977569  2.076038e-01 #> [256,]  3.694876447  2.562932e-01 #> [257,]  3.724552310  3.055188e-01 #> [258,]  3.749298571  3.551275e-01 #> [259,]  3.769424505  4.049823e-01 #> [260,]  3.785252431  4.549631e-01 #> [261,]  3.797114832  5.049672e-01 #> [262,]  3.805351432  5.549097e-01 #> [263,]  3.810306249  6.047228e-01 #> [264,]  3.812324661  6.543565e-01 #> [265,]  3.811750493  7.037775e-01 #> [266,]  3.808923154  7.529688e-01 #> [267,]  3.804174856  8.019294e-01 #> [268,]  3.797827914  8.506726e-01 #> [269,]  3.790192174  8.992255e-01 #> [270,]  3.781562572  9.476275e-01 #> [271,]  3.772216846  9.959287e-01 #> [272,]  3.762413426  1.044189e+00 #> [273,]  3.752389504  1.092476e+00 #> [274,]  3.742359318  1.140863e+00 #> [275,]  3.732512645  1.189428e+00 #> [276,]  3.723013520  1.238250e+00 #> [277,]  3.713999198  1.287412e+00 #> [278,]  3.705579358  1.336990e+00 #> [279,]  3.697835550  1.387062e+00 #> [280,]  3.690820904  1.437697e+00 #> [281,]  3.684560088  1.488959e+00 #> [282,]  3.679049519  1.540900e+00 #> [283,]  3.674257826  1.593565e+00 #> [284,]  3.670126556  1.646983e+00 #> [285,]  3.666571124  1.701171e+00 #> [286,]  3.663481986  1.756129e+00 #> [287,]  3.660726033  1.811841e+00 #> [288,]  3.658148195  1.868273e+00 #> [289,]  3.655573232  1.925372e+00 #> [290,]  3.652807708  1.983065e+00 #> [291,]  3.649642117  2.041258e+00 #> [292,]  3.645853154  2.099837e+00 #> [293,]  3.641206113  2.158667e+00 #> [294,]  3.635457372  2.217592e+00 #> [295,]  3.628356972  2.276435e+00 #> [296,]  3.619651246  2.335000e+00 #> [297,]  3.609085484  2.393070e+00 #> [298,]  3.596406612  2.450409e+00 #> [299,]  3.581365857  2.506766e+00 #> [300,]  3.563721386  2.561871e+00 #> [301,]  3.543240883  2.615441e+00 #> [302,]  3.519704048  2.667179e+00 #> [303,]  3.492905004  2.716779e+00 #> [304,]  3.462654575  2.763923e+00 #> [305,]  3.428782438  2.808289e+00 #> [306,]  3.391139102  2.849548e+00 #> [307,]  3.349597726  2.887372e+00 #> [308,]  3.304055742  2.921431e+00 #> [309,]  3.254436270  2.951399e+00 #> [310,]  3.200689328  2.976956e+00 #> [311,]  3.142792800  2.997792e+00 #> [312,]  3.080753184  3.013605e+00 #> [313,]  3.014606088  3.024111e+00 #> [314,]  2.944416478  3.029039e+00 #> [315,]  2.870278686  3.028141e+00 #> [316,]  2.792316158  3.021188e+00 #> [317,]  2.710680960  3.007976e+00 #> [318,]  2.625553034  2.988330e+00 #> [319,]  2.537139220  2.962102e+00 #> [320,]  2.445672038  2.929173e+00 #> [321,]  2.351408260  2.889461e+00 #> [322,]  2.254627259  2.842915e+00 #> [323,]  2.155629168  2.789522e+00 #> [324,]  2.054732853  2.729304e+00 #> [325,]  1.952273723  2.662321e+00 #> [326,]  1.848601387  2.588674e+00 #> [327,]  1.744077187  2.508499e+00 #> [328,]  1.639071619  2.421975e+00 #> [329,]  1.533961667  2.329317e+00 #> [330,]  1.429128070  2.230778e+00 #> [331,]  1.324952549  2.126652e+00 #> [332,]  1.221815014  2.017265e+00 #> [333,]  1.120090768  1.902982e+00 #> [334,]  1.020147745  1.784200e+00 #> [335,]  0.922343796  1.661348e+00 #> [336,]  0.827024043  1.534883e+00 #> [337,]  0.734518334  1.405291e+00 #> [338,]  0.645138807  1.273083e+00 #> [339,]  0.559177600  1.138791e+00 #> [340,]  0.476904708  1.002964e+00 #> [341,]  0.398566021  8.661696e-01 #> [342,]  0.324381551  7.289846e-01 #> [343,]  0.254543865  5.919958e-01 #> [344,]  0.189216744  4.557947e-01 #> [345,]  0.128534065  3.209738e-01 #> [346,]  0.072598937  1.881230e-01 #> [347,]  0.021483077  5.782568e-02 #> [348,] -0.024773551 -6.934495e-02 #> [349,] -0.066162841 -1.928298e-01 #> [350,] -0.102708380 -3.120876e-01 #> [351,] -0.134465034 -4.265987e-01 #> [352,] -0.161518265 -5.358683e-01 #> [353,] -0.183983198 -6.394304e-01 #> [354,] -0.202003441 -7.368507e-01 #> [355,] -0.215749669 -8.277298e-01 #> [356,] -0.225417978 -9.117059e-01 #> [357,] -0.231228029 -9.884580e-01 #> [358,] -0.233420990 -1.057708e+00 #> [359,] -0.232257302 -1.119221e+00 #> [360,] -0.228014273 -1.172813e+00 #> [361,] -0.220983540 -1.218343e+00 #> [362,] -0.211468397 -1.255725e+00 #> [363,] -0.199781029 -1.284918e+00 #> [364,] -0.186239670 -1.305936e+00 #> [365,] -0.171165703 -1.318842e+00 #> [366,] -0.154880737 -1.323751e+00 #> [367,] -0.137703676 -1.320828e+00 #> [368,] -0.119947813 -1.310286e+00 #> [369,] -0.101917969 -1.292390e+00 #> [370,] -0.083907703 -1.267447e+00 #> [371,] -0.066196621 -1.235813e+00 #> [372,] -0.049047805 -1.197883e+00 #> [373,] -0.032705378 -1.154094e+00 #> [374,] -0.017392248 -1.104919e+00 #> [375,] -0.003308021 -1.050866e+00 #> [376,]  0.009372866 -9.924735e-01 #> [377,]  0.020502798 -9.303053e-01 #> [378,]  0.029962396 -8.649498e-01 #> [379,]  0.037661667 -7.970141e-01 #> [380,]  0.043540906 -7.271203e-01 #> [381,]  0.047571307 -6.559008e-01 #> [382,]  0.049755300 -5.839945e-01 #> [383,]  0.050126593 -5.120419e-01 #> [384,]  0.048749926 -4.406810e-01 #> [385,]  0.045720529 -3.705422e-01 #> [386,]  0.041163292 -3.022446e-01 #> [387,]  0.035231645 -2.363908e-01 #> [388,]  0.028106155 -1.735634e-01 #> [389,]  0.019992857 -1.143202e-01 #> [390,]  0.011121318 -5.919034e-02 #> [391,]  0.001742456 -8.670729e-03 #> [392,] -0.007873869  3.677790e-02 #> [393,] -0.017441487  7.673421e-02 #> [394,] -0.026660735  1.108194e-01 #> [395,] -0.035221452  1.387000e-01 #> [396,] -0.042806122  1.600905e-01 #> [397,] -0.049093143  1.747553e-01 #> [398,] -0.053760193  1.825106e-01 #> [399,] -0.056487671  1.832260e-01 #> [400,] -0.056962178  1.768255e-01 #> [401,] -0.054880017  1.632880e-01 #> [402,] -0.049950676  1.426479e-01 #> [403,] -0.041900270  1.149949e-01 #> [404,] -0.030474909  8.047325e-02 #> [405,] -0.015443962  3.928130e-02 #> [406,]  0.003396802 -8.330104e-03 #> [407,]  0.026222243 -6.205918e-02 #> [408,]  0.053175058 -1.215553e-01 #> [409,]  0.084363200 -1.864212e-01 #> [410,]  0.119857537 -2.562160e-01 #> [411,]  0.159689775 -3.304580e-01 #> [412,]  0.203850648 -4.086285e-01 #> [413,]  0.252288427 -4.901746e-01 #> [414,]  0.304907735 -5.745141e-01 #> [415,]  0.361568698 -6.610389e-01 #> [416,]  0.422086443 -7.491195e-01 #> [417,]  0.486230956 -8.381099e-01 #> [418,]  0.553727293 -9.273516e-01 #> [419,]  0.624256173 -1.016179e+00 #> [420,]  0.697454933 -1.103923e+00 #> [421,]  0.772918855 -1.189917e+00 #> [422,]  0.850202861 -1.273503e+00 #> [423,]  0.928823565 -1.354032e+00 #> [424,]  1.008261682 -1.430874e+00 #> [425,]  1.087964768 -1.503418e+00 #> [426,]  1.167350287 -1.571081e+00 #> [427,]  1.245808989 -1.633307e+00 #> [428,]  1.322708566 -1.689576e+00 #> [429,]  1.397397580 -1.739407e+00 #> [430,]  1.469209627 -1.782357e+00 #> [431,]  1.537467710 -1.818031e+00 #> [432,]  1.601488808 -1.846081e+00 #> [433,]  1.660588581 -1.866207e+00 #> [434,]  1.714086213 -1.878166e+00 #> [435,]  1.761309336 -1.881767e+00 #> [436,]  1.801599004 -1.876876e+00 #> [437,]  1.834314694 -1.863415e+00 #> [438,]  1.858839286 -1.841367e+00 #> [439,]  1.874583988 -1.810772e+00 #> [440,]  1.880993174 -1.771726e+00 #> [441,]  1.877549095 -1.724387e+00 #> [442,]  1.863776434 -1.668967e+00 #> [443,]  1.839246654 -1.605735e+00 #> [444,]  1.803582132 -1.535012e+00 #> [445,]  1.756460015 -1.457173e+00 #> [446,]  1.697615797 -1.372639e+00 #> [447,]  1.626846559 -1.281880e+00 #> [448,]  1.544013874 -1.185407e+00 #> [449,]  1.449046324 -1.083772e+00 #> [450,]  1.341941624 -9.775617e-01 #> [451,]  1.222768332 -8.673937e-01 #> [452,]  1.091667110 -7.539138e-01 #> [453,]  0.948851551 -6.377897e-01 #> [454,]  0.794608527 -5.197074e-01 #> [455,]  0.629298075 -4.003658e-01 #> [456,]  0.453352805 -2.804720e-01 #> [457,]  0.267276829 -1.607361e-01 #> [458,]  0.071644204 -4.186650e-02 #> [459,] -0.132903085  7.543553e-02 #> [460,] -0.345657620  1.904806e-01 #> [461,] -0.565849492  3.025960e-01 #> [462,] -0.792649690  4.111309e-01 #> [463,] -1.025173911  5.154605e-01 #> [464,] -1.262486771  6.149909e-01 #> [465,] -1.503606402  7.091629e-01 #> [466,] -1.747509396  7.974565e-01 #> [467,] -1.993136078  8.793942e-01 #> [468,] -2.239396075  9.545447e-01 #> [469,] -2.485174143  1.022526e+00 #> [470,] -2.729336218  1.083007e+00 #> [471,] -2.970735659  1.135712e+00 #> [472,] -3.208219638  1.180420e+00 #> [473,] -3.440635644  1.216971e+00 #> [474,] -3.666838049  1.245260e+00 #> [475,] -3.885694707  1.265244e+00 #> [476,] -4.096093533  1.276938e+00 #> [477,] -4.296949032  1.280420e+00 #> [478,] -4.487208720  1.275823e+00 #> [479,] -4.665859408  1.263341e+00 #> [480,] -4.831933307  1.243224e+00 #> [481,] -4.984513904  1.215777e+00 #> [482,] -5.122741581  1.181357e+00 #> [483,] -5.245818935  1.140372e+00 #> [484,] -5.353015765  1.093276e+00 #> [485,] -5.443673693  1.040568e+00 #> [486,] -5.517210379  9.827848e-01 #> [487,] -5.573123322  9.205018e-01 #> [488,] -5.610993200  8.543250e-01 #> [489,] -5.630486731  7.848879e-01 #> [490,] -5.631359050  7.128469e-01 #> [491,] -5.613455564  6.388764e-01 #> [492,] -5.576713280  5.636637e-01 #> [493,] -5.521161607  4.879042e-01 #> [494,] -5.446922605  4.122960e-01 #> [495,] -5.354210692  3.375352e-01 #> [496,] -5.243331809  2.643103e-01 #> [497,] -5.114682038  1.932973e-01 #> [498,] -4.968745690  1.251549e-01 #> [499,] -4.806092870  6.051937e-02 #> [500,] -4.627376537  1.133380e-15  # Butterflies of the vignette' cover panel(Out(a2l(replicate(100, sfourier_shape(nb.h=6, alpha=0.4, nb.pts=200, plot=FALSE)))))"},{"path":"http://momx.github.io/Momocs/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset based on positions — slice","title":"Subset based on positions — slice","text":"Select rows position, based $fac. See examples ?dplyr::slice.","code":""},{"path":"http://momx.github.io/Momocs/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset based on positions — slice","text":"","code":"slice(.data, ...)"},{"path":"http://momx.github.io/Momocs/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset based on positions — slice","text":".data Coo, Coe, PCA object ... logical conditions","code":""},{"path":"http://momx.github.io/Momocs/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset based on positions — slice","text":"Momocs object class.","code":""},{"path":"http://momx.github.io/Momocs/reference/slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset based on positions — slice","text":"dplyr verbs maintained.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset based on positions — slice","text":"","code":"olea #> Opn (curves) #>   - 210 curves, 99 +/- 4 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 210 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 204 more rows #>   - also: $ldk slice(olea, 1) # if you only want the coordinates, try bot[1] #> Opn (curves) #>   - 1 curves, 99 +/- NA coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 1 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #>   - also: $ldk slice(olea, 1:20) #> Opn (curves) #>   - 20 curves, 99 +/- 4 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 20 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O10   #> 2 Aglan cult  VL    O10   #> 3 Aglan cult  VD    O11   #> 4 Aglan cult  VL    O11   #> 5 Aglan cult  VD    O12   #> 6 Aglan cult  VL    O12   #> # ℹ 14 more rows #>   - also: $ldk slice(olea, 21:30) #> Opn (curves) #>   - 10 curves, 100 +/- 4 coords (in $coo) #>   - 4 classifiers (in $fac):  #> # A tibble: 10 × 4 #>   var   domes view  ind   #>   <fct> <fct> <fct> <fct> #> 1 Aglan cult  VD    O1    #> 2 Aglan cult  VL    O1    #> 3 Aglan cult  VD    O20   #> 4 Aglan cult  VL    O20   #> 5 Aglan cult  VD    O21   #> 6 Aglan cult  VL    O21   #> # ℹ 4 more rows #>   - also: $ldk"},{"path":"http://momx.github.io/Momocs/reference/slidings_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts partitions of sliding coordinates — slidings_scheme","title":"Extracts partitions of sliding coordinates — slidings_scheme","text":"Helper function deduces (likely reminder) partition scheme $slidings Ldk objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/slidings_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts partitions of sliding coordinates — slidings_scheme","text":"","code":"slidings_scheme(Coo)"},{"path":"http://momx.github.io/Momocs/reference/slidings_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts partitions of sliding coordinates — slidings_scheme","text":"Coo Ldk object","code":""},{"path":"http://momx.github.io/Momocs/reference/slidings_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts partitions of sliding coordinates — slidings_scheme","text":"list two components: n number partition; id position. NULL slidings defined","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/slidings_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts partitions of sliding coordinates — slidings_scheme","text":"","code":"# no slidings defined a NULL is returned with a message slidings_scheme(wings) #> no sliding defined #> NULL  # slidings defined slidings_scheme(chaff) #> $n #> [1] 4 #>  #> $id #>            start end #> partition1    13  52 #> partition2    53  92 #> partition3    93 132 #> partition4   133 172 #>"},{"path":"http://momx.github.io/Momocs/reference/stack.Coo.html","id":null,"dir":"Reference","previous_headings":"","what":"Family picture of shapes — stack","title":"Family picture of shapes — stack","text":"Plots outlines, graph, Coo (, Opn Ldk) object.","code":""},{"path":"http://momx.github.io/Momocs/reference/stack.Coo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family picture of shapes — stack","text":"","code":"# S3 method for Coo stack(   x,   cols,   borders,   fac,   palette = col_summer,   coo_sample = 120,   points = FALSE,   first.point = TRUE,   centroid = TRUE,   ldk = TRUE,   ldk_pch = 3,   ldk_col = \"#FF000055\",   ldk_cex = 0.5,   ldk_links = FALSE,   ldk_confell = FALSE,   ldk_contour = FALSE,   ldk_chull = FALSE,   ldk_labels = FALSE,   xy.axis = TRUE,   title = substitute(x),   ... )  # S3 method for Ldk stack(   x,   cols,   borders,   first.point = TRUE,   centroid = TRUE,   ldk = TRUE,   ldk_pch = 20,   ldk_col = col_alpha(\"#000000\", 0.5),   ldk_cex = 0.3,   meanshape = FALSE,   meanshape_col = \"#FF0000\",   ldk_links = FALSE,   ldk_confell = FALSE,   ldk_contour = FALSE,   ldk_chull = FALSE,   ldk_labels = FALSE,   slidings = TRUE,   slidings_pch = \"\",   xy.axis = TRUE,   title = substitute(x),   ... )"},{"path":"http://momx.github.io/Momocs/reference/stack.Coo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family picture of shapes — stack","text":"x Coo object plot. cols vector colors drawing outlines. Either single value length exactly equals number coordinates. borders vector colors drawing borders. Either single value length exactly equals number coordinates. fac factor within $fac slot colors palette color palette use fac provided coo_sample NULL number point per shape display (plot quickly) points logical whether draw points first.point logical whether draw first point centroid logical whether draw centroid ldk logical. Whether display landmarks (). ldk_pch pch landmarks ldk_col color landmarks ldk_cex cex landmarks ldk_links logical whether draw links (mean shape) ldk_confell logical whether draw conf ellipses ldk_contour logical whether draw contour lines ldk_chull logical whether draw convex hull ldk_labels logical whether draw landmark labels xy.axis whether draw x y axes title title plot. name Coo default ... arguments passed coo_plot meanshape logical whether add meanshape related stuff () meanshape_col color everything meanshape slidings logical whether draw slidings semi landmarks slidings_pch pch semi landmarks","code":""},{"path":"http://momx.github.io/Momocs/reference/stack.Coo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family picture of shapes — stack","text":"plot","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/stack.Coo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Family picture of shapes — stack","text":"","code":"# \\donttest{ stack(bot)  bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details stack(bot.f) #> Warning: non-vector elements will be ignored #> [1] ind #> <0 rows> (or 0-length row.names) stack(mosquito, borders='#1A1A1A22', first.point=FALSE)  stack(hearts)  stack(hearts, ldk=FALSE)  stack(hearts, borders='#1A1A1A22', ldk=TRUE, ldk_col=col_summer(4), ldk_pch=20)  stack(hearts, fac=\"aut\", palette=col_sari)   chaffal <- fgProcrustes(chaff) #> iteration:  1 \tgain: 75173  #> iteration:  2 \tgain: 0.037814  #> iteration:  3 \tgain: 0.0090566  #> iteration:  4 \tgain: 0.00034224  #> iteration:  5 \tgain: 0.0069657  #> iteration:  6 \tgain: 0.002451  #> iteration:  7 \tgain: 0.0006129  #> iteration:  8 \tgain: 4.8815e-05  #> iteration:  9 \tgain: 0.00046668  #> iteration:  10 \tgain: 0.00018849  #> iteration:  11 \tgain: 2.4521e-05  #> iteration:  12 \tgain: 2.9766e-06  #> iteration:  13 \tgain: 2.4553e-05  #> iteration:  14 \tgain: 6.3825e-06  #> iteration:  15 \tgain: 5.1105e-06  #> iteration:  16 \tgain: 8.2596e-07  #> iteration:  17 \tgain: 2.8678e-06  #> iteration:  18 \tgain: 2.0472e-06  #> iteration:  19 \tgain: 6.5232e-07  #> iteration:  20 \tgain: 1.1298e-07  #> iteration:  21 \tgain: 1.3908e-07  #> iteration:  22 \tgain: 2.8327e-07  #> iteration:  23 \tgain: 2.1788e-07  #> iteration:  24 \tgain: 4.5583e-08  #> iteration:  25 \tgain: 7.0497e-08  #> iteration:  26 \tgain: 8.9792e-08  #> iteration:  27 \tgain: 5.538e-08  #> iteration:  28 \tgain: 1.2621e-08  #> iteration:  29 \tgain: 1.503e-08  #> iteration:  30 \tgain: 2.2108e-08  #> iteration:  31 \tgain: 1.4865e-08  #> iteration:  32 \tgain: 3.7216e-09  #> iteration:  33 \tgain: 3.8289e-09  #> iteration:  34 \tgain: 5.7787e-09  #> iteration:  35 \tgain: 3.9287e-09  #> iteration:  36 \tgain: 1.0587e-09  #> iteration:  37 \tgain: 9.2591e-10  #> iteration:  38 \tgain: 1.4847e-09  #> iteration:  39 \tgain: 1.039e-09  #> iteration:  40 \tgain: 2.9925e-10  #> iteration:  41 \tgain: 2.2588e-10  #> iteration:  42 \tgain: 3.8255e-10  #> iteration:  43 \tgain: 2.7403e-10  #> iteration:  44 \tgain: 8.3666e-11  stack(chaffal, slidings=FALSE)  stack(chaffal, meanshape=TRUE, meanshape_col=\"blue\")  # }"},{"path":"http://momx.github.io/Momocs/reference/subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetize various Momocs objects — subsetize","title":"Subsetize various Momocs objects — subsetize","text":"Subsetize wrapper around dplyr's verbs used directly.","code":""},{"path":"http://momx.github.io/Momocs/reference/subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetize various Momocs objects — subsetize","text":"","code":"subsetize(x, subset, ...)"},{"path":"http://momx.github.io/Momocs/reference/subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetize various Momocs objects — subsetize","text":"x Coo Coe object. subset logical taken $fac slot, indices. See examples. ... useless maintains consistence generic subset.","code":""},{"path":"http://momx.github.io/Momocs/reference/subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetize various Momocs objects — subsetize","text":"subsetted object class","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetize various Momocs objects — subsetize","text":"","code":"# Do not use subset directly"},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Calcuates symmetry indices on OutCoe objects — symmetry","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":"OutCoe objects obtained efourier, calculates several indices matrix coefficients: AD, sum absolute values harmonic coefficients D; BC thing B C; amp sum absolute value harmonic coefficients sym ratio AD amp. See references details.","code":""},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":"","code":"symmetry(OutCoe)"},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":"OutCoe efourier objects","code":""},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":"matrix 4 colums described .","code":""},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":"call symmetry bilateral symmetry. comparing coefficients resulting efourier, AD responsible amplitude Fourier functions, BC phase, results plane fitted/reconstructed shapes symmetry. long shapes aligned along bilateral symmetry axis, can use approach coined Iwata et al., implemented Momocs.","code":""},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":": first mention, two applications. Iwata, H., Niikura, S., Matsuura, S., Takano, Y., & Ukai, Y. (1998). Evaluation variation root shape Japanese radish (Raphanus sativus L.) based image analysis using elliptic Fourier descriptors. Euphytica, 102, 143-149. Iwata, H., Nesumi, H., Ninomiya, S., Takano, Y., & Ukai, Y. (2002). Evaluation Genotype x Environment Interactions Citrus Leaf Morphology Using Image Analysis Elliptic Fourier Descriptors. Breeding Science, 52(2), 89-94. doi:10.1270/jsbbs.52.89 Yoshioka, Y., Iwata, H., Ohsawa, R., & Ninomiya, S. (2004). Analysis petal shape variation Primula sieboldii elliptic fourier descriptors principal component analysis. Annals Botany, 94(5), 657-64. doi:10.1093/aob/mch190","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/symmetry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calcuates symmetry indices on OutCoe objects — symmetry","text":"","code":"bot.f <- efourier(bot, 12) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details res <- symmetry(bot.f) hist(res[, 'sym'])"},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Tangent angle Fourier transform — tfourier","title":"Tangent angle Fourier transform — tfourier","text":"tfourier computes tangent angle Fourier analysis matrix list coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tangent angle Fourier transform — tfourier","text":"","code":"tfourier(x, ...)  # S3 method for default tfourier(x, nb.h, smooth.it = 0, norm = FALSE, ...)  # S3 method for Out tfourier(x, nb.h = 40, smooth.it = 0, norm = TRUE, ...)  # S3 method for list tfourier(x, ...)"},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tangent angle Fourier transform — tfourier","text":"x list matrix coordinates ... useless nb.h integer. number harmonics use. missing, 12 used shapes; 99 percent harmonic power objects, messages. smooth.integer. number smoothing iterations perform norm logical. Whether scale register new coordinates first point used sent origin.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tangent angle Fourier transform — tfourier","text":"list following components: ao ao harmonic coefficient vector \\(a_{1->n}\\) harmonic coefficients bn vector \\(b_{1->n}\\) harmonic coefficients phi vector variation tangent angle t vector distance along perimeter expressed radians perimeter numeric. perimeter outline thetao numeric. first tangent angle x1 x-coordinate first point y1 y-coordinate first point.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tangent angle Fourier transform — tfourier","text":"Silent message progress bars () options(\"verbose\"=FALSE). Directly borrowed Claude (2008), called fourier2 .","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tangent angle Fourier transform — tfourier","text":"Zahn CT, Roskies RZ. 1972. Fourier Descriptors Plane Closed Curves. IEEE Transactions Computers C-21: 269-281. Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tfourier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tangent angle Fourier transform — tfourier","text":"","code":"coo <- bot[1] coo_plot(coo) tf  <- tfourier(coo, 12) tf #> $ao #> [1] 7.733739 #>  #> $an #>  [1]  0.04522478 -0.37556233  0.02768553  0.94117330 -0.39901487 -0.77638246 #>  [7] -0.57686667  0.04409017 -0.76045376 -0.46366388 -0.60869408 -0.14084193 #>  #> $bn #>  [1]  0.008457058  2.526564125 -0.554083930  0.313312077 -0.288987146 #>  [6]  0.032821965 -0.226300468  0.409651090 -0.021830547  0.015586993 #> [11]  0.414880500  0.677636372 #>  #> $phi #>   [1] 0.00000000 0.03394792 6.12970584 6.22607257 6.18054224 6.19051042 #>   [7] 6.13580603 5.99700591 5.99842093 5.99084704 5.86041492 5.81488459 #>  [13] 5.76506244 5.62887223 5.58334190 5.53781157 5.39732954 5.35179921 #>  [19] 5.22136709 5.16746875 5.12193843 5.06723404 5.07720222 5.03804123 #>  [25] 5.03308691 5.08250829 5.03697796 5.17966914 5.21216935 5.41953309 #>  [31] 5.77457625 5.99961627 6.05629266 6.19411028 6.06367816 6.15041823 #>  [37] 6.20005411 6.10694068 6.10899345 6.11083173 6.24864935 6.21627616 #>  [43] 0.15041122 0.41687566 0.72706839 0.84208756 0.93719564 0.93924841 #>  [49] 0.94130119 0.84818776 0.80265743 0.85207881 0.75917987 0.75672633 #>  [55] 0.62053611 0.71690284 0.62442716 0.58361378 0.52907469 0.53478153 #>  [61] 0.44702280 0.39677552 0.39819054 0.39061666 0.21281593 0.16728561 #>  [67] 0.07417217 6.26424405 6.21871372 6.07886944 5.99538267 5.94148434 #>  [73] 5.89595401 5.85879168 5.85121780 5.90000142 6.00172285 5.85652387 #>  [79] 5.95289060 6.03171526 6.08391184 6.21482206 6.12821895 6.02776111 #>  [85] 5.90179053 5.77058090 5.73820771 5.54311764 5.45064197 5.40081982 #>  [91] 5.40652666 5.31405098 5.27323760 5.21869850 5.17746000 5.13664661 #>  [97] 5.13334469 5.04086901 4.99104686 4.62111347 5.01682255 4.60719411 #> [103] 5.30626827 6.00978848 6.15257805 6.15247100 6.15452378 6.10899345 #> [109] 6.19573352 0.50480943 1.60303743 0.87544326 1.21632143 1.02825629 #> [115] 1.03030907 0.88982703 0.79735136 0.79876638 0.84818776 0.70770572 #> [121] 0.61523005 0.51420121 0.66606644 0.52558441 0.48434590 0.34125395 #> [127] 0.16219458 0.14695801 6.24944229 6.18612024 6.12136151 6.11662487 #> [133] 6.17219791 6.26019663 0.02904262 0.07417217 0.07622495 0.08278017 #>  #> $t #>   [1] 0.00000000 0.04553033 0.09106066 0.13659098 0.18212131 0.22765164 #>   [7] 0.27318197 0.31871230 0.36424263 0.40977295 0.45530328 0.50083361 #>  [13] 0.54636394 0.59189427 0.63742460 0.68295492 0.72848525 0.77401558 #>  [19] 0.81954591 0.86507624 0.91060657 0.95613689 1.00166722 1.04719755 #>  [25] 1.09272788 1.13825821 1.18378854 1.22931886 1.27484919 1.32037952 #>  [31] 1.36590985 1.41144018 1.45697051 1.50250083 1.54803116 1.59356149 #>  [37] 1.63909182 1.68462215 1.73015248 1.77568280 1.82121313 1.86674346 #>  [43] 1.91227379 1.95780412 2.00333445 2.04886477 2.09439510 2.13992543 #>  [49] 2.18545576 2.23098609 2.27651642 2.32204674 2.36757707 2.41310740 #>  [55] 2.45863773 2.50416806 2.54969839 2.59522871 2.64075904 2.68628937 #>  [61] 2.73181970 2.77735003 2.82288036 2.86841068 2.91394101 2.95947134 #>  [67] 3.00500167 3.05053200 3.09606233 3.14159265 3.18712298 3.23265331 #>  [73] 3.27818364 3.32371397 3.36924430 3.41477462 3.46030495 3.50583528 #>  [79] 3.55136561 3.59689594 3.64242627 3.68795659 3.73348692 3.77901725 #>  [85] 3.82454758 3.87007791 3.91560823 3.96113856 4.00666889 4.05219922 #>  [91] 4.09772955 4.14325988 4.18879020 4.23432053 4.27985086 4.32538119 #>  [97] 4.37091152 4.41644185 4.46197217 4.50750250 4.55303283 4.59856316 #> [103] 4.64409349 4.68962382 4.73515414 4.78068447 4.82621480 4.87174513 #> [109] 4.91727546 4.96280579 5.00833611 5.05386644 5.09939677 5.14492710 #> [115] 5.19045743 5.23598776 5.28151808 5.32704841 5.37257874 5.41810907 #> [121] 5.46363940 5.50916973 5.55470005 5.60023038 5.64576071 5.69129104 #> [127] 5.73682137 5.78235170 5.82788202 5.87341235 5.91894268 5.96447301 #> [133] 6.01000334 6.05553367 6.10106399 6.14659432 6.19212465 6.23765498 #>  #> $perimeter #> [1] 2513.886 #>  #> $thetao #> [1] -1.508378 #>  #> $x1 #> [1] 37 #>  #> $y1 #> [1] 561 #>  tfi <- tfourier_i(tf) coo_draw(tfi, border='red', col=NA) # the outline is not closed... coo_draw(tfourier_i(tf, force2close=TRUE), border='blue', col=NA) # we force it to close."},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse tangent angle Fourier transform — tfourier_i","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"tfourier_i uses inverse tangent angle Fourier transformation calculate shape, given list Fourier coefficients, typically obtained computed tfourier.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"","code":"tfourier_i(   tf,   nb.h,   nb.pts = 120,   force2close = FALSE,   rescale = TRUE,   perim = 2 * pi,   thetao = 0 )"},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"tf list ao, bn components, typically returned tfourier nb.h integer. number harmonics calculate/use nb.pts integer. number points calculate force2close logical. Whether force outlines calculated close (see coo_force2close). rescale logical. Whether rescale points calculated perimeter equals perim. perim perimeter length rescale shapes. thetao numeric. Radius angle reference (radians)","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"list components: x vector x-coordinates. y vector y-coordinates. phi vector interpolated changes tangent angle. angle vector position perimeter (radians).","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"See tfourier mathematical background.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"Directly borrowed Claude (2008), called ifourier2 .","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"Zahn CT, Roskies RZ. 1972. Fourier Descriptors Plane Closed Curves. IEEE Transactions Computers C-21: 269-281. Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tfourier_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse tangent angle Fourier transform — tfourier_i","text":"","code":"tfourier(bot[1], 24) #> $ao #> [1] 7.733739 #>  #> $an #>  [1]  0.0452247795 -0.3755623338  0.0276855331  0.9411732992 -0.3990148731 #>  [6] -0.7763824605 -0.5768666699  0.0440901651 -0.7604537570 -0.4636638848 #> [11] -0.6086940781 -0.1408419257 -0.2906453466  0.1360186290 -0.2905320818 #> [16] -0.0013913889  0.0999975983  0.2531539067 -0.2409440735 -0.0107735036 #> [21] -0.0386305555 -0.0238992918 -0.1631252535 -0.0004085881 #>  #> $bn #>  [1]  0.008457058  2.526564125 -0.554083930  0.313312077 -0.288987146 #>  [6]  0.032821965 -0.226300468  0.409651090 -0.021830547  0.015586993 #> [11]  0.414880500  0.677636372  0.197011887  0.180444429  0.433515510 #> [16]  0.237573437  0.107717915  0.027571558  0.054653201 -0.170505441 #> [21]  0.130595490 -0.014178384 -0.048221455 -0.127039009 #>  #> $phi #>   [1] 0.00000000 0.03394792 6.12970584 6.22607257 6.18054224 6.19051042 #>   [7] 6.13580603 5.99700591 5.99842093 5.99084704 5.86041492 5.81488459 #>  [13] 5.76506244 5.62887223 5.58334190 5.53781157 5.39732954 5.35179921 #>  [19] 5.22136709 5.16746875 5.12193843 5.06723404 5.07720222 5.03804123 #>  [25] 5.03308691 5.08250829 5.03697796 5.17966914 5.21216935 5.41953309 #>  [31] 5.77457625 5.99961627 6.05629266 6.19411028 6.06367816 6.15041823 #>  [37] 6.20005411 6.10694068 6.10899345 6.11083173 6.24864935 6.21627616 #>  [43] 0.15041122 0.41687566 0.72706839 0.84208756 0.93719564 0.93924841 #>  [49] 0.94130119 0.84818776 0.80265743 0.85207881 0.75917987 0.75672633 #>  [55] 0.62053611 0.71690284 0.62442716 0.58361378 0.52907469 0.53478153 #>  [61] 0.44702280 0.39677552 0.39819054 0.39061666 0.21281593 0.16728561 #>  [67] 0.07417217 6.26424405 6.21871372 6.07886944 5.99538267 5.94148434 #>  [73] 5.89595401 5.85879168 5.85121780 5.90000142 6.00172285 5.85652387 #>  [79] 5.95289060 6.03171526 6.08391184 6.21482206 6.12821895 6.02776111 #>  [85] 5.90179053 5.77058090 5.73820771 5.54311764 5.45064197 5.40081982 #>  [91] 5.40652666 5.31405098 5.27323760 5.21869850 5.17746000 5.13664661 #>  [97] 5.13334469 5.04086901 4.99104686 4.62111347 5.01682255 4.60719411 #> [103] 5.30626827 6.00978848 6.15257805 6.15247100 6.15452378 6.10899345 #> [109] 6.19573352 0.50480943 1.60303743 0.87544326 1.21632143 1.02825629 #> [115] 1.03030907 0.88982703 0.79735136 0.79876638 0.84818776 0.70770572 #> [121] 0.61523005 0.51420121 0.66606644 0.52558441 0.48434590 0.34125395 #> [127] 0.16219458 0.14695801 6.24944229 6.18612024 6.12136151 6.11662487 #> [133] 6.17219791 6.26019663 0.02904262 0.07417217 0.07622495 0.08278017 #>  #> $t #>   [1] 0.00000000 0.04553033 0.09106066 0.13659098 0.18212131 0.22765164 #>   [7] 0.27318197 0.31871230 0.36424263 0.40977295 0.45530328 0.50083361 #>  [13] 0.54636394 0.59189427 0.63742460 0.68295492 0.72848525 0.77401558 #>  [19] 0.81954591 0.86507624 0.91060657 0.95613689 1.00166722 1.04719755 #>  [25] 1.09272788 1.13825821 1.18378854 1.22931886 1.27484919 1.32037952 #>  [31] 1.36590985 1.41144018 1.45697051 1.50250083 1.54803116 1.59356149 #>  [37] 1.63909182 1.68462215 1.73015248 1.77568280 1.82121313 1.86674346 #>  [43] 1.91227379 1.95780412 2.00333445 2.04886477 2.09439510 2.13992543 #>  [49] 2.18545576 2.23098609 2.27651642 2.32204674 2.36757707 2.41310740 #>  [55] 2.45863773 2.50416806 2.54969839 2.59522871 2.64075904 2.68628937 #>  [61] 2.73181970 2.77735003 2.82288036 2.86841068 2.91394101 2.95947134 #>  [67] 3.00500167 3.05053200 3.09606233 3.14159265 3.18712298 3.23265331 #>  [73] 3.27818364 3.32371397 3.36924430 3.41477462 3.46030495 3.50583528 #>  [79] 3.55136561 3.59689594 3.64242627 3.68795659 3.73348692 3.77901725 #>  [85] 3.82454758 3.87007791 3.91560823 3.96113856 4.00666889 4.05219922 #>  [91] 4.09772955 4.14325988 4.18879020 4.23432053 4.27985086 4.32538119 #>  [97] 4.37091152 4.41644185 4.46197217 4.50750250 4.55303283 4.59856316 #> [103] 4.64409349 4.68962382 4.73515414 4.78068447 4.82621480 4.87174513 #> [109] 4.91727546 4.96280579 5.00833611 5.05386644 5.09939677 5.14492710 #> [115] 5.19045743 5.23598776 5.28151808 5.32704841 5.37257874 5.41810907 #> [121] 5.46363940 5.50916973 5.55470005 5.60023038 5.64576071 5.69129104 #> [127] 5.73682137 5.78235170 5.82788202 5.87341235 5.91894268 5.96447301 #> [133] 6.01000334 6.05553367 6.10106399 6.14659432 6.19212465 6.23765498 #>  #> $perimeter #> [1] 2513.886 #>  #> $thetao #> [1] -1.508378 #>  #> $x1 #> [1] 37 #>  #> $y1 #> [1] 561 #>  tfourier_shape()  #>                 x            y #>  [1,]  0.09561277 -0.004814825 #>  [2,]  0.17323630  0.012512711 #>  [3,]  0.24247674  0.051646046 #>  [4,]  0.29748929  0.109085359 #>  [5,]  0.33385352  0.179819356 #>  [6,]  0.34893838  0.257909706 #>  [7,]  0.34202693  0.337142828 #>  [8,]  0.31420461  0.411651714 #>  [9,]  0.26805270  0.476425605 #> [10,]  0.20721414  0.527653777 #> [11,]  0.13590836  0.562883614 #> [12,]  0.05846627  0.581004809 #> [13,] -0.02106025  0.582095153 #> [14,] -0.09918242  0.567175968 #> [15,] -0.17314294  0.537927066 #> [16,] -0.24097751  0.496404468 #> [17,] -0.30149084  0.444792525 #> [18,] -0.35417340  0.385208942 #> [19,] -0.39908549  0.319569319 #> [20,] -0.43673077  0.249508712 #> [21,] -0.46793577  0.176352003 #> [22,] -0.49374533  0.101122207 #> [23,] -0.51533859  0.024575573 #> [24,] -0.53396545 -0.052746453 #> [25,] -0.55090089 -0.130456468 #> [26,] -0.56741250 -0.208257641 #> [27,] -0.58473615 -0.285882037 #> [28,] -0.60405502 -0.363034076 #> [29,] -0.62647771 -0.439341866 #> [30,] -0.65301277 -0.514318839 #> [31,] -0.68453815 -0.587338057 #> [32,] -0.72176597 -0.657621374 #> [33,] -0.76520472 -0.724245173 #> [34,] -0.81512229 -0.786163607 #> [35,] -0.87151466 -0.842248868 #> [36,] -0.93408535 -0.891346370 #> [37,] -1.00224041 -0.932340801 #> [38,] -1.07510266 -0.964227287 #> [39,] -1.15154679 -0.986180670 #> [40,] -1.23025448 -0.997615508 #> [41,] -1.30978610 -0.998229998 #> [42,] -1.38866314 -0.988028677 #> [43,] -1.46545414 -0.967321231 #> [44,] -1.53885612 -0.936697614 #> [45,] -1.60776454 -0.896982570 #> [46,] -1.67132626 -0.849175003 #> [47,] -1.72897228 -0.794379083 #> [48,] -1.78042991 -0.733734485 #> [49,] -1.82571635 -0.668352569 #> [50,] -1.86511718 -0.599264002 #> [51,] -1.89915498 -0.527381571 #> [52,] -1.92855271 -0.453480087 #> [53,] -1.95419642 -0.378193596 #> [54,] -1.97710051 -0.302028917 #> [55,] -1.99837709 -0.225393658 #> [56,] -2.01920947 -0.148636458 #> [57,] -2.04082810 -0.072096988 #> [58,] -2.06448584  0.003836979 #> [59,] -2.09142827  0.078668531 #> [60,] -2.12285438  0.151730528 #> [61,] -2.15986277  0.222129640 #> [62,] -2.20337967  0.288702417 #> [63,] -2.25406724  0.349992107 #> [64,] -2.31221382  0.404256561 #> [65,] -2.37761297  0.449518103 #> [66,] -2.44944361  0.483665071 #> [67,] -2.52616994  0.504610845 #> [68,] -2.60548492  0.510509188 #> [69,] -2.68432347  0.500014501 #> [70,] -2.75896986  0.472563240 #> [71,] -2.82527534  0.428640136 #> [72,] -2.87898770  0.369983183 #> [73,] -2.91617419  0.299677983 #> [74,] -2.93369646  0.222098182 #> [75,] -2.92967593  0.142665876 #> [76,] -2.90387517  0.067433061 #> [77,] -2.85792168  0.002518250 #> [78,] -2.79531652 -0.046535279 #> [79,] -2.72120119 -0.075389641 #> [80,] -2.64189714 -0.081433142"},{"path":"http://momx.github.io/Momocs/reference/tfourier_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and draws 'tfourier' shapes. — tfourier_shape","title":"Calculates and draws 'tfourier' shapes. — tfourier_shape","text":"tfourier_shape calculates 'Fourier tangent angle shape' given Fourier coefficients (see Details) can generate 'tfourier' shapes.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and draws 'tfourier' shapes. — tfourier_shape","text":"","code":"tfourier_shape(an, bn, ao = 0, nb.h, nb.pts = 80, alpha = 2, plot = TRUE)"},{"path":"http://momx.github.io/Momocs/reference/tfourier_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and draws 'tfourier' shapes. — tfourier_shape","text":"numeric. \\(a_n\\) Fourier coefficients calculate shape. bn numeric. \\(b_n\\) Fourier coefficients calculate shape. ao ao Harmonic coefficient. nb.h integer. number harmonics use. nb.pts integer. number points calculate. alpha numeric. power coefficient associated (usually decreasing) amplitude Fourier coefficients (see Details). plot logical. Whether plot shape.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and draws 'tfourier' shapes. — tfourier_shape","text":"matrix (x; y) coordinates.","code":""},{"path":"http://momx.github.io/Momocs/reference/tfourier_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates and draws 'tfourier' shapes. — tfourier_shape","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tfourier_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and draws 'tfourier' shapes. — tfourier_shape","text":"","code":"tf <- tfourier(bot[1], 24) tfourier_shape(tf$an, tf$bn) # equivalent to rfourier_i(rf)  #>                  x           y #>  [1,] -0.068536123  0.03816985 #>  [2,]  0.010421770  0.02861438 #>  [3,] -0.063790622  0.05721817 #>  [4,] -0.140579972  0.07793172 #>  [5,] -0.183238239  0.14505793 #>  [6,] -0.247181702  0.19235370 #>  [7,] -0.320133871  0.22403393 #>  [8,] -0.368197883  0.28740195 #>  [9,] -0.418456077  0.34904422 #> [10,] -0.483991433  0.39410832 #> [11,] -0.527015593  0.46100060 #> [12,] -0.558482563  0.53404501 #> [13,] -0.615378810  0.58961904 #> [14,] -0.666002527  0.65096148 #> [15,] -0.703250243  0.72123426 #> [16,] -0.768466384  0.76675910 #> [17,] -0.843721723  0.79249409 #> [18,] -0.920086430  0.81472216 #> [19,] -0.990492372  0.77772677 #> [20,] -1.035089701  0.71187289 #> [21,] -1.107991534  0.68007700 #> [22,] -1.173409209  0.63484224 #> [23,] -1.172271234  0.55531639 #> [24,] -1.245117865  0.52339423 #> [25,] -1.169306190  0.54744097 #> [26,] -1.166890972  0.46794366 #> [27,] -1.134401707  0.39534818 #> [28,] -1.068636587  0.35062006 #> [29,] -1.007856315  0.29932275 #> [30,] -0.955597746  0.23936695 #> [31,] -0.898595892  0.18390125 #> [32,] -0.832707879  0.13935435 #> [33,] -0.769939719  0.09050956 #> [34,] -0.718591641  0.02977217 #> [35,] -0.653105984 -0.01536412 #> [36,] -0.579711689 -0.04600613 #> [37,] -0.541356302 -0.11568052 #> [38,] -0.489158357 -0.17568911 #> [39,] -0.526675851 -0.10555999 #> [40,] -0.483094002 -0.17209027 #> [41,] -0.411233403 -0.20617413 #> [42,] -0.384991638 -0.28125426 #> [43,] -0.346581120 -0.35089827 #> [44,] -0.281483742 -0.39659277 #> [45,] -0.223918101 -0.45147312 #> [46,] -0.163346561 -0.50301673 #> [47,] -0.086698985 -0.52424890 #> [48,] -0.009264515 -0.54240265 #> [49,]  0.061119622 -0.57943951 #> [50,]  0.129392040 -0.62023819 #> [51,]  0.196505793 -0.66291605 #> [52,]  0.256624481 -0.71498715 #> [53,]  0.315395180 -0.76857503 #> [54,]  0.379092808 -0.81620137 #> [55,]  0.442596932 -0.86408541 #> [56,]  0.501564226 -0.91745689 #> [57,]  0.558878373 -0.97259983 #> [58,]  0.616862632 -1.02703770 #> [59,]  0.683127662 -1.07102180 #> [60,]  0.761505112 -1.05750770 #> [61,]  0.789105491 -0.98291631 #> [62,]  0.836639557 -0.91914980 #> [63,]  0.850183366 -0.99752212 #> [64,]  0.787935223 -0.94801632 #> [65,]  0.760460379 -0.87337860 #> [66,]  0.699791505 -0.82194959 #> [67,]  0.638226839 -0.77159636 #> [68,]  0.596708767 -0.70375901 #> [69,]  0.552733618 -0.63748804 #> [70,]  0.492705339 -0.58531274 #> [71,]  0.437325328 -0.52822763 #> [72,]  0.414799359 -0.45195026 #> [73,]  0.364582422 -0.39027438 #> [74,]  0.378601540 -0.46856307 #> [75,]  0.344461362 -0.39672921 #> [76,]  0.268368346 -0.37358815 #> [77,]  0.341471182 -0.34225716 #> [78,]  0.264568188 -0.36254472 #> [79,]  0.260420375 -0.28311896 #> [80,]  0.189614910 -0.24689408 tfourier_shape()  #>                 x          y #>  [1,] 0.001516715 0.05327275 #>  [2,] 0.015779539 0.13151742 #>  [3,] 0.030251198 0.20972373 #>  [4,] 0.045538391 0.28777472 #>  [5,] 0.062199796 0.36554395 #>  [6,] 0.080739961 0.44288681 #>  [7,] 0.101603447 0.51963556 #>  [8,] 0.125169341 0.59559808 #>  [9,] 0.151746433 0.67056016 #> [10,] 0.181569435 0.74429105 #> [11,] 0.214796683 0.81655173 #> [12,] 0.251509688 0.88710534 #> [13,] 0.291714820 0.95572897 #> [14,] 0.335347235 1.02222610 #> [15,] 0.382276925 1.08643872 #> [16,] 0.432316607 1.14825850 #> [17,] 0.485230944 1.20763635 #> [18,] 0.540746428 1.26458972 #> [19,] 0.598561178 1.31920758 #> [20,] 0.658353875 1.37165269 #> [21,] 0.719791053 1.42216139 #> [22,] 0.782532121 1.47104098 #> [23,] 0.846231576 1.51866487 #> [24,] 0.910538094 1.56546580 #> [25,] 0.975090367 1.61192718 #> [26,] 1.039509789 1.65857259 #> [27,] 1.103390319 1.70595332 #> [28,] 1.166286114 1.75463365 #> [29,] 1.227697771 1.80517338 #> [30,] 1.287058321 1.85810712 #> [31,] 1.343720418 1.91391987 #> [32,] 1.396946475 1.97301845 #> [33,] 1.445903783 2.03569889 #> [34,] 1.489666884 2.10211009 #> [35,] 1.527229520 2.17221504 #> [36,] 1.557528380 2.24575166 #> [37,] 1.579480384 2.32219618 #> [38,] 1.592034458 2.40073312 #> [39,] 1.594237457 2.48023660 #> [40,] 1.585312261 2.55926822 #> [41,] 1.564744045 2.63609662 #> [42,] 1.532368623 2.70874295 #> [43,] 1.488454817 2.77505458 #> [44,] 1.433771343 2.83280728 #> [45,] 1.369628237 2.87983193 #> [46,] 1.297883552 2.91415912 #> [47,] 1.220908256 2.93417060 #> [48,] 1.141505884 2.93874434 #> [49,] 1.062788251 2.92737817 #> [50,] 0.988013858 2.90027751 #> [51,] 0.920400814 2.85839515 #> [52,] 0.862930169 2.80341533 #> [53,] 0.818157940 2.73768023 #> [54,] 0.788054092 2.66406356 #> [55,] 0.773884313 2.58580199 #> [56,] 0.776145825 2.50630016 #> [57,] 0.794562342 2.42892776 #> [58,] 0.828136648 2.35682768 #> [59,] 0.875253046 2.29275194 #> [60,] 0.933817055 2.23893825 #> [61,] 1.001416873 2.19703455 #> [62,] 1.075490376 2.16807299 #> [63,] 1.153482821 2.15248985 #> [64,] 1.232983360 2.15018335 #> [65,] 1.311832391 2.16059902 #> [66,] 1.388195950 2.18283104 #> [67,] 1.460607221 2.21572881 #> [68,] 1.527978325 2.25799925 #> [69,] 1.589587611 2.30829788 #> [70,] 1.645048769 2.36530416 #> [71,] 1.694268193 2.42777898 #> [72,] 1.737396454 2.49460419 #> [73,] 1.774778736 2.56480548 #> [74,] 1.806907834 2.63756108 #> [75,] 1.834382083 2.71219901 #> [76,] 1.857869426 2.78818586 #> [77,] 1.878077959 2.86510966 #> [78,] 1.895732549 2.94265946 #> [79,] 1.911556753 3.02060335 #> [80,] 1.926258977 3.09876664 tfourier_shape(nb.h=6, alpha=0.4, nb.pts=500)  #>                   x           y #>   [1,] -0.002108631 -0.01142224 #>   [2,] -0.002501370 -0.02400767 #>   [3,] -0.001880612 -0.03658391 #>   [4,] -0.000235429 -0.04906752 #>   [5,]  0.002435011 -0.06137264 #>   [6,]  0.006121025 -0.07341260 #>   [7,]  0.010802278 -0.08510161 #>   [8,]  0.016447951 -0.09635655 #>   [9,]  0.023017214 -0.10709862 #>  [10,]  0.030460003 -0.11725500 #>  [11,]  0.038718070 -0.12676034 #>  [12,]  0.047726285 -0.13555803 #>  [13,]  0.057414131 -0.14360122 #>  [14,]  0.067707341 -0.15085360 #>  [15,]  0.078529617 -0.15728987 #>  [16,]  0.089804362 -0.16289588 #>  [17,]  0.101456362 -0.16766852 #>  [18,]  0.113413364 -0.17161534 #>  [19,]  0.125607495 -0.17475387 #>  [20,]  0.137976476 -0.17711088 #>  [21,]  0.150464609 -0.17872140 #>  [22,]  0.163023508 -0.17962766 #>  [23,]  0.175612571 -0.17987805 #>  [24,]  0.188199205 -0.17952609 #>  [25,]  0.200758787 -0.17862936 #>  [26,]  0.213274414 -0.17724866 #>  [27,]  0.225736438 -0.17544723 #>  [28,]  0.238141825 -0.17329001 #>  [29,]  0.250493362 -0.17084322 #>  [30,]  0.262798730 -0.16817392 #>  [31,]  0.275069481 -0.16534976 #>  [32,]  0.287319934 -0.16243881 #>  [33,]  0.299566006 -0.15950949 #>  [34,]  0.311824005 -0.15663048 #>  [35,]  0.324109401 -0.15387072 #>  [36,]  0.336435595 -0.15129931 #>  [37,]  0.348812707 -0.14898537 #>  [38,]  0.361246402 -0.14699779 #>  [39,]  0.373736791 -0.14540487 #>  [40,]  0.386277437 -0.14427376 #>  [41,]  0.398854497 -0.14366977 #>  [42,]  0.411446043 -0.14365552 #>  [43,]  0.424021608 -0.14428985 #>  [44,]  0.436541994 -0.14562670 #>  [45,]  0.448959372 -0.14771379 #>  [46,]  0.461217720 -0.15059131 #>  [47,]  0.473253593 -0.15429063 #>  [48,]  0.484997259 -0.15883305 #>  [49,]  0.496374148 -0.16422875 #>  [50,]  0.507306617 -0.17047602 #>  [51,]  0.517715948 -0.17756073 #>  [52,]  0.527524516 -0.18545625 #>  [53,]  0.536658044 -0.19412376 #>  [54,]  0.545047831 -0.20351305 #>  [55,]  0.552632860 -0.21356365 #>  [56,]  0.559361680 -0.22420650 #>  [57,]  0.565193974 -0.23536587 #>  [58,]  0.570101738 -0.24696161 #>  [59,]  0.574070028 -0.25891150 #>  [60,]  0.577097246 -0.27113374 #>  [61,]  0.579194980 -0.28354932 #>  [62,]  0.580387426 -0.29608429 #>  [63,]  0.580710458 -0.30867169 #>  [64,]  0.580210428 -0.32125332 #>  [65,]  0.578942782 -0.33378090 #>  [66,]  0.576970590 -0.34621704 #>  [67,]  0.574363104 -0.35853566 #>  [68,]  0.571194404 -0.37072198 #>  [69,]  0.567542236 -0.38277225 #>  [70,]  0.563487083 -0.39469294 #>  [71,]  0.559111504 -0.40649978 #>  [72,]  0.554499769 -0.41821640 #>  [73,]  0.549737758 -0.42987275 #>  [74,]  0.544913126 -0.44150332 #>  [75,]  0.540115641 -0.45314511 #>  [76,]  0.535437656 -0.46483544 #>  [77,]  0.530974607 -0.47660950 #>  [78,]  0.526825428 -0.48849779 #>  [79,]  0.523092770 -0.50052337 #>  [80,]  0.519882881 -0.51269891 #>  [81,]  0.517305016 -0.52502376 #>  [82,]  0.515470246 -0.53748092 #>  [83,]  0.514489542 -0.55003422 #>  [84,]  0.514471047 -0.56262576 #>  [85,]  0.515516483 -0.57517384 #>  [86,]  0.517716714 -0.58757167 #>  [87,]  0.521146550 -0.59968709 #>  [88,]  0.525858973 -0.61136358 #>  [89,]  0.531879072 -0.62242276 #>  [90,]  0.539198072 -0.63266871 #>  [91,]  0.547767920 -0.64189395 #>  [92,]  0.557496962 -0.64988725 #>  [93,]  0.568247269 -0.65644302 #>  [94,]  0.579834122 -0.66137172 #>  [95,]  0.592028072 -0.66451096 #>  [96,]  0.604559851 -0.66573642 #>  [97,]  0.617128167 -0.66497179 #>  [98,]  0.629410174 -0.66219699 #>  [99,]  0.641074135 -0.65745365 #> [100,]  0.651793556 -0.65084750 #> [101,]  0.661261840 -0.64254697 #> [102,]  0.669206437 -0.63277811 #> [103,]  0.675401403 -0.62181592 #> [104,]  0.679677420 -0.60997266 #> [105,]  0.681928498 -0.59758396 #> [106,]  0.682114907 -0.58499378 #> [107,]  0.680262169 -0.57253928 #> [108,]  0.676456337 -0.56053666 #> [109,]  0.670836064 -0.54926902 #> [110,]  0.663582217 -0.53897684 #> [111,]  0.654905955 -0.52985162 #> [112,]  0.645036211 -0.52203271 #> [113,]  0.634207485 -0.51560730 #> [114,]  0.622648728 -0.51061306 #> [115,]  0.610573885 -0.50704299 #> [116,]  0.598174478 -0.50485167 #> [117,]  0.585614369 -0.50396235 #> [118,]  0.573026679 -0.50427430 #> [119,]  0.560512676 -0.50566962 #> [120,]  0.548142331 -0.50801947 #> [121,]  0.535956240 -0.51118908 #> [122,]  0.523968541 -0.51504165 #> [123,]  0.512170530 -0.51944099 #> [124,]  0.500534721 -0.52425297 #> [125,]  0.489019154 -0.52934600 #> [126,]  0.477571821 -0.53459059 #> [127,]  0.466135158 -0.53985842 #> [128,]  0.454650578 -0.54502094 #> [129,]  0.443063052 -0.54994806 #> [130,]  0.431325750 -0.55450689 #> [131,]  0.419404746 -0.55856113 #> [132,]  0.407283721 -0.56197112 #> [133,]  0.394968576 -0.56459493 #> [134,]  0.382491745 -0.56629079 #> [135,]  0.369915957 -0.56692069 #> [136,]  0.357337087 -0.56635567 #> [137,]  0.344885689 -0.56448219 #> [138,]  0.332726775 -0.56120988 #> [139,]  0.321057428 -0.55647981 #> [140,]  0.310101919 -0.55027303 #> [141,]  0.300104155 -0.54261850 #> [142,]  0.291317498 -0.53359952 #> [143,]  0.283992284 -0.52335801 #> [144,]  0.278361630 -0.51209556 #> [145,]  0.274626457 -0.50007076 #> [146,]  0.272940836 -0.48759254 #> [147,]  0.273398923 -0.47500933 #> [148,]  0.276024756 -0.46269461 #> [149,]  0.280766008 -0.45102980 #> [150,]  0.287492512 -0.44038549 #> [151,]  0.295999944 -0.43110266 #> [152,]  0.306018542 -0.42347542 #> [153,]  0.317226259 -0.41773657 #> [154,]  0.329265267 -0.41404747 #> [155,]  0.341760448 -0.41249258 #> [156,]  0.354338320 -0.41307940 #> [157,]  0.366644877 -0.41574321 #> [158,]  0.378361032 -0.42035612 #> [159,]  0.389214654 -0.42673939 #> [160,]  0.398988640 -0.43467768 #> [161,]  0.407524855 -0.44393404 #> [162,]  0.414724200 -0.45426441 #> [163,]  0.420543388 -0.46543063 #> [164,]  0.424989183 -0.47721121 #> [165,]  0.428111009 -0.48940963 #> [166,]  0.429992784 -0.50185977 #> [167,]  0.430744760 -0.51442885 #> [168,]  0.430495992 -0.52701795 #> [169,]  0.429387899 -0.53956065 #> [170,]  0.427569155 -0.55202016 #> [171,]  0.425192036 -0.56438529 #> [172,]  0.422410135 -0.57666570 #> [173,]  0.419377309 -0.58888655 #> [174,]  0.416247586 -0.60108294 #> [175,]  0.413175701 -0.61329403 #> [176,]  0.410317926 -0.62555700 #> [177,]  0.407832766 -0.63790087 #> [178,]  0.405881126 -0.65034026 #> [179,]  0.404625544 -0.66286906 #> [180,]  0.404228078 -0.67545433 #> [181,]  0.404846527 -0.68803069 #> [182,]  0.406628741 -0.70049548 #> [183,]  0.409704904 -0.71270549 #> [184,]  0.414177929 -0.72447576 #> [185,]  0.420112297 -0.73558119 #> [186,]  0.427522044 -0.74576170 #> [187,]  0.436358881 -0.75473152 #> [188,]  0.446501744 -0.76219272 #> [189,]  0.457749287 -0.76785311 #> [190,]  0.469816892 -0.77144757 #> [191,]  0.482339680 -0.77276172 #> [192,]  0.494882596 -0.77165606 #> [193,]  0.506958073 -0.76808813 #> [194,]  0.518050962 -0.76213036 #> [195,]  0.527649444 -0.75398074 #> [196,]  0.535279762 -0.74396448 #> [197,]  0.540541754 -0.73252513 #> [198,]  0.543141751 -0.72020493 #> [199,]  0.542919276 -0.70761535 #> [200,]  0.539864452 -0.69539998 #> [201,]  0.534123851 -0.68419316 #> [202,]  0.525993794 -0.67457810 #> [203,]  0.515901498 -0.66704864 #> [204,]  0.504375878 -0.66197840 #> [205,]  0.492010966 -0.65960013 #> [206,]  0.479425663 -0.65999683 #> [207,]  0.467223760 -0.66310501 #> [208,]  0.455957927 -0.66872891 #> [209,]  0.446100612 -0.67656348 #> [210,]  0.438023807 -0.68622332 #> [211,]  0.431988473 -0.69727420 #> [212,]  0.428143312 -0.70926428 #> [213,]  0.426531705 -0.72175227 #> [214,]  0.427104949 -0.73433077 #> [215,]  0.429739668 -0.74664358 #> [216,]  0.434257236 -0.75839683 #> [217,]  0.440443280 -0.76936406 #> [218,]  0.448065724 -0.77938631 #> [219,]  0.456890287 -0.78836820 #> [220,]  0.466692836 -0.79627119 #> [221,]  0.477268369 -0.80310532 #> [222,]  0.488436766 -0.80892031 #> [223,]  0.500045641 -0.81379692 #> [224,]  0.511970771 -0.81783901 #> [225,]  0.524114613 -0.82116682 #> [226,]  0.536403406 -0.82391141 #> [227,]  0.548783310 -0.82621037 #> [228,]  0.561215938 -0.82820461 #> [229,]  0.573673589 -0.83003604 #> [230,]  0.586134395 -0.83184588 #> [231,]  0.598577552 -0.83377333 #> [232,]  0.610978787 -0.83595430 #> [233,]  0.623306164 -0.83852003 #> [234,]  0.635516378 -0.84159540 #> [235,]  0.647551648 -0.84529669 #> [236,]  0.659337383 -0.84972881 #> [237,]  0.670780778 -0.85498199 #> [238,]  0.681770502 -0.86112798 #> [239,]  0.692177644 -0.86821590 #> [240,]  0.701858022 -0.87626808 #> [241,]  0.710655912 -0.88527609 #> [242,]  0.718409155 -0.89519750 #> [243,]  0.724955505 -0.90595355 #> [244,]  0.730139942 -0.91742826 #> [245,]  0.733822593 -0.92946924 #> [246,]  0.735886755 -0.94189045 #> [247,]  0.736246485 -0.95447686 #> [248,]  0.734853191 -0.96699109 #> [249,]  0.731700665 -0.97918162 #> [250,]  0.726828117 -0.99079219 #> [251,]  0.720320890 -1.00157195 #> [252,]  0.712308702 -1.01128545 #> [253,]  0.702961483 -1.01972208 #> [254,]  0.692483056 -1.02670419 #> [255,]  0.681103074 -1.03209336 #> [256,]  0.669067787 -1.03579459 #> [257,]  0.656630248 -1.03775797 #> [258,]  0.644040618 -1.03797807 #> [259,]  0.631537164 -1.03649117 #> [260,]  0.619338444 -1.03337052 #> [261,]  0.607637044 -1.02872031 #> [262,]  0.596595093 -1.02266865 #> [263,]  0.586341602 -1.01536022 #> [264,]  0.576971545 -1.00694897 #> [265,]  0.568546501 -0.99759130 #> [266,]  0.561096561 -0.98744016 #> [267,]  0.554623200 -0.97664003 #> [268,]  0.549102776 -0.96532314 #> [269,]  0.544490327 -0.95360680 #> [270,]  0.540723423 -0.94159191 #> [271,]  0.537725823 -0.92936237 #> [272,]  0.535410781 -0.91698546 #> [273,]  0.533683915 -0.90451289 #> [274,]  0.532445562 -0.89198237 #> [275,]  0.531592646 -0.87941974 #> [276,]  0.531020085 -0.86684121 #> [277,]  0.530621809 -0.85425596 #> [278,]  0.530291482 -0.84166874 #> [279,]  0.529923029 -0.82908258 #> [280,]  0.529411080 -0.81650143 #> [281,]  0.528651442 -0.80393282 #> [282,]  0.527541696 -0.79139026 #> [283,]  0.525982022 -0.77889568 #> [284,]  0.523876323 -0.76648144 #> [285,]  0.521133697 -0.75419221 #> [286,]  0.517670309 -0.74208633 #> [287,]  0.513411637 -0.73023682 #> [288,]  0.508295074 -0.71873169 #> [289,]  0.502272813 -0.70767368 #> [290,]  0.495314891 -0.69717918 #> [291,]  0.487412261 -0.68737634 #> [292,]  0.478579699 -0.67840232 #> [293,]  0.468858353 -0.67039965 #> [294,]  0.458317700 -0.66351185 #> [295,]  0.447056714 -0.65787825 #> [296,]  0.435204029 -0.65362842 #> [297,]  0.422916946 -0.65087618 #> [298,]  0.410379171 -0.64971368 #> [299,]  0.397797234 -0.65020571 #> [300,]  0.385395646 -0.65238467 #> [301,]  0.373410891 -0.65624639 #> [302,]  0.362084473 -0.66174725 #> [303,]  0.351655298 -0.66880271 #> [304,]  0.342351713 -0.67728743 #> [305,]  0.334383602 -0.68703712 #> [306,]  0.327934909 -0.69785200 #> [307,]  0.323156973 -0.70950183 #> [308,]  0.320163022 -0.72173226 #> [309,]  0.319024073 -0.73427220 #> [310,]  0.319766469 -0.74684185 #> [311,]  0.322371111 -0.75916106 #> [312,]  0.326774422 -0.77095759 #> [313,]  0.332870930 -0.78197484 #> [314,]  0.340517297 -0.79197886 #> [315,]  0.349537559 -0.80076419 #> [316,]  0.359729272 -0.80815853 #> [317,]  0.370870249 -0.81402588 #> [318,]  0.382725564 -0.81826837 #> [319,]  0.395054502 -0.82082660 #> [320,]  0.407617192 -0.82167868 #> [321,]  0.420180664 -0.82083821 #> [322,]  0.432524164 -0.81835119 #> [323,]  0.444443587 -0.81429230 #> [324,]  0.455754963 -0.80876057 #> [325,]  0.466296973 -0.80187485 #> [326,]  0.475932513 -0.79376907 #> [327,]  0.484549387 -0.78458775 #> [328,]  0.492060198 -0.77448156 #> [329,]  0.498401565 -0.76360341 #> [330,]  0.503532789 -0.75210481 #> [331,]  0.507434072 -0.74013287 #> [332,]  0.510104440 -0.72782774 #> [333,]  0.511559463 -0.71532054 #> [334,]  0.511828878 -0.70273186 #> [335,]  0.510954212 -0.69017073 #> [336,]  0.508986463 -0.67773388 #> [337,]  0.505983905 -0.66550556 #> [338,]  0.502010062 -0.65355751 #> [339,]  0.497131870 -0.64194930 #> [340,]  0.491418052 -0.63072881 #> [341,]  0.484937714 -0.61993286 #> [342,]  0.477759157 -0.60958803 #> [343,]  0.469948897 -0.59971144 #> [344,]  0.461570887 -0.59031164 #> [345,]  0.452685922 -0.58138950 #> [346,]  0.443351209 -0.57293903 #> [347,]  0.433620088 -0.56494826 #> [348,]  0.423541880 -0.55739995 #> [349,]  0.413161848 -0.55027239 #> [350,]  0.402521259 -0.54354000 #> [351,]  0.391657518 -0.53717397 #> [352,]  0.380604375 -0.53114277 #> [353,]  0.369392188 -0.52541267 #> [354,]  0.358048219 -0.51994809 #> [355,]  0.346596981 -0.51471203 #> [356,]  0.335060595 -0.50966634 #> [357,]  0.323459176 -0.50477202 #> [358,]  0.311811233 -0.49998949 #> [359,]  0.300134071 -0.49527874 #> [360,]  0.288444209 -0.49059960 #> [361,]  0.276757783 -0.48591189 #> [362,]  0.265090965 -0.48117558 #> [363,]  0.253460357 -0.47635104 #> [364,]  0.241883386 -0.47139918 #> [365,]  0.230378680 -0.46628166 #> [366,]  0.218966425 -0.46096117 #> [367,]  0.207668700 -0.45540162 #> [368,]  0.196509773 -0.44956847 #> [369,]  0.185516375 -0.44342906 #> [370,]  0.174717912 -0.43695291 #> [371,]  0.164146643 -0.43011219 #> [372,]  0.153837784 -0.42288207 #> [373,]  0.143829554 -0.41524122 #> [374,]  0.134163142 -0.40717229 #> [375,]  0.124882583 -0.39866238 #> [376,]  0.116034558 -0.38970361 #> [377,]  0.107668080 -0.38029354 #> [378,]  0.099834094 -0.37043576 #> [379,]  0.092584960 -0.36014026 #> [380,]  0.085973843 -0.34942390 #> [381,]  0.080054001 -0.33831073 #> [382,]  0.074877974 -0.32683223 #> [383,]  0.070496704 -0.31502749 #> [384,]  0.066958575 -0.30294325 #> [385,]  0.064308412 -0.29063375 #> [386,]  0.062586451 -0.27816050 #> [387,]  0.061827305 -0.26559185 #> [388,]  0.062058966 -0.25300243 #> [389,]  0.063301849 -0.24047236 #> [390,]  0.065567931 -0.22808640 #> [391,]  0.068860011 -0.21593282 #> [392,]  0.073171098 -0.20410228 #> [393,]  0.078483991 -0.19268648 #> [394,]  0.084771028 -0.18177684 #> [395,]  0.091994062 -0.17146301 #> [396,]  0.100104636 -0.16183151 #> [397,]  0.109044392 -0.15296427 #> [398,]  0.118745680 -0.14493730 #> [399,]  0.129132386 -0.13781946 #> [400,]  0.140120928 -0.13167136 #> [401,]  0.151621420 -0.12654438 #> [402,]  0.163538958 -0.12247996 #> [403,]  0.175775005 -0.11950904 #> [404,]  0.188228826 -0.11765174 #> [405,]  0.200798940 -0.11691726 #> [406,]  0.213384553 -0.11730400 #> [407,]  0.225886932 -0.11879991 #> [408,]  0.238210688 -0.12138298 #> [409,]  0.250264941 -0.12502196 #> [410,]  0.261964339 -0.12967721 #> [411,]  0.273229922 -0.13530161 #> [412,]  0.283989809 -0.14184165 #> [413,]  0.294179715 -0.14923847 #> [414,]  0.303743287 -0.15742903 #> [415,]  0.312632273 -0.16634717 #> [416,]  0.320806528 -0.17592469 #> [417,]  0.328233881 -0.18609236 #> [418,]  0.334889871 -0.19678091 #> [419,]  0.340757371 -0.20792181 #> [420,]  0.345826128 -0.21944808 #> [421,]  0.350092233 -0.23129492 #> [422,]  0.353557540 -0.24340024 #> [423,]  0.356229060 -0.25570513 #> [424,]  0.358118331 -0.26815414 #> [425,]  0.359240806 -0.28069556 #> [426,]  0.359615239 -0.29328155 #> [427,]  0.359263110 -0.30586818 #> [428,]  0.358208071 -0.31841545 #> [429,]  0.356475449 -0.33088723 #> [430,]  0.354091776 -0.34325110 #> [431,]  0.351084379 -0.35547823 #> [432,]  0.347481014 -0.36754318 #> [433,]  0.343309547 -0.37942367 #> [434,]  0.338597684 -0.39110039 #> [435,]  0.333372746 -0.40255670 #> [436,]  0.327661484 -0.41377850 #> [437,]  0.321489931 -0.42475389 #> [438,]  0.314883297 -0.43547301 #> [439,]  0.307865883 -0.44592783 #> [440,]  0.300461033 -0.45611190 #> [441,]  0.292691106 -0.46602026 #> [442,]  0.284577463 -0.47564917 #> [443,]  0.276140481 -0.48499607 #> [444,]  0.267399571 -0.49405939 #> [445,]  0.258373212 -0.50283846 #> [446,]  0.249078990 -0.51133344 #> [447,]  0.239533647 -0.51954524 #> [448,]  0.229753125 -0.52747547 #> [449,]  0.219752622 -0.53512643 #> [450,]  0.209546636 -0.54250105 #> [451,]  0.199149017 -0.54960294 #> [452,]  0.188573012 -0.55643634 #> [453,]  0.177831306 -0.56300619 #> [454,]  0.166936061 -0.56931815 #> [455,]  0.155898946 -0.57537863 #> [456,]  0.144731171 -0.58119481 #> [457,]  0.133443505 -0.58677476 #> [458,]  0.122046301 -0.59212742 #> [459,]  0.110549511 -0.59726269 #> [460,]  0.098962704 -0.60219150 #> [461,]  0.087295079 -0.60692582 #> [462,]  0.075555483 -0.61147874 #> [463,]  0.063752430 -0.61586453 #> [464,]  0.051894127 -0.62009866 #> [465,]  0.039988500 -0.62419784 #> [466,]  0.028043242 -0.62818006 #> [467,]  0.016065863 -0.63206459 #> [468,]  0.004063753 -0.63587203 #> [469,] -0.007955728 -0.63962427 #> [470,] -0.019985155 -0.64334450 #> [471,] -0.032016912 -0.64705719 #> [472,] -0.044043052 -0.65078803 #> [473,] -0.056055133 -0.65456389 #> [474,] -0.068044026 -0.65841274 #> [475,] -0.079999708 -0.66236355 #> [476,] -0.091911031 -0.66644615 #> [477,] -0.103765470 -0.67069109 #> [478,] -0.115548859 -0.67512944 #> [479,] -0.127245112 -0.67979258 #> [480,] -0.138835946 -0.68471191 #> [481,] -0.150300593 -0.68991855 #> [482,] -0.161615540 -0.69544297 #> [483,] -0.172754277 -0.70131458 #> [484,] -0.183687084 -0.70756125 #> [485,] -0.194380867 -0.71420883 #> [486,] -0.204799045 -0.72128052 #> [487,] -0.214901527 -0.72879630 #> [488,] -0.224644766 -0.73677230 #> [489,] -0.233981928 -0.74522006 #> [490,] -0.242863174 -0.75414590 #> [491,] -0.251236071 -0.76355025 #> [492,] -0.259046144 -0.77342699 #> [493,] -0.266237563 -0.78376289 #> [494,] -0.272753971 -0.79453710 #> [495,] -0.278539437 -0.80572082 #> [496,] -0.283539532 -0.81727704 #> [497,] -0.287702482 -0.82916052 #> [498,] -0.290980393 -0.84131793 #> [499,] -0.293330497 -0.85368823 #> [500,] -0.294716374 -0.86620328 panel(Out(a2l(replicate(100, coo_force2close(tfourier_shape(nb.h=6, alpha=2, nb.pts=200, plot=FALSE)))))) # biological shapes"},{"path":"http://momx.github.io/Momocs/reference/tie_jpg_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Binds .jpg outlines from .txt landmarks taken on them — tie_jpg_txt","title":"Binds .jpg outlines from .txt landmarks taken on them — tie_jpg_txt","text":"Given list files (lf) includes matching filenames .jpg (black masks) .txt (landmark positions .txt), returns $ldk defined. Typically useful use ImageJ define landmarks outlines.","code":""},{"path":"http://momx.github.io/Momocs/reference/tie_jpg_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binds .jpg outlines from .txt landmarks taken on them — tie_jpg_txt","text":"","code":"tie_jpg_txt(lf)"},{"path":"http://momx.github.io/Momocs/reference/tie_jpg_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binds .jpg outlines from .txt landmarks taken on them — tie_jpg_txt","text":"lf list filenames","code":""},{"path":"http://momx.github.io/Momocs/reference/tie_jpg_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binds .jpg outlines from .txt landmarks taken on them — tie_jpg_txt","text":"object","code":""},{"path":"http://momx.github.io/Momocs/reference/tie_jpg_txt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Binds .jpg outlines from .txt landmarks taken on them — tie_jpg_txt","text":"optimized (images read twice). Please hesitate contact particular case need something.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tps2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin Plate Splines for 2D data — tps2d","title":"Thin Plate Splines for 2D data — tps2d","text":"tps2d core function Thin Plate Splines. used internally TPS graphical functions.tps_apply function arguments properly named (maintain tps2d historical reasons) want apply trasnformation grid.","code":""},{"path":"http://momx.github.io/Momocs/reference/tps2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin Plate Splines for 2D data — tps2d","text":"","code":"tps2d(grid0, fr, to)  tps_apply(fr, to, new)"},{"path":"http://momx.github.io/Momocs/reference/tps2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin Plate Splines for 2D data — tps2d","text":"grid0 matrix coordinates calculate deformations fr reference shape target shape new shape apply shp1->shp2 calibrated tps trasnformation","code":""},{"path":"http://momx.github.io/Momocs/reference/tps2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin Plate Splines for 2D data — tps2d","text":"shape.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tps2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin Plate Splines for 2D data — tps2d","text":"","code":"shapes <- shapes %>%  coo_scale() %>% coo_center() %>%  coo_slidedirection(\"up\") %>%  coo_sample(64)  leaf1 <- shapes[14] leaf2 <- shapes[15]  # tps grid on the two leafs2 tps_grid(leaf1, leaf2) # apply the (leaf1 -> leaf2) tps trasnformation  onto leaf1 # (that thus get closer to leaf2) tps_apply(leaf1, leaf2, leaf1) %>% coo_draw(bor=\"purple\")"},{"path":"http://momx.github.io/Momocs/reference/tps_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Deformation 'vector field' using Thin Plate Splines — tps_arr","title":"Deformation 'vector field' using Thin Plate Splines — tps_arr","text":"tps_arr(ows) calculates deformations two configurations illustrate using arrows.","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deformation 'vector field' using Thin Plate Splines — tps_arr","text":"","code":"tps_arr(   fr,   to,   amp = 1,   grid = TRUE,   over = 1.2,   palette = col_summer,   arr.nb = 200,   arr.levels = 100,   arr.len = 0.1,   arr.ang = 20,   arr.lwd = 0.75,   arr.col = \"grey50\",   poly = TRUE,   shp = TRUE,   shp.col = rep(NA, 2),   shp.border = col_qual(2),   shp.lwd = c(2, 2),   shp.lty = c(1, 1),   legend = TRUE,   legend.text,   ... )"},{"path":"http://momx.github.io/Momocs/reference/tps_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deformation 'vector field' using Thin Plate Splines — tps_arr","text":"fr reference \\((x; y)\\) coordinates target \\((x; y)\\) coordinates amp amplification factor differences fr grid whether calculate plot changes across graphical window TRUE just within starting shape (FALSE) numeric indicates much thin plate splines extends shapes palette color palette included Momocs produced colorRampPalette arr.nb numeric number arrows calculate arr.levels numeric. number levels color arrows arr.len numeric length arrows arr.ang numeric angle arrows' heads arr.lwd numeric lwd drawing arrows arr.col palette used color arrows poly whether draw polygons (outlines) points (landmarks) shp logical. whether draw shapes shp.col two colors filling shapes shp.border two colors drawing borders shp.lwd two lwd drawing shapes shp.lty two lty fro drawing shapes legend logical whether plot legend legend.text text legend ... additional arguments feed coo_draw","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deformation 'vector field' using Thin Plate Splines — tps_arr","text":"Nothing.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tps_arr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deformation 'vector field' using Thin Plate Splines — tps_arr","text":"","code":"botF <- efourier(bot) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) x <- MSHAPES(botF, 'type', nb.pts=80)$shp fr <- x$beer to <- x$whisky tps_arr(fr, to, arr.nb=200, palette=col_sari, amp=3)  tps_arr(fr, to, arr.nb=200, palette=col_sari, amp=3, grid=FALSE)"},{"path":"http://momx.github.io/Momocs/reference/tps_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Deformation grids using Thin Plate Splines — tps_grid","title":"Deformation grids using Thin Plate Splines — tps_grid","text":"tps_grid calculates plots deformation grids two configurations.","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deformation grids using Thin Plate Splines — tps_grid","text":"","code":"tps_grid(   fr,   to,   amp = 1,   over = 1.2,   grid.size = 15,   grid.col = \"grey80\",   poly = TRUE,   shp = TRUE,   shp.col = rep(NA, 2),   shp.border = col_qual(2),   shp.lwd = c(1, 1),   shp.lty = c(1, 1),   legend = TRUE,   legend.text,   ... )"},{"path":"http://momx.github.io/Momocs/reference/tps_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deformation grids using Thin Plate Splines — tps_grid","text":"fr reference \\((x; y)\\) coordinates target \\((x; y)\\) coordinates amp amplification factor differences fr numeric indicates much thin plate splines extends shapes grid.size numeric specify number grid cells longer axis outlines grid.col color drawing grid poly whether draw polygons (outlines) points (landmarks) shp logical. Whether draw shapes shp.col Two colors filling shapes shp.border Two colors drawing borders shp.lwd Two lwd drawing shapes shp.lty Two lty fro drawing shapes legend logical whether plot legend legend.text text legend ... additional arguments feed coo_draw","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deformation grids using Thin Plate Splines — tps_grid","text":"Nothing","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tps_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deformation grids using Thin Plate Splines — tps_grid","text":"","code":"botF <- efourier(bot) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) x <- MSHAPES(botF, 'type', nb.pts=80)$shp fr <- x$beer to <- x$whisky tps_grid(fr, to, amp=3, grid.size=10)"},{"path":"http://momx.github.io/Momocs/reference/tps_iso.html","id":null,"dir":"Reference","previous_headings":"","what":"Deformation isolines using Thin Plate Splines. — tps_iso","title":"Deformation isolines using Thin Plate Splines. — tps_iso","text":"tps_iso calculates deformations two configurations map without isolines.","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_iso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deformation isolines using Thin Plate Splines. — tps_iso","text":"","code":"tps_iso(   fr,   to,   amp = 1,   grid = FALSE,   over = 1.2,   palette = col_spring,   iso.nb = 1000,   iso.levels = 12,   cont = TRUE,   cont.col = \"black\",   poly = TRUE,   shp = TRUE,   shp.border = col_qual(2),   shp.lwd = c(2, 2),   shp.lty = c(1, 1),   legend = TRUE,   legend.text,   ... )"},{"path":"http://momx.github.io/Momocs/reference/tps_iso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deformation isolines using Thin Plate Splines. — tps_iso","text":"fr reference \\((x; y)\\) coordinates target \\((x; y)\\) coordinates amp amplification factor differences fr grid whether calculate plot changes across graphical window TRUE just within starting shape (FALSE) numeric indicates much thin plate splines extends shapes palette color palette included Momocs produced colorRampPalette iso.nb numeric. number points use calculation deformation iso.levels numeric. number levels mapping deformations cont logical. Whether draw contour lines cont.col color drawing contour lines poly whether draw polygons (outlines) points (landmarks) shp logical. Whether draw shapes shp.border Two colors drawing borders shp.lwd Two lwd drawing shapes shp.lty Two lty fro drawing shapes legend logical whether plot legend legend.text text legend ... additional arguments feed coo_draw","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_iso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deformation isolines using Thin Plate Splines. — tps_iso","text":"returned value","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tps_iso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deformation isolines using Thin Plate Splines. — tps_iso","text":"","code":"botF <- efourier(bot) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) x <- MSHAPES(botF, 'type', nb.pts=80)$shp fr <- x$beer to <- x$whisky tps_iso(fr, to, iso.nb=200, amp=3)  tps_iso(fr, to, iso.nb=200, amp=3, grid=TRUE)"},{"path":"http://momx.github.io/Momocs/reference/tps_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Vanilla Thin Plate Splines — tps_raw","title":"Vanilla Thin Plate Splines — tps_raw","text":"tps_raw calculates deformation grids returns position sampled points .","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vanilla Thin Plate Splines — tps_raw","text":"","code":"tps_raw(fr, to, amp = 1, over = 1.2, grid.size = 15)"},{"path":"http://momx.github.io/Momocs/reference/tps_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vanilla Thin Plate Splines — tps_raw","text":"fr reference \\((x; y)\\) coordinates target \\((x; y)\\) coordinates amp amplification factor differences fr numeric indicates much thin plate splines extends shapes grid.size numeric specify number grid cells longer axis outlines","code":""},{"path":"http://momx.github.io/Momocs/reference/tps_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vanilla Thin Plate Splines — tps_raw","text":"list two components: grid xy coordinates sampled points along grid; dim dimension grid.","code":""},{"path":[]},{"path":"http://momx.github.io/Momocs/reference/tps_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vanilla Thin Plate Splines — tps_raw","text":"","code":"# \\donttest{ ms <- MSHAPES(efourier(bot, 10), \"type\") #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details b <- ms$shp$beer w <- ms$shp$whisky g <- tps_raw(b, w) ldk_plot(g$grid)   # a wavy plot ldk_plot(g$grid, pch=NA) cols_ids <- 1:g$dim[1] for (i in 1:g$dim[2]) lines(g$grid[cols_ids + (i-1)*g$dim[1], ])  # }"},{"path":"http://momx.github.io/Momocs/reference/verify.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates Coo objects — verify","title":"Validates Coo objects — verify","text":"validation S3 objects, method (cheap) attempt checking Coo objects, , Opn Ldk objects.","code":""},{"path":"http://momx.github.io/Momocs/reference/verify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates Coo objects — verify","text":"","code":"verify(Coo)"},{"path":"http://momx.github.io/Momocs/reference/verify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates Coo objects — verify","text":"Coo Coo object","code":""},{"path":"http://momx.github.io/Momocs/reference/verify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates Coo objects — verify","text":"Coo object.","code":""},{"path":"http://momx.github.io/Momocs/reference/verify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validates Coo objects — verify","text":"Implemented morphometric methods handling verbs. see checked, try eg Momocs:::verify.Coo","code":""},{"path":"http://momx.github.io/Momocs/reference/verify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates Coo objects — verify","text":"","code":"verify(bot) #> Out (outlines) #>   - 40 outlines, 162 +/- 21 coords (in $coo) #>   - 2 classifiers (in $fac):  #> # A tibble: 40 × 2 #>   type   fake  #>   <fct>  <fct> #> 1 whisky a     #> 2 whisky a     #> 3 whisky a     #> 4 whisky a     #> 5 whisky a     #> 6 whisky a     #> # ℹ 34 more rows #>   - also: $ldk bot[12] <- NA # you would not use try, but here we cope with R CMD CHECK standards plop <- try(verify(bot), silent=TRUE) class(plop) #> [1] \"try-error\"  verify(hearts) #> Out (outlines) #>   - 240 outlines, 80 +/- 0 coords (in $coo) #>   - 1 classifiers (in $fac):  #> # A tibble: 240 × 1 #>   aut   #>   <fct> #> 1 ced   #> 2 ced   #> 3 ced   #> 4 ced   #> 5 ced   #> 6 ced   #> # ℹ 234 more rows #>   - also: $ldk hearts$ldk[[4]] <- c(1, 2) # same remark plop2 <- try(verify(hearts), silent=TRUE) class(plop2) #> [1] \"try-error\""},{"path":"http://momx.github.io/Momocs/reference/which_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify outliers — which_out","title":"Identify outliers — which_out","text":"simple wrapper around dnorm helps identify outliers. particular, may useful Coe object (case PCA first calculated) also Ldk detecting possible outliers freshly digitized/imported datasets.","code":""},{"path":"http://momx.github.io/Momocs/reference/which_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify outliers — which_out","text":"","code":"which_out(x, conf, nax, ...)"},{"path":"http://momx.github.io/Momocs/reference/which_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify outliers — which_out","text":"x object, either Coe numeric search outliers conf confidence dnorm (1e-3 default) nax number axes retain (Coe), <1 retain enough axes retain proportion variance ... additional parameters passed PCA (Coe)","code":""},{"path":"http://momx.github.io/Momocs/reference/which_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify outliers — which_out","text":"vector indices","code":""},{"path":"http://momx.github.io/Momocs/reference/which_out.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify outliers — which_out","text":"experimental. dnorm parameters used median(x), sd(x)","code":""},{"path":"http://momx.github.io/Momocs/reference/which_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify outliers — which_out","text":"","code":"# on a numeric x <- rnorm(10) x[4] <- 99 which_out(x) #> [1] 4  # on a Coe bf <- bot %>% efourier(6) #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details bf$coe[c(1, 6), 1] <- 5 which_out(bf) #> [1] 1 6  # on Ldk w_no <- w_ok <- wings w_no$coo[[2]][1, 1] <- 2 w_no$coo[[6]][2, 2] <- 2 which_out(w_ok, conf=1e-12) # with low conf, no outliers #> [1] NA which_out(w_no, conf=1e-12) # as expected #> found 127 possible outliers #> # A tibble: 2 × 4 #>   shape    id   row coordinate #>   <chr> <int> <int> <chr>      #> 1 AN2       2     1 x          #> 2 AN6       6     2 y           # a way to illustrate, filter outliers # conf has been chosen deliberately low to show some outliers x_f <- bot %>% efourier #> 'norm=TRUE' is used and this may be troublesome. See ?efourier #Details #> 'nb.h' set to 10 (99% harmonic power) x_p <- PCA(x_f) # which are outliers (conf is ridiculously low here) which_out(x_p$x[, 1], 0.5) #>       duvel    latrappe ballantines  #>           6          13          22  cols <- rep(\"black\", nrow(x_p$x)) outliers <- which_out(x_p$x[, 1], 0.5) cols[outliers] <- \"red\" plot(x_p, col=cols) #> will be deprecated soon, see ?plot_PCA  # remove them for Coe, rePCA, replot x_f %>% slice(-outliers) %>% PCA %>% plot #> Error in eval(e, Coe$fac, parent.frame()): object 'outliers' not found  # or directly with which_out.Coe # which relies on a PCA outliers <- x_f %>% which_out(0.5, nax=0.95) %>% na.omit() x_f %>% slice(-outliers) %>% PCA %>% plot #> Error in eval(e, Coe$fac, parent.frame()): object 'outliers' not found"},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-141","dir":"Changelog","previous_headings":"","what":"Momocs 1.4.1","title":"Momocs 1.4.1","text":"Removed rgeos dependency Momocs can resurect CRAN","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-140","dir":"Changelog","previous_headings":"","what":"Momocs 1.4.0","title":"Momocs 1.4.0","text":"CRAN release: 2022-04-04 Fixed several minor bugs, mostly plotting. coo_slide duplicated initial point cases. Now fixed. coo_likely_clockwise (friends) now uses complex numbers much robust. removed annoying messages. slice(…, 1) now returns matrix $coe, numeric ([,,drop=FALSE]) ’m currently academia ’m looking funding develop MomX. plan give time 2022 ideas, either directly hiring consulting, ring bell!","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-133","dir":"Changelog","previous_headings":"","what":"Momocs 1.3.3","title":"Momocs 1.3.3","text":"plot_PCA plot_LDA consistently work within eg pdf(). Thanks Bill fof pointing . (214) coo_shearx/y return Coo. Fixed.","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-132","dir":"Changelog","previous_headings":"","what":"Momocs 1.3.2","title":"Momocs 1.3.2","text":"CRAN release: 2020-10-06 Turned remaining return return() please R CMD check as_df now uses tibble verbs everywhere printing Coo faster now price sampling 100 shapes calculate mean number coordinates sd. Removed (quite) annoying startup message. time MomX 2021 anyway","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-131","dir":"Changelog","previous_headings":"","what":"Momocs 1.3.1","title":"Momocs 1.3.1","text":"Changed dplyr::as_data_frame tibble::as_tibble","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-130","dir":"Changelog","previous_headings":"","what":"Momocs 1.3.0","title":"Momocs 1.3.0","text":"CRAN release: 2020-04-15 version last major one released CRAN. Momocs now retired longer maintained. See momx.github.io. April 15, 2020 satisifies available testing approaches. new multivariate method: KMEDOIDS top cluster::pam. Added plot_silhouette go friend. Now depends cluster. new multivariate method: NMDS top vegan::metaMDS; use plot_NMDS plot vegan::stressplot Shepard plot. Now depends vegan. new multivariate method: MDS top cmdscale; use plot_MDS plot . mshapes now MSHAPES stick capitalized “multivariate” methods. mshapes now just announces future deprecation. MSHAPES now just returns data_frame PCs LDs used PCA LDA objects. Consequently, plot_MSHAPES new method plotting . Works lists result MSHAPES. plot_CV refreshed, better now plotting either small big matrices. fac_dispatcher supports NULL eases lot multivariate plots (notably Momecs side) new handling method rm_missing deal missing data $fac boxplot methods Coe refreshed hist methods Coe deprecated coo_plot longer method gains cex.first.point argument new method: coo_scalars gather scalar descriptors shape TraCoe class properly data_frameize fac build TraCoe() CLUST methods rewrote now wraps around dendextend. Consequently released ape dependency. morphometrics methods now accepts lists elegant working chop+combine LDA methods partly rewritten now handles constant collinear variables dropping storing returned list morphospace LDAs (finally) back, yet still quite experimental. coo_untiltx now removes (residual) rotational biases coo_slidedirection used . plot_LDA now . Pretty much plot_PCA (expected yet nice). .layerize_LDA internal prepare previous new vignettes: Momocs_coo Momocs_FAQ; others refreshed. morphospace_position chullfilled plot_PCA now properly working verify replaces validate avoid conflict shiny::validate (Momecs) subsetize now exported () def_ldk gains close points argument printing Coo errors due forgotten data.frame rather data_frame Coo builders gain .data.frame method, notably ease compatibility Momit as_df now returns useful data_frame everywhere gain retain argument deprecated coo_angle_edge1 friends, now coo_angle_edges see 1.2.9. fixed minor bugs (see GitHub history commits)","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-129","dir":"Changelog","previous_headings":"","what":"Momocs 1.2.9","title":"Momocs 1.2.9","text":"CRAN release: 2018-03-22","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"preamble-1-2-9","dir":"Changelog","previous_headings":"","what":"Preamble","title":"Momocs 1.2.9","text":"Started general review Momocs (including #184) prepare MomX. convenience, changes stack 1.2.5 GitHub appear, end, 1.9.0 CRAN reflect proximity 2.0 huge quantity changes since 1.2 Moved everything github.com/MomX/Momocs ongoing complete review code ongoing complete review manual pages: lots grouping, better graphics dead (aka grindr): pipe-friendly base layers biplots shape drawing cartesian coordinates. used replace multivariate plotters (eg plot.PCA), family pictures (eg stack replace pile remove annoying conflict utils::stack, panel) single shape plotters (eg ldk_plot, coo_plot). strategy faster, much generic ease development maintenance compared previous Momocs graphs. vignette details grindr rationale use.","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"new-1-2-9","dir":"Changelog","previous_headings":"","what":"New","title":"Momocs 1.2.9","text":"new functions: andnow andnow_method class tells object, classes supported function/method. new coo_* methods: coo_range, coo_range_enlarge, coo_diffrange, coo_template_relatively. latter prepare ground proper size handling, notably morphospaces. Many coo functions ported methods now supporting .Coo directly: coo_angle_edges, coo_angle_tangent, coo_boundingbox, coo_calliper, coo_chull, coo_chull_onion, coo_circularity, coo_circularityharalick, coo_circularity_norm, coo_convexity, coo_dxy, coo_eccentricityboundingbox, coo_eccentricityeigen, coo_elongation, coo_intersect_angle, coo_intersect_direction, coo_intersect_segment, coo_perim, coo_perimcum, coo_perimpts, coo_rectangularity, coo_rectilinearity, coo_scalex, coo_scaley, coo_solidity, coo_truss. Palettes now colorblind-friendly RColorBrewer , state art, virids palettes. See also pal_manual, pal_qual_solarized pal_seq_grey. dispatch_fac now behind fac arguments fgProcrustes now accepts lists efourier default norm=TRUE now messages wrong may dplyr::tibble() everywhere pertinent","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"deprecated-1-2-9","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"Momocs 1.2.9","text":".* aliases is_* methods Deprecated classify calibrate_*(..., method) renamed calibrate_*_method. See ?calibrate_reconstructions friends. Deprecated plot3.PCA (replaced versions) Ntable now splitted plot_table + table coo_tangle now coo_angle_tangent coo_theta3 now coo_angle_edges truss now coo_truss method plot.Coo now inspect pos.shapes now morphospace_positions is_closed deprecated, now coo_is_closed; is_open now coo_is_open, comply coo_* friends naming scheme is_clockwise deprecated, now coo_likely_clockwise; is_anticlockwise now coo_likely_anticlockwise. Better reflect incertainty gather coo_* friends Deprecated table (poor shortcut anyway avoid boring startup message) Deprecated stack2 panel2 rewriting Deprecated as_Out, efourier_i.OutCoe anyway. Consequently deprecated panel.OutCoe method additionnaly Coe method. May back versions. non-exported functions (ie internals) now homegeneously begin ., eg ..error (try Momocs:::. + <Tab> complete list). previously exported functions now internals (function_foo renamed .function_foo): .coo_angle_edge1, .vecs_param, .refactor NEWS now decent NEWS file Online doc moved [http://momx.github.io/Momocs/]","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"dependencies-1-2-9","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"Momocs 1.2.9","text":"Released reshape2, plyr dependencies Now depends RColorBrewer, progress Proper indications external functions ::. nice side effect remove annoying messages attaching Momocs. Another removal importFrom.","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"breaking-changes-1-2-9","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"Momocs 1.2.9","text":"Besides deprecated/renamed functions breaking changes. Future breaking changes announced within concerned functions.","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"minor-1-2-9","dir":"Changelog","previous_headings":"","what":"Minor","title":"Momocs 1.2.9","text":"Waiting cleaner fix, subset now subsetize… Fixed bug LDA retain=1 (#e7704eb) Messages homogeneity Internals lightened verbosity progress bar now handled via options(\"verbose\") Various minor bugs fixes, see GitHub","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-124-github","dir":"Changelog","previous_headings":"","what":"Momocs 1.2.4 (GitHub)","title":"Momocs 1.2.4 (GitHub)","text":"New functions/methods: coo_intersect_segment, coo_intersect_direction, coo_intersect_angle, def_ldk_direction, def_ldk_angle, def_ldk, def_ldk_tips, coo_sample_prop coo_slice.Opn now supports ldk argument. Now depends rgeos intersecting methods. Lightened nsfishes charring comply R CMD CHECK. Various minor bugs fixes, see GitHub","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-123-github","dir":"Changelog","previous_headings":"","what":"Momocs 1.2.3 (GitHub)","title":"Momocs 1.2.3 (GitHub)","text":"Built R 3.4.3 coo_slice now suports ldk argument Various minor bugs fixes, see GitHub","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-122-cran--github","dir":"Changelog","previous_headings":"","what":"Momocs 1.2.2 (CRAN + GitHub)","title":"Momocs 1.2.2 (CRAN + GitHub)","text":"CRAN release: 2017-09-28 MANOVA_PW now returns p-values New dataset nsfishes minor debugging, see GitHub","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-121-github","dir":"Changelog","previous_headings":"","what":"Momocs 1.2.1 (GitHub)","title":"Momocs 1.2.1 (GitHub)","text":"Introduced testing testthat Minor debugging, see GitHub","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-116-github--cran","dir":"Changelog","previous_headings":"","what":"Momocs 1.1.6 (GitHub + CRAN)","title":"Momocs 1.1.6 (GitHub + CRAN)","text":"CRAN release: 2017-04-17 sfourier family implementation new datasets: apodemus mouse","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-110-github--cran","dir":"Changelog","previous_headings":"","what":"Momocs 1.1.0 (GitHub + CRAN)","title":"Momocs 1.1.0 (GitHub + CRAN)","text":"CRAN release: 2016-10-25 plot2.PCA deprecated due ggplot2 2.2.0 breaking changes minor changes can followed GitHub commits","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-10-cran--github","dir":"Changelog","previous_headings":"","what":"Momocs 1.0 (CRAN + GitHub)","title":"Momocs 1.0 (CRAN + GitHub)","text":"Release CRAN replaces now completely obsolete 0.2.6 (one JSS paper. consists last version pushed CRAN.","code":""},{"path":"http://momx.github.io/Momocs/news/index.html","id":"momocs-09-github","dir":"Changelog","previous_headings":"","what":"Momocs 0.9 (Github)","title":"Momocs 0.9 (Github)","text":"Started routinely use GitHub (NEWS) complete rewriting package, inclusion new morphometrics approches (open outlines, configuration landmarks, global shape descriptors). New design classes , Opn Ldk handle (closed) outlines, open outlines configuration landmarks. Coo becomes “super class” encompassing three others. S4 -> S3 rewriting. Maybe less orthodox much easy understand, code, extend probably required Momocs step. Renaming functions/methods consistent scheme New/partial rewriting multivariate methods: MANOVA, MANOVA_PW, LDA, KMEANS, CLUST. Graphics refreshed: panel, stack, plot.PCA New datasets: chaff, flowers, oak, olea, molars, shapes, wings, General review helpfiles Many issues fixed, see GitHub Momocs speed dating: tutorial vignette (see browseVignette(\"Momocs\") available","code":""}]
